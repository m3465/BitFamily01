var __BUNDLE_START_TIME__=this.nativePerformanceNow?nativePerformanceNow():Date.now(),__DEV__=false,process=this.process||{};process.env=process.env||{};process.env.NODE_ENV=process.env.NODE_ENV||"production";
(function (global) {
  "use strict";

  global.__non_webpack_require__ = LiquidCore.require;
  global.__webpack_require__ = metroRequire;
  global.__r = metroRequire;
  global.__d = define;
  global.__c = clear;
  global.__registerSegment = registerSegment;
  var modules = clear();
  const EMPTY = {};
  const _ref = {},
        hasOwnProperty = _ref.hasOwnProperty;

  function clear() {
    modules = Object.create(null);
    return modules;
  }

  function define(factory, moduleId, dependencyMap) {
    if (modules[moduleId] != null) {
      return;
    }

    const mod = {
      dependencyMap,
      factory,
      hasError: false,
      importedAll: EMPTY,
      importedDefault: EMPTY,
      isInitialized: false,
      isCyclic: false,
      publicModule: {
        exports: {}
      }
    };
    modules[moduleId] = mod;
  }

  function proxyModuleExports(module) {
    module.exports = function () {};

    const handler = {
      get: (t, p, r) => Reflect.get(module.exports, p, r),
      set: (t, p, v, r) => Reflect.set(module.exports, p, v, r),
      setPrototypeOf: (t, p) => Reflect.setPrototypeOf(module.exports, p),
      getPrototypeOf: t => Reflect.getPrototypeOf(module.exports),
      getOwnPropertyDescriptor: (t, p) => Reflect.getOwnPropertyDescriptor(module.exports, p),
      defineProperty: (t, p, d) => Reflect.defineProperty(module.exports, p, d),
      has: (t, p) => Reflect.has(module.exports, p),
      deleteProperty: (t, p) => Reflect.deleteProperty(module.exports, p),
      ownKeys: t => Reflect.ownKeys(module.exports),
      apply: (t, z, a) => Reflect.apply(module.exports, z, a),
      construct: (t, a, n) => Reflect.construct(module.exports, a, n),
      preventExtensions: t => Reflect.preventExtensions(module.exports),
      isExtensible: t => Reflect.isExtensible(module.exports)
    };
    return new Proxy(function () {}, handler);
  }

  function metroRequire(moduleId) {
    const moduleIdReallyIsNumber = moduleId;
    const module = modules[moduleIdReallyIsNumber];
    return module && module.isCyclic ? proxyModuleExports(module) : module && module.isInitialized ? module.publicModule.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
  }

  function metroImportDefault(moduleId) {
    const moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedDefault !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedDefault;
    }

    const exports = metroRequire(moduleIdReallyIsNumber);
    const importedDefault = exports && exports.__esModule ? exports.default : exports;
    return modules[moduleIdReallyIsNumber].importedDefault = importedDefault;
  }

  metroRequire.importDefault = metroImportDefault;

  function metroImportAll(moduleId) {
    const moduleIdReallyIsNumber = moduleId;

    if (modules[moduleIdReallyIsNumber] && modules[moduleIdReallyIsNumber].importedAll !== EMPTY) {
      return modules[moduleIdReallyIsNumber].importedAll;
    }

    const exports = metroRequire(moduleIdReallyIsNumber);
    let importedAll;

    if (exports && exports.__esModule) {
      importedAll = exports;
    } else {
      importedAll = {};

      if (exports) {
        for (const key in exports) {
          if (hasOwnProperty.call(exports, key)) {
            importedAll[key] = exports[key];
          }
        }
      }

      importedAll.default = exports;
    }

    return modules[moduleIdReallyIsNumber].importedAll = importedAll;
  }

  metroRequire.importAll = metroImportAll;
  let inGuard = false;

  function guardedLoadModule(moduleId, module) {
    if (!inGuard && global.ErrorUtils) {
      inGuard = true;
      let returnValue;

      try {
        returnValue = loadModuleImplementation(moduleId, module);
      } catch (e) {
        global.ErrorUtils.reportFatalError(e);
      }

      inGuard = false;
      return returnValue;
    } else {
      return loadModuleImplementation(moduleId, module);
    }
  }

  const ID_MASK_SHIFT = 16;
  const LOCAL_ID_MASK = 65535;

  function unpackModuleId(moduleId) {
    const segmentId = moduleId >>> ID_MASK_SHIFT;
    const localId = moduleId & LOCAL_ID_MASK;
    return {
      segmentId,
      localId
    };
  }

  metroRequire.unpackModuleId = unpackModuleId;

  function packModuleId(value) {
    return (value.segmentId << ID_MASK_SHIFT) + value.localId;
  }

  metroRequire.packModuleId = packModuleId;
  const moduleDefinersBySegmentID = [];

  function registerSegment(segmentID, moduleDefiner) {
    moduleDefinersBySegmentID[segmentID] = moduleDefiner;
  }

  function loadModuleImplementation(moduleId, module) {
    if (!module && moduleDefinersBySegmentID.length > 0) {
      const _unpackModuleId = unpackModuleId(moduleId),
            segmentId = _unpackModuleId.segmentId,
            localId = _unpackModuleId.localId;

      const definer = moduleDefinersBySegmentID[segmentId];

      if (definer != null) {
        definer(localId);
        module = modules[moduleId];
      }
    }

    const nativeRequire = global.nativeRequire;

    if (!module && nativeRequire) {
      const _unpackModuleId2 = unpackModuleId(moduleId),
            segmentId = _unpackModuleId2.segmentId,
            localId = _unpackModuleId2.localId;

      nativeRequire(localId, segmentId);
      module = modules[moduleId];
    }

    if (!module) {
      throw unknownModuleError(moduleId);
    }

    if (module.hasError) {
      throw moduleThrewError(moduleId, module.error);
    }

    module.isInitialized = true;
    module.isCyclic = true;
    const _module = module,
          factory = _module.factory,
          dependencyMap = _module.dependencyMap;

    try {
      const moduleObject = module.publicModule;
      moduleObject.id = moduleId;
      factory(global, metroRequire, metroImportDefault, metroImportAll, moduleObject, moduleObject.exports, dependencyMap);
      {
        module.factory = undefined;
        module.dependencyMap = undefined;
      }
      module.isCyclic = false;
      return moduleObject.exports;
    } catch (e) {
      module.hasError = true;
      module.error = e;
      module.isInitialized = false;
      module.isCyclic = false;
      module.publicModule.exports = undefined;
      throw e;
    } finally {}
  }

  function unknownModuleError(id) {
    let message = 'Requiring unknown module "' + id + '".';
    return Error(message);
  }

  function moduleThrewError(id, error) {
    const displayName = id;
    return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
  }
})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const {
    LiquidCore
  } = _$$_REQUIRE(_dependencyMap[0]);

  var Tron = new (_$$_REQUIRE(_dependencyMap[1]))();
  var IOServer = new (_$$_REQUIRE(_dependencyMap[2]))();

  var response = _$$_REQUIRE(_dependencyMap[3]);

  const BException = _$$_REQUIRE(_dependencyMap[4]);

  setInterval(() => {}, 1000);
  console.log('start micro service ...');
  LiquidCore.on('_call', async msg => {
    try {
      let fData = msg.name.split(".");
      let result = false;

      if (fData[1].charAt(0) !== "_") {
        switch (fData[0]) {
          case "tron":
            result = Tron[fData[1]] ? await Tron[fData[1]](msg.params) : false;
            break;

          case "ioServer":
            if (IOServer[fData[1]]) {
              result = await IOServer[fData[1]](msg.params);
            } else if (IOServer.serverFunction.indexOf(fData[1]) > -1) {
              result = await IOServer._callIOFunction(fData[1], msg.params);
            }

            break;
        }
      }

      if (result === false) await response._response(msg.name, "we don't have this function !", false, 500);
    } catch (err) {
      if (err instanceof BException) {
        await response._response(msg.name, err.msg, err.success, err.code);
      } else {
        await response._response(msg.name, err.message, false, 500);
      }
    }
  });

  (async () => {
    let tconnection = 0;

    do {
      console.log("try connect to tron network");

      try {
        await Tron._setConfig('https://api.trongrid.io', 'TVBEBymghJT7EVn1qnA6oXEwU4tEApb6yg');
        await IOServer._setConfig(Tron.config['server']);
        break;
      } catch (e) {
        console.log("ERR", e.message);
      }
    } while (tconnection++ < 4);

    console.log("OK");

    if (tconnection > 4) {
      console.log("can not connect to tron server");
      process.exit(0);
      return;
    }

    await response._response('ready', Tron.config['platform_version'], true, 200);
  })();
},0,[1,5,378,376,377]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const events = _$$_REQUIRE(_dependencyMap[0]);

  const fs = _$$_REQUIRE(_dependencyMap[1]);

  const path = _$$_REQUIRE(_dependencyMap[2]);

  const join = path.join;
  let lc = global && global.LiquidCore;

  if (!lc) {
    class LiquidCore extends events {}

    lc = new LiquidCore();
    const native_require = global.require;
    const defaults = {
      arrow: process.env.NODE_BINDINGS_ARROW || ' → ',
      compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled',
      platform: process.platform,
      arch: process.arch,
      version: process.versions.node,
      bindings: 'bindings.node',
      bindingsjs: 'bindings.node.js',
      try: [['module_root', 'build', 'bindings'], ['module_root', 'build', 'Debug', 'bindings'], ['module_root', 'build', 'Release', 'bindings'], ['module_root', 'out', 'Debug', 'bindings'], ['module_root', 'Debug', 'bindings'], ['module_root', 'out', 'Release', 'bindings'], ['module_root', 'Release', 'bindings'], ['module_root', 'build', 'default', 'bindings'], ['module_root', 'compiled', 'version', 'platform', 'arch', 'bindings'], ['module_root', 'mocks', 'bindingsjs']]
    };

    function bindings(opts) {
      if (typeof opts == 'string') {
        opts = {
          bindings: opts
        };
      } else if (!opts) {
        opts = {};
      }

      Object.keys(defaults).map(function (i) {
        if (!(i in opts)) opts[i] = defaults[i];
      });

      if (path.extname(opts.bindings) != '.node') {
        opts.bindings += '.node';
      }

      opts.bindingsjs = opts.bindings + '.js';
      var requireFunc = native_require;
      var tries = [],
          i = 0,
          l = opts.try.length,
          n,
          b,
          err;
      let modules = [];
      let mods = fs.readdirSync(path.resolve('.', 'node_modules'));
      mods.forEach(m => m.startsWith('@') ? modules = modules.concat(fs.readdirSync(path.resolve('.', 'node_modules', m)).map(f => m + '/' + f)) : modules.push(m));

      for (var j = 0; j < modules.length; j++) {
        opts.module_root = modules[j];

        for (i = 0; i < l; i++) {
          n = join.apply(null, opts.try[i].map(function (p) {
            return opts[p] || p;
          }));
          tries.push(n);

          try {
            b = opts.path ? requireFunc.resolve(n) : requireFunc(n);

            if (!opts.path) {
              b.path = n;
            }

            return b;
          } catch (e) {
            if (!/not find/i.test(e.message)) {
              throw e;
            }
          }
        }
      }

      err = new Error('Could not locate the bindings file. Tried:\n' + tries.map(function (a) {
        return opts.arrow + a;
      }).join('\n'));
      err.tries = tries;
      throw err;
    }

    lc.require = module => {
      if (path.extname(module) == '.node') {
        console.warn('WARN: Attempting to bind native module ' + path.basename(module));
        console.warn('WARN: Consider using a browser implementation or make sure you have a LiquidCore addon.');
        return bindings(path.basename(module));
      }

      return native_require(module);
    };

    lc.require.__proto__ = native_require.__proto__;

    if (global) {
      global.LiquidCore = lc;
    }
  }

  module.exports = {
    LiquidCore: lc
  };
},1,[2,3,4]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('events');
},2,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('fs');
},3,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('path');
},4,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const TronWeb = _$$_REQUIRE(_dependencyMap[0]);

  const Mnemonic = _$$_REQUIRE(_dependencyMap[1]);

  const _ = _$$_REQUIRE(_dependencyMap[2]);

  var CAddress = "";
  var Cnode = "";

  const response = _$$_REQUIRE(_dependencyMap[3]);

  TronWeb.BigNumber().toNumber();
  module.exports = class Client {
    async _setConfig(node, contractAddress) {
      Cnode = node;
      this.tronWeb = new TronWeb({
        fullHost: node,
        privateKey: '3fba0545c7025add93ca31564666340853297e42e121375ec66aa6c0a6341281'
      });
      this.configContract = await this.tronWeb.contract().at(contractAddress);

      let _config = await this.configContract.configs().call();

      this.config = JSON.parse(_config);
      CAddress = this.config['contract'];
      this.contract = await this.tronWeb.contract().at(CAddress);
    }

    async generateMnemonicAccount() {
      let mnemonic = await Mnemonic.generateMnemonic();
      await response._success({
        mnemonic
      });
    }

    async generatePrivateKey(params) {
      (async () => {
        await response._response("tron.generatePrivateKey", Mnemonic.getAccountAtIndex(params.mnemonic), true, 200);
      })();

      return true;
    }

    async getPublicKeyFromPrivateKey(params) {
      await response._success(TronWeb.address.fromPrivateKey(params.privateKey));
    }

    async getAccount(params) {
      await response._success(await this.tronWeb.trx.getAccount(params.address).then(res => {
        return res;
      }));
    }

    async getAccountResources(params) {
      await response._success(await this.tronWeb.trx.getAccountResources(params.address));
    }

    async getBalance(params) {
      await response._success(await this.tronWeb.trx.getBalance(params.address));
    }

    async fromHex(params) {
      await response._success(await TronWeb.address.fromHex(params.hex));
    }

    async toHex(params) {
      await response._success(await TronWeb.address.toHex(params.hex));
    }

    async isValidPrivateKey(params) {
      if (typeof params.pk !== 'string') return false;
      params.pk = params.pk.replace(/^0x/, '');
      let regex = /^[0-9a-fA-F]+$/g;
      if (!regex.test(params.pk) || params.pk.length !== 64) return false;
      let addr = TronWeb.address.fromPrivateKey(params.pk);
      await response._success(await TronWeb.isAddress(addr));
    }

    async isAddress(params) {
      await response._success(await TronWeb.isAddress(params.address));
    }

    async isValidMnemonic(params) {
      await response._success(await Mnemonic.validateMnemonic(params.mnemonic));
    }

    async getBtroPrfile(params) {
      await response._success(await this.contract.users(params.address).call());
    }

    async getReferralChildren(params) {
      await response._success(await this.contract.viewUserReferral(params.address).call());
    }

    async registerIntoBtro(params) {
      let _tron = new TronWeb({
        fullHost: Cnode,
        privateKey: params.privateKey
      });

      let _contract = await _tron.contract().at(CAddress);

      await response._success(await _contract.regUser(params.refererAddress, params.password).send({
        feeLimit: 120000000,
        callValue: 2000000000,
        shouldPollResponse: false
      }));
    }

    async buyProduct(params) {
      let _tron = new TronWeb({
        fullHost: Cnode,
        privateKey: params.privateKey
      });

      let _contract = await _tron.contract().at(CAddress);

      await response._success(await _contract.buyProduct(params.product_id).send({
        feeLimit: 120000000,
        callValue: 2000000000,
        shouldPollResponse: false
      }));
    }

    async changePassword(params) {
      console.log("—————»", params.password);

      let _tron = new TronWeb({
        fullHost: Cnode,
        privateKey: params.privateKey
      });

      let _contract = await _tron.contract().at(CAddress);

      await response._success(await _contract.setSecurityKey(params.password).send({
        feeLimit: 1000000000
      }));
    }

    async transferTRX(params) {
      let _tron = new TronWeb({
        fullHost: Cnode,
        privateKey: params.privateKey
      });

      await response._success(await _tron.trx.sendTransaction(params.to, params.amount));
    }

  };
},5,[6,335,375,376]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = function (e) {
    var t = {};

    function r(n) {
      if (t[n]) return t[n].exports;
      var i = t[n] = {
        i: n,
        l: false,
        exports: {}
      };
      return e[n].call(i.exports, i, i.exports, r), i.l = true, i.exports;
    }

    return r.m = e, r.c = t, r.d = function (e, t, n) {
      r.o(e, t) || Object.defineProperty(e, t, {
        enumerable: true,
        get: n
      });
    }, r.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: true
      });
    }, r.t = function (e, t) {
      if (1 & t && (e = r(e)), 8 & t) return e;
      if (4 & t && "object" == typeof e && e && e.__esModule) return e;
      var n = Object.create(null);
      if (r.r(n), Object.defineProperty(n, "default", {
        enumerable: true,
        value: e
      }), 2 & t && "string" != typeof e) for (var i in e) r.d(n, i, function (t) {
        return e[t];
      }.bind(null, i));
      return n;
    }, r.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };
      return r.d(t, "a", t), t;
    }, r.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, r.p = "", r(r.s = 22);
  }([function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[0]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[1]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[2]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[3]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[4]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[5]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[6]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[7]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[8]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[9]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[10]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[11]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[12]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[13]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[14]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[15]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[16]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[17]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[18]);
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[19]);
  }, function (e) {
    e.exports = JSON.parse('{"a":"3.1.0"}');
  }, function (e, t) {
    e.exports = _$$_REQUIRE(_dependencyMap[20]);
  }, function (e, t, r) {
    "use strict";

    r.r(t), r.d(t, "default", function () {
      return At;
    });
    var n = {};
    r.r(n), r.d(n, "byte2hexStr", function () {
      return O;
    }), r.d(n, "bytesToString", function () {
      return C;
    }), r.d(n, "hextoString", function () {
      return B;
    }), r.d(n, "byteArray2hexStr", function () {
      return E;
    }), r.d(n, "base64DecodeFromString", function () {
      return q;
    }), r.d(n, "base64EncodeToString", function () {
      return D;
    });
    var i = {};
    r.r(i), r.d(i, "bin2String", function () {
      return H;
    }), r.d(i, "arrayEquals", function () {
      return L;
    }), r.d(i, "stringToBytes", function () {
      return U;
    }), r.d(i, "byte2hexStr", function () {
      return O;
    }), r.d(i, "bytesToString", function () {
      return C;
    }), r.d(i, "hextoString", function () {
      return B;
    }), r.d(i, "byteArray2hexStr", function () {
      return E;
    }), r.d(i, "base64DecodeFromString", function () {
      return q;
    }), r.d(i, "base64EncodeToString", function () {
      return D;
    }), r.d(i, "hexChar2byte", function () {
      return z;
    }), r.d(i, "isHexChar", function () {
      return M;
    }), r.d(i, "hexStr2byteArray", function () {
      return G;
    }), r.d(i, "strToDate", function () {
      return J;
    }), r.d(i, "isNumber", function () {
      return Y;
    }), r.d(i, "getStringType", function () {
      return X;
    });
    var s = {};
    r.r(s), r.d(s, "encode58", function () {
      return ee;
    }), r.d(s, "decode58", function () {
      return te;
    });
    var a = {};
    r.r(a), r.d(a, "keccak256", function () {
      return ie;
    }), r.d(a, "sha256", function () {
      return se;
    }), r.d(a, "toUtf8Bytes", function () {
      return ae;
    }), r.d(a, "recoverAddress", function () {
      return oe;
    }), r.d(a, "SigningKey", function () {
      return ue;
    }), r.d(a, "AbiCoder", function () {
      return ce;
    });
    var o = {};
    r.r(o), r.d(o, "getBase58CheckAddress", function () {
      return de;
    }), r.d(o, "decodeBase58Address", function () {
      return le;
    }), r.d(o, "signTransaction", function () {
      return he;
    }), r.d(o, "arrayToBase64String", function () {
      return fe;
    }), r.d(o, "signBytes", function () {
      return ve;
    }), r.d(o, "getRowBytesFromTransactionBase64", function () {
      return pe;
    }), r.d(o, "genPriKey", function () {
      return ge;
    }), r.d(o, "computeAddress", function () {
      return be;
    }), r.d(o, "getAddressFromPriKey", function () {
      return me;
    }), r.d(o, "decode58Check", function () {
      return ye;
    }), r.d(o, "isAddressValid", function () {
      return ke;
    }), r.d(o, "getBase58CheckAddressFromPriKeyBase64String", function () {
      return xe;
    }), r.d(o, "getHexStrAddressFromPriKeyBase64String", function () {
      return we;
    }), r.d(o, "getAddressFromPriKeyBase64String", function () {
      return Ie;
    }), r.d(o, "getPubKeyFromPriKey", function () {
      return Ae;
    }), r.d(o, "ECKeySign", function () {
      return Pe;
    }), r.d(o, "SHA256", function () {
      return We;
    }), r.d(o, "passwordToAddress", function () {
      return _e;
    }), r.d(o, "pkToAddress", function () {
      return Se;
    });
    var u = {};
    r.r(u), r.d(u, "generateAccount", function () {
      return Ne;
    });
    var c = {};
    r.r(c), r.d(c, "decodeParams", function () {
      return je;
    }), r.d(c, "encodeParams", function () {
      return Fe;
    });

    var d = r(0),
        l = r.n(d),
        h = r(1),
        f = r.n(h),
        v = r(6),
        p = r.n(v),
        g = r(2),
        b = r.n(g),
        m = r(3),
        y = r.n(m),
        k = r(10),
        x = r.n(k),
        w = r(15),
        I = r.n(w),
        A = r(16),
        P = r.n(A),
        W = r(14),
        _ = r.n(W),
        S = r(4),
        N = r.n(S),
        T = r(17),
        j = r.n(T);

    function F() {
      var e = this;
      this._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", this.encode = function (t) {
        for (var r, n, i, s, a, o, u, c = "", d = 0; d < t.length;) s = (r = t.charCodeAt(d++)) >> 2, a = (3 & r) << 4 | (n = t.charCodeAt(d++)) >> 4, o = (15 & n) << 2 | (i = t.charCodeAt(d++)) >> 6, u = 63 & i, isNaN(n) ? o = u = 64 : isNaN(i) && (u = 64), c = c + e._keyStr.charAt(s) + e._keyStr.charAt(a) + e._keyStr.charAt(o) + e._keyStr.charAt(u);

        return c;
      }, this.encodeIgnoreUtf8 = function (t) {
        for (var r, n, i, s, a, o, u, c = "", d = 0; d < t.length;) s = (r = t[d++]) >> 2, a = (3 & r) << 4 | (n = t[d++]) >> 4, o = (15 & n) << 2 | (i = t[d++]) >> 6, u = 63 & i, isNaN(n) ? o = u = 64 : isNaN(i) && (u = 64), c = c + e._keyStr.charAt(s) + e._keyStr.charAt(a) + e._keyStr.charAt(o) + e._keyStr.charAt(u);

        return c;
      }, this.decode = function (t) {
        var r,
            n,
            i,
            s,
            a,
            o,
            u = "",
            c = 0;

        for (t = t.replace(/[^A-Za-z0-9\+\/\=]/g, ""); c < t.length;) r = e._keyStr.indexOf(t.charAt(c++)) << 2 | (s = e._keyStr.indexOf(t.charAt(c++))) >> 4, n = (15 & s) << 4 | (a = e._keyStr.indexOf(t.charAt(c++))) >> 2, i = (3 & a) << 6 | (o = e._keyStr.indexOf(t.charAt(c++))), u += String.fromCharCode(r), 64 != a && (u += String.fromCharCode(n)), 64 != o && (u += String.fromCharCode(i));

        return e._utf8_decode(u);
      }, this.decodeToByteArray = function (t) {
        var r,
            n,
            i,
            s,
            a,
            o,
            u = "",
            c = 0;

        for (t = t.replace(/[^A-Za-z0-9\+\/\=]/g, ""); c < t.length;) r = e._keyStr.indexOf(t.charAt(c++)) << 2 | (s = e._keyStr.indexOf(t.charAt(c++))) >> 4, n = (15 & s) << 4 | (a = e._keyStr.indexOf(t.charAt(c++))) >> 2, i = (3 & a) << 6 | (o = e._keyStr.indexOf(t.charAt(c++))), u += String.fromCharCode(r), 64 != a && (u += String.fromCharCode(n)), 64 != o && (u += String.fromCharCode(i));

        return e._out2ByteArray(u);
      }, this._out2ByteArray = function (e) {
        for (var t = new Array(e.length), r = 0, n = 0; r < e.length;) n = e.charCodeAt(r), t[r] = n, r++;

        return t;
      }, this._utf8_encode = function (e) {
        e = e.replace(/\r\n/g, "\n");

        for (var t = "", r = 0; r < e.length; r++) {
          var n = e.charCodeAt(r);
          n < 128 ? t += String.fromCharCode(n) : n > 127 && n < 2048 ? (t += String.fromCharCode(n >> 6 | 192), t += String.fromCharCode(63 & n | 128)) : (t += String.fromCharCode(n >> 12 | 224), t += String.fromCharCode(n >> 6 & 63 | 128), t += String.fromCharCode(63 & n | 128));
        }

        return t;
      }, this._utf8_decode = function (e) {
        for (var t = "", r = 0, n = 0, i = 0, s = 0; r < e.length;) (n = e.charCodeAt(r)) < 128 ? (t += String.fromCharCode(n), r++) : n > 191 && n < 224 ? (i = e.charCodeAt(r + 1), t += String.fromCharCode((31 & n) << 6 | 63 & i), r += 2) : (i = e.charCodeAt(r + 1), s = e.charCodeAt(r + 2), t += String.fromCharCode((15 & n) << 12 | (63 & i) << 6 | 63 & s), r += 3);

        return t;
      };
    }

    function O(e) {
      if ("number" != typeof e) throw new Error("Input must be a number");
      if (e < 0 || e > 255) throw new Error("Input must be a byte");
      var t = "";
      return t += "0123456789ABCDEF".charAt(e >> 4), t += "0123456789ABCDEF".charAt(15 & e);
    }

    function C(e) {
      if ("string" == typeof e) return e;

      for (var t = "", r = 0; r < e.length; r++) {
        var n = e[r].toString(2),
            i = n.match(/^1+?(?=0)/);

        if (i && 8 === n.length) {
          for (var s = i[0].length, a = e[r].toString(2).slice(7 - s), o = 1; o < s; o++) a += e[o + r].toString(2).slice(2);

          t += String.fromCharCode(parseInt(a, 2)), r += s - 1;
        } else t += String.fromCharCode(e[r]);
      }

      return t;
    }

    function B(e) {
      for (var t = e.replace(/^0x/, "").split(""), r = "", n = 0; n < t.length / 2; n++) {
        var i = "0x".concat(t[2 * n]).concat(t[2 * n + 1]);
        r += String.fromCharCode(i);
      }

      return r;
    }

    function E(e) {
      for (var t = "", r = 0; r < e.length; r++) t += O(e[r]);

      return t;
    }

    function q(e) {
      return new F().decodeToByteArray(e);
    }

    function D(e) {
      return new F().encodeIgnoreUtf8(e);
    }

    var K = r(7),
        R = r.n(K),
        V = /^(41)/;

    function H(e) {
      return C(e);
    }

    function L(e, t, r) {
      if (e.length != t.length) return false;
      var n;

      for (n = 0; n < e.length; n++) if (r) {
        if (e[n] != t[n]) return false;
      } else if (JSON.stringify(e[n]) != JSON.stringify(t[n])) return false;

      return true;
    }

    function U(e) {
      if ("string" != typeof e) throw new Error("The passed string is not a string");
      var t,
          r,
          n = new Array();
      t = e.length;

      for (var i = 0; i < t; i++) (r = e.charCodeAt(i)) >= 65536 && r <= 1114111 ? (n.push(r >> 18 & 7 | 240), n.push(r >> 12 & 63 | 128), n.push(r >> 6 & 63 | 128), n.push(63 & r | 128)) : r >= 2048 && r <= 65535 ? (n.push(r >> 12 & 15 | 224), n.push(r >> 6 & 63 | 128), n.push(63 & r | 128)) : r >= 128 && r <= 2047 ? (n.push(r >> 6 & 31 | 192), n.push(63 & r | 128)) : n.push(255 & r);

      return n;
    }

    function z(e) {
      var t;
      if (e >= "A" && e <= "F" ? t = e.charCodeAt(0) - "A".charCodeAt(0) + 10 : e >= "a" && e <= "f" ? t = e.charCodeAt(0) - "a".charCodeAt(0) + 10 : e >= "0" && e <= "9" && (t = e.charCodeAt(0) - "0".charCodeAt(0)), "number" == typeof t) return t;
      throw new Error("The passed hex char is not a valid hex char");
    }

    function M(e) {
      return e >= "A" && e <= "F" || e >= "a" && e <= "f" || e >= "0" && e <= "9" ? 1 : 0;
    }

    function G(e) {
      if ("string" != typeof e) throw new Error("The passed string is not a string");

      for (var t = Array(), r = 0, n = 0, i = 0, s = 0; s < e.length; s++) {
        var a = e.charAt(s);
        if (!M(a)) throw new Error("The passed hex char is not a valid hex string");
        r <<= 4, r += z(a), 0 == ++n % 2 && (t[i++] = r, r = 0);
      }

      return t;
    }

    function J(e) {
      if (!/^\d{4}-\d{2}-\d{2}( \d{2}-\d{2}-\d{2}|)/.test(e)) throw new Error("The passed date string is not valid");
      var t = e.split(" "),
          r = t[0].split("-"),
          n = parseInt(r[0], 10),
          i = parseInt(r[1], 10) - 1,
          s = parseInt(r[2], 10);

      if (t.length > 1) {
        var a = t[1].split("-"),
            o = parseInt(a[0], 10),
            u = parseInt(a[1], 10),
            c = parseInt(a[2], 10);
        return new Date(n, i, s, o, u, c);
      }

      return new Date(n, i, s);
    }

    function Y(e) {
      return e >= "0" && e <= "9" ? 1 : 0;
    }

    function X(e) {
      if (null == e) return -1;
      if ("string" != typeof e) return -1;
      if (0 == e.length || "" == e) return -1;
      var t = 0;
      if (40 == e.length) for (; t < 40; t++) {
        if (!M(e.charAt(t))) break;
      }
      if (40 == t) return 1;

      for (t = 0; t < e.length; t++) {
        if (!Y(e.charAt(t))) break;
      }

      if (t == e.length) return 2;

      for (t = 0; t < e.length; t++) {
        if (e.charAt(t) > " ") return 3;
      }

      return -1;
    }

    for (var $ = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", Z = {}, Q = 0; Q < $.length; Q++) Z[$.charAt(Q)] = Q;

    function ee(e) {
      if (0 === e.length) return "";
      var t,
          r,
          n = [0];

      for (t = 0; t < e.length; t++) {
        for (r = 0; r < n.length; r++) n[r] <<= 8;

        n[0] += e[t];
        var i = 0;

        for (r = 0; r < n.length; ++r) n[r] += i, i = n[r] / 58 | 0, n[r] %= 58;

        for (; i;) n.push(i % 58), i = i / 58 | 0;
      }

      for (t = 0; 0 === e[t] && t < e.length - 1; t++) n.push(0);

      return n.reverse().map(function (e) {
        return $[e];
      }).join("");
    }

    function te(e) {
      if (0 === e.length) return [];
      var t,
          r,
          n = [0];

      for (t = 0; t < e.length; t++) {
        var i = e[t];
        if (!(i in Z)) throw new Error("Non-base58 character");

        for (r = 0; r < n.length; r++) n[r] *= 58;

        n[0] += Z[i];
        var s = 0;

        for (r = 0; r < n.length; ++r) n[r] += s, s = n[r] >> 8, n[r] &= 255;

        for (; s;) n.push(255 & s), s >>= 8;
      }

      for (t = 0; "1" === e[t] && t < e.length - 1; t++) n.push(0);

      return n.reverse();
    }

    var re = r(13),
        ne = r(11),
        ie = ne.utils.keccak256,
        se = ne.utils.sha256,
        ae = ne.utils.toUtf8Bytes,
        oe = ne.utils.recoverAddress,
        ue = ne.utils.SigningKey,
        ce = ne.utils.AbiCoder;

    function de(e) {
      var t = We(e),
          r = We(t).slice(0, 4);
      return ee(r = e.concat(r));
    }

    function le(e) {
      if ("string" != typeof e) return false;
      if (e.length <= 4) return false;
      var t = te(e);
      if (e.length <= 4) return false;
      var r = t.length - 4,
          n = t.slice(r),
          i = We(t = t.slice(0, r)),
          s = We(i).slice(0, 4);
      if (n[0] == s[0] && n[1] == s[1] && n[2] == s[2] && n[3] == s[3]) return t;
      throw new Error("Invalid address provided");
    }

    function he(e, t) {
      "string" == typeof e && (e = G(e));
      var r = Pe(G(t.txID), e);
      return Array.isArray(t.signature) ? t.signature.includes(r) || t.signature.push(r) : t.signature = [r], t;
    }

    function fe(e) {
      return btoa(String.fromCharCode.apply(String, R()(e)));
    }

    function ve(e, t) {
      return "string" == typeof e && (e = G(e)), Pe(We(t), e);
    }

    function pe(e) {
      var t = q(e);
      return proto.protocol.Transaction.deserializeBinary(t).getRawData().serializeBinary();
    }

    function ge() {
      for (var e = new re.ec("secp256k1").genKeyPair().getPrivate().toString("hex"); e.length < 64;) e = "0".concat(e);

      return G(e);
    }

    function be(e) {
      return 65 === e.length && (e = e.slice(1)), G("41" + ie(e).toString().substring(2).substring(24));
    }

    function me(e) {
      return be(Ae(e));
    }

    function ye(e) {
      var t = te(e);
      if (t.length <= 4) return false;
      var r = t.slice(0, t.length - 4),
          n = We(r),
          i = We(n);
      return i[0] === t[r.length] && i[1] === t[r.length + 1] && i[2] === t[r.length + 2] && i[3] === t[r.length + 3] && r;
    }

    function ke(e) {
      if ("string" != typeof e) return false;
      if (34 !== e.length) return false;
      var t = te(e);
      if (25 !== t.length) return false;
      if (65 !== t[0]) return false;
      var r = t.slice(21),
          n = We(t = t.slice(0, 21)),
          i = We(n).slice(0, 4);
      return r[0] == i[0] && r[1] == i[1] && r[2] == i[2] && r[3] == i[3];
    }

    function xe(e) {
      return de(be(Ae(q(e))));
    }

    function we(e) {
      return E(be(Ae(q(e))));
    }

    function Ie(e) {
      return D(be(Ae(q(e))));
    }

    function Ae(e) {
      for (var t = new re.ec("secp256k1").keyFromPrivate(e, "bytes").getPublic(), r = t.x, n = t.y, i = r.toString("hex"); i.length < 64;) i = "0".concat(i);

      for (var s = n.toString("hex"); s.length < 64;) s = "0".concat(s);

      return G("04".concat(i).concat(s));
    }

    function Pe(e, t) {
      for (var r = new re.ec("secp256k1").keyFromPrivate(t, "bytes").sign(e), n = r.r, i = r.s, s = r.recoveryParam, a = n.toString("hex"); a.length < 64;) a = "0".concat(a);

      for (var o = i.toString("hex"); o.length < 64;) o = "0".concat(o);

      return a + o + O(s);
    }

    function We(e) {
      var t = E(e);
      return G(se("0x" + t).replace(/^0x/, ""));
    }

    function _e(e) {
      return de(me(q(e)));
    }

    function Se(e) {
      return de(me(G(e)));
    }

    function Ne() {
      var e = ge(),
          t = Ae(e),
          r = me(e);
      return {
        privateKey: E(e),
        publicKey: E(t),
        address: {
          base58: de(r),
          hex: E(r)
        }
      };
    }

    var Te = new ce();

    function je(e, t, r, n) {
      if (r && "boolean" != typeof r || (n = r, r = t, t = e, e = []), n && r.replace(/^0x/, "").length % 64 == 8 && (r = "0x" + r.replace(/^0x/, "").substring(8)), r.replace(/^0x/, "").length % 64) throw new Error("The encoded string is not valid. Its length must be a multiple of 64.");
      return t = t.map(function (e) {
        return /trcToken/.test(e) && (e = e.replace(/trcToken/, "uint256")), e;
      }), Te.decode(t, r).reduce(function (r, n, i) {
        return "address" == t[i] && (n = "41" + n.substr(2).toLowerCase()), e.length ? r[e[i]] = n : r.push(n), r;
      }, e.length ? {} : []);
    }

    function Fe(e, t) {
      for (var r = 0; r < e.length; r++) "address" === e[r] && (t[r] = At.address.toHex(t[r]).replace(V, "0x"));

      return Te.encode(e, t);
    }

    var Oe = r(18),
        Ce = r.n(Oe),
        Be = r(9),
        Ee = r.n(Be);

    function qe(e, t) {
      var r = Object.keys(e);

      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(e);
        t && (n = n.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), r.push.apply(r, n);
      }

      return r;
    }

    function De(e) {
      for (var t = 1; t < arguments.length; t++) {
        var r = null != arguments[t] ? arguments[t] : {};
        t % 2 ? qe(Object(r), true).forEach(function (t) {
          N()(e, t, r[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : qe(Object(r)).forEach(function (t) {
          Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
        });
      }

      return e;
    }

    var Ke = De(De({}, {
      isValidURL: function (e) {
        return "string" == typeof e && Ce.a.isURL(e.toString(), {
          protocols: ["http", "https"],
          require_tld: false
        });
      },
      isObject: function (e) {
        return e === Object(e) && "[object Array]" !== Object.prototype.toString.call(e);
      },
      isArray: function (e) {
        return Array.isArray(e);
      },
      isJson: function (e) {
        try {
          return !!JSON.parse(e);
        } catch (e) {
          return false;
        }
      },
      isBoolean: function (e) {
        return "boolean" == typeof e;
      },
      isBigNumber: function (e) {
        return e && (e instanceof Ee.a || e.constructor && "BigNumber" === e.constructor.name);
      },
      isString: function (e) {
        return "string" == typeof e || e && e.constructor && "String" === e.constructor.name;
      },
      isFunction: function (e) {
        return "function" == typeof e;
      },
      isHex: function (e) {
        return "string" == typeof e && !isNaN(parseInt(e, 16)) && /^(0x|)[a-fA-F0-9]+$/.test(e);
      },
      isInteger: function (e) {
        return null !== e && Number.isInteger(Number(e));
      },
      hasProperty: function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      },
      hasProperties: function (e) {
        for (var t = this, r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];

        return n.length && !n.map(function (r) {
          return t.hasProperty(e, r);
        }).includes(false);
      },
      mapEvent: function (e) {
        var t = {
          block: e.block_number,
          timestamp: e.block_timestamp,
          contract: e.contract_address,
          name: e.event_name,
          transaction: e.transaction_id,
          result: e.result,
          resourceNode: e.resource_Node || (e._unconfirmed ? "fullNode" : "solidityNode")
        };
        return e._unconfirmed && (t.unconfirmed = e._unconfirmed), e._fingerprint && (t.fingerprint = e._fingerprint), t;
      },
      parseEvent: function (e, t) {
        var r = t.inputs;
        if (!e.result) return e;
        if (this.isObject(e.result)) for (var n = 0; n < r.length; n++) {
          var i = r[n];
          "address" == i.type && i.name in e.result && (e.result[i.name] = "41" + e.result[i.name].substr(2).toLowerCase());
        } else this.isArray(e.result) && (e.result = e.result.reduce(function (e, t, n) {
          var i = r[n],
              s = i.name;
          return "address" == i.type && (t = "41" + t.substr(2).toLowerCase()), e[s] = t, e;
        }, {}));
        return e;
      },
      padLeft: function (e, t, r) {
        for (var n = e.toString(); n.length < r;) n = t + n;

        return n;
      },
      isNotNullOrUndefined: function (e) {
        return null != e;
      },
      sleep: function () {
        var e = arguments;
        return f()(l.a.mark(function t() {
          var r;
          return l.a.wrap(function (t) {
            for (;;) switch (t.prev = t.next) {
              case 0:
                return r = e.length > 0 && undefined !== e[0] ? e[0] : 1e3, t.abrupt("return", new Promise(function (e) {
                  return setTimeout(e, r);
                }));

              case 2:
              case "end":
                return t.stop();
            }
          }, t);
        }))();
      }
    }), {}, {
      code: i,
      accounts: u,
      base58: s,
      bytes: n,
      crypto: o,
      abi: c,
      ethersUtils: a
    }),
        Re = {
      HttpProvider: function () {
        function e(t) {
          var r = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : 3e4,
              n = arguments.length > 2 && undefined !== arguments[2] && arguments[2],
              i = arguments.length > 3 && undefined !== arguments[3] && arguments[3],
              s = arguments.length > 4 && undefined !== arguments[4] ? arguments[4] : {},
              a = arguments.length > 5 && undefined !== arguments[5] ? arguments[5] : "/";
          if (b()(this, e), !Ke.isValidURL(t)) throw new Error("Invalid URL provided to HttpProvider");
          if (isNaN(r) || r < 0) throw new Error("Invalid timeout duration provided");
          if (!Ke.isObject(s)) throw new Error("Invalid headers object provided");
          t = t.replace(/\/+$/, ""), this.host = t, this.timeout = r, this.user = n, this.password = i, this.headers = s, this.statusPage = a, this.instance = j.a.create({
            baseURL: t,
            timeout: r,
            headers: s,
            auth: n && {
              user: n,
              password: i
            }
          });
        }

        var t;
        return y()(e, [{
          key: "setStatusPage",
          value: function () {
            var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : "/";
            this.statusPage = e;
          }
        }, {
          key: "isConnected",
          value: (t = f()(l.a.mark(function e() {
            var t,
                r = arguments;
            return l.a.wrap(function (e) {
              for (;;) switch (e.prev = e.next) {
                case 0:
                  return t = r.length > 0 && undefined !== r[0] ? r[0] : this.statusPage, e.abrupt("return", this.request(t).then(function (e) {
                    return Ke.hasProperties(e, "blockID", "block_header");
                  }).catch(function () {
                    return false;
                  }));

                case 2:
                case "end":
                  return e.stop();
              }
            }, e, this);
          })), function () {
            return t.apply(this, arguments);
          })
        }, {
          key: "request",
          value: function (e) {
            var t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : {},
                r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : "get";
            return r = r.toLowerCase(), this.instance.request({
              data: "post" == r && Object.keys(t).length ? t : null,
              params: "get" == r && t,
              url: e,
              method: r
            }).then(function (e) {
              return e.data;
            });
          }
        }]), e;
      }()
    },
        Ve = r(19),
        He = r.n(Ve),
        Le = r(20),
        Ue = r(12),
        ze = r.n(Ue),
        Me = r(5),
        Ge = r.n(Me),
        Je = r(8),
        Ye = r.n(Je);

    function Xe(e, t) {
      var r;

      if ("undefined" == typeof Symbol || null == e[Symbol.iterator]) {
        if (Array.isArray(e) || (r = function (e, t) {
          if (!e) return;
          if ("string" == typeof e) return $e(e, t);
          var r = Object.prototype.toString.call(e).slice(8, -1);
          "Object" === r && e.constructor && (r = e.constructor.name);
          if ("Map" === r || "Set" === r) return Array.from(e);
          if ("Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)) return $e(e, t);
        }(e)) || t && e && "number" == typeof e.length) {
          r && (e = r);

          var n = 0,
              i = function () {};

          return {
            s: i,
            n: function () {
              return n >= e.length ? {
                done: true
              } : {
                done: false,
                value: e[n++]
              };
            },
            e: function (e) {
              throw e;
            },
            f: i
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var s,
          a = true,
          o = false;
      return {
        s: function () {
          r = e[Symbol.iterator]();
        },
        n: function () {
          var e = r.next();
          return a = e.done, e;
        },
        e: function (e) {
          o = true, s = e;
        },
        f: function () {
          try {
            a || null == r.return || r.return();
          } finally {
            if (o) throw s;
          }
        }
      };
    }

    function $e(e, t) {
      (null == t || t > e.length) && (t = e.length);

      for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];

      return n;
    }

    var Ze,
        Qe = function () {
      function e() {
        var t = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
        if (b()(this, e), !t || !t instanceof At) throw new Error("Expected instance of TronWeb");
        this.tronWeb = t;
      }

      return y()(e, [{
        key: "invalid",
        value: function (e) {
          return e.msg || "Invalid ".concat(e.name).concat("address" === e.type ? " address" : "", " provided");
        }
      }, {
        key: "notPositive",
        value: function (e) {
          return "".concat(e.name, " must be a positive integer");
        }
      }, {
        key: "notEqual",
        value: function (e) {
          return e.msg || "".concat(e.names[0], " can not be equal to ").concat(e.names[1]);
        }
      }, {
        key: "notValid",
        value: function () {
          var e,
              t = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : [],
              r = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : new Function(),
              n = {},
              i = false,
              s = Xe(t);

          try {
            for (s.s(); !(e = s.n()).done;) {
              var a = e.value,
                  o = a.name,
                  u = a.names,
                  c = a.value,
                  d = a.type,
                  l = a.gt,
                  h = a.lt,
                  f = a.gte,
                  v = a.lte,
                  p = (a.se, a.optional);

              if (!p || Ke.isNotNullOrUndefined(c) && ("boolean" === d || false !== c)) {
                switch (n[a.name] = a.value, d) {
                  case "address":
                    this.tronWeb.isAddress(c) ? n[o] = this.tronWeb.address.toHex(c) : i = true;
                    break;

                  case "integer":
                    (!Ke.isInteger(c) || "number" == typeof l && c <= a.gt || "number" == typeof h && c >= a.lt || "number" == typeof f && c < a.gte || "number" == typeof v && c > a.lte) && (i = true);
                    break;

                  case "positive-integer":
                    if (!Ke.isInteger(c) || c <= 0) return void r(this.notPositive(a));
                    break;

                  case "tokenId":
                    Ke.isString(c) && c.length || (i = true);
                    break;

                  case "notEmptyObject":
                    Ke.isObject(c) && Object.keys(c).length || (i = true);
                    break;

                  case "notEqual":
                    if (n[u[0]] === n[u[1]]) return r(this.notEqual(a)), true;
                    break;

                  case "resource":
                    ["BANDWIDTH", "ENERGY"].includes(c) || (i = true);
                    break;

                  case "url":
                    Ke.isValidURL(c) || (i = true);
                    break;

                  case "hex":
                    Ke.isHex(c) || (i = true);
                    break;

                  case "array":
                    Array.isArray(c) || (i = true);
                    break;

                  case "not-empty-string":
                    Ke.isString(c) && c.length || (i = true);
                    break;

                  case "boolean":
                    Ke.isBoolean(c) || (i = true);
                    break;

                  case "string":
                    (!Ke.isString(c) || "number" == typeof l && c.length <= a.gt || "number" == typeof h && c.length >= a.lt || "number" == typeof f && c.length < a.gte || "number" == typeof v && c.length > a.lte) && (i = true);
                }

                if (i) return r(this.invalid(a)), true;
              }
            }
          } catch (e) {
            s.e(e);
          } finally {
            s.f();
          }

          return false;
        }
      }]), e;
    }();

    function et(e, t) {
      var r;

      if ("undefined" == typeof Symbol || null == e[Symbol.iterator]) {
        if (Array.isArray(e) || (r = function (e, t) {
          if (!e) return;
          if ("string" == typeof e) return tt(e, t);
          var r = Object.prototype.toString.call(e).slice(8, -1);
          "Object" === r && e.constructor && (r = e.constructor.name);
          if ("Map" === r || "Set" === r) return Array.from(e);
          if ("Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)) return tt(e, t);
        }(e)) || t && e && "number" == typeof e.length) {
          r && (e = r);

          var n = 0,
              i = function () {};

          return {
            s: i,
            n: function () {
              return n >= e.length ? {
                done: true
              } : {
                done: false,
                value: e[n++]
              };
            },
            e: function (e) {
              throw e;
            },
            f: i
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var s,
          a = true,
          o = false;
      return {
        s: function () {
          r = e[Symbol.iterator]();
        },
        n: function () {
          var e = r.next();
          return a = e.done, e;
        },
        e: function (e) {
          o = true, s = e;
        },
        f: function () {
          try {
            a || null == r.return || r.return();
          } finally {
            if (o) throw s;
          }
        }
      };
    }

    function tt(e, t) {
      (null == t || t > e.length) && (t = e.length);

      for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];

      return n;
    }

    function rt(e) {
      return At.address.toHex(e);
    }

    function nt(e) {
      return Ze.tronWeb.fromUtf8(e);
    }

    function it(e, t) {
      return e.Error ? t(e.Error) : e.result && e.result.message ? t(Ze.tronWeb.toUtf8(e.result.message)) : t(null, e);
    }

    var st = function () {
      function e() {
        var t = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
        if (b()(this, e), !t || !t instanceof At) throw new Error("Expected instance of TronWeb");
        Ze = this, this.tronWeb = t, this.injectPromise = Ge()(this), this.validator = new Qe(t);
      }

      var t, r, n, i;
      return y()(e, [{
        key: "sendTrx",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : 0,
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,
              n = arguments.length > 3 ? arguments[3] : undefined,
              i = arguments.length > 4 && undefined !== arguments[4] && arguments[4];
          if (Ke.isFunction(n) && (i = n, n = {}), Ke.isFunction(r) ? (i = r, r = this.tronWeb.defaultAddress.hex) : Ke.isObject(r) && (n = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.sendTrx, e, t, r, n);

          if (t = parseInt(t), !this.validator.notValid([{
            name: "recipient",
            type: "address",
            value: e
          }, {
            name: "origin",
            type: "address",
            value: r
          }, {
            names: ["recipient", "origin"],
            type: "notEqual",
            msg: "Cannot transfer TRX to the same account"
          }, {
            name: "amount",
            type: "integer",
            gt: 0,
            value: t
          }], i)) {
            var s = {
              to_address: rt(e),
              owner_address: rt(r),
              amount: t
            };
            n && n.permissionId && (s.Permission_id = n.permissionId), this.tronWeb.fullNode.request("wallet/createtransaction", s, "post").then(function (e) {
              return it(e, i);
            }).catch(function (e) {
              return i(e);
            });
          }
        }
      }, {
        key: "sendToken",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : 0,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2],
              n = arguments.length > 3 && undefined !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,
              i = arguments.length > 4 ? arguments[4] : undefined,
              s = arguments.length > 5 && undefined !== arguments[5] && arguments[5];
          if (Ke.isFunction(i) && (s = i, i = {}), Ke.isFunction(n) ? (s = n, n = this.tronWeb.defaultAddress.hex) : Ke.isObject(n) && (i = n, n = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.sendToken, e, t, r, n, i);

          if (t = parseInt(t), !this.validator.notValid([{
            name: "recipient",
            type: "address",
            value: e
          }, {
            name: "origin",
            type: "address",
            value: n
          }, {
            names: ["recipient", "origin"],
            type: "notEqual",
            msg: "Cannot transfer tokens to the same account"
          }, {
            name: "amount",
            type: "integer",
            gt: 0,
            value: t
          }, {
            name: "token ID",
            type: "tokenId",
            value: r
          }], s)) {
            var a = {
              to_address: rt(e),
              owner_address: rt(n),
              asset_name: nt(r),
              amount: parseInt(t)
            };
            i && i.permissionId && (a.Permission_id = i.permissionId), this.tronWeb.fullNode.request("wallet/transferasset", a, "post").then(function (e) {
              return it(e, s);
            }).catch(function (e) {
              return s(e);
            });
          }
        }
      }, {
        key: "purchaseToken",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : 0,
              n = arguments.length > 3 && undefined !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,
              i = arguments.length > 4 ? arguments[4] : undefined,
              s = arguments.length > 5 && undefined !== arguments[5] && arguments[5];
          if (Ke.isFunction(i) && (s = i, i = {}), Ke.isFunction(n) ? (s = n, n = this.tronWeb.defaultAddress.hex) : Ke.isObject(n) && (i = n, n = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.purchaseToken, e, t, r, n, i);

          if (!this.validator.notValid([{
            name: "buyer",
            type: "address",
            value: n
          }, {
            name: "issuer",
            type: "address",
            value: e
          }, {
            names: ["buyer", "issuer"],
            type: "notEqual",
            msg: "Cannot purchase tokens from same account"
          }, {
            name: "amount",
            type: "integer",
            gt: 0,
            value: r
          }, {
            name: "token ID",
            type: "tokenId",
            value: t
          }], s)) {
            var a = {
              to_address: rt(e),
              owner_address: rt(n),
              asset_name: nt(t),
              amount: parseInt(r)
            };
            i && i.permissionId && (a.Permission_id = i.permissionId), this.tronWeb.fullNode.request("wallet/participateassetissue", a, "post").then(function (e) {
              return it(e, s);
            }).catch(function (e) {
              return s(e);
            });
          }
        }
      }, {
        key: "freezeBalance",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : 0,
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : 3,
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : "BANDWIDTH",
              n = arguments.length > 3 && undefined !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,
              i = arguments.length > 4 && undefined !== arguments[4] ? arguments[4] : undefined,
              s = arguments.length > 5 ? arguments[5] : undefined,
              a = arguments.length > 6 && undefined !== arguments[6] && arguments[6];
          if (Ke.isFunction(s) && (a = s, s = {}), Ke.isFunction(i) ? (a = i, i = undefined) : Ke.isObject(i) && (s = i, i = undefined), Ke.isFunction(n) ? (a = n, n = this.tronWeb.defaultAddress.hex) : Ke.isObject(n) && (s = n, n = this.tronWeb.defaultAddress.hex), Ke.isFunction(t) && (a = t, t = 3), Ke.isFunction(r) && (a = r, r = "BANDWIDTH"), !a) return this.injectPromise(this.freezeBalance, e, t, r, n, i, s);

          if (!this.validator.notValid([{
            name: "origin",
            type: "address",
            value: n
          }, {
            name: "receiver",
            type: "address",
            value: i,
            optional: true
          }, {
            name: "amount",
            type: "integer",
            gt: 0,
            value: e
          }, {
            name: "duration",
            type: "integer",
            gte: 3,
            value: t
          }, {
            name: "resource",
            type: "resource",
            value: r,
            msg: 'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY'
          }], a)) {
            var o = {
              owner_address: rt(n),
              frozen_balance: parseInt(e),
              frozen_duration: parseInt(t),
              resource: r
            };
            Ke.isNotNullOrUndefined(i) && rt(i) !== rt(n) && (o.receiver_address = rt(i)), s && s.permissionId && (o.Permission_id = s.permissionId), this.tronWeb.fullNode.request("wallet/freezebalance", o, "post").then(function (e) {
              return it(e, a);
            }).catch(function (e) {
              return a(e);
            });
          }
        }
      }, {
        key: "unfreezeBalance",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : "BANDWIDTH",
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : undefined,
              n = arguments.length > 3 ? arguments[3] : undefined,
              i = arguments.length > 4 && undefined !== arguments[4] && arguments[4];
          if (Ke.isFunction(n) && (i = n, n = {}), Ke.isFunction(r) ? (i = r, r = undefined) : Ke.isObject(r) && (n = r, r = undefined), Ke.isFunction(t) ? (i = t, t = this.tronWeb.defaultAddress.hex) : Ke.isObject(t) && (n = t, t = this.tronWeb.defaultAddress.hex), Ke.isFunction(e) && (i = e, e = "BANDWIDTH"), !i) return this.injectPromise(this.unfreezeBalance, e, t, r, n);

          if (!this.validator.notValid([{
            name: "origin",
            type: "address",
            value: t
          }, {
            name: "receiver",
            type: "address",
            value: r,
            optional: true
          }, {
            name: "resource",
            type: "resource",
            value: e,
            msg: 'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY'
          }], i)) {
            var s = {
              owner_address: rt(t),
              resource: e
            };
            Ke.isNotNullOrUndefined(r) && rt(r) !== rt(t) && (s.receiver_address = rt(r)), n && n.permissionId && (s.Permission_id = n.permissionId), this.tronWeb.fullNode.request("wallet/unfreezebalance", s, "post").then(function (e) {
              return it(e, i);
            }).catch(function (e) {
              return i(e);
            });
          }
        }
      }, {
        key: "withdrawBlockRewards",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 ? arguments[1] : undefined,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (Ke.isFunction(t) && (r = t, t = {}), Ke.isFunction(e) ? (r = e, e = this.tronWeb.defaultAddress.hex) : Ke.isObject(e) && (t = e, e = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.withdrawBlockRewards, e, t);

          if (!this.validator.notValid([{
            name: "origin",
            type: "address",
            value: e
          }], r)) {
            var n = {
              owner_address: rt(e)
            };
            t && t.permissionId && (n.Permission_id = t.permissionId), this.tronWeb.fullNode.request("wallet/withdrawbalance", n, "post").then(function (e) {
              return it(e, r);
            }).catch(function (e) {
              return r(e);
            });
          }
        }
      }, {
        key: "applyForSR",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
              r = arguments.length > 2 ? arguments[2] : undefined,
              n = arguments.length > 3 && undefined !== arguments[3] && arguments[3];
          if (Ke.isFunction(r) && (n = r, r = {}), Ke.isObject(t) && Ke.isValidURL(e) && (r = t, t = e, e = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.applyForSR, e, t, r);

          if (!this.validator.notValid([{
            name: "origin",
            type: "address",
            value: e
          }, {
            name: "url",
            type: "url",
            value: t,
            msg: "Invalid url provided"
          }], n)) {
            var i = {
              owner_address: rt(e),
              url: nt(t)
            };
            r && r.permissionId && (i.Permission_id = r.permissionId), this.tronWeb.fullNode.request("wallet/createwitness", i, "post").then(function (e) {
              return it(e, n);
            }).catch(function (e) {
              return n(e);
            });
          }
        }
      }, {
        key: "vote",
        value: function () {
          var e = this,
              t = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : {},
              r = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              n = arguments.length > 2 ? arguments[2] : undefined,
              i = arguments.length > 3 && undefined !== arguments[3] && arguments[3];
          if (Ke.isFunction(n) && (i = n, n = {}), Ke.isFunction(r) ? (i = r, r = this.tronWeb.defaultAddress.hex) : Ke.isObject(r) && (n = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.vote, t, r, n);

          if (!this.validator.notValid([{
            name: "voter",
            type: "address",
            value: r
          }, {
            name: "votes",
            type: "notEmptyObject",
            value: t
          }], i)) {
            var s = false;

            if (t = Object.entries(t).map(function (t) {
              var r = Ye()(t, 2),
                  n = r[0],
                  i = r[1];
              if (!s) return e.validator.notValid([{
                name: "SR",
                type: "address",
                value: n
              }, {
                name: "vote count",
                type: "integer",
                gt: 0,
                value: i,
                msg: "Invalid vote count provided for SR: " + n
              }]) ? s = true : {
                vote_address: rt(n),
                vote_count: parseInt(i)
              };
            }), !s) {
              var a = {
                owner_address: rt(r),
                votes: t
              };
              n && n.permissionId && (a.Permission_id = n.permissionId), this.tronWeb.fullNode.request("wallet/votewitnessaccount", a, "post").then(function (e) {
                return it(e, i);
              }).catch(function (e) {
                return i(e);
              });
            }
          }
        }
      }, {
        key: "createSmartContract",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : {},
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (Ke.isFunction(t) && (r = t, t = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.createSmartContract, e, t);
          var n = e.feeLimit || this.tronWeb.feeLimit,
              i = e.userFeePercentage;
          "number" == typeof i || i || (i = 100);
          var s = e.originEnergyLimit || 1e7,
              a = e.callValue || 0,
              o = e.tokenValue,
              u = e.tokenId || e.token_id,
              c = e.abi,
              d = undefined !== c && c,
              l = e.bytecode,
              h = undefined !== l && l,
              f = e.parameters,
              v = undefined === f ? [] : f,
              p = e.name,
              g = undefined === p ? "" : p;
          if (d && Ke.isString(d)) try {
            d = JSON.parse(d);
          } catch (e) {
            return r("Invalid options.abi provided");
          }
          if (d.entrys && (d = d.entrys), !Ke.isArray(d)) return r("Invalid options.abi provided");
          var b = d.some(function (e) {
            return "constructor" == e.type && e.payable;
          });

          if (!this.validator.notValid([{
            name: "bytecode",
            type: "hex",
            value: h
          }, {
            name: "feeLimit",
            type: "integer",
            value: n,
            gt: 0,
            lte: 1e9
          }, {
            name: "callValue",
            type: "integer",
            value: a,
            gte: 0
          }, {
            name: "userFeePercentage",
            type: "integer",
            value: i,
            gte: 0,
            lte: 100
          }, {
            name: "originEnergyLimit",
            type: "integer",
            value: s,
            gte: 0,
            lte: 1e7
          }, {
            name: "parameters",
            type: "array",
            value: v
          }, {
            name: "issuer",
            type: "address",
            value: t
          }, {
            name: "tokenValue",
            type: "integer",
            value: o,
            gte: 0,
            optional: true
          }, {
            name: "tokenId",
            type: "integer",
            value: u,
            gte: 0,
            optional: true
          }], r)) {
            if (b && 0 == a && 0 == o) return r("When contract is payable, options.callValue or options.tokenValue must be a positive integer");
            if (!b && (a > 0 || o > 0)) return r("When contract is not payable, options.callValue and options.tokenValue must be 0");
            var m = d.find(function (e) {
              return "constructor" === e.type;
            });

            if (undefined !== m && m) {
              var y = new ce(),
                  k = [],
                  x = [];
              if (m = m.inputs, v.length != m.length) return r("constructor needs ".concat(m.length, " but ").concat(v.length, " provided"));

              for (var w = 0; w < v.length; w++) {
                var I = m[w].type,
                    A = v[w];
                if (!I || !Ke.isString(I) || !I.length) return r("Invalid parameter type provided: " + I);
                "address" == I ? A = rt(A).replace(V, "0x") : "address[]" == I && (A = A.map(function (e) {
                  return rt(e).replace(V, "0x");
                })), k.push(I), x.push(A);
              }

              try {
                v = y.encode(k, x).replace(/^(0x)/, "");
              } catch (e) {
                return r(e);
              }
            } else v = "";

            var P = {
              owner_address: rt(t),
              fee_limit: parseInt(n),
              call_value: parseInt(a),
              consume_user_resource_percent: i,
              origin_energy_limit: s,
              abi: JSON.stringify(d),
              bytecode: h,
              parameter: v,
              name: g
            };
            Ke.isNotNullOrUndefined(o) && (P.call_token_value = parseInt(o)), Ke.isNotNullOrUndefined(u) && (P.token_id = parseInt(u)), e && e.permissionId && (P.Permission_id = e.permissionId), this.tronWeb.fullNode.request("wallet/deploycontract", P, "post").then(function (e) {
              return it(e, r);
            }).catch(function (e) {
              return r(e);
            });
          }
        }
      }, {
        key: "triggerSmartContract",
        value: function () {
          for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

          return "object" !== p()(t[2]) && (t[2] = {
            feeLimit: t[2],
            callValue: t[3]
          }, t.splice(3, 1)), this._triggerSmartContract.apply(this, t);
        }
      }, {
        key: "triggerConstantContract",
        value: function () {
          for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

          return t[2]._isConstant = true, this.triggerSmartContract.apply(this, t);
        }
      }, {
        key: "triggerConfirmedConstantContract",
        value: function () {
          for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

          return t[2]._isConstant = true, t[2].confirmed = true, this.triggerSmartContract.apply(this, t);
        }
      }, {
        key: "_triggerSmartContract",
        value: function (e, t) {
          var r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : {},
              n = arguments.length > 3 && undefined !== arguments[3] ? arguments[3] : [],
              i = arguments.length > 4 && undefined !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex,
              s = arguments.length > 5 && undefined !== arguments[5] && arguments[5];
          if (Ke.isFunction(i) && (s = i, i = this.tronWeb.defaultAddress.hex), Ke.isFunction(n) && (s = n, n = []), !s) return this.injectPromise(this._triggerSmartContract, e, t, r, n, i);
          var a = Object.assign({
            callValue: 0,
            feeLimit: this.tronWeb.feeLimit
          }, r),
              o = a.tokenValue,
              u = a.tokenId,
              c = a.callValue,
              d = a.feeLimit;

          if (!this.validator.notValid([{
            name: "feeLimit",
            type: "integer",
            value: d,
            gt: 0,
            lte: 1e9
          }, {
            name: "callValue",
            type: "integer",
            value: c,
            gte: 0
          }, {
            name: "parameters",
            type: "array",
            value: n
          }, {
            name: "contract",
            type: "address",
            value: e
          }, {
            name: "issuer",
            type: "address",
            value: i,
            optional: true
          }, {
            name: "tokenValue",
            type: "integer",
            value: o,
            gte: 0,
            optional: true
          }, {
            name: "tokenId",
            type: "integer",
            value: u,
            gte: 0,
            optional: true
          }, {
            name: "function selector",
            type: "not-empty-string",
            value: t
          }], s)) {
            if (t = t.replace("/s*/g", ""), n.length) {
              for (var l = new ce(), h = [], f = [], v = 0; v < n.length; v++) {
                var p = n[v],
                    g = p.type,
                    b = p.value;
                if (!g || !Ke.isString(g) || !g.length) return s("Invalid parameter type provided: " + g);
                "address" == g ? b = rt(b).replace(V, "0x") : "address[]" == g && (b = b.map(function (e) {
                  return rt(e).replace(V, "0x");
                })), h.push(g), f.push(b);
              }

              try {
                h = h.map(function (e) {
                  return /trcToken/.test(e) && (e = e.replace(/trcToken/, "uint256")), e;
                }), n = l.encode(h, f).replace(/^(0x)/, "");
              } catch (e) {
                return s(e);
              }
            } else n = "";

            var m = {
              contract_address: rt(e),
              owner_address: rt(i),
              function_selector: t,
              parameter: n
            };
            r._isConstant || (m.call_value = parseInt(c), m.fee_limit = parseInt(d), Ke.isNotNullOrUndefined(o) && (m.call_token_value = parseInt(o)), Ke.isNotNullOrUndefined(u) && (m.token_id = parseInt(u))), r.permissionId && (m.Permission_id = r.permissionId), this.tronWeb[r.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(r.confirmed ? "solidity" : "", "/trigger").concat(r._isConstant ? "constant" : "smart", "contract"), m, "post").then(function (e) {
              return it(e, s);
            }).catch(function (e) {
              return s(e);
            });
          }
        }
      }, {
        key: "clearABI",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (!r) return this.injectPromise(this.clearABI, e, t);
          if (!this.tronWeb.isAddress(e)) return r("Invalid contract address provided");
          if (!this.tronWeb.isAddress(t)) return r("Invalid owner address provided");
          var n = {
            contract_address: rt(e),
            owner_address: rt(t)
          };
          this.tronWeb.trx.cache.contracts[e] && delete this.tronWeb.trx.cache.contracts[e], this.tronWeb.fullNode.request("wallet/clearabi", n, "post").then(function (e) {
            return it(e, r);
          }).catch(function (e) {
            return r(e);
          });
        }
      }, {
        key: "updateBrokerage",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (!r) return this.injectPromise(this.updateBrokerage, e, t);
          if (!Ke.isNotNullOrUndefined(e)) return r("Invalid brokerage provided");
          if (!Ke.isInteger(e) || e < 0 || e > 100) return r("Brokerage must be an integer between 0 and 100");
          if (!this.tronWeb.isAddress(t)) return r("Invalid owner address provided");
          var n = {
            brokerage: parseInt(e),
            owner_address: rt(t)
          };
          this.tronWeb.fullNode.request("wallet/updateBrokerage", n, "post").then(function (e) {
            return it(e, r);
          }).catch(function (e) {
            return r(e);
          });
        }
      }, {
        key: "createToken",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : {},
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (Ke.isFunction(t) && (r = t, t = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.createToken, e, t);
          var n = e.name,
              i = undefined !== n && n,
              s = e.abbreviation,
              a = undefined !== s && s,
              o = e.description,
              u = undefined !== o && o,
              c = e.url,
              d = undefined !== c && c,
              l = e.totalSupply,
              h = undefined === l ? 0 : l,
              f = e.trxRatio,
              v = undefined === f ? 1 : f,
              p = e.tokenRatio,
              g = undefined === p ? 1 : p,
              b = e.saleStart,
              m = undefined === b ? Date.now() : b,
              y = e.saleEnd,
              k = undefined !== y && y,
              x = e.freeBandwidth,
              w = undefined === x ? 0 : x,
              I = e.freeBandwidthLimit,
              A = undefined === I ? 0 : I,
              P = e.frozenAmount,
              W = undefined === P ? 0 : P,
              _ = e.frozenDuration,
              S = undefined === _ ? 0 : _,
              N = e.voteScore,
              T = e.precision;

          if (!this.validator.notValid([{
            name: "Supply amount",
            type: "positive-integer",
            value: h
          }, {
            name: "TRX ratio",
            type: "positive-integer",
            value: v
          }, {
            name: "Token ratio",
            type: "positive-integer",
            value: g
          }, {
            name: "token abbreviation",
            type: "not-empty-string",
            value: a
          }, {
            name: "token name",
            type: "not-empty-string",
            value: i
          }, {
            name: "token description",
            type: "not-empty-string",
            value: u
          }, {
            name: "token url",
            type: "url",
            value: d
          }, {
            name: "issuer",
            type: "address",
            value: t
          }, {
            name: "sale start timestamp",
            type: "integer",
            value: m,
            gte: Date.now()
          }, {
            name: "sale end timestamp",
            type: "integer",
            value: k,
            gt: m
          }, {
            name: "Free bandwidth amount",
            type: "integer",
            value: w,
            gte: 0
          }, {
            name: "Free bandwidth limit",
            type: "integer",
            value: A,
            gte: 0
          }, {
            name: "Frozen supply",
            type: "integer",
            value: W,
            gte: 0
          }, {
            name: "Frozen duration",
            type: "integer",
            value: S,
            gte: 0
          }], r)) {
            if (Ke.isNotNullOrUndefined(N) && (!Ke.isInteger(N) || N <= 0)) return r("voteScore must be a positive integer greater than 0");
            if (Ke.isNotNullOrUndefined(T) && (!Ke.isInteger(T) || T <= 0 || T > 6)) return r("precision must be a positive integer > 0 and <= 6");
            var j = {
              owner_address: rt(t),
              name: nt(i),
              abbr: nt(a),
              description: nt(u),
              url: nt(d),
              total_supply: parseInt(h),
              trx_num: parseInt(v),
              num: parseInt(g),
              start_time: parseInt(m),
              end_time: parseInt(k),
              free_asset_net_limit: parseInt(w),
              public_free_asset_net_limit: parseInt(A),
              frozen_supply: {
                frozen_amount: parseInt(W),
                frozen_days: parseInt(S)
              }
            };
            !this.tronWeb.fullnodeSatisfies(">=3.5.0") || parseInt(W) > 0 || delete j.frozen_supply, T && !isNaN(parseInt(T)) && (j.precision = parseInt(T)), N && !isNaN(parseInt(N)) && (j.vote_score = parseInt(N)), e && e.permissionId && (j.Permission_id = e.permissionId), this.tronWeb.fullNode.request("wallet/createassetissue", j, "post").then(function (e) {
              return it(e, r);
            }).catch(function (e) {
              return r(e);
            });
          }
        }
      }, {
        key: "updateAccount",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 ? arguments[2] : undefined,
              n = arguments.length > 3 && undefined !== arguments[3] && arguments[3];
          if (Ke.isFunction(r) && (n = r, r = {}), Ke.isFunction(t) ? (n = t, t = this.tronWeb.defaultAddress.hex) : Ke.isObject(t) && (r = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.updateAccount, e, t, r);

          if (!this.validator.notValid([{
            name: "Name",
            type: "not-empty-string",
            value: e
          }, {
            name: "origin",
            type: "address",
            value: t
          }], n)) {
            var i = {
              account_name: nt(e),
              owner_address: rt(t)
            };
            r && r.permissionId && (i.Permission_id = r.permissionId), this.tronWeb.fullNode.request("wallet/updateaccount", i, "post").then(function (e) {
              return it(e, n);
            }).catch(function (e) {
              return n(e);
            });
          }
        }
      }, {
        key: "setAccountId",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (Ke.isFunction(t) && (r = t, t = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.setAccountId, e, t);
          e && Ke.isString(e) && e.startsWith("0x") && (e = e.slice(2)), this.validator.notValid([{
            name: "accountId",
            type: "hex",
            value: e
          }, {
            name: "accountId",
            type: "string",
            lte: 32,
            gte: 8,
            value: e
          }, {
            name: "origin",
            type: "address",
            value: t
          }], r) || this.tronWeb.fullNode.request("wallet/setaccountid", {
            account_id: e,
            owner_address: rt(t)
          }, "post").then(function (e) {
            return it(e, r);
          }).catch(function (e) {
            return r(e);
          });
        }
      }, {
        key: "updateToken",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : {},
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (Ke.isFunction(t) ? (r = t, t = this.tronWeb.defaultAddress.hex) : Ke.isObject(t) && (e = t, t = this.tronWeb.defaultAddress.hex), !r) return this.injectPromise(this.updateToken, e, t);
          var n = e,
              i = n.description,
              s = undefined !== i && i,
              a = n.url,
              o = undefined !== a && a,
              u = n.freeBandwidth,
              c = undefined === u ? 0 : u,
              d = n.freeBandwidthLimit,
              l = undefined === d ? 0 : d;

          if (!this.validator.notValid([{
            name: "token description",
            type: "not-empty-string",
            value: s
          }, {
            name: "token url",
            type: "url",
            value: o
          }, {
            name: "issuer",
            type: "address",
            value: t
          }, {
            name: "Free bandwidth amount",
            type: "positive-integer",
            value: c
          }, {
            name: "Free bandwidth limit",
            type: "positive-integer",
            value: l
          }], r)) {
            var h = {
              owner_address: rt(t),
              description: nt(s),
              url: nt(o),
              new_limit: parseInt(c),
              new_public_limit: parseInt(l)
            };
            e && e.permissionId && (h.Permission_id = e.permissionId), this.tronWeb.fullNode.request("wallet/updateasset", h, "post").then(function (e) {
              return it(e, r);
            }).catch(function (e) {
              return r(e);
            });
          }
        }
      }, {
        key: "sendAsset",
        value: function () {
          return this.sendToken.apply(this, arguments);
        }
      }, {
        key: "purchaseAsset",
        value: function () {
          return this.purchaseToken.apply(this, arguments);
        }
      }, {
        key: "createAsset",
        value: function () {
          return this.createToken.apply(this, arguments);
        }
      }, {
        key: "updateAsset",
        value: function () {
          return this.updateToken.apply(this, arguments);
        }
      }, {
        key: "createProposal",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 ? arguments[2] : undefined,
              n = arguments.length > 3 && undefined !== arguments[3] && arguments[3];
          if (Ke.isFunction(r) && (n = r, r = {}), Ke.isFunction(t) ? (n = t, t = this.tronWeb.defaultAddress.hex) : Ke.isObject(t) && (r = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.createProposal, e, t, r);

          if (!this.validator.notValid([{
            name: "issuer",
            type: "address",
            value: t
          }], n)) {
            var i = "Invalid proposal parameters provided";
            if (!e) return n(i);
            Ke.isArray(e) || (e = [e]);
            var s,
                a = et(e);

            try {
              for (a.s(); !(s = a.n()).done;) {
                var o = s.value;
                if (!Ke.isObject(o)) return n(i);
              }
            } catch (e) {
              a.e(e);
            } finally {
              a.f();
            }

            var u = {
              owner_address: rt(t),
              parameters: e
            };
            r && r.permissionId && (u.Permission_id = r.permissionId), this.tronWeb.fullNode.request("wallet/proposalcreate", u, "post").then(function (e) {
              return it(e, n);
            }).catch(function (e) {
              return n(e);
            });
          }
        }
      }, {
        key: "deleteProposal",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 2 ? arguments[2] : undefined,
              n = arguments.length > 3 && undefined !== arguments[3] && arguments[3];
          if (Ke.isFunction(r) && (n = r, r = {}), Ke.isFunction(t) ? (n = t, t = this.tronWeb.defaultAddress.hex) : Ke.isObject(t) && (r = t, t = this.tronWeb.defaultAddress.hex), !n) return this.injectPromise(this.deleteProposal, e, t, r);

          if (!this.validator.notValid([{
            name: "issuer",
            type: "address",
            value: t
          }, {
            name: "proposalID",
            type: "integer",
            value: e,
            gte: 0
          }], n)) {
            var i = {
              owner_address: rt(t),
              proposal_id: parseInt(e)
            };
            r && r.permissionId && (i.Permission_id = r.permissionId), this.tronWeb.fullNode.request("wallet/proposaldelete", i, "post").then(function (e) {
              return it(e, n);
            }).catch(function (e) {
              return n(e);
            });
          }
        }
      }, {
        key: "voteProposal",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,
              n = arguments.length > 3 ? arguments[3] : undefined,
              i = arguments.length > 4 && undefined !== arguments[4] && arguments[4];
          if (Ke.isFunction(n) && (i = n, n = {}), Ke.isFunction(r) ? (i = r, r = this.tronWeb.defaultAddress.hex) : Ke.isObject(r) && (n = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.voteProposal, e, t, r, n);

          if (!this.validator.notValid([{
            name: "voter",
            type: "address",
            value: r
          }, {
            name: "proposalID",
            type: "integer",
            value: e,
            gte: 0
          }, {
            name: "has approval",
            type: "boolean",
            value: t
          }], i)) {
            var s = {
              owner_address: rt(r),
              proposal_id: parseInt(e),
              is_add_approval: t
            };
            n && n.permissionId && (s.Permission_id = n.permissionId), this.tronWeb.fullNode.request("wallet/proposalapprove", s, "post").then(function (e) {
              return it(e, i);
            }).catch(function (e) {
              return i(e);
            });
          }
        }
      }, {
        key: "createTRXExchange",
        value: function (e, t, r) {
          var n = arguments.length > 3 && undefined !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,
              i = arguments.length > 4 ? arguments[4] : undefined,
              s = arguments.length > 5 && undefined !== arguments[5] && arguments[5];
          if (Ke.isFunction(i) && (s = i, i = {}), Ke.isFunction(n) ? (s = n, n = this.tronWeb.defaultAddress.hex) : Ke.isObject(n) && (i = n, n = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.createTRXExchange, e, t, r, n, i);

          if (!this.validator.notValid([{
            name: "owner",
            type: "address",
            value: n
          }, {
            name: "token name",
            type: "not-empty-string",
            value: e
          }, {
            name: "token balance",
            type: "positive-integer",
            value: t
          }, {
            name: "trx balance",
            type: "positive-integer",
            value: r
          }], s)) {
            var a = {
              owner_address: rt(n),
              first_token_id: nt(e),
              first_token_balance: t,
              second_token_id: "5f",
              second_token_balance: r
            };
            i && i.permissionId && (a.Permission_id = i.permissionId), this.tronWeb.fullNode.request("wallet/exchangecreate", a, "post").then(function (e) {
              s(null, e);
            }).catch(function (e) {
              return s(e);
            });
          }
        }
      }, {
        key: "createTokenExchange",
        value: function (e, t, r, n) {
          var i = arguments.length > 4 && undefined !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex,
              s = arguments.length > 5 ? arguments[5] : undefined,
              a = arguments.length > 6 && undefined !== arguments[6] && arguments[6];
          if (Ke.isFunction(s) && (a = s, s = {}), Ke.isFunction(i) ? (a = i, i = this.tronWeb.defaultAddress.hex) : Ke.isObject(i) && (s = i, i = this.tronWeb.defaultAddress.hex), !a) return this.injectPromise(this.createTokenExchange, e, t, r, n, i, s);

          if (!this.validator.notValid([{
            name: "owner",
            type: "address",
            value: i
          }, {
            name: "first token name",
            type: "not-empty-string",
            value: e
          }, {
            name: "second token name",
            type: "not-empty-string",
            value: r
          }, {
            name: "first token balance",
            type: "positive-integer",
            value: t
          }, {
            name: "second token balance",
            type: "positive-integer",
            value: n
          }], a)) {
            var o = {
              owner_address: rt(i),
              first_token_id: nt(e),
              first_token_balance: t,
              second_token_id: nt(r),
              second_token_balance: n
            };
            s && s.permissionId && (o.Permission_id = s.permissionId), this.tronWeb.fullNode.request("wallet/exchangecreate", o, "post").then(function (e) {
              a(null, e);
            }).catch(function (e) {
              return a(e);
            });
          }
        }
      }, {
        key: "injectExchangeTokens",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : 0,
              n = arguments.length > 3 && undefined !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,
              i = arguments.length > 4 ? arguments[4] : undefined,
              s = arguments.length > 5 && undefined !== arguments[5] && arguments[5];
          if (Ke.isFunction(i) && (s = i, i = {}), Ke.isFunction(n) ? (s = n, n = this.tronWeb.defaultAddress.hex) : Ke.isObject(n) && (i = n, n = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.injectExchangeTokens, e, t, r, n, i);

          if (!this.validator.notValid([{
            name: "owner",
            type: "address",
            value: n
          }, {
            name: "token name",
            type: "not-empty-string",
            value: t
          }, {
            name: "token amount",
            type: "integer",
            value: r,
            gte: 1
          }, {
            name: "exchangeID",
            type: "integer",
            value: e,
            gte: 0
          }], s)) {
            var a = {
              owner_address: rt(n),
              exchange_id: parseInt(e),
              token_id: nt(t),
              quant: parseInt(r)
            };
            i && i.permissionId && (a.Permission_id = i.permissionId), this.tronWeb.fullNode.request("wallet/exchangeinject", a, "post").then(function (e) {
              return it(e, s);
            }).catch(function (e) {
              return s(e);
            });
          }
        }
      }, {
        key: "withdrawExchangeTokens",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : 0,
              n = arguments.length > 3 && undefined !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex,
              i = arguments.length > 4 ? arguments[4] : undefined,
              s = arguments.length > 5 && undefined !== arguments[5] && arguments[5];
          if (Ke.isFunction(i) && (s = i, i = {}), Ke.isFunction(n) ? (s = n, n = this.tronWeb.defaultAddress.hex) : Ke.isObject(n) && (i = n, n = this.tronWeb.defaultAddress.hex), !s) return this.injectPromise(this.withdrawExchangeTokens, e, t, r, n, i);

          if (!this.validator.notValid([{
            name: "owner",
            type: "address",
            value: n
          }, {
            name: "token name",
            type: "not-empty-string",
            value: t
          }, {
            name: "token amount",
            type: "integer",
            value: r,
            gte: 1
          }, {
            name: "exchangeID",
            type: "integer",
            value: e,
            gte: 0
          }], s)) {
            var a = {
              owner_address: rt(n),
              exchange_id: parseInt(e),
              token_id: nt(t),
              quant: parseInt(r)
            };
            i && i.permissionId && (a.Permission_id = i.permissionId), this.tronWeb.fullNode.request("wallet/exchangewithdraw", a, "post").then(function (e) {
              return it(e, s);
            }).catch(function (e) {
              return s(e);
            });
          }
        }
      }, {
        key: "tradeExchangeTokens",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : 0,
              n = arguments.length > 3 && undefined !== arguments[3] ? arguments[3] : 0,
              i = arguments.length > 4 && undefined !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex,
              s = arguments.length > 5 ? arguments[5] : undefined,
              a = arguments.length > 6 && undefined !== arguments[6] && arguments[6];
          if (Ke.isFunction(s) && (a = s, s = {}), Ke.isFunction(i) ? (a = i, i = this.tronWeb.defaultAddress.hex) : Ke.isObject(i) && (s = i, i = this.tronWeb.defaultAddress.hex), !a) return this.injectPromise(this.tradeExchangeTokens, e, t, r, n, i, s);

          if (!this.validator.notValid([{
            name: "owner",
            type: "address",
            value: i
          }, {
            name: "token name",
            type: "not-empty-string",
            value: t
          }, {
            name: "tokenAmountSold",
            type: "integer",
            value: r,
            gte: 1
          }, {
            name: "tokenAmountExpected",
            type: "integer",
            value: n,
            gte: 1
          }, {
            name: "exchangeID",
            type: "integer",
            value: e,
            gte: 0
          }], a)) {
            var o = {
              owner_address: rt(i),
              exchange_id: parseInt(e),
              token_id: this.tronWeb.fromAscii(t),
              quant: parseInt(r),
              expected: parseInt(n)
            };
            s && s.permissionId && (o.Permission_id = s.permissionId), this.tronWeb.fullNode.request("wallet/exchangetransaction", o, "post").then(function (e) {
              return it(e, a);
            }).catch(function (e) {
              return a(e);
            });
          }
        }
      }, {
        key: "updateSetting",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,
              n = arguments.length > 3 ? arguments[3] : undefined,
              i = arguments.length > 4 && undefined !== arguments[4] && arguments[4];
          if (Ke.isFunction(n) && (i = n, n = {}), Ke.isFunction(r) ? (i = r, r = this.tronWeb.defaultAddress.hex) : Ke.isObject(r) && (n = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.updateSetting, e, t, r, n);

          if (!this.validator.notValid([{
            name: "owner",
            type: "address",
            value: r
          }, {
            name: "contract",
            type: "address",
            value: e
          }, {
            name: "userFeePercentage",
            type: "integer",
            value: t,
            gte: 0,
            lte: 100
          }], i)) {
            var s = {
              owner_address: rt(r),
              contract_address: rt(e),
              consume_user_resource_percent: t
            };
            n && n.permissionId && (s.Permission_id = n.permissionId), this.tronWeb.fullNode.request("wallet/updatesetting", s, "post").then(function (e) {
              return it(e, i);
            }).catch(function (e) {
              return i(e);
            });
          }
        }
      }, {
        key: "updateEnergyLimit",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex,
              n = arguments.length > 3 ? arguments[3] : undefined,
              i = arguments.length > 4 && undefined !== arguments[4] && arguments[4];
          if (Ke.isFunction(n) && (i = n, n = {}), Ke.isFunction(r) ? (i = r, r = this.tronWeb.defaultAddress.hex) : Ke.isObject(r) && (n = r, r = this.tronWeb.defaultAddress.hex), !i) return this.injectPromise(this.updateEnergyLimit, e, t, r, n);

          if (!this.validator.notValid([{
            name: "owner",
            type: "address",
            value: r
          }, {
            name: "contract",
            type: "address",
            value: e
          }, {
            name: "originEnergyLimit",
            type: "integer",
            value: t,
            gte: 0,
            lte: 1e7
          }], i)) {
            var s = {
              owner_address: rt(r),
              contract_address: rt(e),
              origin_energy_limit: t
            };
            n && n.permissionId && (s.Permission_id = n.permissionId), this.tronWeb.fullNode.request("wallet/updateenergylimit", s, "post").then(function (e) {
              return it(e, i);
            }).catch(function (e) {
              return i(e);
            });
          }
        }
      }, {
        key: "checkPermissions",
        value: function (e, t) {
          if (e) {
            if (e.type !== t || !e.permission_name || !Ke.isString(e.permission_name) || !Ke.isInteger(e.threshold) || e.threshold < 1 || !e.keys) return false;
            var r,
                n = et(e.keys);

            try {
              for (n.s(); !(r = n.n()).done;) {
                var i = r.value;
                if (!this.tronWeb.isAddress(i.address) || !Ke.isInteger(i.weight) || i.weight > e.threshold || i.weight < 1 || 2 === t && !e.operations) return false;
              }
            } catch (e) {
              n.e(e);
            } finally {
              n.f();
            }
          }

          return true;
        }
      }, {
        key: "updateAccountPermissions",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2],
              n = arguments.length > 3 && undefined !== arguments[3] && arguments[3],
              i = arguments.length > 4 && undefined !== arguments[4] && arguments[4];
          if (Ke.isFunction(n) && (i = n, n = false), Ke.isFunction(r) && (i = r, r = n = false), Ke.isFunction(t) && (i = t, t = r = n = false), !i) return this.injectPromise(this.updateAccountPermissions, e, t, r, n);
          if (!this.tronWeb.isAddress(e)) return i("Invalid ownerAddress provided");
          if (!this.checkPermissions(t, 0)) return i("Invalid ownerPermissions provided");
          if (!this.checkPermissions(r, 1)) return i("Invalid witnessPermissions provided");
          Array.isArray(n) || (n = [n]);
          var s,
              a = et(n);

          try {
            for (a.s(); !(s = a.n()).done;) {
              var o = s.value;
              if (!this.checkPermissions(o, 2)) return i("Invalid activesPermissions provided");
            }
          } catch (e) {
            a.e(e);
          } finally {
            a.f();
          }

          var u = {
            owner_address: e
          };
          t && (u.owner = t), r && (u.witness = r), n && (u.actives = 1 === n.length ? n[0] : n), this.tronWeb.fullNode.request("wallet/accountpermissionupdate", u, "post").then(function (e) {
            return it(e, i);
          }).catch(function (e) {
            return i(e);
          });
        }
      }, {
        key: "newTxID",
        value: (i = f()(l.a.mark(function e(t, r) {
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (r) {
                  e.next = 2;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.newTxID, t));

              case 2:
                this.tronWeb.fullNode.request("wallet/getsignweight", t, "post").then(function (e) {
                  e = e.transaction.transaction, "boolean" == typeof t.visible && (e.visible = t.visible), r(null, e);
                }).catch(function (e) {
                  return r("Error generating a new transaction id.");
                });

              case 3:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t) {
          return i.apply(this, arguments);
        })
      }, {
        key: "alterTransaction",
        value: (n = f()(l.a.mark(function e(t) {
          var r,
              n,
              i = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (r = i.length > 1 && undefined !== i[1] ? i[1] : {}, n = i.length > 2 && undefined !== i[2] && i[2]) {
                  e.next = 4;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.alterTransaction, t, r));

              case 4:
                if (!t.signature) {
                  e.next = 6;
                  break;
                }

                return e.abrupt("return", n("You can not extend the expiration of a signed transaction."));

              case 6:
                if (!r.data) {
                  e.next = 12;
                  break;
                }

                if ("hex" !== r.dataFormat && (r.data = this.tronWeb.toHex(r.data)), r.data = r.data.replace(/^0x/, ""), 0 !== r.data.length) {
                  e.next = 11;
                  break;
                }

                return e.abrupt("return", n("Invalid data provided"));

              case 11:
                t.raw_data.data = r.data;

              case 12:
                if (!r.extension) {
                  e.next = 17;
                  break;
                }

                if (r.extension = parseInt(1e3 * r.extension), !(isNaN(r.extension) || t.raw_data.expiration + r.extension <= Date.now() + 3e3)) {
                  e.next = 16;
                  break;
                }

                return e.abrupt("return", n("Invalid extension provided"));

              case 16:
                t.raw_data.expiration += r.extension;

              case 17:
                this.newTxID(t, n);

              case 18:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e) {
          return n.apply(this, arguments);
        })
      }, {
        key: "extendExpiration",
        value: (r = f()(l.a.mark(function e(t, r) {
          var n,
              i = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (n = i.length > 2 && undefined !== i[2] && i[2]) {
                  e.next = 3;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.extendExpiration, t, r));

              case 3:
                this.alterTransaction(t, {
                  extension: r
                }, n);

              case 4:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t) {
          return r.apply(this, arguments);
        })
      }, {
        key: "addUpdateData",
        value: (t = f()(l.a.mark(function e(t, r) {
          var n,
              i,
              s = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (n = s.length > 2 && undefined !== s[2] ? s[2] : "utf8", i = s.length > 3 && undefined !== s[3] && s[3], Ke.isFunction(n) && (i = n, n = "utf8"), i) {
                  e.next = 5;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.addUpdateData, t, r, n));

              case 5:
                this.alterTransaction(t, {
                  data: r,
                  dataFormat: n
                }, i);

              case 6:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, r) {
          return t.apply(this, arguments);
        })
      }]), e;
    }();

    function at(e, t) {
      var r = Object.keys(e);

      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(e);
        t && (n = n.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), r.push.apply(r, n);
      }

      return r;
    }

    function ot(e) {
      for (var t = 1; t < arguments.length; t++) {
        var r = null != arguments[t] ? arguments[t] : {};
        t % 2 ? at(Object(r), true).forEach(function (t) {
          N()(e, t, r[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : at(Object(r)).forEach(function (t) {
          Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
        });
      }

      return e;
    }

    function ut(e) {
      return At.address.toHex(e);
    }

    var ct = function () {
      function e() {
        var t = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
        if (b()(this, e), !t || !t instanceof At) throw new Error("Expected instance of TronWeb");
        this.tronWeb = t, this.injectPromise = Ge()(this), this.cache = {
          contracts: {}
        }, this.validator = new Qe(t);
      }

      var t, r, n, i, s, a, o, u, c, d, h, v, p, g, m, k, x;
      return y()(e, [{
        key: "_parseToken",
        value: function (e) {
          return ot(ot({}, e), {}, {
            name: this.tronWeb.toUtf8(e.name),
            abbr: e.abbr && this.tronWeb.toUtf8(e.abbr),
            description: e.description && this.tronWeb.toUtf8(e.description),
            url: e.url && this.tronWeb.toUtf8(e.url)
          });
        }
      }, {
        key: "getCurrentBlock",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!e) return this.injectPromise(this.getCurrentBlock);
          this.tronWeb.fullNode.request("wallet/getnowblock").then(function (t) {
            e(null, t);
          }).catch(function (t) {
            return e(t);
          });
        }
      }, {
        key: "getConfirmedCurrentBlock",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!e) return this.injectPromise(this.getConfirmedCurrentBlock);
          this.tronWeb.solidityNode.request("walletsolidity/getnowblock").then(function (t) {
            e(null, t);
          }).catch(function (t) {
            return e(t);
          });
        }
      }, {
        key: "getBlock",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return Ke.isFunction(e) && (t = e, e = this.tronWeb.defaultBlock), t ? false === e ? t("No block identifier provided") : ("earliest" == e && (e = 0), "st" == e ? this.getCurrentBlock(t) : isNaN(e) && Ke.isHex(e) ? this.getBlockByHash(e, t) : void this.getBlockByNumber(e, t)) : this.injectPromise(this.getBlock, e);
        }
      }, {
        key: "getBlockByHash",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          if (!t) return this.injectPromise(this.getBlockByHash, e);
          this.tronWeb.fullNode.request("wallet/getblockbyid", {
            value: e
          }, "post").then(function (e) {
            if (!Object.keys(e).length) return t("Block not found");
            t(null, e);
          }).catch(function (e) {
            return t(e);
          });
        }
      }, {
        key: "getBlockByNumber",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return t ? !Ke.isInteger(e) || e < 0 ? t("Invalid block number provided") : void this.tronWeb.fullNode.request("wallet/getblockbynum", {
            num: parseInt(e)
          }, "post").then(function (e) {
            if (!Object.keys(e).length) return t("Block not found");
            t(null, e);
          }).catch(function (e) {
            return t(e);
          }) : this.injectPromise(this.getBlockByNumber, e);
        }
      }, {
        key: "getBlockTransactionCount",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          if (Ke.isFunction(e) && (t = e, e = this.tronWeb.defaultBlock), !t) return this.injectPromise(this.getBlockTransactionCount, e);
          this.getBlock(e).then(function (e) {
            var r = e.transactions;
            t(null, (undefined === r ? [] : r).length);
          }).catch(function (e) {
            return t(e);
          });
        }
      }, {
        key: "getTransactionFromBlock",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock,
              t = arguments.length > 1 ? arguments[1] : undefined,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (Ke.isFunction(t) && (r = t, t = 0), Ke.isFunction(e) && (r = e, e = this.tronWeb.defaultBlock), !r) return this.injectPromise(this.getTransactionFromBlock, e, t);
          this.getBlock(e).then(function (e) {
            var n = e.transactions,
                i = undefined !== n && n;
            i ? "number" == typeof t ? t >= 0 && t < i.length ? r(null, i[t]) : r("Invalid transaction index provided") : r(null, i) : r("Transaction not found in block");
          }).catch(function (e) {
            return r(e);
          });
        }
      }, {
        key: "getTransaction",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          if (!t) return this.injectPromise(this.getTransaction, e);
          this.tronWeb.fullNode.request("wallet/gettransactionbyid", {
            value: e
          }, "post").then(function (e) {
            if (!Object.keys(e).length) return t("Transaction not found");
            t(null, e);
          }).catch(function (e) {
            return t(e);
          });
        }
      }, {
        key: "getConfirmedTransaction",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          if (!t) return this.injectPromise(this.getConfirmedTransaction, e);
          this.tronWeb.solidityNode.request("walletsolidity/gettransactionbyid", {
            value: e
          }, "post").then(function (e) {
            if (!Object.keys(e).length) return t("Transaction not found");
            t(null, e);
          }).catch(function (e) {
            return t(e);
          });
        }
      }, {
        key: "getUnconfirmedTransactionInfo",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return this._getTransactionInfoById(e, {
            confirmed: false
          }, t);
        }
      }, {
        key: "getTransactionInfo",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return this._getTransactionInfoById(e, {
            confirmed: true
          }, t);
        }
      }, {
        key: "_getTransactionInfoById",
        value: function (e, t) {
          var r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (!r) return this.injectPromise(this._getTransactionInfoById, e, t);
          this.tronWeb[t.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(t.confirmed ? "solidity" : "", "/gettransactioninfobyid"), {
            value: e
          }, "post").then(function (e) {
            r(null, e);
          }).catch(function (e) {
            return r(e);
          });
        }
      }, {
        key: "getTransactionsToAddress",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : 30,
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : 0,
              n = arguments.length > 3 && undefined !== arguments[3] && arguments[3];
          return Ke.isFunction(r) && (n = r, r = 0), Ke.isFunction(t) && (n = t, t = 30), n ? (e = this.tronWeb.address.toHex(e), this.getTransactionsRed(e, "to", t, r, n)) : this.injectPromise(this.getTransactionsToAddress, e, t, r);
        }
      }, {
        key: "getTransactionsFromAddress",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : 30,
              r = arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : 0,
              n = arguments.length > 3 && undefined !== arguments[3] && arguments[3];
          return Ke.isFunction(r) && (n = r, r = 0), Ke.isFunction(t) && (n = t, t = 30), n ? (e = this.tronWeb.address.toHex(e), this.getTransactionsRed(e, "from", t, r, n)) : this.injectPromise(this.getTransactionsFromAddress, e, t, r);
        }
      }, {
        key: "getTransactionsRed",
        value: (x = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o,
              u,
              c,
              d = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = d.length > 0 && undefined !== d[0] ? d[0] : this.tronWeb.defaultAddress.hex, r = d.length > 1 && undefined !== d[1] ? d[1] : "all", n = d.length > 2 && undefined !== d[2] ? d[2] : 30, i = d.length > 3 && undefined !== d[3] ? d[3] : 0, s = d.length > 4 && undefined !== d[4] && d[4], Ke.isFunction(i) && (s = i, i = 0), Ke.isFunction(n) && (s = n, n = 30), Ke.isFunction(r) && (s = r, r = "all"), Ke.isFunction(t) && (s = t, t = this.tronWeb.defaultAddress.hex), s) {
                  e.next = 11;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.getTransactionsRed, t, r, n, i));

              case 11:
                if (["to", "from", "all"].includes(r)) {
                  e.next = 13;
                  break;
                }

                return e.abrupt("return", s('Invalid direction provided: Expected "to", "from" or "all"'));

              case 13:
                if ("all" != r) {
                  e.next = 27;
                  break;
                }

                return e.prev = 14, e.next = 17, Promise.all([this.getTransactionsRed(t, "from", n, i), this.getTransactionsRed(t, "to", n, i)]);

              case 17:
                return a = e.sent, o = Ye()(a, 2), u = o[0], c = o[1], e.abrupt("return", s(null, [].concat(R()(u.map(function (e) {
                  return e.direction = "from", e;
                })), R()(c.map(function (e) {
                  return e.direction = "to", e;
                }))).sort(function (e, t) {
                  return t.raw_data.timestamp - e.raw_data.timestamp;
                })));

              case 24:
                return e.prev = 24, e.t0 = e.catch(14), e.abrupt("return", s(e.t0));

              case 27:
                if (this.tronWeb.isAddress(t)) {
                  e.next = 29;
                  break;
                }

                return e.abrupt("return", s("Invalid address provided"));

              case 29:
                if (!(!Ke.isInteger(n) || n < 0 || i && n < 1)) {
                  e.next = 31;
                  break;
                }

                return e.abrupt("return", s("Invalid limit provided"));

              case 31:
                if (Ke.isInteger(i) && !(i < 0)) {
                  e.next = 33;
                  break;
                }

                return e.abrupt("return", s("Invalid offset provided"));

              case 33:
                t = this.tronWeb.address.toHex(t), this.tronWeb.solidityNode.request("walletextension/gettransactions".concat(r, "this"), {
                  account: {
                    address: t
                  },
                  offset: i,
                  limit: n
                }, "post").then(function (e) {
                  var t = e.transaction;
                  s(null, t);
                }).catch(function (e) {
                  return s(e);
                });

              case 35:
              case "end":
                return e.stop();
            }
          }, e, this, [[14, 24]]);
        })), function () {
          return x.apply(this, arguments);
        })
      }, {
        key: "getAccount",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return Ke.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.solidityNode.request("walletsolidity/getaccount", {
            address: e
          }, "post").then(function (e) {
            t(null, e);
          }).catch(function (e) {
            return t(e);
          })) : t("Invalid address provided") : this.injectPromise(this.getAccount, e);
        }
      }, {
        key: "getAccountById",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          if (!t) return this.injectPromise(this.getAccountById, e);
          this.getAccountInfoById(e, {
            confirmed: true
          }, t);
        }
      }, {
        key: "getAccountInfoById",
        value: function (e, t, r) {
          this.validator.notValid([{
            name: "accountId",
            type: "hex",
            value: e
          }, {
            name: "accountId",
            type: "string",
            lte: 32,
            gte: 8,
            value: e
          }], r) || (e.startsWith("0x") && (e = e.slice(2)), this.tronWeb[t.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(t.confirmed ? "solidity" : "", "/getaccountbyid"), {
            account_id: e
          }, "post").then(function (e) {
            r(null, e);
          }).catch(function (e) {
            return r(e);
          }));
        }
      }, {
        key: "getBalance",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          if (Ke.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), !t) return this.injectPromise(this.getBalance, e);
          this.getAccount(e).then(function (e) {
            var r = e.balance;
            t(null, undefined === r ? 0 : r);
          }).catch(function (e) {
            return t(e);
          });
        }
      }, {
        key: "getUnconfirmedAccount",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return Ke.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.fullNode.request("wallet/getaccount", {
            address: e
          }, "post").then(function (e) {
            t(null, e);
          }).catch(function (e) {
            return t(e);
          })) : t("Invalid address provided") : this.injectPromise(this.getUnconfirmedAccount, e);
        }
      }, {
        key: "getUnconfirmedAccountById",
        value: function (e) {
          var t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          if (!t) return this.injectPromise(this.getUnconfirmedAccountById, e);
          this.getAccountInfoById(e, {
            confirmed: false
          }, t);
        }
      }, {
        key: "getUnconfirmedBalance",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          if (Ke.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), !t) return this.injectPromise(this.getUnconfirmedBalance, e);
          this.getUnconfirmedAccount(e).then(function (e) {
            var r = e.balance;
            t(null, undefined === r ? 0 : r);
          }).catch(function (e) {
            return t(e);
          });
        }
      }, {
        key: "getBandwidth",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return Ke.isFunction(e) && (t = e, e = this.tronWeb.defaultAddress.hex), t ? this.tronWeb.isAddress(e) ? (e = this.tronWeb.address.toHex(e), void this.tronWeb.fullNode.request("wallet/getaccountnet", {
            address: e
          }, "post").then(function (e) {
            var r = e.freeNetUsed,
                n = undefined === r ? 0 : r,
                i = e.freeNetLimit,
                s = undefined === i ? 0 : i,
                a = e.NetUsed,
                o = undefined === a ? 0 : a,
                u = e.NetLimit;
            t(null, s - n + ((undefined === u ? 0 : u) - o));
          }).catch(function (e) {
            return t(e);
          })) : t("Invalid address provided") : this.injectPromise(this.getBandwidth, e);
        }
      }, {
        key: "getTokensIssuedByAddress",
        value: function () {
          var e = this,
              t = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              r = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return Ke.isFunction(t) && (r = t, t = this.tronWeb.defaultAddress.hex), r ? this.tronWeb.isAddress(t) ? (t = this.tronWeb.address.toHex(t), void this.tronWeb.fullNode.request("wallet/getassetissuebyaccount", {
            address: t
          }, "post").then(function (t) {
            var n = t.assetIssue,
                i = undefined !== n && n;
            if (!i) return r(null, {});
            var s = i.map(function (t) {
              return e._parseToken(t);
            }).reduce(function (e, t) {
              return e[t.name] = t, e;
            }, {});
            r(null, s);
          }).catch(function (e) {
            return r(e);
          })) : r("Invalid address provided") : this.injectPromise(this.getTokensIssuedByAddress, t);
        }
      }, {
        key: "getTokenFromID",
        value: function () {
          var e = this,
              t = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              r = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return r ? (Ke.isInteger(t) && (t = t.toString()), Ke.isString(t) && t.length ? void this.tronWeb.fullNode.request("wallet/getassetissuebyname", {
            value: this.tronWeb.fromUtf8(t)
          }, "post").then(function (t) {
            if (!t.name) return r("Token does not exist");
            r(null, e._parseToken(t));
          }).catch(function (e) {
            return r(e);
          }) : r("Invalid token ID provided")) : this.injectPromise(this.getTokenFromID, t);
        }
      }, {
        key: "listNodes",
        value: function () {
          var e = this,
              t = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!t) return this.injectPromise(this.listNodes);
          this.tronWeb.fullNode.request("wallet/listnodes").then(function (r) {
            var n = r.nodes;
            t(null, (undefined === n ? [] : n).map(function (t) {
              var r = t.address,
                  n = r.host,
                  i = r.port;
              return "".concat(e.tronWeb.toUtf8(n), ":").concat(i);
            }));
          }).catch(function (e) {
            return t(e);
          });
        }
      }, {
        key: "getBlockRange",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : 0,
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : 30,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          return Ke.isFunction(t) && (r = t, t = 30), Ke.isFunction(e) && (r = e, e = 0), r ? !Ke.isInteger(e) || e < 0 ? r("Invalid start of range provided") : !Ke.isInteger(t) || t <= e ? r("Invalid end of range provided") : void this.tronWeb.fullNode.request("wallet/getblockbylimitnext", {
            startNum: parseInt(e),
            endNum: parseInt(t) + 1
          }, "post").then(function (e) {
            var t = e.block;
            r(null, undefined === t ? [] : t);
          }).catch(function (e) {
            return r(e);
          }) : this.injectPromise(this.getBlockRange, e, t);
        }
      }, {
        key: "listSuperRepresentatives",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!e) return this.injectPromise(this.listSuperRepresentatives);
          this.tronWeb.fullNode.request("wallet/listwitnesses").then(function (t) {
            var r = t.witnesses;
            e(null, undefined === r ? [] : r);
          }).catch(function (t) {
            return e(t);
          });
        }
      }, {
        key: "listTokens",
        value: function () {
          var e = this,
              t = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : 0,
              r = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : 0,
              n = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          return Ke.isFunction(r) && (n = r, r = 0), Ke.isFunction(t) && (n = t, t = 0), n ? !Ke.isInteger(t) || t < 0 || r && t < 1 ? n("Invalid limit provided") : !Ke.isInteger(r) || r < 0 ? n("Invalid offset provided") : t ? void this.tronWeb.fullNode.request("wallet/getpaginatedassetissuelist", {
            offset: parseInt(r),
            limit: parseInt(t)
          }, "post").then(function (t) {
            var r = t.assetIssue;
            n(null, (undefined === r ? [] : r).map(function (t) {
              return e._parseToken(t);
            }));
          }).catch(function (e) {
            return n(e);
          }) : this.tronWeb.fullNode.request("wallet/getassetissuelist").then(function (t) {
            var r = t.assetIssue;
            n(null, (undefined === r ? [] : r).map(function (t) {
              return e._parseToken(t);
            }));
          }).catch(function (e) {
            return n(e);
          }) : this.injectPromise(this.listTokens, t, r);
        }
      }, {
        key: "timeUntilNextVoteCycle",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!e) return this.injectPromise(this.timeUntilNextVoteCycle);
          this.tronWeb.fullNode.request("wallet/getnextmaintenancetime").then(function (t) {
            var r = t.num,
                n = undefined === r ? -1 : r;
            if (-1 == n) return e("Failed to get time until next vote cycle");
            e(null, Math.floor(n / 1e3));
          }).catch(function (t) {
            return e(t);
          });
        }
      }, {
        key: "getContract",
        value: function (e) {
          var t = this,
              r = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return r ? this.tronWeb.isAddress(e) ? void (this.cache.contracts[e] ? r(null, this.cache.contracts[e]) : (e = this.tronWeb.address.toHex(e), this.tronWeb.fullNode.request("wallet/getcontract", {
            value: e
          }).then(function (n) {
            if (n.Error) return r("Contract does not exist");
            t.cache.contracts[e] = n, r(null, n);
          }).catch(function (e) {
            return r(e);
          }))) : r("Invalid contract address provided") : this.injectPromise(this.getContract, e);
        }
      }, {
        key: "verifyMessage",
        value: (k = f()(l.a.mark(function t() {
          var r,
              n,
              i,
              s,
              a,
              o = arguments;
          return l.a.wrap(function (t) {
            for (;;) switch (t.prev = t.next) {
              case 0:
                if (r = o.length > 0 && undefined !== o[0] && o[0], n = o.length > 1 && undefined !== o[1] && o[1], i = o.length > 2 && undefined !== o[2] ? o[2] : this.tronWeb.defaultAddress.base58, s = !(o.length > 3 && undefined !== o[3]) || o[3], a = o.length > 4 && undefined !== o[4] && o[4], Ke.isFunction(i) && (a = i, i = this.tronWeb.defaultAddress.base58, s = true), Ke.isFunction(s) && (a = s, s = true), a) {
                  t.next = 9;
                  break;
                }

                return t.abrupt("return", this.injectPromise(this.verifyMessage, r, n, i, s));

              case 9:
                if (Ke.isHex(r)) {
                  t.next = 11;
                  break;
                }

                return t.abrupt("return", a("Expected hex message input"));

              case 11:
                if (!e.verifySignature(r, i, n, s)) {
                  t.next = 13;
                  break;
                }

                return t.abrupt("return", a(null, true));

              case 13:
                a("Signature does not match");

              case 14:
              case "end":
                return t.stop();
            }
          }, t, this);
        })), function () {
          return k.apply(this, arguments);
        })
      }, {
        key: "sign",
        value: (m = f()(l.a.mark(function t() {
          var r,
              n,
              i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (t) {
            for (;;) switch (t.prev = t.next) {
              case 0:
                if (r = u.length > 0 && undefined !== u[0] && u[0], n = u.length > 1 && undefined !== u[1] ? u[1] : this.tronWeb.defaultPrivateKey, i = !(u.length > 2 && undefined !== u[2]) || u[2], s = u.length > 3 && undefined !== u[3] && u[3], a = u.length > 4 && undefined !== u[4] && u[4], Ke.isFunction(s) && (a = s, s = false), Ke.isFunction(i) && (a = i, i = true, s = false), Ke.isFunction(n) && (a = n, n = this.tronWeb.defaultPrivateKey, i = true, s = false), a) {
                  t.next = 10;
                  break;
                }

                return t.abrupt("return", this.injectPromise(this.sign, r, n, i, s));

              case 10:
                if (!Ke.isString(r)) {
                  t.next = 21;
                  break;
                }

                if (Ke.isHex(r)) {
                  t.next = 13;
                  break;
                }

                return t.abrupt("return", a("Expected hex message input"));

              case 13:
                return t.prev = 13, o = e.signString(r, n, i), t.abrupt("return", a(null, o));

              case 18:
                t.prev = 18, t.t0 = t.catch(13), a(t.t0);

              case 21:
                if (Ke.isObject(r)) {
                  t.next = 23;
                  break;
                }

                return t.abrupt("return", a("Invalid transaction provided"));

              case 23:
                if (s || !r.signature) {
                  t.next = 25;
                  break;
                }

                return t.abrupt("return", a("Transaction is already signed"));

              case 25:
                if (t.prev = 25, s) {
                  t.next = 30;
                  break;
                }

                if (this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(n)).toLowerCase() === this.tronWeb.address.toHex(r.raw_data.contract[0].parameter.value.owner_address)) {
                  t.next = 30;
                  break;
                }

                return t.abrupt("return", a("Private key does not match address in transaction"));

              case 30:
                return t.abrupt("return", a(null, Ke.crypto.signTransaction(n, r)));

              case 33:
                t.prev = 33, t.t1 = t.catch(25), a(t.t1);

              case 36:
              case "end":
                return t.stop();
            }
          }, t, this, [[13, 18], [25, 33]]);
        })), function () {
          return m.apply(this, arguments);
        })
      }, {
        key: "multiSign",
        value: (g = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = u.length > 0 && undefined !== u[0] && u[0], r = u.length > 1 && undefined !== u[1] ? u[1] : this.tronWeb.defaultPrivateKey, n = u.length > 2 && undefined !== u[2] && u[2], i = u.length > 3 && undefined !== u[3] && u[3], Ke.isFunction(n) && (i = n, n = 0), Ke.isFunction(r) && (i = r, r = this.tronWeb.defaultPrivateKey, n = 0), i) {
                  e.next = 8;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.multiSign, t, r, n));

              case 8:
                if (Ke.isObject(t) && t.raw_data && t.raw_data.contract) {
                  e.next = 10;
                  break;
                }

                return e.abrupt("return", i("Invalid transaction provided"));

              case 10:
                if (t.raw_data.contract[0].Permission_id || !(n > 0)) {
                  e.next = 30;
                  break;
                }

                return t.raw_data.contract[0].Permission_id = n, s = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(r)).toLowerCase(), e.next = 15, this.getSignWeight(t, n);

              case 15:
                if ("PERMISSION_ERROR" !== (a = e.sent).result.code) {
                  e.next = 18;
                  break;
                }

                return e.abrupt("return", i(a.result.message));

              case 18:
                if (o = false, a.permission.keys.map(function (e) {
                  e.address === s && (o = true);
                }), o) {
                  e.next = 22;
                  break;
                }

                return e.abrupt("return", i(r + " has no permission to sign"));

              case 22:
                if (!a.approved_list || -1 == a.approved_list.indexOf(s)) {
                  e.next = 24;
                  break;
                }

                return e.abrupt("return", i(r + " already sign transaction"));

              case 24:
                if (!a.transaction || !a.transaction.transaction) {
                  e.next = 29;
                  break;
                }

                t = a.transaction.transaction, n > 0 && (t.raw_data.contract[0].Permission_id = n), e.next = 30;
                break;

              case 29:
                return e.abrupt("return", i("Invalid transaction provided"));

              case 30:
                return e.prev = 30, e.abrupt("return", i(null, Ke.crypto.signTransaction(r, t)));

              case 34:
                e.prev = 34, e.t0 = e.catch(30), i(e.t0);

              case 37:
              case "end":
                return e.stop();
            }
          }, e, this, [[30, 34]]);
        })), function () {
          return g.apply(this, arguments);
        })
      }, {
        key: "getApprovedList",
        value: (p = f()(l.a.mark(function e(t) {
          var r,
              n = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (r = n.length > 1 && undefined !== n[1] && n[1]) {
                  e.next = 3;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.getApprovedList, t));

              case 3:
                if (Ke.isObject(t)) {
                  e.next = 5;
                  break;
                }

                return e.abrupt("return", r("Invalid transaction provided"));

              case 5:
                this.tronWeb.fullNode.request("wallet/getapprovedlist", t, "post").then(function (e) {
                  r(null, e);
                }).catch(function (e) {
                  return r(e);
                });

              case 6:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e) {
          return p.apply(this, arguments);
        })
      }, {
        key: "getSignWeight",
        value: (v = f()(l.a.mark(function e(t, r) {
          var n,
              i = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (n = i.length > 2 && undefined !== i[2] && i[2], Ke.isFunction(r) && (n = r, r = undefined), n) {
                  e.next = 4;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.getSignWeight, t, r));

              case 4:
                if (Ke.isObject(t) && t.raw_data && t.raw_data.contract) {
                  e.next = 6;
                  break;
                }

                return e.abrupt("return", n("Invalid transaction provided"));

              case 6:
                if (Ke.isInteger(r) ? t.raw_data.contract[0].Permission_id = parseInt(r) : "number" != typeof t.raw_data.contract[0].Permission_id && (t.raw_data.contract[0].Permission_id = 0), Ke.isObject(t)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return", n("Invalid transaction provided"));

              case 9:
                this.tronWeb.fullNode.request("wallet/getsignweight", t, "post").then(function (e) {
                  n(null, e);
                }).catch(function (e) {
                  return n(e);
                });

              case 10:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t) {
          return v.apply(this, arguments);
        })
      }, {
        key: "sendRawTransaction",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : {},
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          return Ke.isFunction(t) && (r = t, t = {}), r ? Ke.isObject(e) ? Ke.isObject(t) ? e.signature && Ke.isArray(e.signature) ? void this.tronWeb.fullNode.request("wallet/broadcasttransaction", e, "post").then(function (t) {
            t.result && (t.transaction = e), r(null, t);
          }).catch(function (e) {
            return r(e);
          }) : r("Transaction is not signed") : r("Invalid options provided") : r("Invalid transaction provided") : this.injectPromise(this.sendRawTransaction, e, t);
        }
      }, {
        key: "sendTransaction",
        value: (h = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o,
              u,
              c = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = c.length > 0 && undefined !== c[0] && c[0], r = c.length > 1 && undefined !== c[1] && c[1], n = c.length > 2 && undefined !== c[2] ? c[2] : {}, i = c.length > 3 && undefined !== c[3] && c[3], Ke.isFunction(n) && (i = n, n = {}), "string" == typeof n && (n = {
                  privateKey: n
                }), i) {
                  e.next = 8;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.sendTransaction, t, r, n));

              case 8:
                if (this.tronWeb.isAddress(t)) {
                  e.next = 10;
                  break;
                }

                return e.abrupt("return", i("Invalid recipient provided"));

              case 10:
                if (Ke.isInteger(r) && !(r <= 0)) {
                  e.next = 12;
                  break;
                }

                return e.abrupt("return", i("Invalid amount provided"));

              case 12:
                if ((n = ot({
                  privateKey: this.tronWeb.defaultPrivateKey,
                  address: this.tronWeb.defaultAddress.hex
                }, n)).privateKey || n.address) {
                  e.next = 15;
                  break;
                }

                return e.abrupt("return", i("Function requires either a private key or address to be set"));

              case 15:
                return e.prev = 15, s = n.privateKey ? this.tronWeb.address.fromPrivateKey(n.privateKey) : n.address, e.next = 19, this.tronWeb.transactionBuilder.sendTrx(t, r, s);

              case 19:
                return a = e.sent, e.next = 22, this.sign(a, n.privateKey || undefined);

              case 22:
                return o = e.sent, e.next = 25, this.sendRawTransaction(o);

              case 25:
                return u = e.sent, e.abrupt("return", i(null, u));

              case 29:
                return e.prev = 29, e.t0 = e.catch(15), e.abrupt("return", i(e.t0));

              case 32:
              case "end":
                return e.stop();
            }
          }, e, this, [[15, 29]]);
        })), function () {
          return h.apply(this, arguments);
        })
      }, {
        key: "sendToken",
        value: (d = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o,
              u,
              c,
              d = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = d.length > 0 && undefined !== d[0] && d[0], r = d.length > 1 && undefined !== d[1] && d[1], n = d.length > 2 && undefined !== d[2] && d[2], i = d.length > 3 && undefined !== d[3] ? d[3] : {}, s = d.length > 4 && undefined !== d[4] && d[4], Ke.isFunction(i) && (s = i, i = {}), "string" == typeof i && (i = {
                  privateKey: i
                }), s) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.sendToken, t, r, n, i));

              case 9:
                if (this.tronWeb.isAddress(t)) {
                  e.next = 11;
                  break;
                }

                return e.abrupt("return", s("Invalid recipient provided"));

              case 11:
                if (Ke.isInteger(r) && !(r <= 0)) {
                  e.next = 13;
                  break;
                }

                return e.abrupt("return", s("Invalid amount provided"));

              case 13:
                if (Ke.isInteger(n) && (n = n.toString()), Ke.isString(n)) {
                  e.next = 16;
                  break;
                }

                return e.abrupt("return", s("Invalid token ID provided"));

              case 16:
                if ((i = ot({
                  privateKey: this.tronWeb.defaultPrivateKey,
                  address: this.tronWeb.defaultAddress.hex
                }, i)).privateKey || i.address) {
                  e.next = 19;
                  break;
                }

                return e.abrupt("return", s("Function requires either a private key or address to be set"));

              case 19:
                return e.prev = 19, a = i.privateKey ? this.tronWeb.address.fromPrivateKey(i.privateKey) : i.address, e.next = 23, this.tronWeb.transactionBuilder.sendToken(t, r, n, a);

              case 23:
                return o = e.sent, e.next = 26, this.sign(o, i.privateKey || undefined);

              case 26:
                return u = e.sent, e.next = 29, this.sendRawTransaction(u);

              case 29:
                return c = e.sent, e.abrupt("return", s(null, c));

              case 33:
                return e.prev = 33, e.t0 = e.catch(19), e.abrupt("return", s(e.t0));

              case 36:
              case "end":
                return e.stop();
            }
          }, e, this, [[19, 33]]);
        })), function () {
          return d.apply(this, arguments);
        })
      }, {
        key: "freezeBalance",
        value: (c = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o,
              u,
              c,
              d,
              h = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = h.length > 0 && undefined !== h[0] ? h[0] : 0, r = h.length > 1 && undefined !== h[1] ? h[1] : 3, n = h.length > 2 && undefined !== h[2] ? h[2] : "BANDWIDTH", i = h.length > 3 && undefined !== h[3] ? h[3] : {}, s = h.length > 4 && undefined !== h[4] ? h[4] : undefined, a = h.length > 5 && undefined !== h[5] && h[5], Ke.isFunction(s) && (a = s, s = undefined), Ke.isFunction(r) && (a = r, r = 3), Ke.isFunction(n) && (a = n, n = "BANDWIDTH"), Ke.isFunction(i) && (a = i, i = {}), "string" == typeof i && (i = {
                  privateKey: i
                }), a) {
                  e.next = 13;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.freezeBalance, t, r, n, i, s));

              case 13:
                if (["BANDWIDTH", "ENERGY"].includes(n)) {
                  e.next = 15;
                  break;
                }

                return e.abrupt("return", a('Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"'));

              case 15:
                if (Ke.isInteger(t) && !(t <= 0)) {
                  e.next = 17;
                  break;
                }

                return e.abrupt("return", a("Invalid amount provided"));

              case 17:
                if (Ke.isInteger(r) && !(r < 3)) {
                  e.next = 19;
                  break;
                }

                return e.abrupt("return", a("Invalid duration provided, minimum of 3 days"));

              case 19:
                if ((i = ot({
                  privateKey: this.tronWeb.defaultPrivateKey,
                  address: this.tronWeb.defaultAddress.hex
                }, i)).privateKey || i.address) {
                  e.next = 22;
                  break;
                }

                return e.abrupt("return", a("Function requires either a private key or address to be set"));

              case 22:
                return e.prev = 22, o = i.privateKey ? this.tronWeb.address.fromPrivateKey(i.privateKey) : i.address, e.next = 26, this.tronWeb.transactionBuilder.freezeBalance(t, r, n, o, s);

              case 26:
                return u = e.sent, e.next = 29, this.sign(u, i.privateKey || undefined);

              case 29:
                return c = e.sent, e.next = 32, this.sendRawTransaction(c);

              case 32:
                return d = e.sent, e.abrupt("return", a(null, d));

              case 36:
                return e.prev = 36, e.t0 = e.catch(22), e.abrupt("return", a(e.t0));

              case 39:
              case "end":
                return e.stop();
            }
          }, e, this, [[22, 36]]);
        })), function () {
          return c.apply(this, arguments);
        })
      }, {
        key: "unfreezeBalance",
        value: (u = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o,
              u,
              c = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = c.length > 0 && undefined !== c[0] ? c[0] : "BANDWIDTH", r = c.length > 1 && undefined !== c[1] ? c[1] : {}, n = c.length > 2 && undefined !== c[2] ? c[2] : undefined, i = c.length > 3 && undefined !== c[3] && c[3], Ke.isFunction(n) && (i = n, n = undefined), Ke.isFunction(t) && (i = t, t = "BANDWIDTH"), Ke.isFunction(r) && (i = r, r = {}), "string" == typeof r && (r = {
                  privateKey: r
                }), i) {
                  e.next = 10;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.unfreezeBalance, t, r, n));

              case 10:
                if (["BANDWIDTH", "ENERGY"].includes(t)) {
                  e.next = 12;
                  break;
                }

                return e.abrupt("return", i('Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"'));

              case 12:
                if ((r = ot({
                  privateKey: this.tronWeb.defaultPrivateKey,
                  address: this.tronWeb.defaultAddress.hex
                }, r)).privateKey || r.address) {
                  e.next = 15;
                  break;
                }

                return e.abrupt("return", i("Function requires either a private key or address to be set"));

              case 15:
                return e.prev = 15, s = r.privateKey ? this.tronWeb.address.fromPrivateKey(r.privateKey) : r.address, e.next = 19, this.tronWeb.transactionBuilder.unfreezeBalance(t, s, n);

              case 19:
                return a = e.sent, e.next = 22, this.sign(a, r.privateKey || undefined);

              case 22:
                return o = e.sent, e.next = 25, this.sendRawTransaction(o);

              case 25:
                return u = e.sent, e.abrupt("return", i(null, u));

              case 29:
                return e.prev = 29, e.t0 = e.catch(15), e.abrupt("return", i(e.t0));

              case 32:
              case "end":
                return e.stop();
            }
          }, e, this, [[15, 29]]);
        })), function () {
          return u.apply(this, arguments);
        })
      }, {
        key: "updateAccount",
        value: (o = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = u.length > 0 && undefined !== u[0] && u[0], r = u.length > 1 && undefined !== u[1] ? u[1] : {}, n = u.length > 2 && undefined !== u[2] && u[2], Ke.isFunction(r) && (n = r, r = {}), "string" == typeof r && (r = {
                  privateKey: r
                }), n) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.updateAccount, t, r));

              case 7:
                if (Ke.isString(t) && t.length) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return", n("Name must be a string"));

              case 9:
                if ((r = ot({
                  privateKey: this.tronWeb.defaultPrivateKey,
                  address: this.tronWeb.defaultAddress.hex
                }, r)).privateKey || r.address) {
                  e.next = 12;
                  break;
                }

                return e.abrupt("return", n("Function requires either a private key or address to be set"));

              case 12:
                return e.prev = 12, i = r.privateKey ? this.tronWeb.address.fromPrivateKey(r.privateKey) : r.address, e.next = 16, this.tronWeb.transactionBuilder.updateAccount(t, i);

              case 16:
                return s = e.sent, e.next = 19, this.sign(s, r.privateKey || undefined);

              case 19:
                return a = e.sent, e.next = 22, this.sendRawTransaction(a);

              case 22:
                return o = e.sent, e.abrupt("return", n(null, o));

              case 26:
                return e.prev = 26, e.t0 = e.catch(12), e.abrupt("return", n(e.t0));

              case 29:
              case "end":
                return e.stop();
            }
          }, e, this, [[12, 26]]);
        })), function () {
          return o.apply(this, arguments);
        })
      }, {
        key: "signMessage",
        value: function () {
          return this.sign.apply(this, arguments);
        }
      }, {
        key: "sendAsset",
        value: function () {
          return this.sendToken.apply(this, arguments);
        }
      }, {
        key: "send",
        value: function () {
          return this.sendTransaction.apply(this, arguments);
        }
      }, {
        key: "sendTrx",
        value: function () {
          return this.sendTransaction.apply(this, arguments);
        }
      }, {
        key: "broadcast",
        value: function () {
          return this.sendRawTransaction.apply(this, arguments);
        }
      }, {
        key: "signTransaction",
        value: function () {
          return this.sign.apply(this, arguments);
        }
      }, {
        key: "getProposal",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return t ? !Ke.isInteger(e) || e < 0 ? t("Invalid proposalID provided") : void this.tronWeb.fullNode.request("wallet/getproposalbyid", {
            id: parseInt(e)
          }, "post").then(function (e) {
            t(null, e);
          }).catch(function (e) {
            return t(e);
          }) : this.injectPromise(this.getProposal, e);
        }
      }, {
        key: "listProposals",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!e) return this.injectPromise(this.listProposals);
          this.tronWeb.fullNode.request("wallet/listproposals", {}, "post").then(function (t) {
            var r = t.proposals;
            e(null, undefined === r ? [] : r);
          }).catch(function (t) {
            return e(t);
          });
        }
      }, {
        key: "getChainParameters",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!e) return this.injectPromise(this.getChainParameters);
          this.tronWeb.fullNode.request("wallet/getchainparameters", {}, "post").then(function (t) {
            var r = t.chainParameter;
            e(null, undefined === r ? [] : r);
          }).catch(function (t) {
            return e(t);
          });
        }
      }, {
        key: "getAccountResources",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex,
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return t ? this.tronWeb.isAddress(e) ? void this.tronWeb.fullNode.request("wallet/getaccountresource", {
            address: this.tronWeb.address.toHex(e)
          }, "post").then(function (e) {
            t(null, e);
          }).catch(function (e) {
            return t(e);
          }) : t("Invalid address provided") : this.injectPromise(this.getAccountResources, e);
        }
      }, {
        key: "getExchangeByID",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return t ? !Ke.isInteger(e) || e < 0 ? t("Invalid exchangeID provided") : void this.tronWeb.fullNode.request("wallet/getexchangebyid", {
            id: e
          }, "post").then(function (e) {
            t(null, e);
          }).catch(function (e) {
            return t(e);
          }) : this.injectPromise(this.getExchangeByID, e);
        }
      }, {
        key: "listExchanges",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!e) return this.injectPromise(this.listExchanges);
          this.tronWeb.fullNode.request("wallet/listexchanges", {}, "post").then(function (t) {
            var r = t.exchanges;
            e(null, undefined === r ? [] : r);
          }, "post").catch(function (t) {
            return e(t);
          });
        }
      }, {
        key: "listExchangesPaginated",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : 10,
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : 0,
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          if (Ke.isFunction(t) && (r = t, t = 0), Ke.isFunction(e) && (r = e, e = 10), !r) return this.injectPromise(this.listExchangesPaginated, e, t);
          this.tronWeb.fullNode.request("wallet/getpaginatedexchangelist", {
            limit: e,
            offset: t
          }, "post").then(function (e) {
            var t = e.exchanges;
            r(null, undefined === t ? [] : t);
          }).catch(function (e) {
            return r(e);
          });
        }
      }, {
        key: "getNodeInfo",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!e) return this.injectPromise(this.getNodeInfo);
          this.tronWeb.fullNode.request("wallet/getnodeinfo", {}, "post").then(function (t) {
            e(null, t);
          }, "post").catch(function (t) {
            return e(t);
          });
        }
      }, {
        key: "getTokenListByName",
        value: function () {
          var e = this,
              t = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              r = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return r ? (Ke.isInteger(t) && (t = t.toString()), Ke.isString(t) && t.length ? void this.tronWeb.fullNode.request("wallet/getassetissuelistbyname", {
            value: this.tronWeb.fromUtf8(t)
          }, "post").then(function (t) {
            if (Array.isArray(t.assetIssue)) r(null, t.assetIssue.map(function (t) {
              return e._parseToken(t);
            }));else if (!t.name) return r("Token does not exist");
            r(null, e._parseToken(t));
          }).catch(function (e) {
            return r(e);
          }) : r("Invalid token ID provided")) : this.injectPromise(this.getTokenListByName, t);
        }
      }, {
        key: "getTokenByID",
        value: function () {
          var e = this,
              t = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              r = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return r ? (Ke.isInteger(t) && (t = t.toString()), Ke.isString(t) && t.length ? void this.tronWeb.fullNode.request("wallet/getassetissuebyid", {
            value: t
          }, "post").then(function (t) {
            if (!t.name) return r("Token does not exist");
            r(null, e._parseToken(t));
          }).catch(function (e) {
            return r(e);
          }) : r("Invalid token ID provided")) : this.injectPromise(this.getTokenByID, t);
        }
      }, {
        key: "getReward",
        value: (a = f()(l.a.mark(function e(t) {
          var r,
              n,
              i = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return r = i.length > 1 && undefined !== i[1] ? i[1] : {}, n = i.length > 2 && undefined !== i[2] && i[2], r.confirmed = true, e.abrupt("return", this._getReward(t, r, n));

              case 4:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e) {
          return a.apply(this, arguments);
        })
      }, {
        key: "getUnconfirmedReward",
        value: (s = f()(l.a.mark(function e(t) {
          var r,
              n,
              i = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return r = i.length > 1 && undefined !== i[1] ? i[1] : {}, n = i.length > 2 && undefined !== i[2] && i[2], r.confirmed = false, e.abrupt("return", this._getReward(t, r, n));

              case 4:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e) {
          return s.apply(this, arguments);
        })
      }, {
        key: "getBrokerage",
        value: (i = f()(l.a.mark(function e(t) {
          var r,
              n,
              i = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return r = i.length > 1 && undefined !== i[1] ? i[1] : {}, n = i.length > 2 && undefined !== i[2] && i[2], r.confirmed = true, e.abrupt("return", this._getBrokerage(t, r, n));

              case 4:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e) {
          return i.apply(this, arguments);
        })
      }, {
        key: "getUnconfirmedBrokerage",
        value: (n = f()(l.a.mark(function e(t) {
          var r,
              n,
              i = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return r = i.length > 1 && undefined !== i[1] ? i[1] : {}, n = i.length > 2 && undefined !== i[2] && i[2], r.confirmed = false, e.abrupt("return", this._getBrokerage(t, r, n));

              case 4:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e) {
          return n.apply(this, arguments);
        })
      }, {
        key: "_getReward",
        value: (r = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = s.length > 0 && undefined !== s[0] ? s[0] : this.tronWeb.defaultAddress.hex, r = s.length > 1 ? s[1] : undefined, n = s.length > 2 && undefined !== s[2] && s[2], Ke.isFunction(r) && (n = r, r = {}), Ke.isFunction(t) ? (n = t, t = this.tronWeb.defaultAddress.hex) : Ke.isObject(t) && (r = t, t = this.tronWeb.defaultAddress.hex), n) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this._getReward, t, r));

              case 7:
                if (!this.validator.notValid([{
                  name: "origin",
                  type: "address",
                  value: t
                }], n)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return");

              case 9:
                i = {
                  address: ut(t)
                }, this.tronWeb[r.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(r.confirmed ? "solidity" : "", "/getReward"), i, "post").then(function () {
                  var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : {};
                  if (undefined === e.reward) return n("Not found.");
                  n(null, e.reward);
                }).catch(function (e) {
                  return n(e);
                });

              case 11:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function () {
          return r.apply(this, arguments);
        })
      }, {
        key: "_getBrokerage",
        value: (t = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = s.length > 0 && undefined !== s[0] ? s[0] : this.tronWeb.defaultAddress.hex, r = s.length > 1 ? s[1] : undefined, n = s.length > 2 && undefined !== s[2] && s[2], Ke.isFunction(r) && (n = r, r = {}), Ke.isFunction(t) ? (n = t, t = this.tronWeb.defaultAddress.hex) : Ke.isObject(t) && (r = t, t = this.tronWeb.defaultAddress.hex), n) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this._getBrokerage, t, r));

              case 7:
                if (!this.validator.notValid([{
                  name: "origin",
                  type: "address",
                  value: t
                }], n)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return");

              case 9:
                i = {
                  address: ut(t)
                }, this.tronWeb[r.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(r.confirmed ? "solidity" : "", "/getBrokerage"), i, "post").then(function () {
                  var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : {};
                  if (undefined === e.brokerage) return n("Not found.");
                  n(null, e.brokerage);
                }).catch(function (e) {
                  return n(e);
                });

              case 11:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function () {
          return t.apply(this, arguments);
        })
      }], [{
        key: "verifySignature",
        value: function (e, t, r) {
          var n = !(arguments.length > 3 && undefined !== arguments[3]) || arguments[3];
          e = e.replace(/^0x/, ""), r = r.replace(/^0x/, "");
          var i = [].concat(R()(ae(n ? "TRON Signed Message:\n32" : "Ethereum Signed Message:\n32")), R()(Ke.code.hexStr2byteArray(e))),
              s = ie(i),
              a = oe(s, {
            recoveryParam: "1c" == r.substring(128, 130) ? 1 : 0,
            r: "0x" + r.substring(0, 64),
            s: "0x" + r.substring(64, 128)
          }),
              o = "41" + a.substr(2),
              u = At.address.fromHex(o);
          return u == At.address.fromHex(t);
        }
      }, {
        key: "signString",
        value: function (e, t) {
          var r = !(arguments.length > 2 && undefined !== arguments[2]) || arguments[2];
          e = e.replace(/^0x/, "");
          var n = {
            toHexString: function () {
              return "0x" + t;
            },
            value: t
          },
              i = new ue(n),
              s = [].concat(R()(ae(r ? "TRON Signed Message:\n32" : "Ethereum Signed Message:\n32")), R()(Ke.code.hexStr2byteArray(e))),
              a = ie(s),
              o = i.signDigest(a),
              u = ["0x", o.r.substring(2), o.s.substring(2), Number(o.v).toString(16)].join("");
          return u;
        }
      }]), e;
    }();

    function dt(e, t) {
      var r = Object.keys(e);

      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(e);
        t && (n = n.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), r.push.apply(r, n);
      }

      return r;
    }

    function lt(e) {
      for (var t = 1; t < arguments.length; t++) {
        var r = null != arguments[t] ? arguments[t] : {};
        t % 2 ? dt(Object(r), true).forEach(function (t) {
          N()(e, t, r[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : dt(Object(r)).forEach(function (t) {
          Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
        });
      }

      return e;
    }

    var ht = function (e) {
      return e.map(function (e) {
        return e.type;
      });
    },
        ft = function (e, t) {
      var r = e.map(function (e) {
        return e.name;
      }).filter(function (e) {
        return !!e;
      }),
          n = e.map(function (e) {
        return e.type;
      });
      return Ke.abi.decodeParams(r, n, t);
    },
        vt = function () {
      function e(t, r) {
        b()(this, e), this.tronWeb = t.tronWeb, this.contract = t, this.abi = r, this.name = r.name || (r.name = r.type), this.inputs = r.inputs || [], this.outputs = r.outputs || [], this.functionSelector = function (e) {
          return e.name + "(" + ht(e.inputs || []).join(",") + ")";
        }(r), this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8), this.injectPromise = Ge()(this), this.defaultOptions = {
          feeLimit: this.tronWeb.feeLimit,
          callValue: 0,
          userFeePercentage: 100,
          shouldPollResponse: false
        };
      }

      var t, r, n;
      return y()(e, [{
        key: "decodeInput",
        value: function (e) {
          return ft(this.inputs, "0x" + e);
        }
      }, {
        key: "onMethod",
        value: function () {
          for (var e = this, t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];

          var i = ht(this.inputs);
          return r.forEach(function (t, n) {
            "address" == i[n] && (r[n] = e.tronWeb.address.toHex(t).replace(V, "0x")), "address[]" == i[n] && (r[n] = r[n].map(function (t) {
              return e.tronWeb.address.toHex(t).replace(V, "0x");
            }));
          }), {
            call: function () {
              for (var t = arguments.length, n = new Array(t), s = 0; s < t; s++) n[s] = arguments[s];

              return e._call.apply(e, [i, r].concat(n));
            },
            send: function () {
              for (var t = arguments.length, n = new Array(t), s = 0; s < t; s++) n[s] = arguments[s];

              return e._send.apply(e, [i, r].concat(n));
            },
            watch: function () {
              return e._watch.apply(e, arguments);
            }
          };
        }
      }, {
        key: "_call",
        value: (n = f()(l.a.mark(function e(t, r) {
          var n,
              i,
              s,
              a,
              o = this,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (n = u.length > 2 && undefined !== u[2] ? u[2] : {}, i = u.length > 3 && undefined !== u[3] && u[3], Ke.isFunction(n) && (i = n, n = {}), i) {
                  e.next = 5;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this._call, t, r, n));

              case 5:
                if (t.length === r.length) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", i("Invalid argument count provided"));

              case 7:
                if (this.contract.address) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return", i("Smart contract is missing address"));

              case 9:
                if (this.contract.deployed) {
                  e.next = 11;
                  break;
                }

                return e.abrupt("return", i("Calling smart contracts requires you to load the contract first"));

              case 11:
                if (s = this.abi.stateMutability, ["pure", "view"].includes(s.toLowerCase())) {
                  e.next = 14;
                  break;
                }

                return e.abrupt("return", i('Methods with state mutability "'.concat(s, '" must use send()')));

              case 14:
                n = lt(lt({}, this.defaultOptions), {}, {
                  from: this.tronWeb.defaultAddress.hex
                }, n), a = r.map(function (e, r) {
                  return {
                    type: t[r],
                    value: e
                  };
                }), this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address, this.functionSelector, n, a, !!n.from && this.tronWeb.address.toHex(n.from), function (e, t) {
                  if (e) return i(e);
                  if (!Ke.hasProperty(t, "constant_result")) return i("Failed to execute");

                  try {
                    var r = t.constant_result[0].length;

                    if (0 === r || r % 64 == 8) {
                      var n = "The call has been reverted or has thrown an error.";

                      if (0 !== r) {
                        n += " Error message: ";

                        for (var s = "", a = t.constant_result[0].substring(8), u = 0; u < r - 8; u += 64) s += o.tronWeb.toUtf8(a.substring(u, u + 64));

                        n += s.replace(/(\u0000|\u000b|\f)+/g, " ").replace(/ +/g, " ").replace(/\s+$/g, "");
                      }

                      return i(n);
                    }

                    var c = ft(o.outputs, "0x" + t.constant_result[0]);
                    return 1 === c.length && (c = c[0]), i(null, c);
                  } catch (e) {
                    return i(e);
                  }
                });

              case 17:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t) {
          return n.apply(this, arguments);
        })
      }, {
        key: "_send",
        value: (r = f()(l.a.mark(function e(t, r) {
          var n,
              i,
              s,
              a,
              o,
              u,
              c,
              d,
              h,
              v,
              p,
              g = this,
              b = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (n = b.length > 2 && undefined !== b[2] ? b[2] : {}, i = b.length > 3 && undefined !== b[3] ? b[3] : this.tronWeb.defaultPrivateKey, s = b.length > 4 && undefined !== b[4] && b[4], Ke.isFunction(i) && (s = i, i = this.tronWeb.defaultPrivateKey), Ke.isFunction(n) && (s = n, n = {}), s) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this._send, t, r, n, i));

              case 7:
                if (t.length === r.length) {
                  e.next = 9;
                  break;
                }

                throw new Error("Invalid argument count provided");

              case 9:
                if (this.contract.address) {
                  e.next = 11;
                  break;
                }

                return e.abrupt("return", s("Smart contract is missing address"));

              case 11:
                if (this.contract.deployed) {
                  e.next = 13;
                  break;
                }

                return e.abrupt("return", s("Calling smart contracts requires you to load the contract first"));

              case 13:
                if (a = this.abi.stateMutability, !["pure", "view"].includes(a.toLowerCase())) {
                  e.next = 16;
                  break;
                }

                return e.abrupt("return", s('Methods with state mutability "'.concat(a, '" must use call()')));

              case 16:
                return ["payable"].includes(a.toLowerCase()) || (n.callValue = 0), n = lt(lt({}, this.defaultOptions), {}, {
                  from: this.tronWeb.defaultAddress.hex
                }, n), o = r.map(function (e, r) {
                  return {
                    type: t[r],
                    value: e
                  };
                }), e.prev = 19, u = i ? this.tronWeb.address.fromPrivateKey(i) : this.tronWeb.defaultAddress.base58, e.next = 23, this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address, this.functionSelector, n, o, this.tronWeb.address.toHex(u));

              case 23:
                if ((c = e.sent).result && c.result.result) {
                  e.next = 26;
                  break;
                }

                return e.abrupt("return", s("Unknown error: " + JSON.stringify(c, null, 2)));

              case 26:
                return e.next = 28, this.tronWeb.trx.sign(c.transaction, i);

              case 28:
                if ((d = e.sent).signature) {
                  e.next = 33;
                  break;
                }

                if (i) {
                  e.next = 32;
                  break;
                }

                return e.abrupt("return", s("Transaction was not signed properly"));

              case 32:
                return e.abrupt("return", s("Invalid private key provided"));

              case 33:
                return e.next = 35, this.tronWeb.trx.sendRawTransaction(d);

              case 35:
                if (!(h = e.sent).code) {
                  e.next = 40;
                  break;
                }

                return v = {
                  error: h.code,
                  message: h.code
                }, h.message && (v.message = this.tronWeb.toUtf8(h.message)), e.abrupt("return", s(v));

              case 40:
                if (n.shouldPollResponse) {
                  e.next = 42;
                  break;
                }

                return e.abrupt("return", s(null, d.txID));

              case 42:
                (p = function () {
                  var e = f()(l.a.mark(function e() {
                    var t,
                        r,
                        i,
                        a = arguments;
                    return l.a.wrap(function (e) {
                      for (;;) switch (e.prev = e.next) {
                        case 0:
                          if (20 !== (t = a.length > 0 && undefined !== a[0] ? a[0] : 0)) {
                            e.next = 3;
                            break;
                          }

                          return e.abrupt("return", s({
                            error: "Cannot find result in solidity node",
                            transaction: d
                          }));

                        case 3:
                          return e.next = 5, g.tronWeb.trx.getTransactionInfo(d.txID);

                        case 5:
                          if (r = e.sent, Object.keys(r).length) {
                            e.next = 8;
                            break;
                          }

                          return e.abrupt("return", setTimeout(function () {
                            p(t + 1);
                          }, 3e3));

                        case 8:
                          if (!r.result || "FAILED" !== r.result) {
                            e.next = 10;
                            break;
                          }

                          return e.abrupt("return", s({
                            error: g.tronWeb.toUtf8(r.resMessage),
                            transaction: d,
                            output: r
                          }));

                        case 10:
                          if (Ke.hasProperty(r, "contractResult")) {
                            e.next = 12;
                            break;
                          }

                          return e.abrupt("return", s({
                            error: "Failed to execute: " + JSON.stringify(r, null, 2),
                            transaction: d,
                            output: r
                          }));

                        case 12:
                          if (!n.rawResponse) {
                            e.next = 14;
                            break;
                          }

                          return e.abrupt("return", s(null, r));

                        case 14:
                          if (1 === (i = ft(g.outputs, "0x" + r.contractResult[0])).length && (i = i[0]), !n.keepTxID) {
                            e.next = 18;
                            break;
                          }

                          return e.abrupt("return", s(null, [d.txID, i]));

                        case 18:
                          return e.abrupt("return", s(null, i));

                        case 19:
                        case "end":
                          return e.stop();
                      }
                    }, e);
                  }));
                  return function () {
                    return e.apply(this, arguments);
                  };
                }())(), e.next = 49;
                break;

              case 46:
                return e.prev = 46, e.t0 = e.catch(19), e.abrupt("return", s(e.t0));

              case 49:
              case "end":
                return e.stop();
            }
          }, e, this, [[19, 46]]);
        })), function (e, t) {
          return r.apply(this, arguments);
        })
      }, {
        key: "_watch",
        value: (t = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o,
              u = this,
              c = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = c.length > 0 && undefined !== c[0] ? c[0] : {}, r = c.length > 1 && undefined !== c[1] && c[1], Ke.isFunction(t) && (r = t, t = {}), Ke.isFunction(r)) {
                  e.next = 5;
                  break;
                }

                throw new Error("Expected callback to be provided");

              case 5:
                if (this.contract.address) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", r("Smart contract is missing address"));

              case 7:
                if (this.abi.type && /event/i.test(this.abi.type)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return", r("Invalid method type for event watching"));

              case 9:
                if (this.tronWeb.eventServer) {
                  e.next = 11;
                  break;
                }

                return e.abrupt("return", r("No event server configured"));

              case 11:
                return n = false, i = false, s = Date.now() - 1e3, a = function () {
                  var e = f()(l.a.mark(function e() {
                    var r, n, a, o, c, d;
                    return l.a.wrap(function (e) {
                      for (;;) switch (e.prev = e.next) {
                        case 0:
                          return e.prev = 0, r = {
                            since: s,
                            eventName: u.name,
                            sort: "block_timestamp",
                            blockNumber: "st",
                            filters: t.filters
                          }, t.resourceNode && (/full/i.test(t.resourceNode) ? r.onlyUnconfirmed = true : r.onlyConfirmed = true), e.next = 5, u.tronWeb.event.getEventsByContractAddress(u.contract.address, r);

                        case 5:
                          return n = e.sent, a = n.sort(function (e, t) {
                            return t.block - e.block;
                          }), o = Ye()(a, 1), c = o[0], d = n.filter(function (e, r) {
                            return !(t.resourceNode && e.resourceNode && t.resourceNode.toLowerCase() !== e.resourceNode.toLowerCase() || n.slice(0, r).some(function (t) {
                              return JSON.stringify(t) == JSON.stringify(e);
                            }) || i && !(e.block > i));
                          }), c && (i = c.block), e.abrupt("return", d);

                        case 12:
                          return e.prev = 12, e.t0 = e.catch(0), e.abrupt("return", Promise.reject(e.t0));

                        case 15:
                        case "end":
                          return e.stop();
                      }
                    }, e, null, [[0, 12]]);
                  }));
                  return function () {
                    return e.apply(this, arguments);
                  };
                }(), o = function () {
                  n && clearInterval(n), n = setInterval(function () {
                    a().then(function (e) {
                      return e.forEach(function (e) {
                        r(null, Ke.parseEvent(e, u.abi));
                      });
                    }).catch(function (e) {
                      return r(e);
                    });
                  }, 3e3);
                }, e.next = 18, a();

              case 18:
                return o(), e.abrupt("return", {
                  start: o,
                  stop: function () {
                    n && (clearInterval(n), n = false);
                  }
                });

              case 20:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function () {
          return t.apply(this, arguments);
        })
      }]), e;
    }(),
        pt = function () {
      function e() {
        var t = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
            r = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : [],
            n = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
        if (b()(this, e), !t || !t instanceof At) throw new Error("Expected instance of TronWeb");
        this.tronWeb = t, this.injectPromise = Ge()(this), this.address = n, this.abi = r, this.eventListener = false, this.bytecode = false, this.deployed = false, this.lastBlock = false, this.methods = {}, this.methodInstances = {}, this.props = [], this.tronWeb.isAddress(n) ? this.deployed = true : this.address = false, this.loadAbi(r);
      }

      var t, r, n, i;
      return y()(e, [{
        key: "_getEvents",
        value: (i = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o = this,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return t = u.length > 0 && undefined !== u[0] ? u[0] : {}, e.next = 3, this.tronWeb.event.getEventsByContractAddress(this.address, t);

              case 3:
                return r = e.sent, n = r.sort(function (e, t) {
                  return t.block - e.block;
                }), i = Ye()(n, 1), s = i[0], a = r.filter(function (e, n) {
                  return !(t.resourceNode && e.resourceNode && t.resourceNode.toLowerCase() !== e.resourceNode.toLowerCase() || r.slice(0, n).some(function (t) {
                    return JSON.stringify(t) == JSON.stringify(e);
                  }) || o.lastBlock && !(e.block > o.lastBlock));
                }), s && (this.lastBlock = s.block), e.abrupt("return", a);

              case 8:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function () {
          return i.apply(this, arguments);
        })
      }, {
        key: "_startEventListener",
        value: (n = f()(l.a.mark(function e() {
          var t,
              r,
              n = this,
              i = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = i.length > 0 && undefined !== i[0] ? i[0] : {}, r = i.length > 1 ? i[1] : undefined, Ke.isFunction(t) && (r = t, t = {}), this.eventListener && clearInterval(this.eventListener), this.tronWeb.eventServer) {
                  e.next = 6;
                  break;
                }

                throw new Error("Event server is not configured");

              case 6:
                if (this.address) {
                  e.next = 8;
                  break;
                }

                throw new Error("Contract is not configured with an address");

              case 8:
                return this.eventCallback = r, e.next = 11, this._getEvents(t);

              case 11:
                this.eventListener = setInterval(function () {
                  n._getEvents(t).then(function (e) {
                    return e.forEach(function (e) {
                      n.eventCallback && n.eventCallback(e);
                    });
                  }).catch(function (e) {
                    console.error("Failed to get event list", e);
                  });
                }, 3e3);

              case 12:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function () {
          return n.apply(this, arguments);
        })
      }, {
        key: "_stopEventListener",
        value: function () {
          this.eventListener && (clearInterval(this.eventListener), this.eventListener = false, this.eventCallback = false);
        }
      }, {
        key: "hasProperty",
        value: function (e) {
          return this.hasOwnProperty(e) || this.__proto__.hasOwnProperty(e);
        }
      }, {
        key: "loadAbi",
        value: function (e) {
          var t = this;
          this.abi = e, this.methods = {}, this.props.forEach(function (e) {
            return delete t[e];
          }), e.forEach(function (e) {
            if (e.type && !/constructor/i.test(e.type)) {
              var r = new vt(t, e),
                  n = r.onMethod.bind(r),
                  i = r.name,
                  s = r.functionSelector,
                  a = r.signature;
              t.methods[i] = n, t.methods[s] = n, t.methods[a] = n, t.methodInstances[i] = r, t.methodInstances[s] = r, t.methodInstances[a] = r, t.hasProperty(i) || (t[i] = n, t.props.push(i)), t.hasProperty(s) || (t[s] = n, t.props.push(s)), t.hasProperty(a) || (t[a] = n, t.props.push(a));
            }
          });
        }
      }, {
        key: "decodeInput",
        value: function (e) {
          var t = e.substring(0, 8),
              r = e.substring(8);
          if (!this.methodInstances[t]) throw new Error("Contract method " + t + " not found");
          return {
            name: this.methodInstances[t].name,
            params: this.methodInstances[t].decodeInput(r)
          };
        }
      }, {
        key: "new",
        value: (r = f()(l.a.mark(function e(t) {
          var r,
              n,
              i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (r = u.length > 1 && undefined !== u[1] ? u[1] : this.tronWeb.defaultPrivateKey, n = u.length > 2 && undefined !== u[2] && u[2], Ke.isFunction(r) && (n = r, r = this.tronWeb.defaultPrivateKey), n) {
                  e.next = 5;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.new, t, r));

              case 5:
                return e.prev = 5, i = this.tronWeb.address.fromPrivateKey(r), e.next = 9, this.tronWeb.transactionBuilder.createSmartContract(t, i);

              case 9:
                return s = e.sent, e.next = 12, this.tronWeb.trx.sign(s, r);

              case 12:
                return a = e.sent, e.next = 15, this.tronWeb.trx.sendRawTransaction(a);

              case 15:
                if (!(o = e.sent).code) {
                  e.next = 18;
                  break;
                }

                return e.abrupt("return", n({
                  error: o.code,
                  message: this.tronWeb.toUtf8(o.message)
                }));

              case 18:
                return e.next = 20, Ke.sleep(3e3);

              case 20:
                return e.abrupt("return", this.at(a.contract_address, n));

              case 23:
                return e.prev = 23, e.t0 = e.catch(5), e.abrupt("return", n(e.t0));

              case 26:
              case "end":
                return e.stop();
            }
          }, e, this, [[5, 23]]);
        })), function (e) {
          return r.apply(this, arguments);
        })
      }, {
        key: "at",
        value: (t = f()(l.a.mark(function e(t) {
          var r,
              n,
              i = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (r = i.length > 1 && undefined !== i[1] && i[1]) {
                  e.next = 3;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.at, t));

              case 3:
                return e.prev = 3, e.next = 6, this.tronWeb.trx.getContract(t);

              case 6:
                if ((n = e.sent).contract_address) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return", r("Unknown error: " + JSON.stringify(n, null, 2)));

              case 9:
                return this.address = n.contract_address, this.bytecode = n.bytecode, this.deployed = true, this.loadAbi(n.abi && n.abi.entrys ? n.abi.entrys : []), e.abrupt("return", r(null, this));

              case 16:
                if (e.prev = 16, e.t0 = e.catch(3), !e.t0.toString().includes("does not exist")) {
                  e.next = 20;
                  break;
                }

                return e.abrupt("return", r("Contract has not been deployed on the network"));

              case 20:
                return e.abrupt("return", r(e.t0));

              case 21:
              case "end":
                return e.stop();
            }
          }, e, this, [[3, 16]]);
        })), function (e) {
          return t.apply(this, arguments);
        })
      }, {
        key: "events",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : {},
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          if (Ke.isFunction(e) && (t = e, e = {}), !Ke.isFunction(t)) throw new Error("Callback function expected");
          var r = this;
          return {
            start: function () {
              var n = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
              return n ? (r._startEventListener(e, t).then(function () {
                n();
              }).catch(function (e) {
                n(e);
              }), this) : (r._startEventListener(e, t), this);
            },
            stop: function () {
              r._stopEventListener();
            }
          };
        }
      }]), e;
    }(),
        gt = function () {
      function e() {
        var t = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
            r = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : {};
        if (b()(this, e), !t || !t instanceof At) throw new Error("Expected instance of TronWeb");
        this.tronWeb = t, this.pluginNoOverride = ["register"], this.disablePlugins = r.disablePlugins;
      }

      return y()(e, [{
        key: "register",
        value: function (e, t) {
          var r = {
            requires: "0.0.0",
            components: {}
          },
              n = {
            libs: [],
            plugged: [],
            skipped: []
          };
          if (this.disablePlugins) return n.error = "This instance of TronWeb has plugins disabled.", n;
          var i = new e(this.tronWeb);
          if (Ke.isFunction(i.pluginInterface) && (r = i.pluginInterface(t)), !ze.a.satisfies(At.version, r.requires)) throw new Error("The plugin is not compatible with this version of TronWeb");

          if (r.fullClass) {
            var s = i.constructor.name,
                a = s.substring(0, 1).toLowerCase() + s.substring(1);
            s !== a && (At[s] = e, this.tronWeb[a] = i, n.libs.push(s));
          } else for (var o in r.components) if (this.tronWeb.hasOwnProperty(o)) {
            var u = r.components[o],
                c = this.tronWeb[o].pluginNoOverride || [];

            for (var d in u) "constructor" === d || this.tronWeb[o][d] && (c.includes(d) || /^_/.test(d)) ? n.skipped.push(d) : (this.tronWeb[o][d] = u[d].bind(this.tronWeb[o]), n.plugged.push(d));
          }

          return n;
        }
      }]), e;
    }(),
        bt = r(21),
        mt = r.n(bt),
        yt = function () {
      function e() {
        var t = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
        if (b()(this, e), !(t && t instanceof At)) throw new Error("Expected instance of TronWeb");
        this.tronWeb = t, this.injectPromise = Ge()(this);
      }

      return y()(e, [{
        key: "setServer",
        value: function () {
          var e = this,
              t = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              r = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : "healthcheck";
          if (!t) return this.tronWeb.eventServer = false;
          if (Ke.isString(t) && (t = new Re.HttpProvider(t)), !this.tronWeb.isValidProvider(t)) throw new Error("Invalid event server provided");
          this.tronWeb.eventServer = t, this.tronWeb.eventServer.isConnected = function () {
            return e.tronWeb.eventServer.request(r).then(function () {
              return true;
            }).catch(function () {
              return false;
            });
          };
        }
      }, {
        key: "getEventsByContractAddress",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : {},
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2],
              n = Object.assign({
            sinceTimestamp: 0,
            eventName: false,
            blockNumber: false,
            size: 20,
            page: 1
          }, t),
              i = n.sinceTimestamp,
              s = n.since,
              a = n.fromTimestamp,
              o = n.eventName,
              u = n.blockNumber,
              c = n.size,
              d = n.page,
              l = n.onlyConfirmed,
              h = n.onlyUnconfirmed,
              f = n.previousLastEventFingerprint,
              v = n.previousFingerprint,
              g = n.fingerprint,
              b = n.rawResponse,
              m = n.sort,
              y = n.filters;
          if (!r) return this.injectPromise(this.getEventsByContractAddress, e, t);
          if (a = a || i || s, !this.tronWeb.eventServer) return r("No event server configured");
          var k = [];
          if (!this.tronWeb.isAddress(e)) return r("Invalid contract address provided");
          if (o && !e) return r("Usage of event name filtering requires a contract address");
          if (undefined !== a && !Ke.isInteger(a)) return r("Invalid fromTimestamp provided");
          if (!Ke.isInteger(c)) return r("Invalid size provided");
          if (c > 200 && (console.warn("Defaulting to maximum accepted size: 200"), c = 200), !Ke.isInteger(d)) return r("Invalid page provided");
          if (u && !o) return r("Usage of block number filtering requires an event name");
          e && k.push(this.tronWeb.address.fromHex(e)), o && k.push(o), u && k.push(u);
          var x = {
            size: c,
            page: d
          };
          return "object" === p()(y) && Object.keys(y).length > 0 && (x.filters = JSON.stringify(y)), a && (x.fromTimestamp = x.since = a), l && (x.onlyConfirmed = l), h && !l && (x.onlyUnconfirmed = h), m && (x.sort = m), (g = g || v || f) && (x.fingerprint = g), this.tronWeb.eventServer.request("event/contract/".concat(k.join("/"), "?").concat(mt.a.stringify(x))).then(function () {
            var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
            return e ? Ke.isArray(e) ? r(null, true === b ? e : e.map(function (e) {
              return Ke.mapEvent(e);
            })) : r(e) : r("Unknown error occurred");
          }).catch(function (e) {
            return r(e.response && e.response.data || e);
          });
        }
      }, {
        key: "getEventsByTransactionID",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
              t = arguments.length > 1 && undefined !== arguments[1] ? arguments[1] : {},
              r = arguments.length > 2 && undefined !== arguments[2] && arguments[2];
          return Ke.isFunction(t) && (r = t, t = {}), r ? this.tronWeb.eventServer ? this.tronWeb.eventServer.request("event/transaction/".concat(e)).then(function () {
            var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
            return e ? Ke.isArray(e) ? r(null, true === t.rawResponse ? e : e.map(function (e) {
              return Ke.mapEvent(e);
            })) : r(e) : r("Unknown error occurred");
          }).catch(function (e) {
            return r(e.response && e.response.data || e);
          }) : r("No event server configured") : this.injectPromise(this.getEventsByTransactionID, e, t);
        }
      }]), e;
    }();

    function kt(e, t) {
      var r = Object.keys(e);

      if (Object.getOwnPropertySymbols) {
        var n = Object.getOwnPropertySymbols(e);
        t && (n = n.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })), r.push.apply(r, n);
      }

      return r;
    }

    function xt(e) {
      for (var t = 1; t < arguments.length; t++) {
        var r = null != arguments[t] ? arguments[t] : {};
        t % 2 ? kt(Object(r), true).forEach(function (t) {
          N()(e, t, r[t]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : kt(Object(r)).forEach(function (t) {
          Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));
        });
      }

      return e;
    }

    var wt = function () {
      function e(t) {
        var r = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
            n = arguments.length > 2 && undefined !== arguments[2] && arguments[2],
            i = arguments.length > 3 && undefined !== arguments[3] && arguments[3];
        b()(this, e), this.mainchain = n;
        var s = t.fullHost,
            a = t.fullNode,
            o = t.solidityNode,
            u = t.eventServer,
            c = t.mainGatewayAddress,
            d = t.sideGatewayAddress,
            l = t.sideChainId;
        this.sidechain = new r(s || a, s || o, s || u, i), this.isAddress = this.mainchain.isAddress, this.utils = this.mainchain.utils, this.setMainGatewayAddress(c), this.setSideGatewayAddress(d), this.setChainId(l), this.injectPromise = Ge()(this), this.validator = new Qe(this.sidechain);
        var h = this;
        this.sidechain.trx.sign = function () {
          return h.sign.apply(h, arguments);
        }, this.sidechain.trx.multiSign = function () {
          return h.multiSign.apply(h, arguments);
        };
      }

      var t, r, n, i, s, a, o, u, c, d, h, v, p, g, m, k, x, w, I, A, P;
      return y()(e, [{
        key: "setMainGatewayAddress",
        value: function (e) {
          if (!this.isAddress(e)) throw new Error("Invalid main gateway address provided");
          this.mainGatewayAddress = e;
        }
      }, {
        key: "setSideGatewayAddress",
        value: function (e) {
          if (!this.isAddress(e)) throw new Error("Invalid side gateway address provided");
          this.sideGatewayAddress = e;
        }
      }, {
        key: "setChainId",
        value: function (e) {
          if (!this.utils.isString(e) || !e) throw new Error("Invalid side chainId provided");
          this.chainId = e;
        }
      }, {
        key: "signTransaction",
        value: function (e, t) {
          "string" == typeof e && (e = this.utils.code.hexStr2byteArray(e));
          var r = this.utils.code.hexStr2byteArray(this.chainId),
              n = this.utils.code.hexStr2byteArray(t.txID).concat(r),
              i = this.sidechain.utils.ethersUtils.sha256(n),
              s = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(i.replace(/^0x/, "")), e);
          return Array.isArray(t.signature) ? t.signature.includes(s) || t.signature.push(s) : t.signature = [s], t;
        }
      }, {
        key: "multiSign",
        value: (P = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = u.length > 0 && undefined !== u[0] && u[0], r = u.length > 1 && undefined !== u[1] ? u[1] : this.sidechain.defaultPrivateKey, n = u.length > 2 && undefined !== u[2] && u[2], i = u.length > 3 && undefined !== u[3] && u[3], this.utils.isFunction(n) && (i = n, n = 0), this.utils.isFunction(r) && (i = r, r = this.mainchain.defaultPrivateKey, n = 0), i) {
                  e.next = 8;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.multiSign, t, r, n));

              case 8:
                if (this.utils.isObject(t) && t.raw_data && t.raw_data.contract) {
                  e.next = 10;
                  break;
                }

                return e.abrupt("return", i("Invalid transaction provided"));

              case 10:
                if (t.raw_data.contract[0].Permission_id || !(n > 0)) {
                  e.next = 30;
                  break;
                }

                return t.raw_data.contract[0].Permission_id = n, s = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(r)).toLowerCase(), e.next = 15, this.sidechain.trx.getSignWeight(t, n);

              case 15:
                if ("PERMISSION_ERROR" !== (a = e.sent).result.code) {
                  e.next = 18;
                  break;
                }

                return e.abrupt("return", i(a.result.message));

              case 18:
                if (o = false, a.permission.keys.map(function (e) {
                  e.address === s && (o = true);
                }), o) {
                  e.next = 22;
                  break;
                }

                return e.abrupt("return", i(r + " has no permission to sign"));

              case 22:
                if (!a.approved_list || -1 == a.approved_list.indexOf(s)) {
                  e.next = 24;
                  break;
                }

                return e.abrupt("return", i(r + " already sign transaction"));

              case 24:
                if (!a.transaction || !a.transaction.transaction) {
                  e.next = 29;
                  break;
                }

                (t = a.transaction.transaction).raw_data.contract[0].Permission_id = n, e.next = 30;
                break;

              case 29:
                return e.abrupt("return", i("Invalid transaction provided"));

              case 30:
                return e.prev = 30, e.abrupt("return", i(null, this.signTransaction(r, t)));

              case 34:
                e.prev = 34, e.t0 = e.catch(30), i(e.t0);

              case 37:
              case "end":
                return e.stop();
            }
          }, e, this, [[30, 34]]);
        })), function () {
          return P.apply(this, arguments);
        })
      }, {
        key: "sign",
        value: (A = f()(l.a.mark(function e() {
          var t,
              r,
              n,
              i,
              s,
              a,
              o = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = o.length > 0 && undefined !== o[0] && o[0], r = o.length > 1 && undefined !== o[1] ? o[1] : this.sidechain.defaultPrivateKey, n = !(o.length > 2 && undefined !== o[2]) || o[2], i = o.length > 3 && undefined !== o[3] && o[3], s = o.length > 4 && undefined !== o[4] && o[4], this.utils.isFunction(i) && (s = i, i = false), this.utils.isFunction(n) && (s = n, n = true, i = false), this.utils.isFunction(r) && (s = r, r = this.sidechain.defaultPrivateKey, n = true, i = false), s) {
                  e.next = 10;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.sign, t, r, n, i));

              case 10:
                if (!this.utils.isString(t)) {
                  e.next = 21;
                  break;
                }

                if (this.utils.isHex(t)) {
                  e.next = 13;
                  break;
                }

                return e.abrupt("return", s("Expected hex message input"));

              case 13:
                return e.prev = 13, a = this.sidechain.trx.signString(t, r, n), e.abrupt("return", s(null, a));

              case 18:
                e.prev = 18, e.t0 = e.catch(13), s(e.t0);

              case 21:
                if (this.utils.isObject(t)) {
                  e.next = 23;
                  break;
                }

                return e.abrupt("return", s("Invalid transaction provided"));

              case 23:
                if (i || !t.signature) {
                  e.next = 25;
                  break;
                }

                return e.abrupt("return", s("Transaction is already signed"));

              case 25:
                if (e.prev = 25, i) {
                  e.next = 30;
                  break;
                }

                if (this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(r)).toLowerCase() === this.sidechain.address.toHex(t.raw_data.contract[0].parameter.value.owner_address)) {
                  e.next = 30;
                  break;
                }

                return e.abrupt("return", s("Private key does not match address in transaction"));

              case 30:
                return e.abrupt("return", s(null, this.signTransaction(r, t)));

              case 33:
                e.prev = 33, e.t1 = e.catch(25), s(e.t1);

              case 36:
              case "end":
                return e.stop();
            }
          }, e, this, [[13, 18], [25, 33]]);
        })), function () {
          return A.apply(this, arguments);
        })
      }, {
        key: "depositTrx",
        value: (I = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u,
              c = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (i = c.length > 3 && undefined !== c[3] ? c[3] : {}, s = c.length > 4 && undefined !== c[4] ? c[4] : this.mainchain.defaultPrivateKey, a = c.length > 5 && undefined !== c[5] && c[5], this.utils.isFunction(s) && (a = s, s = this.mainchain.defaultPrivateKey), this.utils.isFunction(i) && (a = i, i = {}), a) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.depositTrx, t, r, n, i, s));

              case 7:
                if (!this.validator.notValid([{
                  name: "callValue",
                  type: "integer",
                  value: t,
                  gte: 0
                }, {
                  name: "depositFee",
                  type: "integer",
                  value: r,
                  gte: 0
                }, {
                  name: "feeLimit",
                  type: "integer",
                  value: n,
                  gte: 0,
                  lte: 1e9
                }], a)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return");

              case 9:
                return i = xt({
                  callValue: Number(t) + Number(r),
                  feeLimit: n
                }, i), e.prev = 10, e.next = 13, this.mainchain.contract().at(this.mainGatewayAddress);

              case 13:
                return o = e.sent, e.next = 16, o.depositTRX().send(i, s);

              case 16:
                return u = e.sent, e.abrupt("return", a(null, u));

              case 20:
                return e.prev = 20, e.t0 = e.catch(10), e.abrupt("return", a(e.t0));

              case 23:
              case "end":
                return e.stop();
            }
          }, e, this, [[10, 20]]);
        })), function (e, t, r) {
          return I.apply(this, arguments);
        })
      }, {
        key: "depositTrc10",
        value: (w = f()(l.a.mark(function e(t, r, n, i) {
          var s,
              a,
              o,
              u,
              c,
              d = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (s = d.length > 4 && undefined !== d[4] ? d[4] : {}, a = d.length > 5 && undefined !== d[5] ? d[5] : this.mainchain.defaultPrivateKey, o = d.length > 6 && undefined !== d[6] && d[6], this.utils.isFunction(a) && (o = a, a = this.mainchain.defaultPrivateKey), this.utils.isFunction(s) && (o = s, s = {}), o) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.depositTrc10, t, r, n, i, s, a));

              case 7:
                if (!this.validator.notValid([{
                  name: "tokenValue",
                  type: "integer",
                  value: r,
                  gte: 0
                }, {
                  name: "depositFee",
                  type: "integer",
                  value: n,
                  gte: 0
                }, {
                  name: "feeLimit",
                  type: "integer",
                  value: i,
                  gte: 0,
                  lte: 1e9
                }, {
                  name: "tokenId",
                  type: "integer",
                  value: t,
                  gte: 0
                }], o)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return");

              case 9:
                return s = xt(xt({
                  tokenId: t,
                  tokenValue: r,
                  feeLimit: i
                }, s), {}, {
                  callValue: n
                }), e.prev = 10, e.next = 13, this.mainchain.contract().at(this.mainGatewayAddress);

              case 13:
                return u = e.sent, e.next = 16, u.depositTRC10(t, r).send(s, a);

              case 16:
                c = e.sent, o(null, c), e.next = 23;
                break;

              case 20:
                return e.prev = 20, e.t0 = e.catch(10), e.abrupt("return", o(e.t0));

              case 23:
              case "end":
                return e.stop();
            }
          }, e, this, [[10, 20]]);
        })), function (e, t, r, n) {
          return w.apply(this, arguments);
        })
      }, {
        key: "depositTrc",
        value: (x = f()(l.a.mark(function e(t, r, n, i, s) {
          var a,
              o,
              u,
              c,
              d,
              h,
              f = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (a = f.length > 5 && undefined !== f[5] ? f[5] : {}, o = f.length > 6 && undefined !== f[6] ? f[6] : this.mainchain.defaultPrivateKey, u = f.length > 7 && undefined !== f[7] && f[7], this.utils.isFunction(o) && (u = o, o = this.mainchain.defaultPrivateKey), this.utils.isFunction(a) && (u = a, a = {}), u) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.depositTrc, t, r, n, i, s, a, o));

              case 7:
                if (!this.validator.notValid([{
                  name: "functionSelector",
                  type: "not-empty-string",
                  value: t
                }, {
                  name: "num",
                  type: "integer",
                  value: r,
                  gte: 0
                }, {
                  name: "fee",
                  type: "integer",
                  value: n,
                  gte: 0
                }, {
                  name: "feeLimit",
                  type: "integer",
                  value: i,
                  gte: 0,
                  lte: 1e9
                }, {
                  name: "contractAddress",
                  type: "address",
                  value: s
                }], u)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return");

              case 9:
                if (a = xt(xt({
                  feeLimit: i
                }, a), {}, {
                  callValue: n,
                  tokenId: "",
                  tokenValue: 0
                }), e.prev = 10, c = null, "approve" !== t) {
                  e.next = 21;
                  break;
                }

                return e.next = 15, this.mainchain.contract().at(s);

              case 15:
                return d = e.sent, e.next = 18, d.approve(this.mainGatewayAddress, r).send(a, o);

              case 18:
                c = e.sent, e.next = 44;
                break;

              case 21:
                return e.next = 23, this.mainchain.contract().at(this.mainGatewayAddress);

              case 23:
                h = e.sent, e.t0 = t, e.next = "depositTRC20" === e.t0 ? 27 : "depositTRC721" === e.t0 ? 31 : "retryDeposit" === e.t0 ? 35 : "retryMapping" === e.t0 ? 39 : 43;
                break;

              case 27:
                return e.next = 29, h.depositTRC20(s, r).send(a, o);

              case 29:
                return c = e.sent, e.abrupt("break", 44);

              case 31:
                return e.next = 33, h.depositTRC721(s, r).send(a, o);

              case 33:
                return c = e.sent, e.abrupt("break", 44);

              case 35:
                return e.next = 37, h.retryDeposit(r).send(a, o);

              case 37:
                return c = e.sent, e.abrupt("break", 44);

              case 39:
                return e.next = 41, h.retryMapping(r).send(a, o);

              case 41:
                return c = e.sent, e.abrupt("break", 44);

              case 43:
                return e.abrupt("break", 44);

              case 44:
                u(null, c), e.next = 50;
                break;

              case 47:
                return e.prev = 47, e.t1 = e.catch(10), e.abrupt("return", u(e.t1));

              case 50:
              case "end":
                return e.stop();
            }
          }, e, this, [[10, 47]]);
        })), function (e, t, r, n, i) {
          return x.apply(this, arguments);
        })
      }, {
        key: "approveTrc20",
        value: (k = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return i = u.length > 3 && undefined !== u[3] ? u[3] : {}, s = u.length > 4 && undefined !== u[4] ? u[4] : this.mainchain.defaultPrivateKey, a = u.length > 5 && undefined !== u[5] && u[5], o = "approve", e.abrupt("return", this.depositTrc(o, t, 0, r, n, i, s, a));

              case 5:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, r) {
          return k.apply(this, arguments);
        })
      }, {
        key: "approveTrc721",
        value: (m = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return i = u.length > 3 && undefined !== u[3] ? u[3] : {}, s = u.length > 4 && undefined !== u[4] ? u[4] : this.mainchain.defaultPrivateKey, a = u.length > 5 && undefined !== u[5] && u[5], o = "approve", e.abrupt("return", this.depositTrc(o, t, 0, r, n, i, s, a));

              case 5:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, r) {
          return m.apply(this, arguments);
        })
      }, {
        key: "depositTrc20",
        value: (g = f()(l.a.mark(function e(t, r, n, i) {
          var s,
              a,
              o,
              u,
              c = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return s = c.length > 4 && undefined !== c[4] ? c[4] : {}, a = c.length > 5 && undefined !== c[5] ? c[5] : this.mainchain.defaultPrivateKey, o = c.length > 6 && undefined !== c[6] && c[6], u = "depositTRC20", e.abrupt("return", this.depositTrc(u, t, r, n, i, s, a, o));

              case 5:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, r, n) {
          return g.apply(this, arguments);
        })
      }, {
        key: "depositTrc721",
        value: (p = f()(l.a.mark(function e(t, r, n, i) {
          var s,
              a,
              o,
              u,
              c = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return s = c.length > 4 && undefined !== c[4] ? c[4] : {}, a = c.length > 5 && undefined !== c[5] ? c[5] : this.mainchain.defaultPrivateKey, o = c.length > 6 && undefined !== c[6] && c[6], u = "depositTRC721", e.abrupt("return", this.depositTrc(u, t, r, n, i, s, a, o));

              case 5:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, r, n) {
          return p.apply(this, arguments);
        })
      }, {
        key: "mappingTrc",
        value: (v = f()(l.a.mark(function e(t, r, n, i) {
          var s,
              a,
              o,
              u,
              c,
              d = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (s = d.length > 4 && undefined !== d[4] ? d[4] : {}, a = d.length > 5 && undefined !== d[5] ? d[5] : this.mainchain.defaultPrivateKey, o = d.length > 6 ? d[6] : undefined, this.utils.isFunction(a) && (o = a, a = this.mainchain.defaultPrivateKey), this.utils.isFunction(s) && (o = s, s = {}), o) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.mappingTrc, t, r, n, i, s, a));

              case 7:
                if (!this.validator.notValid([{
                  name: "trxHash",
                  type: "not-empty-string",
                  value: t
                }, {
                  name: "mappingFee",
                  type: "integer",
                  value: r,
                  gte: 0
                }, {
                  name: "feeLimit",
                  type: "integer",
                  value: n,
                  gte: 0,
                  lte: 1e9
                }], o)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return");

              case 9:
                return t = t.startsWith("0x") ? t : "0x" + t, s = xt(xt({
                  feeLimit: n
                }, s), {}, {
                  callValue: r
                }), e.prev = 11, e.next = 14, this.mainchain.contract().at(this.mainGatewayAddress);

              case 14:
                if (u = e.sent, c = null, "mappingTRC20" !== i) {
                  e.next = 22;
                  break;
                }

                return e.next = 19, u.mappingTRC20(t).send(s, a);

              case 19:
                c = e.sent, e.next = 29;
                break;

              case 22:
                if ("mappingTRC721" !== i) {
                  e.next = 28;
                  break;
                }

                return e.next = 25, u.mappingTRC721(t).send(s, a);

              case 25:
                c = e.sent, e.next = 29;
                break;

              case 28:
                o(new Error("type must be trc20 or trc721"));

              case 29:
                o(null, c), e.next = 35;
                break;

              case 32:
                return e.prev = 32, e.t0 = e.catch(11), e.abrupt("return", o(e.t0));

              case 35:
              case "end":
                return e.stop();
            }
          }, e, this, [[11, 32]]);
        })), function (e, t, r, n) {
          return v.apply(this, arguments);
        })
      }, {
        key: "mappingTrc20",
        value: (h = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return i = u.length > 3 && undefined !== u[3] ? u[3] : {}, s = u.length > 4 && undefined !== u[4] ? u[4] : this.mainchain.defaultPrivateKey, a = u.length > 5 && undefined !== u[5] && u[5], o = "mappingTRC20", e.abrupt("return", this.mappingTrc(t, r, n, o, i, s, a));

              case 5:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, r) {
          return h.apply(this, arguments);
        })
      }, {
        key: "mappingTrc721",
        value: (d = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return i = u.length > 3 && undefined !== u[3] ? u[3] : {}, s = u.length > 4 && undefined !== u[4] ? u[4] : this.mainchain.defaultPrivateKey, a = u.length > 5 && undefined !== u[5] && u[5], o = "mappingTRC721", e.abrupt("return", this.mappingTrc(t, r, n, o, i, s, a));

              case 5:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, r) {
          return d.apply(this, arguments);
        })
      }, {
        key: "withdrawTrx",
        value: (c = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u,
              c = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (i = c.length > 3 && undefined !== c[3] ? c[3] : {}, s = c.length > 4 && undefined !== c[4] ? c[4] : this.mainchain.defaultPrivateKey, a = c.length > 5 && undefined !== c[5] && c[5], this.utils.isFunction(s) && (a = s, s = this.mainchain.defaultPrivateKey), this.utils.isFunction(i) && (a = i, i = {}), a) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.withdrawTrx, t, r, n, i, s));

              case 7:
                if (!this.validator.notValid([{
                  name: "callValue",
                  type: "integer",
                  value: t,
                  gte: 0
                }, {
                  name: "withdrawFee",
                  type: "integer",
                  value: r,
                  gte: 0
                }, {
                  name: "feeLimit",
                  type: "integer",
                  value: n,
                  gte: 0,
                  lte: 1e9
                }], a)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return");

              case 9:
                return i = xt({
                  callValue: Number(t) + Number(r),
                  feeLimit: n
                }, i), e.prev = 10, e.next = 13, this.sidechain.contract().at(this.sideGatewayAddress);

              case 13:
                return o = e.sent, e.next = 16, o.withdrawTRX().send(i, s);

              case 16:
                return u = e.sent, e.abrupt("return", a(null, u));

              case 20:
                return e.prev = 20, e.t0 = e.catch(10), e.abrupt("return", a(e.t0));

              case 23:
              case "end":
                return e.stop();
            }
          }, e, this, [[10, 20]]);
        })), function (e, t, r) {
          return c.apply(this, arguments);
        })
      }, {
        key: "withdrawTrc10",
        value: (u = f()(l.a.mark(function e(t, r, n, i) {
          var s,
              a,
              o,
              u,
              c,
              d = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (s = d.length > 4 && undefined !== d[4] ? d[4] : {}, a = d.length > 5 && undefined !== d[5] ? d[5] : this.mainchain.defaultPrivateKey, o = d.length > 6 && undefined !== d[6] && d[6], this.utils.isFunction(a) && (o = a, a = this.mainchain.defaultPrivateKey), this.utils.isFunction(s) && (o = s, s = {}), o) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.withdrawTrc10, t, r, n, i, s, a));

              case 7:
                if (!this.validator.notValid([{
                  name: "tokenId",
                  type: "integer",
                  value: t,
                  gte: 0
                }, {
                  name: "tokenValue",
                  type: "integer",
                  value: r,
                  gte: 0
                }, {
                  name: "withdrawFee",
                  type: "integer",
                  value: n,
                  gte: 0
                }, {
                  name: "feeLimit",
                  type: "integer",
                  value: i,
                  gte: 0,
                  lte: 1e9
                }], o)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return");

              case 9:
                return s = xt({
                  tokenValue: r,
                  tokenId: t,
                  callValue: n,
                  feeLimit: i
                }, s), e.prev = 10, e.next = 13, this.sidechain.contract().at(this.sideGatewayAddress);

              case 13:
                return u = e.sent, e.next = 16, u.withdrawTRC10(t, r).send(s, a);

              case 16:
                return c = e.sent, e.abrupt("return", o(null, c));

              case 20:
                return e.prev = 20, e.t0 = e.catch(10), e.abrupt("return", o(e.t0));

              case 23:
              case "end":
                return e.stop();
            }
          }, e, this, [[10, 20]]);
        })), function (e, t, r, n) {
          return u.apply(this, arguments);
        })
      }, {
        key: "withdrawTrc",
        value: (o = f()(l.a.mark(function e(t, r, n, i, s) {
          var a,
              o,
              u,
              c,
              d,
              h,
              v,
              p,
              g,
              b,
              m = this,
              y = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (a = y.length > 5 && undefined !== y[5] ? y[5] : {}, o = y.length > 6 && undefined !== y[6] ? y[6] : this.mainchain.defaultPrivateKey, u = y.length > 7 && undefined !== y[7] && y[7], this.utils.isFunction(o) && (u = o, o = this.mainchain.defaultPrivateKey), this.utils.isFunction(a) && (u = a, a = {}), u) {
                  e.next = 7;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.withdrawTrc, t, r, n, i, s, a, o));

              case 7:
                if (!this.validator.notValid([{
                  name: "functionSelector",
                  type: "not-empty-string",
                  value: t
                }, {
                  name: "numOrId",
                  type: "integer",
                  value: r,
                  gte: 0
                }, {
                  name: "withdrawFee",
                  type: "integer",
                  value: n,
                  gte: 0
                }, {
                  name: "feeLimit",
                  type: "integer",
                  value: i,
                  gte: 0,
                  lte: 1e9
                }, {
                  name: "contractAddress",
                  type: "address",
                  value: s
                }], u)) {
                  e.next = 9;
                  break;
                }

                return e.abrupt("return");

              case 9:
                return a = xt(xt({
                  feeLimit: i
                }, a), {}, {
                  callValue: n
                }), c = [{
                  type: "uint256",
                  value: r
                }], e.prev = 11, d = o ? this.sidechain.address.fromPrivateKey(o) : this.sidechain.defaultAddress.base58, e.next = 15, this.sidechain.transactionBuilder.triggerSmartContract(s, t, a, c, this.sidechain.address.toHex(d));

              case 15:
                if ((h = e.sent).result && h.result.result) {
                  e.next = 18;
                  break;
                }

                return e.abrupt("return", u("Unknown error: " + JSON.stringify(h.transaction, null, 2)));

              case 18:
                return e.next = 20, this.sidechain.trx.sign(h.transaction, o);

              case 20:
                if ((v = e.sent).signature) {
                  e.next = 25;
                  break;
                }

                if (o) {
                  e.next = 24;
                  break;
                }

                return e.abrupt("return", u("Transaction was not signed properly"));

              case 24:
                return e.abrupt("return", u("Invalid private key provided"));

              case 25:
                return e.next = 27, this.sidechain.trx.sendRawTransaction(v);

              case 27:
                if (!(p = e.sent).code) {
                  e.next = 32;
                  break;
                }

                return g = {
                  error: p.code,
                  message: p.code
                }, p.message && (g.message = this.sidechain.toUtf8(p.message)), e.abrupt("return", u(g));

              case 32:
                if (a.shouldPollResponse) {
                  e.next = 34;
                  break;
                }

                return e.abrupt("return", u(null, v.txID));

              case 34:
                (b = function () {
                  var e = f()(l.a.mark(function e() {
                    var t,
                        r,
                        n,
                        i = arguments;
                    return l.a.wrap(function (e) {
                      for (;;) switch (e.prev = e.next) {
                        case 0:
                          if (20 != (t = i.length > 0 && undefined !== i[0] ? i[0] : 0)) {
                            e.next = 3;
                            break;
                          }

                          return e.abrupt("return", u({
                            error: "Cannot find result in solidity node",
                            transaction: v
                          }));

                        case 3:
                          return e.next = 5, m.sidechain.trx.getTransactionInfo(v.txID);

                        case 5:
                          if (r = e.sent, Object.keys(r).length) {
                            e.next = 8;
                            break;
                          }

                          return e.abrupt("return", setTimeout(function () {
                            b(t + 1);
                          }, 3e3));

                        case 8:
                          if (!r.result || "FAILED" != r.result) {
                            e.next = 10;
                            break;
                          }

                          return e.abrupt("return", u({
                            error: m.sidechain.toUtf8(r.resMessage),
                            transaction: v,
                            output: r
                          }));

                        case 10:
                          if (m.utils.hasProperty(r, "contractResult")) {
                            e.next = 12;
                            break;
                          }

                          return e.abrupt("return", u({
                            error: "Failed to execute: " + JSON.stringify(r, null, 2),
                            transaction: v,
                            output: r
                          }));

                        case 12:
                          if (!a.rawResponse) {
                            e.next = 14;
                            break;
                          }

                          return e.abrupt("return", u(null, r));

                        case 14:
                          return 1 === (n = decodeOutput(m.outputs, "0x" + r.contractResult[0])).length && (n = n[0]), e.abrupt("return", u(null, n));

                        case 17:
                        case "end":
                          return e.stop();
                      }
                    }, e);
                  }));
                  return function () {
                    return e.apply(this, arguments);
                  };
                }())(), e.next = 41;
                break;

              case 38:
                return e.prev = 38, e.t0 = e.catch(11), e.abrupt("return", u(e.t0));

              case 41:
              case "end":
                return e.stop();
            }
          }, e, this, [[11, 38]]);
        })), function (e, t, r, n, i) {
          return o.apply(this, arguments);
        })
      }, {
        key: "withdrawTrc20",
        value: (a = f()(l.a.mark(function e(t, r, n, i, s) {
          var a,
              o,
              u,
              c = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return a = c.length > 5 && undefined !== c[5] ? c[5] : this.mainchain.defaultPrivateKey, o = c.length > 6 && undefined !== c[6] && c[6], u = "withdrawal(uint256)", e.abrupt("return", this.withdrawTrc(u, t, r, n, i, s, a, o));

              case 4:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, r, n, i) {
          return a.apply(this, arguments);
        })
      }, {
        key: "withdrawTrc721",
        value: (s = f()(l.a.mark(function e(t, r, n, i, s) {
          var a,
              o,
              u,
              c = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return a = c.length > 5 && undefined !== c[5] ? c[5] : this.mainchain.defaultPrivateKey, o = c.length > 6 && undefined !== c[6] && c[6], u = "withdrawal(uint256)", e.abrupt("return", this.withdrawTrc(u, t, r, n, i, s, a, o));

              case 4:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, r, n, i) {
          return s.apply(this, arguments);
        })
      }, {
        key: "injectFund",
        value: (i = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u,
              c,
              d,
              h,
              f = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (i = f.length > 3 && undefined !== f[3] ? f[3] : this.mainchain.defaultPrivateKey, s = f.length > 4 && undefined !== f[4] && f[4], this.utils.isFunction(i) && (s = i, i = this.mainchain.defaultPrivateKey), this.utils.isFunction(n) && (s = n, n = {}), s) {
                  e.next = 6;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.injectFund, t, r, n, i));

              case 6:
                if (!this.validator.notValid([{
                  name: "num",
                  type: "integer",
                  value: t,
                  gte: 0
                }, {
                  name: "feeLimit",
                  type: "integer",
                  value: r,
                  gte: 0,
                  lte: 1e9
                }], s)) {
                  e.next = 8;
                  break;
                }

                return e.abrupt("return");

              case 8:
                return e.prev = 8, a = this.sidechain.address.fromPrivateKey(i), o = this.sidechain.address.toHex(a), e.next = 13, this.sidechain.fullNode.request("/wallet/fundinject", {
                  owner_address: o,
                  amount: t
                }, "post");

              case 13:
                return u = e.sent, e.next = 16, this.sidechain.trx.sign(u, i);

              case 16:
                if ((c = e.sent).signature) {
                  e.next = 21;
                  break;
                }

                if (i) {
                  e.next = 20;
                  break;
                }

                return e.abrupt("return", s("Transaction was not signed properly"));

              case 20:
                return e.abrupt("return", s("Invalid private key provided"));

              case 21:
                return e.next = 23, this.sidechain.trx.sendRawTransaction(c);

              case 23:
                if (!(d = e.sent).code) {
                  e.next = 28;
                  break;
                }

                return h = {
                  error: d.code,
                  message: d.code
                }, d.message && (h.message = this.mainchain.toUtf8(d.message)), e.abrupt("return", s(h));

              case 28:
                return e.abrupt("return", s(null, c.txID));

              case 31:
                return e.prev = 31, e.t0 = e.catch(8), e.abrupt("return", s(e.t0));

              case 34:
              case "end":
                return e.stop();
            }
          }, e, this, [[8, 31]]);
        })), function (e, t, r) {
          return i.apply(this, arguments);
        })
      }, {
        key: "retryWithdraw",
        value: (n = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return i = u.length > 3 && undefined !== u[3] ? u[3] : {}, s = u.length > 4 && undefined !== u[4] ? u[4] : this.sidechain.defaultPrivateKey, a = u.length > 5 && undefined !== u[5] && u[5], o = "retryWithdraw(uint256)", e.abrupt("return", this.withdrawTrc(o, t, r, n, this.sideGatewayAddress, i, s, a));

              case 5:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, r) {
          return n.apply(this, arguments);
        })
      }, {
        key: "retryDeposit",
        value: (r = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return i = u.length > 3 && undefined !== u[3] ? u[3] : {}, s = u.length > 4 && undefined !== u[4] ? u[4] : this.mainchain.defaultPrivateKey, a = u.length > 5 && undefined !== u[5] && u[5], o = "retryDeposit", e.abrupt("return", this.depositTrc(o, t, r, n, this.mainGatewayAddress, i, s, a));

              case 5:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, t, n) {
          return r.apply(this, arguments);
        })
      }, {
        key: "retryMapping",
        value: (t = f()(l.a.mark(function e(t, r, n) {
          var i,
              s,
              a,
              o,
              u = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return i = u.length > 3 && undefined !== u[3] ? u[3] : {}, s = u.length > 4 && undefined !== u[4] ? u[4] : this.mainchain.defaultPrivateKey, a = u.length > 5 && undefined !== u[5] && u[5], o = "retryMapping", e.abrupt("return", this.depositTrc(o, t, r, n, this.mainGatewayAddress, i, s, a));

              case 5:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function (e, r, n) {
          return t.apply(this, arguments);
        })
      }]), e;
    }();

    function It(e) {
      var t = function () {
        if ("undefined" == typeof Reflect || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if ("function" == typeof Proxy) return true;

        try {
          return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), true;
        } catch (e) {
          return false;
        }
      }();

      return function () {
        var r,
            n = _()(e);

        if (t) {
          var i = _()(this).constructor;

          r = Reflect.construct(n, arguments, i);
        } else r = n.apply(this, arguments);

        return P()(this, r);
      };
    }

    var At = function (e) {
      I()(s, e);
      var t,
          r,
          n,
          i = It(s);

      function s() {
        var e,
            t,
            r = arguments.length > 0 && undefined !== arguments[0] && arguments[0],
            n = arguments.length > 1 && undefined !== arguments[1] && arguments[1],
            a = arguments.length > 2 && undefined !== arguments[2] && arguments[2],
            o = arguments.length > 3 && undefined !== arguments[3] && arguments[3],
            u = arguments.length > 4 && undefined !== arguments[4] && arguments[4];
        return b()(this, s), e = i.call(this), "object" === p()(r) && (r.fullNode || r.fullHost) ? (t = r.fullNode || r.fullHost, o = n, n = r.solidityNode || r.fullHost, a = r.eventServer || r.fullHost, u = r.privateKey) : t = r, Ke.isString(t) && (t = new Re.HttpProvider(t)), Ke.isString(n) && (n = new Re.HttpProvider(n)), Ke.isString(a) && (a = new Re.HttpProvider(a)), e.event = new yt(x()(e)), e.transactionBuilder = new st(x()(e)), e.trx = new ct(x()(e)), e.plugin = new gt(x()(e), r), e.utils = Ke, e.setFullNode(t), e.setSolidityNode(n), e.setEventServer(a), e.providers = Re, e.BigNumber = Ee.a, e.defaultBlock = false, e.defaultPrivateKey = false, e.defaultAddress = {
          hex: false,
          base58: false
        }, ["sha3", "toHex", "toUtf8", "fromUtf8", "toAscii", "fromAscii", "toDecimal", "fromDecimal", "toSun", "fromSun", "toBigNumber", "isAddress", "createAccount", "address", "version"].forEach(function (t) {
          e[t] = s[t];
        }), "object" === p()(o) && (o.fullNode || o.fullHost) ? e.sidechain = new wt(o, s, x()(e), u) : u = u || o, u && e.setPrivateKey(u), e.fullnodeVersion = "3.5.0", e.feeLimit = 2e7, e.injectPromise = Ge()(x()(e)), e;
      }

      return y()(s, [{
        key: "getFullnodeVersion",
        value: (n = f()(l.a.mark(function e() {
          var t;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return e.prev = 0, e.next = 3, this.trx.getNodeInfo();

              case 3:
                t = e.sent, this.fullnodeVersion = t.configNodeInfo.codeVersion, 2 === this.fullnodeVersion.split(".").length && (this.fullnodeVersion += ".0"), e.next = 11;
                break;

              case 8:
                e.prev = 8, e.t0 = e.catch(0), this.fullnodeVersion = "3.5.0";

              case 11:
              case "end":
                return e.stop();
            }
          }, e, this, [[0, 8]]);
        })), function () {
          return n.apply(this, arguments);
        })
      }, {
        key: "setDefaultBlock",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if ([false, "st", "earliest", 0].includes(e)) return this.defaultBlock = e;
          if (!Ke.isInteger(e) || !e) throw new Error("Invalid block ID provided");
          this.defaultBlock = Math.abs(e);
        }
      }, {
        key: "setPrivateKey",
        value: function (e) {
          try {
            this.setAddress(this.address.fromPrivateKey(e));
          } catch (e) {
            throw new Error("Invalid private key provided");
          }

          this.defaultPrivateKey = e, this.emit("privateKeyChanged", e);
        }
      }, {
        key: "setAddress",
        value: function (e) {
          if (!this.isAddress(e)) throw new Error("Invalid address provided");
          var t = this.address.toHex(e),
              r = this.address.fromHex(e);
          this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== r && (this.defaultPrivateKey = false), this.defaultAddress = {
            hex: t,
            base58: r
          }, this.emit("addressChanged", {
            hex: t,
            base58: r
          });
        }
      }, {
        key: "fullnodeSatisfies",
        value: function (e) {
          return ze.a.satisfies(this.fullnodeVersion, e);
        }
      }, {
        key: "isValidProvider",
        value: function (e) {
          return Object.values(Re).some(function (t) {
            return e instanceof t;
          });
        }
      }, {
        key: "setFullNode",
        value: function (e) {
          if (Ke.isString(e) && (e = new Re.HttpProvider(e)), !this.isValidProvider(e)) throw new Error("Invalid full node provided");
          this.fullNode = e, this.fullNode.setStatusPage("wallet/getnowblock"), this.getFullnodeVersion();
        }
      }, {
        key: "setSolidityNode",
        value: function (e) {
          if (Ke.isString(e) && (e = new Re.HttpProvider(e)), !this.isValidProvider(e)) throw new Error("Invalid solidity node provided");
          this.solidityNode = e, this.solidityNode.setStatusPage("walletsolidity/getnowblock");
        }
      }, {
        key: "setEventServer",
        value: function () {
          var e;
          (e = this.event).setServer.apply(e, arguments);
        }
      }, {
        key: "currentProviders",
        value: function () {
          return {
            fullNode: this.fullNode,
            solidityNode: this.solidityNode,
            eventServer: this.eventServer
          };
        }
      }, {
        key: "currentProvider",
        value: function () {
          return this.currentProviders();
        }
      }, {
        key: "getEventResult",
        value: function () {
          for (var e, t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];

          return "object" !== p()(r[1]) && (r[1] = {
            sinceTimestamp: r[1] || 0,
            eventName: r[2] || false,
            blockNumber: r[3] || false,
            size: r[4] || 20,
            page: r[5] || 1
          }, r.splice(2, 4), Ke.isFunction(r[2]) || (Ke.isFunction(r[1].page) ? (r[2] = r[1].page, r[1].page = 1) : Ke.isFunction(r[1].size) && (r[2] = r[1].size, r[1].size = 20, r[1].page = 1))), (e = this.event).getEventsByContractAddress.apply(e, r);
        }
      }, {
        key: "getEventByTransactionID",
        value: function () {
          var e;
          return (e = this.event).getEventsByTransactionID.apply(e, arguments);
        }
      }, {
        key: "contract",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : [],
              t = arguments.length > 1 && undefined !== arguments[1] && arguments[1];
          return new pt(this, e, t);
        }
      }, {
        key: "isConnected",
        value: (r = f()(l.a.mark(function e() {
          var t,
              r = arguments;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                if (t = r.length > 0 && undefined !== r[0] && r[0]) {
                  e.next = 3;
                  break;
                }

                return e.abrupt("return", this.injectPromise(this.isConnected));

              case 3:
                return e.t0 = t, e.next = 6, this.fullNode.isConnected();

              case 6:
                return e.t1 = e.sent, e.next = 9, this.solidityNode.isConnected();

              case 9:
                if (e.t2 = e.sent, e.t3 = this.eventServer, !e.t3) {
                  e.next = 15;
                  break;
                }

                return e.next = 14, this.eventServer.isConnected();

              case 14:
                e.t3 = e.sent;

              case 15:
                return e.t4 = e.t3, e.t5 = {
                  fullNode: e.t1,
                  solidityNode: e.t2,
                  eventServer: e.t4
                }, e.abrupt("return", (0, e.t0)(null, e.t5));

              case 18:
              case "end":
                return e.stop();
            }
          }, e, this);
        })), function () {
          return r.apply(this, arguments);
        })
      }], [{
        key: "sha3",
        value: function (e) {
          var t = !(arguments.length > 1 && undefined !== arguments[1]) || arguments[1];
          return (t ? "0x" : "") + ie(Buffer.from(e, "utf-8")).toString().substring(2);
        }
      }, {
        key: "toHex",
        value: function (e) {
          if (Ke.isBoolean(e)) return s.fromDecimal(+e);
          if (Ke.isBigNumber(e)) return s.fromDecimal(e);
          if ("object" === p()(e)) return s.fromUtf8(JSON.stringify(e));

          if (Ke.isString(e)) {
            if (/^(-|)0x/.test(e)) return e;
            if (!isFinite(e) || /^\s*$/.test(e)) return s.fromUtf8(e);
          }

          var t = s.fromDecimal(e);
          if ("0xNaN" === t) throw new Error("The passed value is not convertible to a hex string");
          return t;
        }
      }, {
        key: "toUtf8",
        value: function (e) {
          if (Ke.isHex(e)) return e = e.replace(/^0x/, ""), Buffer.from(e, "hex").toString("utf8");
          throw new Error("The passed value is not a valid hex string");
        }
      }, {
        key: "fromUtf8",
        value: function (e) {
          if (!Ke.isString(e)) throw new Error("The passed value is not a valid utf-8 string");
          return "0x" + Buffer.from(e, "utf8").toString("hex");
        }
      }, {
        key: "toAscii",
        value: function (e) {
          if (Ke.isHex(e)) {
            var t = "",
                r = 0,
                n = e.length;

            for ("0x" === e.substring(0, 2) && (r = 2); r < n; r += 2) {
              var i = parseInt(e.substr(r, 2), 16);
              t += String.fromCharCode(i);
            }

            return t;
          }

          throw new Error("The passed value is not a valid hex string");
        }
      }, {
        key: "fromAscii",
        value: function (e, t) {
          if (!Ke.isString(e)) throw new Error("The passed value is not a valid utf-8 string");
          return "0x" + Buffer.from(e, "ascii").toString("hex").padEnd(t, "0");
        }
      }, {
        key: "toDecimal",
        value: function (e) {
          return s.toBigNumber(e).toNumber();
        }
      }, {
        key: "fromDecimal",
        value: function (e) {
          var t = s.toBigNumber(e),
              r = t.toString(16);
          return t.isLessThan(0) ? "-0x" + r.substr(1) : "0x" + r;
        }
      }, {
        key: "fromSun",
        value: function (e) {
          var t = s.toBigNumber(e).div(1e6);
          return Ke.isBigNumber(e) ? t : t.toString(10);
        }
      }, {
        key: "toSun",
        value: function (e) {
          var t = s.toBigNumber(e).times(1e6);
          return Ke.isBigNumber(e) ? t : t.toString(10);
        }
      }, {
        key: "toBigNumber",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] ? arguments[0] : 0;
          return Ke.isBigNumber(e) ? e : Ke.isString(e) && /^(-|)0x/.test(e) ? new Ee.a(e.replace("0x", ""), 16) : new Ee.a(e.toString(10), 10);
        }
      }, {
        key: "isAddress",
        value: function () {
          var e = arguments.length > 0 && undefined !== arguments[0] && arguments[0];
          if (!Ke.isString(e)) return false;
          if (42 === e.length) try {
            return s.isAddress(Ke.crypto.getBase58CheckAddress(Ke.code.hexStr2byteArray(e)));
          } catch (e) {
            return false;
          }

          try {
            return Ke.crypto.isAddressValid(e);
          } catch (e) {
            return false;
          }
        }
      }, {
        key: "createAccount",
        value: (t = f()(l.a.mark(function e() {
          var t;
          return l.a.wrap(function (e) {
            for (;;) switch (e.prev = e.next) {
              case 0:
                return t = Ke.accounts.generateAccount(), e.abrupt("return", t);

              case 2:
              case "end":
                return e.stop();
            }
          }, e);
        })), function () {
          return t.apply(this, arguments);
        })
      }, {
        key: "address",
        get: function () {
          return {
            fromHex: function (e) {
              return Ke.isHex(e) ? Ke.crypto.getBase58CheckAddress(Ke.code.hexStr2byteArray(e.replace(/^0x/, "41"))) : e;
            },
            toHex: function (e) {
              return Ke.isHex(e) ? e.toLowerCase().replace(/^0x/, "41") : Ke.code.byteArray2hexStr(Ke.crypto.decodeBase58Address(e)).toLowerCase();
            },
            fromPrivateKey: function (e) {
              try {
                return Ke.crypto.pkToAddress(e);
              } catch (e) {
                return false;
              }
            }
          };
        }
      }]), s;
    }(He.a);

    N()(At, "providers", Re), N()(At, "BigNumber", Ee.a), N()(At, "TransactionBuilder", st), N()(At, "Trx", ct), N()(At, "Contract", pt), N()(At, "Plugin", gt), N()(At, "Event", yt), N()(At, "version", Le.a), N()(At, "utils", Ke);
  }]).default;
},6,[7,9,10,11,12,13,14,15,21,25,26,27,211,93,212,213,215,216,255,333,334]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},7,[8]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var runtime = function (exports) {
    "use strict";

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap;

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator;

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === undefined) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined) {
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        return info;
      }

      context.delegate = null;
      return ContinueSentinel;
    }

    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse();
      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },
      stop: function () {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function (record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
    return exports;
  }(typeof module === "object" ? module.exports : {});

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
},8,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  module.exports = _asyncToGenerator;
},9,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  module.exports = _classCallCheck;
},10,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  module.exports = _createClass;
},11,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  module.exports = _defineProperty;
},12,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = function (scope) {
    return (func, ...args) => {
      return function (func, ...args) {
        return new Promise((resolve, reject) => {
          func(...args, (err, res) => {
            if (err) {
              reject(err);
            } else {
              resolve(res);
            }
          });
        });
      }(func.bind(scope), ...args);
    };
  };
},13,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      module.exports = _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      module.exports = _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  module.exports = _typeof;
},14,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrayWithoutHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArray = _$$_REQUIRE(_dependencyMap[1]);

  var unsupportedIterableToArray = _$$_REQUIRE(_dependencyMap[2]);

  var nonIterableSpread = _$$_REQUIRE(_dependencyMap[3]);

  function _toConsumableArray(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
  }

  module.exports = _toConsumableArray;
},15,[16,18,19,20]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrayLikeToArray = _$$_REQUIRE(_dependencyMap[0]);

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }

  module.exports = _arrayWithoutHoles;
},16,[17]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  module.exports = _arrayLikeToArray;
},17,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  module.exports = _iterableToArray;
},18,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrayLikeToArray = _$$_REQUIRE(_dependencyMap[0]);

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
  }

  module.exports = _unsupportedIterableToArray;
},19,[17]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  module.exports = _nonIterableSpread;
},20,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var arrayWithHoles = _$$_REQUIRE(_dependencyMap[0]);

  var iterableToArrayLimit = _$$_REQUIRE(_dependencyMap[1]);

  var unsupportedIterableToArray = _$$_REQUIRE(_dependencyMap[2]);

  var nonIterableRest = _$$_REQUIRE(_dependencyMap[3]);

  function _slicedToArray(arr, i) {
    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
  }

  module.exports = _slicedToArray;
},21,[22,23,19,24]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  module.exports = _arrayWithHoles;
},22,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  module.exports = _iterableToArrayLimit;
},23,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  module.exports = _nonIterableRest;
},24,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  ;

  (function (globalObject) {
    'use strict';

    var BigNumber,
        isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
        mathceil = Math.ceil,
        mathfloor = Math.floor,
        bignumberError = '[BigNumber Error] ',
        tooManyDigits = "[BigNumber Error] Number primitive has more than 15 significant digits: ",
        BASE = 1e14,
        LOG_BASE = 14,
        MAX_SAFE_INTEGER = 0x1fffffffffffff,
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
        SQRT_BASE = 1e7,
        MAX = 1E9;

    function clone(configObject) {
      var div,
          convertBase,
          parseNumeric,
          P = BigNumber.prototype = {
        constructor: BigNumber,
        toString: null,
        valueOf: null
      },
          ONE = new BigNumber(1),
          DECIMAL_PLACES = 20,
          ROUNDING_MODE = 4,
          TO_EXP_NEG = -7,
          TO_EXP_POS = 21,
          MIN_EXP = -10000000,
          MAX_EXP = 1e7,
          CRYPTO = false,
          MODULO_MODE = 1,
          POW_PRECISION = 0,
          FORMAT = {
        decimalSeparator: '.',
        groupSeparator: ',',
        groupSize: 3,
        secondaryGroupSize: 0,
        fractionGroupSeparator: '\xA0',
        fractionGroupSize: 0
      },
          ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';

      function BigNumber(n, b) {
        var alphabet,
            c,
            caseChanged,
            e,
            i,
            isNum,
            len,
            str,
            x = this;

        if (!(x instanceof BigNumber)) {
          return new BigNumber(n, b);
        }

        if (b == null) {
          if (n instanceof BigNumber) {
            x.s = n.s;
            x.e = n.e;
            x.c = (n = n.c) ? n.slice() : n;
            return;
          }

          isNum = typeof n == 'number';

          if (isNum && n * 0 == 0) {
            x.s = 1 / n < 0 ? (n = -n, -1) : 1;

            if (n === ~~n) {
              for (e = 0, i = n; i >= 10; i /= 10, e++);

              x.e = e;
              x.c = [n];
              return;
            }

            str = n + '';
          } else {
            if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);
            x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
          }

          if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

          if ((i = str.search(/e/i)) > 0) {
            if (e < 0) e = i;
            e += +str.slice(i + 1);
            str = str.substring(0, i);
          } else if (e < 0) {
            e = str.length;
          }
        } else {
          intCheck(b, 2, ALPHABET.length, 'Base');
          str = n + '';

          if (b == 10) {
            x = new BigNumber(n instanceof BigNumber ? n : str);
            return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
          }

          isNum = typeof n == 'number';

          if (isNum) {
            if (n * 0 != 0) return parseNumeric(x, str, isNum, b);
            x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

            if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
              throw Error(tooManyDigits + n);
            }

            isNum = false;
          } else {
            x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
          }

          alphabet = ALPHABET.slice(0, b);
          e = i = 0;

          for (len = str.length; i < len; i++) {
            if (alphabet.indexOf(c = str.charAt(i)) < 0) {
              if (c == '.') {
                if (i > e) {
                  e = len;
                  continue;
                }
              } else if (!caseChanged) {
                if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                  caseChanged = true;
                  i = -1;
                  e = 0;
                  continue;
                }
              }

              return parseNumeric(x, n + '', isNum, b);
            }
          }

          str = convertBase(str, b, 10, x.s);
          if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;
        }

        for (i = 0; str.charCodeAt(i) === 48; i++);

        for (len = str.length; str.charCodeAt(--len) === 48;);

        str = str.slice(i, ++len);

        if (str) {
          len -= i;

          if (isNum && BigNumber.DEBUG && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
            throw Error(tooManyDigits + x.s * n);
          }

          e = e - i - 1;

          if (e > MAX_EXP) {
            x.c = x.e = null;
          } else if (e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = e;
            x.c = [];
            i = (e + 1) % LOG_BASE;
            if (e < 0) i += LOG_BASE;

            if (i < len) {
              if (i) x.c.push(+str.slice(0, i));

              for (len -= LOG_BASE; i < len;) {
                x.c.push(+str.slice(i, i += LOG_BASE));
              }

              str = str.slice(i);
              i = LOG_BASE - str.length;
            } else {
              i -= len;
            }

            for (; i--; str += '0');

            x.c.push(+str);
          }
        } else {
          x.c = [x.e = 0];
        }
      }

      BigNumber.clone = clone;
      BigNumber.ROUND_UP = 0;
      BigNumber.ROUND_DOWN = 1;
      BigNumber.ROUND_CEIL = 2;
      BigNumber.ROUND_FLOOR = 3;
      BigNumber.ROUND_HALF_UP = 4;
      BigNumber.ROUND_HALF_DOWN = 5;
      BigNumber.ROUND_HALF_EVEN = 6;
      BigNumber.ROUND_HALF_CEIL = 7;
      BigNumber.ROUND_HALF_FLOOR = 8;
      BigNumber.EUCLID = 9;

      BigNumber.config = BigNumber.set = function (obj) {
        var p, v;

        if (obj != null) {
          if (typeof obj == 'object') {
            if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
              v = obj[p];
              intCheck(v, 0, MAX, p);
              DECIMAL_PLACES = v;
            }

            if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
              v = obj[p];
              intCheck(v, 0, 8, p);
              ROUNDING_MODE = v;
            }

            if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
              v = obj[p];

              if (isArray(v)) {
                intCheck(v[0], -1000000000, 0, p);
                intCheck(v[1], 0, MAX, p);
                TO_EXP_NEG = v[0];
                TO_EXP_POS = v[1];
              } else {
                intCheck(v, -1000000000, MAX, p);
                TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
              }
            }

            if (obj.hasOwnProperty(p = 'RANGE')) {
              v = obj[p];

              if (isArray(v)) {
                intCheck(v[0], -1000000000, -1, p);
                intCheck(v[1], 1, MAX, p);
                MIN_EXP = v[0];
                MAX_EXP = v[1];
              } else {
                intCheck(v, -1000000000, MAX, p);

                if (v) {
                  MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                } else {
                  throw Error(bignumberError + p + ' cannot be zero: ' + v);
                }
              }
            }

            if (obj.hasOwnProperty(p = 'CRYPTO')) {
              v = obj[p];

              if (v === !!v) {
                if (v) {
                  if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                    CRYPTO = v;
                  } else {
                    CRYPTO = !v;
                    throw Error("[BigNumber Error] crypto unavailable");
                  }
                } else {
                  CRYPTO = v;
                }
              } else {
                throw Error(bignumberError + p + ' not true or false: ' + v);
              }
            }

            if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
              v = obj[p];
              intCheck(v, 0, 9, p);
              MODULO_MODE = v;
            }

            if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
              v = obj[p];
              intCheck(v, 0, MAX, p);
              POW_PRECISION = v;
            }

            if (obj.hasOwnProperty(p = 'FORMAT')) {
              v = obj[p];
              if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);
            }

            if (obj.hasOwnProperty(p = 'ALPHABET')) {
              v = obj[p];

              if (typeof v == 'string' && !/^.$|\.|(.).*\1/.test(v)) {
                ALPHABET = v;
              } else {
                throw Error(bignumberError + p + ' invalid: ' + v);
              }
            }
          } else {
            throw Error("[BigNumber Error] Object expected: " + obj);
          }
        }

        return {
          DECIMAL_PLACES: DECIMAL_PLACES,
          ROUNDING_MODE: ROUNDING_MODE,
          EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
          RANGE: [MIN_EXP, MAX_EXP],
          CRYPTO: CRYPTO,
          MODULO_MODE: MODULO_MODE,
          POW_PRECISION: POW_PRECISION,
          FORMAT: FORMAT,
          ALPHABET: ALPHABET
        };
      };

      BigNumber.isBigNumber = function (v) {
        return v instanceof BigNumber || v && v._isBigNumber === true || false;
      };

      BigNumber.maximum = BigNumber.max = function () {
        return maxOrMin(arguments, P.lt);
      };

      BigNumber.minimum = BigNumber.min = function () {
        return maxOrMin(arguments, P.gt);
      };

      BigNumber.random = function () {
        var pow2_53 = 0x20000000000000;
        var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
          return mathfloor(Math.random() * pow2_53);
        } : function () {
          return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
        };
        return function (dp) {
          var a,
              b,
              e,
              k,
              v,
              i = 0,
              c = [],
              rand = new BigNumber(ONE);
          if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);
          k = mathceil(dp / LOG_BASE);

          if (CRYPTO) {
            if (crypto.getRandomValues) {
              a = crypto.getRandomValues(new Uint32Array(k *= 2));

              for (; i < k;) {
                v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                if (v >= 9e15) {
                  b = crypto.getRandomValues(new Uint32Array(2));
                  a[i] = b[0];
                  a[i + 1] = b[1];
                } else {
                  c.push(v % 1e14);
                  i += 2;
                }
              }

              i = k / 2;
            } else if (crypto.randomBytes) {
              a = crypto.randomBytes(k *= 7);

              for (; i < k;) {
                v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                if (v >= 9e15) {
                  crypto.randomBytes(7).copy(a, i);
                } else {
                  c.push(v % 1e14);
                  i += 7;
                }
              }

              i = k / 7;
            } else {
              CRYPTO = false;
              throw Error("[BigNumber Error] crypto unavailable");
            }
          }

          if (!CRYPTO) {
            for (; i < k;) {
              v = random53bitInt();
              if (v < 9e15) c[i++] = v % 1e14;
            }
          }

          k = c[--i];
          dp %= LOG_BASE;

          if (k && dp) {
            v = POWS_TEN[LOG_BASE - dp];
            c[i] = mathfloor(k / v) * v;
          }

          for (; c[i] === 0; c.pop(), i--);

          if (i < 0) {
            c = [e = 0];
          } else {
            for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

            for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

            if (i < LOG_BASE) e -= LOG_BASE - i;
          }

          rand.e = e;
          rand.c = c;
          return rand;
        };
      }();

      convertBase = function () {
        var decimal = '0123456789';

        function toBaseOut(str, baseIn, baseOut, alphabet) {
          var j,
              arr = [0],
              arrL,
              i = 0,
              len = str.length;

          for (; i < len;) {
            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

            arr[0] += alphabet.indexOf(str.charAt(i++));

            for (j = 0; j < arr.length; j++) {
              if (arr[j] > baseOut - 1) {
                if (arr[j + 1] == null) arr[j + 1] = 0;
                arr[j + 1] += arr[j] / baseOut | 0;
                arr[j] %= baseOut;
              }
            }
          }

          return arr.reverse();
        }

        return function (str, baseIn, baseOut, sign, callerIsToString) {
          var alphabet,
              d,
              e,
              k,
              r,
              x,
              xc,
              y,
              i = str.indexOf('.'),
              dp = DECIMAL_PLACES,
              rm = ROUNDING_MODE;

          if (i >= 0) {
            k = POW_PRECISION;
            POW_PRECISION = 0;
            str = str.replace('.', '');
            y = new BigNumber(baseIn);
            x = y.pow(str.length - i);
            POW_PRECISION = k;
            y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);
            y.e = y.c.length;
          }

          xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
          e = k = xc.length;

          for (; xc[--k] == 0; xc.pop());

          if (!xc[0]) return alphabet.charAt(0);

          if (i < 0) {
            --e;
          } else {
            x.c = xc;
            x.e = e;
            x.s = sign;
            x = div(x, y, dp, rm, baseOut);
            xc = x.c;
            r = x.r;
            e = x.e;
          }

          d = e + dp + 1;
          i = xc[d];
          k = baseOut / 2;
          r = r || d < 0 || xc[d + 1] != null;
          r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));

          if (d < 1 || !xc[0]) {
            str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
          } else {
            xc.length = d;

            if (r) {
              for (--baseOut; ++xc[--d] > baseOut;) {
                xc[d] = 0;

                if (!d) {
                  ++e;
                  xc = [1].concat(xc);
                }
              }
            }

            for (k = xc.length; !xc[--k];);

            for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

            str = toFixedPoint(str, e, alphabet.charAt(0));
          }

          return str;
        };
      }();

      div = function () {
        function multiply(x, k, base) {
          var m,
              temp,
              xlo,
              xhi,
              carry = 0,
              i = x.length,
              klo = k % SQRT_BASE,
              khi = k / SQRT_BASE | 0;

          for (x = x.slice(); i--;) {
            xlo = x[i] % SQRT_BASE;
            xhi = x[i] / SQRT_BASE | 0;
            m = khi * xlo + xhi * klo;
            temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
            carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
            x[i] = temp % base;
          }

          if (carry) x = [carry].concat(x);
          return x;
        }

        function compare(a, b, aL, bL) {
          var i, cmp;

          if (aL != bL) {
            cmp = aL > bL ? 1 : -1;
          } else {
            for (i = cmp = 0; i < aL; i++) {
              if (a[i] != b[i]) {
                cmp = a[i] > b[i] ? 1 : -1;
                break;
              }
            }
          }

          return cmp;
        }

        function subtract(a, b, aL, base) {
          var i = 0;

          for (; aL--;) {
            a[aL] -= i;
            i = a[aL] < b[aL] ? 1 : 0;
            a[aL] = i * base + a[aL] - b[aL];
          }

          for (; !a[0] && a.length > 1; a.splice(0, 1));
        }

        return function (x, y, dp, rm, base) {
          var cmp,
              e,
              i,
              more,
              n,
              prod,
              prodL,
              q,
              qc,
              rem,
              remL,
              rem0,
              xi,
              xL,
              yc0,
              yL,
              yz,
              s = x.s == y.s ? 1 : -1,
              xc = x.c,
              yc = y.c;

          if (!xc || !xc[0] || !yc || !yc[0]) {
            return new BigNumber(!x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
          }

          q = new BigNumber(s);
          qc = q.c = [];
          e = x.e - y.e;
          s = dp + e + 1;

          if (!base) {
            base = BASE;
            e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
            s = s / LOG_BASE | 0;
          }

          for (i = 0; yc[i] == (xc[i] || 0); i++);

          if (yc[i] > (xc[i] || 0)) e--;

          if (s < 0) {
            qc.push(1);
            more = true;
          } else {
            xL = xc.length;
            yL = yc.length;
            i = 0;
            s += 2;
            n = mathfloor(base / (yc[0] + 1));

            if (n > 1) {
              yc = multiply(yc, n, base);
              xc = multiply(xc, n, base);
              yL = yc.length;
              xL = xc.length;
            }

            xi = yL;
            rem = xc.slice(0, yL);
            remL = rem.length;

            for (; remL < yL; rem[remL++] = 0);

            yz = yc.slice();
            yz = [0].concat(yz);
            yc0 = yc[0];
            if (yc[1] >= base / 2) yc0++;

            do {
              n = 0;
              cmp = compare(yc, rem, yL, remL);

              if (cmp < 0) {
                rem0 = rem[0];
                if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                n = mathfloor(rem0 / yc0);

                if (n > 1) {
                  if (n >= base) n = base - 1;
                  prod = multiply(yc, n, base);
                  prodL = prod.length;
                  remL = rem.length;

                  while (compare(prod, rem, prodL, remL) == 1) {
                    n--;
                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                    prodL = prod.length;
                    cmp = 1;
                  }
                } else {
                  if (n == 0) {
                    cmp = n = 1;
                  }

                  prod = yc.slice();
                  prodL = prod.length;
                }

                if (prodL < remL) prod = [0].concat(prod);
                subtract(rem, prod, remL, base);
                remL = rem.length;

                if (cmp == -1) {
                  while (compare(yc, rem, yL, remL) < 1) {
                    n++;
                    subtract(rem, yL < remL ? yz : yc, remL, base);
                    remL = rem.length;
                  }
                }
              } else if (cmp === 0) {
                n++;
                rem = [0];
              }

              qc[i++] = n;

              if (rem[0]) {
                rem[remL++] = xc[xi] || 0;
              } else {
                rem = [xc[xi]];
                remL = 1;
              }
            } while ((xi++ < xL || rem[0] != null) && s--);

            more = rem[0] != null;
            if (!qc[0]) qc.splice(0, 1);
          }

          if (base == BASE) {
            for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

            round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
          } else {
            q.e = e;
            q.r = +more;
          }

          return q;
        };
      }();

      function format(n, i, rm, id) {
        var c0, e, ne, len, str;
        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
        if (!n.c) return n.toString();
        c0 = n.c[0];
        ne = n.e;

        if (i == null) {
          str = coeffToString(n.c);
          str = id == 1 || id == 2 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne, '0');
        } else {
          n = round(new BigNumber(n), i, rm);
          e = n.e;
          str = coeffToString(n.c);
          len = str.length;

          if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
            for (; len < i; str += '0', len++);

            str = toExponential(str, e);
          } else {
            i -= ne;
            str = toFixedPoint(str, e, '0');

            if (e + 1 > len) {
              if (--i > 0) for (str += '.'; i--; str += '0');
            } else {
              i += e - len;

              if (i > 0) {
                if (e + 1 == len) str += '.';

                for (; i--; str += '0');
              }
            }
          }
        }

        return n.s < 0 && c0 ? '-' + str : str;
      }

      function maxOrMin(args, method) {
        var m,
            n,
            i = 0;
        if (isArray(args[0])) args = args[0];
        m = new BigNumber(args[0]);

        for (; ++i < args.length;) {
          n = new BigNumber(args[i]);

          if (!n.s) {
            m = n;
            break;
          } else if (method.call(m, n)) {
            m = n;
          }
        }

        return m;
      }

      function normalise(n, c, e) {
        var i = 1,
            j = c.length;

        for (; !c[--j]; c.pop());

        for (j = c[0]; j >= 10; j /= 10, i++);

        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
          n.c = n.e = null;
        } else if (e < MIN_EXP) {
          n.c = [n.e = 0];
        } else {
          n.e = e;
          n.c = c;
        }

        return n;
      }

      parseNumeric = function () {
        var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
            dotAfter = /^([^.]+)\.$/,
            dotBefore = /^\.([^.]+)$/,
            isInfinityOrNaN = /^-?(Infinity|NaN)$/,
            whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
        return function (x, str, isNum, b) {
          var base,
              s = isNum ? str : str.replace(whitespaceOrPlus, '');

          if (isInfinityOrNaN.test(s)) {
            x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            x.c = x.e = null;
          } else {
            if (!isNum) {
              s = s.replace(basePrefix, function (m, p1, p2) {
                base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                return !b || b == base ? p1 : m;
              });

              if (b) {
                base = b;
                s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
              }

              if (str != s) return new BigNumber(s, base);
            }

            if (BigNumber.DEBUG) {
              throw Error("[BigNumber Error] Not a" + (b ? ' base ' + b : '') + ' number: ' + str);
            }

            x.c = x.e = x.s = null;
          }
        };
      }();

      function round(x, sd, rm, r) {
        var d,
            i,
            j,
            k,
            n,
            ni,
            rd,
            xc = x.c,
            pows10 = POWS_TEN;

        if (xc) {
          out: {
            for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);

            i = sd - d;

            if (i < 0) {
              i += LOG_BASE;
              j = sd;
              n = xc[ni = 0];
              rd = n / pows10[d - j - 1] % 10 | 0;
            } else {
              ni = mathceil((i + 1) / LOG_BASE);

              if (ni >= xc.length) {
                if (r) {
                  for (; xc.length <= ni; xc.push(0));

                  n = rd = 0;
                  d = 1;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + 1;
                } else {
                  break out;
                }
              } else {
                n = k = xc[ni];

                for (d = 1; k >= 10; k /= 10, d++);

                i %= LOG_BASE;
                j = i - LOG_BASE + d;
                rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
              }
            }

            r = r || sd < 0 || xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
            r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));

            if (sd < 1 || !xc[0]) {
              xc.length = 0;

              if (r) {
                sd -= x.e + 1;
                xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                x.e = -sd || 0;
              } else {
                xc[0] = x.e = 0;
              }

              return x;
            }

            if (i == 0) {
              xc.length = ni;
              k = 1;
              ni--;
            } else {
              xc.length = ni + 1;
              k = pows10[LOG_BASE - i];
              xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
            }

            if (r) {
              for (;;) {
                if (ni == 0) {
                  for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);

                  j = xc[0] += k;

                  for (k = 1; j >= 10; j /= 10, k++);

                  if (i != k) {
                    x.e++;
                    if (xc[0] == BASE) xc[0] = 1;
                  }

                  break;
                } else {
                  xc[ni] += k;
                  if (xc[ni] != BASE) break;
                  xc[ni--] = 0;
                  k = 1;
                }
              }
            }

            for (i = xc.length; xc[--i] === 0; xc.pop());
          }

          if (x.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (x.e < MIN_EXP) {
            x.c = [x.e = 0];
          }
        }

        return x;
      }

      P.absoluteValue = P.abs = function () {
        var x = new BigNumber(this);
        if (x.s < 0) x.s = 1;
        return x;
      };

      P.comparedTo = function (y, b) {
        return compare(this, new BigNumber(y, b));
      };

      P.decimalPlaces = P.dp = function (dp, rm) {
        var c,
            n,
            v,
            x = this;

        if (dp != null) {
          intCheck(dp, 0, MAX);
          if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
          return round(new BigNumber(x), dp + x.e + 1, rm);
        }

        if (!(c = x.c)) return null;
        n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
        if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
        if (n < 0) n = 0;
        return n;
      };

      P.dividedBy = P.div = function (y, b) {
        return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
      };

      P.dividedToIntegerBy = P.idiv = function (y, b) {
        return div(this, new BigNumber(y, b), 0, 1);
      };

      P.exponentiatedBy = P.pow = function (n, m) {
        var half,
            isModExp,
            k,
            more,
            nIsBig,
            nIsNeg,
            nIsOdd,
            y,
            x = this;
        n = new BigNumber(n);

        if (n.c && !n.isInteger()) {
          throw Error("[BigNumber Error] Exponent not an integer: " + n);
        }

        if (m != null) m = new BigNumber(m);
        nIsBig = n.e > 14;

        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
          y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));
          return m ? y.mod(m) : y;
        }

        nIsNeg = n.s < 0;

        if (m) {
          if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
          isModExp = !nIsNeg && x.isInteger() && m.isInteger();
          if (isModExp) x = x.mod(m);
        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
          k = x.s < 0 && isOdd(n) ? -0 : 0;
          if (x.e > -1) k = 1 / k;
          return new BigNumber(nIsNeg ? 1 / k : k);
        } else if (POW_PRECISION) {
          k = mathceil(POW_PRECISION / LOG_BASE + 2);
        }

        if (nIsBig) {
          half = new BigNumber(0.5);
          nIsOdd = isOdd(n);
        } else {
          nIsOdd = n % 2;
        }

        if (nIsNeg) n.s = 1;
        y = new BigNumber(ONE);

        for (;;) {
          if (nIsOdd) {
            y = y.times(x);
            if (!y.c) break;

            if (k) {
              if (y.c.length > k) y.c.length = k;
            } else if (isModExp) {
              y = y.mod(m);
            }
          }

          if (nIsBig) {
            n = n.times(half);
            round(n, n.e + 1, 1);
            if (!n.c[0]) break;
            nIsBig = n.e > 14;
            nIsOdd = isOdd(n);
          } else {
            n = mathfloor(n / 2);
            if (!n) break;
            nIsOdd = n % 2;
          }

          x = x.times(x);

          if (k) {
            if (x.c && x.c.length > k) x.c.length = k;
          } else if (isModExp) {
            x = x.mod(m);
          }
        }

        if (isModExp) return y;
        if (nIsNeg) y = ONE.div(y);
        return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
      };

      P.integerValue = function (rm) {
        var n = new BigNumber(this);
        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
        return round(n, n.e + 1, rm);
      };

      P.isEqualTo = P.eq = function (y, b) {
        return compare(this, new BigNumber(y, b)) === 0;
      };

      P.isFinite = function () {
        return !!this.c;
      };

      P.isGreaterThan = P.gt = function (y, b) {
        return compare(this, new BigNumber(y, b)) > 0;
      };

      P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
        return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
      };

      P.isInteger = function () {
        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
      };

      P.isLessThan = P.lt = function (y, b) {
        return compare(this, new BigNumber(y, b)) < 0;
      };

      P.isLessThanOrEqualTo = P.lte = function (y, b) {
        return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
      };

      P.isNaN = function () {
        return !this.s;
      };

      P.isNegative = function () {
        return this.s < 0;
      };

      P.isPositive = function () {
        return this.s > 0;
      };

      P.isZero = function () {
        return !!this.c && this.c[0] == 0;
      };

      P.minus = function (y, b) {
        var i,
            j,
            t,
            xLTy,
            x = this,
            a = x.s;
        y = new BigNumber(y, b);
        b = y.s;
        if (!a || !b) return new BigNumber(NaN);

        if (a != b) {
          y.s = -b;
          return x.plus(y);
        }

        var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

        if (!xe || !ye) {
          if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

          if (!xc[0] || !yc[0]) {
            return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : ROUNDING_MODE == 3 ? -0 : 0);
          }
        }

        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();

        if (a = xe - ye) {
          if (xLTy = a < 0) {
            a = -a;
            t = xc;
          } else {
            ye = xe;
            t = yc;
          }

          t.reverse();

          for (b = a; b--; t.push(0));

          t.reverse();
        } else {
          j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

          for (a = b = 0; b < j; b++) {
            if (xc[b] != yc[b]) {
              xLTy = xc[b] < yc[b];
              break;
            }
          }
        }

        if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
        b = (j = yc.length) - (i = xc.length);
        if (b > 0) for (; b--; xc[i++] = 0);
        b = 99999999999999;

        for (; j > a;) {
          if (xc[--j] < yc[j]) {
            for (i = j; i && !xc[--i]; xc[i] = b);

            --xc[i];
            xc[j] += BASE;
          }

          xc[j] -= yc[j];
        }

        for (; xc[0] == 0; xc.splice(0, 1), --ye);

        if (!xc[0]) {
          y.s = ROUNDING_MODE == 3 ? -1 : 1;
          y.c = [y.e = 0];
          return y;
        }

        return normalise(y, xc, ye);
      };

      P.modulo = P.mod = function (y, b) {
        var q,
            s,
            x = this;
        y = new BigNumber(y, b);

        if (!x.c || !y.s || y.c && !y.c[0]) {
          return new BigNumber(NaN);
        } else if (!y.c || x.c && !x.c[0]) {
          return new BigNumber(x);
        }

        if (MODULO_MODE == 9) {
          s = y.s;
          y.s = 1;
          q = div(x, y, 0, 3);
          y.s = s;
          q.s *= s;
        } else {
          q = div(x, y, 0, MODULO_MODE);
        }

        y = x.minus(q.times(y));
        if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
        return y;
      };

      P.multipliedBy = P.times = function (y, b) {
        var c,
            e,
            i,
            j,
            k,
            m,
            xcL,
            xlo,
            xhi,
            ycL,
            ylo,
            yhi,
            zc,
            base,
            sqrtBase,
            x = this,
            xc = x.c,
            yc = (y = new BigNumber(y, b)).c;

        if (!xc || !yc || !xc[0] || !yc[0]) {
          if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
            y.c = y.e = y.s = null;
          } else {
            y.s *= x.s;

            if (!xc || !yc) {
              y.c = y.e = null;
            } else {
              y.c = [0];
              y.e = 0;
            }
          }

          return y;
        }

        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
        y.s *= x.s;
        xcL = xc.length;
        ycL = yc.length;
        if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

        for (i = xcL + ycL, zc = []; i--; zc.push(0));

        base = BASE;
        sqrtBase = SQRT_BASE;

        for (i = ycL; --i >= 0;) {
          c = 0;
          ylo = yc[i] % sqrtBase;
          yhi = yc[i] / sqrtBase | 0;

          for (k = xcL, j = i + k; j > i;) {
            xlo = xc[--k] % sqrtBase;
            xhi = xc[k] / sqrtBase | 0;
            m = yhi * xlo + xhi * ylo;
            xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
            c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
            zc[j--] = xlo % base;
          }

          zc[j] = c;
        }

        if (c) {
          ++e;
        } else {
          zc.splice(0, 1);
        }

        return normalise(y, zc, e);
      };

      P.negated = function () {
        var x = new BigNumber(this);
        x.s = -x.s || null;
        return x;
      };

      P.plus = function (y, b) {
        var t,
            x = this,
            a = x.s;
        y = new BigNumber(y, b);
        b = y.s;
        if (!a || !b) return new BigNumber(NaN);

        if (a != b) {
          y.s = -b;
          return x.minus(y);
        }

        var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

        if (!xe || !ye) {
          if (!xc || !yc) return new BigNumber(a / 0);
          if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
        }

        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();

        if (a = xe - ye) {
          if (a > 0) {
            ye = xe;
            t = yc;
          } else {
            a = -a;
            t = xc;
          }

          t.reverse();

          for (; a--; t.push(0));

          t.reverse();
        }

        a = xc.length;
        b = yc.length;
        if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

        for (a = 0; b;) {
          a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
          xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
        }

        if (a) {
          xc = [a].concat(xc);
          ++ye;
        }

        return normalise(y, xc, ye);
      };

      P.precision = P.sd = function (sd, rm) {
        var c,
            n,
            v,
            x = this;

        if (sd != null && sd !== !!sd) {
          intCheck(sd, 1, MAX);
          if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);
          return round(new BigNumber(x), sd, rm);
        }

        if (!(c = x.c)) return null;
        v = c.length - 1;
        n = v * LOG_BASE + 1;

        if (v = c[v]) {
          for (; v % 10 == 0; v /= 10, n--);

          for (v = c[0]; v >= 10; v /= 10, n++);
        }

        if (sd && x.e + 1 > n) n = x.e + 1;
        return n;
      };

      P.shiftedBy = function (k) {
        intCheck(k, -9007199254740991, MAX_SAFE_INTEGER);
        return this.times('1e' + k);
      };

      P.squareRoot = P.sqrt = function () {
        var m,
            n,
            r,
            rep,
            t,
            x = this,
            c = x.c,
            s = x.s,
            e = x.e,
            dp = DECIMAL_PLACES + 4,
            half = new BigNumber('0.5');

        if (s !== 1 || !c || !c[0]) {
          return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
        }

        s = Math.sqrt(+x);

        if (s == 0 || s == 1 / 0) {
          n = coeffToString(c);
          if ((n.length + e) % 2 == 0) n += '0';
          s = Math.sqrt(n);
          e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

          if (s == 1 / 0) {
            n = '1e' + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf('e') + 1) + e;
          }

          r = new BigNumber(n);
        } else {
          r = new BigNumber(s + '');
        }

        if (r.c[0]) {
          e = r.e;
          s = e + dp;
          if (s < 3) s = 0;

          for (;;) {
            t = r;
            r = half.times(t.plus(div(x, t, dp, 1)));

            if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
              if (r.e < e) --s;
              n = n.slice(s - 3, s + 1);

              if (n == '9999' || !rep && n == '4999') {
                if (!rep) {
                  round(t, t.e + DECIMAL_PLACES + 2, 0);

                  if (t.times(t).eq(x)) {
                    r = t;
                    break;
                  }
                }

                dp += 4;
                s += 4;
                rep = 1;
              } else {
                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                  round(r, r.e + DECIMAL_PLACES + 2, 1);
                  m = !r.times(r).eq(x);
                }

                break;
              }
            }
          }
        }

        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
      };

      P.toExponential = function (dp, rm) {
        if (dp != null) {
          intCheck(dp, 0, MAX);
          dp++;
        }

        return format(this, dp, rm, 1);
      };

      P.toFixed = function (dp, rm) {
        if (dp != null) {
          intCheck(dp, 0, MAX);
          dp = dp + this.e + 1;
        }

        return format(this, dp, rm);
      };

      P.toFormat = function (dp, rm) {
        var str = this.toFixed(dp, rm);

        if (this.c) {
          var i,
              arr = str.split('.'),
              g1 = +FORMAT.groupSize,
              g2 = +FORMAT.secondaryGroupSize,
              groupSeparator = FORMAT.groupSeparator,
              intPart = arr[0],
              fractionPart = arr[1],
              isNeg = this.s < 0,
              intDigits = isNeg ? intPart.slice(1) : intPart,
              len = intDigits.length;
          if (g2) i = g1, g1 = g2, g2 = i, len -= i;

          if (g1 > 0 && len > 0) {
            i = len % g1 || g1;
            intPart = intDigits.substr(0, i);

            for (; i < len; i += g1) {
              intPart += groupSeparator + intDigits.substr(i, g1);
            }

            if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
            if (isNeg) intPart = '-' + intPart;
          }

          str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;
        }

        return str;
      };

      P.toFraction = function (md) {
        var arr,
            d,
            d0,
            d1,
            d2,
            e,
            exp,
            n,
            n0,
            n1,
            q,
            s,
            x = this,
            xc = x.c;

        if (md != null) {
          n = new BigNumber(md);

          if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
            throw Error("[BigNumber Error] Argument " + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);
          }
        }

        if (!xc) return x.toString();
        d = new BigNumber(ONE);
        n1 = d0 = new BigNumber(ONE);
        d1 = n0 = new BigNumber(ONE);
        s = coeffToString(xc);
        e = d.e = s.length - x.e - 1;
        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
        md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
        exp = MAX_EXP;
        MAX_EXP = 1 / 0;
        n = new BigNumber(s);
        n0.c[0] = 0;

        for (;;) {
          q = div(n, d, 0, 1);
          d2 = d0.plus(q.times(d1));
          if (d2.comparedTo(md) == 1) break;
          d0 = d1;
          d1 = d2;
          n1 = n0.plus(q.times(d2 = n1));
          n0 = d2;
          d = n.minus(q.times(d2 = d));
          n = d2;
        }

        d2 = div(md.minus(d0), d1, 0, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;
        e *= 2;
        arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];
        MAX_EXP = exp;
        return arr;
      };

      P.toNumber = function () {
        return +this;
      };

      P.toPrecision = function (sd, rm) {
        if (sd != null) intCheck(sd, 1, MAX);
        return format(this, sd, rm, 2);
      };

      P.toString = function (b) {
        var str,
            n = this,
            s = n.s,
            e = n.e;

        if (e === null) {
          if (s) {
            str = 'Infinity';
            if (s < 0) str = '-' + str;
          } else {
            str = 'NaN';
          }
        } else {
          str = coeffToString(n.c);

          if (b == null) {
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');
          } else {
            intCheck(b, 2, ALPHABET.length, 'Base');
            str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);
          }

          if (s < 0 && n.c[0]) str = '-' + str;
        }

        return str;
      };

      P.valueOf = P.toJSON = function () {
        var str,
            n = this,
            e = n.e;
        if (e === null) return n.toString();
        str = coeffToString(n.c);
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');
        return n.s < 0 ? '-' + str : str;
      };

      P._isBigNumber = true;
      if (configObject != null) BigNumber.set(configObject);
      return BigNumber;
    }

    function bitFloor(n) {
      var i = n | 0;
      return n > 0 || n === i ? i : i - 1;
    }

    function coeffToString(a) {
      var s,
          z,
          i = 1,
          j = a.length,
          r = a[0] + '';

      for (; i < j;) {
        s = a[i++] + '';
        z = LOG_BASE - s.length;

        for (; z--; s = '0' + s);

        r += s;
      }

      for (j = r.length; r.charCodeAt(--j) === 48;);

      return r.slice(0, j + 1 || 1);
    }

    function compare(x, y) {
      var a,
          b,
          xc = x.c,
          yc = y.c,
          i = x.s,
          j = y.s,
          k = x.e,
          l = y.e;
      if (!i || !j) return null;
      a = xc && !xc[0];
      b = yc && !yc[0];
      if (a || b) return a ? b ? 0 : -j : i;
      if (i != j) return i;
      a = i < 0;
      b = k == l;
      if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
      if (!b) return k > l ^ a ? 1 : -1;
      j = (k = xc.length) < (l = yc.length) ? k : l;

      for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

      return k == l ? 0 : k > l ^ a ? 1 : -1;
    }

    function intCheck(n, min, max, name) {
      if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {
        throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + n);
      }
    }

    function isArray(obj) {
      return Object.prototype.toString.call(obj) == '[object Array]';
    }

    function isOdd(n) {
      var k = n.c.length - 1;
      return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    }

    function toExponential(str, e) {
      return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
    }

    function toFixedPoint(str, e, z) {
      var len, zs;

      if (e < 0) {
        for (zs = z + '.'; ++e; zs += z);

        str = zs + str;
      } else {
        len = str.length;

        if (++e > len) {
          for (zs = z, e -= len; --e; zs += z);

          str += zs;
        } else if (e < len) {
          str = str.slice(0, e) + '.' + str.slice(e);
        }
      }

      return str;
    }

    BigNumber = clone();
    BigNumber['default'] = BigNumber.BigNumber = BigNumber;

    if (typeof define == 'function' && define.amd) {
      define(function () {
        return BigNumber;
      });
    } else if (typeof module != 'undefined' && module.exports) {
      module.exports = BigNumber;
    } else {
      if (!globalObject) {
        globalObject = typeof self != 'undefined' && self ? self : window;
      }

      globalObject.BigNumber = BigNumber;
    }
  })(this);
},25,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _assertThisInitialized(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  module.exports = _assertThisInitialized;
},26,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __importStar = this && this.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var ethers = __importStar(_$$_REQUIRE(_dependencyMap[0]));

  exports.ethers = ethers;

  try {
    var anyGlobal = window;

    if (anyGlobal._ethers == null) {
      anyGlobal._ethers = ethers;
    }
  } catch (error) {}

  var ethers_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.Signer = ethers_1.Signer;
  exports.Wallet = ethers_1.Wallet;
  exports.VoidSigner = ethers_1.VoidSigner;
  exports.getDefaultProvider = ethers_1.getDefaultProvider;
  exports.providers = ethers_1.providers;
  exports.Contract = ethers_1.Contract;
  exports.ContractFactory = ethers_1.ContractFactory;
  exports.BigNumber = ethers_1.BigNumber;
  exports.FixedNumber = ethers_1.FixedNumber;
  exports.constants = ethers_1.constants;
  exports.errors = ethers_1.errors;
  exports.logger = ethers_1.logger;
  exports.utils = ethers_1.utils;
  exports.wordlists = ethers_1.wordlists;
  exports.version = ethers_1.version;
  exports.Wordlist = ethers_1.Wordlist;
},27,[28]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __importStar = this && this.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var contracts_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.Contract = contracts_1.Contract;
  exports.ContractFactory = contracts_1.ContractFactory;

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.BigNumber = bignumber_1.BigNumber;
  exports.FixedNumber = bignumber_1.FixedNumber;

  var abstract_signer_1 = _$$_REQUIRE(_dependencyMap[2]);

  exports.Signer = abstract_signer_1.Signer;
  exports.VoidSigner = abstract_signer_1.VoidSigner;

  var wallet_1 = _$$_REQUIRE(_dependencyMap[3]);

  exports.Wallet = wallet_1.Wallet;

  var constants = __importStar(_$$_REQUIRE(_dependencyMap[4]));

  exports.constants = constants;

  var providers = __importStar(_$$_REQUIRE(_dependencyMap[5]));

  exports.providers = providers;

  var providers_1 = _$$_REQUIRE(_dependencyMap[5]);

  exports.getDefaultProvider = providers_1.getDefaultProvider;

  var wordlists_1 = _$$_REQUIRE(_dependencyMap[6]);

  exports.Wordlist = wordlists_1.Wordlist;
  exports.wordlists = wordlists_1.wordlists;

  var utils = __importStar(_$$_REQUIRE(_dependencyMap[7]));

  exports.utils = utils;

  var logger_1 = _$$_REQUIRE(_dependencyMap[8]);

  exports.errors = logger_1.ErrorCode;

  var _version_1 = _$$_REQUIRE(_dependencyMap[9]);

  exports.version = _version_1.version;
  var logger = new logger_1.Logger(_version_1.version);
  exports.logger = logger;
},28,[29,32,82,85,61,160,135,206,37,210]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  var __spreadArrays = this && this.__spreadArrays || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

    return r;
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abi_1 = _$$_REQUIRE(_dependencyMap[0]);

  var abstract_provider_1 = _$$_REQUIRE(_dependencyMap[1]);

  var abstract_signer_1 = _$$_REQUIRE(_dependencyMap[2]);

  var address_1 = _$$_REQUIRE(_dependencyMap[3]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[4]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[5]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[6]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[7]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[8]);

  var logger = new logger_1.Logger(_version_1.version);
  ;
  ;
  var allowedTransactionKeys = {
    chainId: true,
    data: true,
    from: true,
    gasLimit: true,
    gasPrice: true,
    nonce: true,
    to: true,
    value: true
  };

  function resolveName(resolver, nameOrPromise) {
    return __awaiter(this, undefined, undefined, function () {
      var name, address;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4, nameOrPromise];

          case 1:
            name = _a.sent();

            try {
              return [2, address_1.getAddress(name)];
            } catch (error) {}

            if (!resolver) {
              logger.throwError("a provider or signer is needed to resolve ENS names", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resolveName"
              });
            }

            return [4, resolver.resolveName(name)];

          case 2:
            address = _a.sent();

            if (address == null) {
              logger.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
            }

            return [2, address];
        }
      });
    });
  }

  function resolveAddresses(resolver, value, paramType) {
    return __awaiter(this, undefined, undefined, function () {
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!Array.isArray(paramType)) return [3, 2];
            return [4, Promise.all(paramType.map(function (paramType, index) {
              return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);
            }))];

          case 1:
            return [2, _a.sent()];

          case 2:
            if (!(paramType.type === "address")) return [3, 4];
            return [4, resolveName(resolver, value)];

          case 3:
            return [2, _a.sent()];

          case 4:
            if (!(paramType.type === "tuple")) return [3, 6];
            return [4, resolveAddresses(resolver, value, paramType.components)];

          case 5:
            return [2, _a.sent()];

          case 6:
            if (!(paramType.baseType === "array")) return [3, 8];

            if (!Array.isArray(value)) {
              return [2, Promise.reject(new Error("invalid value for array"))];
            }

            return [4, Promise.all(value.map(function (v) {
              return resolveAddresses(resolver, v, paramType.arrayChildren);
            }))];

          case 7:
            return [2, _a.sent()];

          case 8:
            return [2, value];
        }
      });
    });
  }

  function popuTransaction(contract, fragment, args) {
    return __awaiter(this, undefined, undefined, function () {
      var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            overrides = {};

            if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
              overrides = properties_1.shallowCopy(args.pop());
            }

            logger.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");

            if (contract.signer) {
              if (overrides.from) {
                overrides.from = properties_1.resolveProperties({
                  override: resolveName(contract.signer, overrides.from),
                  signer: contract.signer.getAddress()
                }).then(function (check) {
                  return __awaiter(_this, undefined, undefined, function () {
                    return __generator(this, function (_a) {
                      if (address_1.getAddress(check.signer) !== check.override) {
                        logger.throwError("Contract with a Signer cannot override from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                          operation: "overrides.from"
                        });
                      }

                      return [2, check.override];
                    });
                  });
                });
              } else {
                overrides.from = contract.signer.getAddress();
              }
            } else if (overrides.from) {
              overrides.from = resolveName(contract.provider, overrides.from);
            }

            return [4, properties_1.resolveProperties({
              args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
              address: contract.resolvedAddress,
              overrides: properties_1.resolveProperties(overrides) || {}
            })];

          case 1:
            resolved = _a.sent();
            data = contract.interface.encodeFunctionData(fragment, resolved.args);
            tx = {
              data: data,
              to: resolved.address
            };
            ro = resolved.overrides;

            if (ro.nonce != null) {
              tx.nonce = bignumber_1.BigNumber.from(ro.nonce).toNumber();
            }

            if (ro.gasLimit != null) {
              tx.gasLimit = bignumber_1.BigNumber.from(ro.gasLimit);
            }

            if (ro.gasPrice != null) {
              tx.gasPrice = bignumber_1.BigNumber.from(ro.gasPrice);
            }

            if (ro.from != null) {
              tx.from = ro.from;
            }

            if (tx.gasLimit == null && fragment.gas != null) {
              intrinsic = 21000;
              bytes = bytes_1.arrayify(data);

              for (i = 0; i < bytes.length; i++) {
                intrinsic += 4;

                if (bytes[i]) {
                  intrinsic += 64;
                }
              }

              tx.gasLimit = bignumber_1.BigNumber.from(fragment.gas).add(intrinsic);
            }

            if (ro.value) {
              roValue = bignumber_1.BigNumber.from(ro.value);

              if (!roValue.isZero() && !fragment.payable) {
                logger.throwError("non-payable method cannot override value", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "overrides.value",
                  value: overrides.value
                });
              }

              tx.value = roValue;
            }

            delete overrides.nonce;
            delete overrides.gasLimit;
            delete overrides.gasPrice;
            delete overrides.from;
            delete overrides.value;
            leftovers = Object.keys(overrides).filter(function (key) {
              return overrides[key] != null;
            });

            if (leftovers.length) {
              logger.throwError("cannot override " + leftovers.map(function (l) {
                return JSON.stringify(l);
              }).join(","), logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "overrides",
                overrides: leftovers
              });
            }

            return [2, tx];
        }
      });
    });
  }

  function buildPopu(contract, fragment) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return popuTransaction(contract, fragment, args);
    };
  }

  function buildEstimate(contract, fragment) {
    var signerOrProvider = contract.signer || contract.provider;
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return __awaiter(this, undefined, undefined, function () {
        var tx;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!signerOrProvider) {
                logger.throwError("estimate require a provider or signer", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "estimateGas"
                });
              }

              return [4, popuTransaction(contract, fragment, args)];

            case 1:
              tx = _a.sent();
              return [4, signerOrProvider.estimateGas(tx)];

            case 2:
              return [2, _a.sent()];
          }
        });
      });
    };
  }

  function buildCall(contract, fragment, collapseSimple) {
    var signerOrProvider = contract.signer || contract.provider;
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return __awaiter(this, undefined, undefined, function () {
        var blockTag, overrides, tx, result, value;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              blockTag = undefined;
              if (!(args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object")) return [3, 3];
              overrides = properties_1.shallowCopy(args.pop());
              if (!(overrides.blockTag != null)) return [3, 2];
              return [4, overrides.blockTag];

            case 1:
              blockTag = _a.sent();
              _a.label = 2;

            case 2:
              delete overrides.blockTag;
              args.push(overrides);
              _a.label = 3;

            case 3:
              if (!(contract.deployTransaction != null)) return [3, 5];
              return [4, contract._deployed(blockTag)];

            case 4:
              _a.sent();

              _a.label = 5;

            case 5:
              return [4, popuTransaction(contract, fragment, args)];

            case 6:
              tx = _a.sent();
              return [4, signerOrProvider.call(tx, blockTag)];

            case 7:
              result = _a.sent();

              try {
                value = contract.interface.decodeFunctionResult(fragment, result);

                if (collapseSimple && fragment.outputs.length === 1) {
                  value = value[0];
                }

                return [2, value];
              } catch (error) {
                if (error.code === logger_1.Logger.errors.CALL_EXCEPTION) {
                  error.address = contract.address;
                  error.args = args;
                  error.transaction = tx;
                }

                throw error;
              }

              return [2];
          }
        });
      });
    };
  }

  function buildSend(contract, fragment) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return __awaiter(this, undefined, undefined, function () {
        var txRequest, tx, wait;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!contract.signer) {
                logger.throwError("sending a transaction requires a signer", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "sendTransaction"
                });
              }

              if (!(contract.deployTransaction != null)) return [3, 2];
              return [4, contract._deployed()];

            case 1:
              _a.sent();

              _a.label = 2;

            case 2:
              return [4, popuTransaction(contract, fragment, args)];

            case 3:
              txRequest = _a.sent();
              return [4, contract.signer.sendTransaction(txRequest)];

            case 4:
              tx = _a.sent();
              wait = tx.wait.bind(tx);

              tx.wait = function (confirmations) {
                return wait(confirmations).then(function (receipt) {
                  receipt.events = receipt.logs.map(function (log) {
                    var event = properties_1.deepCopy(log);
                    var parsed = null;

                    try {
                      parsed = contract.interface.parseLog(log);
                    } catch (e) {}

                    if (parsed) {
                      event.args = parsed.args;

                      event.decode = function (data, topics) {
                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                      };

                      event.event = parsed.name;
                      event.eventSignature = parsed.signature;
                    }

                    event.removeListener = function () {
                      return contract.provider;
                    };

                    event.getBlock = function () {
                      return contract.provider.getBlock(receipt.blockHash);
                    };

                    event.getTransaction = function () {
                      return contract.provider.getTransaction(receipt.transactionHash);
                    };

                    event.getTransactionReceipt = function () {
                      return Promise.resolve(receipt);
                    };

                    return event;
                  });
                  return receipt;
                });
              };

              return [2, tx];
          }
        });
      });
    };
  }

  function buildDefault(contract, fragment, collapseSimple) {
    if (fragment.constant) {
      return buildCall(contract, fragment, collapseSimple);
    }

    return buildSend(contract, fragment);
  }

  function getEventTag(filter) {
    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
      return "*";
    }

    return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map(function (topic) {
      if (Array.isArray(topic)) {
        return topic.join("|");
      }

      return topic;
    }).join(":") : "");
  }

  var RunningEvent = function () {
    function RunningEvent(tag, filter) {
      properties_1.defineReadOnly(this, "tag", tag);
      properties_1.defineReadOnly(this, "filter", filter);
      this._listeners = [];
    }

    RunningEvent.prototype.addListener = function (listener, once) {
      this._listeners.push({
        listener: listener,
        once: once
      });
    };

    RunningEvent.prototype.removeListener = function (listener) {
      var done = false;
      this._listeners = this._listeners.filter(function (item) {
        if (done || item.listener !== listener) {
          return true;
        }

        done = true;
        return false;
      });
    };

    RunningEvent.prototype.removeAllListeners = function () {
      this._listeners = [];
    };

    RunningEvent.prototype.listeners = function () {
      return this._listeners.map(function (i) {
        return i.listener;
      });
    };

    RunningEvent.prototype.listenerCount = function () {
      return this._listeners.length;
    };

    RunningEvent.prototype.run = function (args) {
      var _this = this;

      var listenerCount = this.listenerCount();
      this._listeners = this._listeners.filter(function (item) {
        var argsCopy = args.slice();
        setTimeout(function () {
          item.listener.apply(_this, argsCopy);
        }, 0);
        return !item.once;
      });
      return listenerCount;
    };

    RunningEvent.prototype.prepareEvent = function (event) {};

    RunningEvent.prototype.getEmit = function (event) {
      return [event];
    };

    return RunningEvent;
  }();

  var ErrorRunningEvent = function (_super) {
    __extends(ErrorRunningEvent, _super);

    function ErrorRunningEvent() {
      return _super.call(this, "error", null) || this;
    }

    return ErrorRunningEvent;
  }(RunningEvent);

  var FragmentRunningEvent = function (_super) {
    __extends(FragmentRunningEvent, _super);

    function FragmentRunningEvent(address, contractInterface, fragment, topics) {
      var _this = this;

      var filter = {
        address: address
      };
      var topic = contractInterface.getEventTopic(fragment);

      if (topics) {
        if (topic !== topics[0]) {
          logger.throwArgumentError("topic mismatch", "topics", topics);
        }

        filter.topics = topics.slice();
      } else {
        filter.topics = [topic];
      }

      _this = _super.call(this, getEventTag(filter), filter) || this;
      properties_1.defineReadOnly(_this, "address", address);
      properties_1.defineReadOnly(_this, "interface", contractInterface);
      properties_1.defineReadOnly(_this, "fragment", fragment);
      return _this;
    }

    FragmentRunningEvent.prototype.prepareEvent = function (event) {
      var _this = this;

      _super.prototype.prepareEvent.call(this, event);

      event.event = this.fragment.name;
      event.eventSignature = this.fragment.format();

      event.decode = function (data, topics) {
        return _this.interface.decodeEventLog(_this.fragment, data, topics);
      };

      try {
        event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
      } catch (error) {
        event.args = null;
        event.decodeError = error;
      }
    };

    FragmentRunningEvent.prototype.getEmit = function (event) {
      var errors = abi_1.checkResultErrors(event.args);

      if (errors.length) {
        throw errors[0].error;
      }

      var args = (event.args || []).slice();
      args.push(event);
      return args;
    };

    return FragmentRunningEvent;
  }(RunningEvent);

  var WildcardRunningEvent = function (_super) {
    __extends(WildcardRunningEvent, _super);

    function WildcardRunningEvent(address, contractInterface) {
      var _this = _super.call(this, "*", {
        address: address
      }) || this;

      properties_1.defineReadOnly(_this, "address", address);
      properties_1.defineReadOnly(_this, "interface", contractInterface);
      return _this;
    }

    WildcardRunningEvent.prototype.prepareEvent = function (event) {
      var _this = this;

      _super.prototype.prepareEvent.call(this, event);

      try {
        var parsed_1 = this.interface.parseLog(event);
        event.event = parsed_1.name;
        event.eventSignature = parsed_1.signature;

        event.decode = function (data, topics) {
          return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);
        };

        event.args = parsed_1.args;
      } catch (error) {}
    };

    return WildcardRunningEvent;
  }(RunningEvent);

  var Contract = function () {
    function Contract(addressOrName, contractInterface, signerOrProvider) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, Contract);
      properties_1.defineReadOnly(this, "interface", properties_1.getStatic(_newTarget, "getInterface")(contractInterface));

      if (signerOrProvider == null) {
        properties_1.defineReadOnly(this, "provider", null);
        properties_1.defineReadOnly(this, "signer", null);
      } else if (abstract_signer_1.Signer.isSigner(signerOrProvider)) {
        properties_1.defineReadOnly(this, "provider", signerOrProvider.provider || null);
        properties_1.defineReadOnly(this, "signer", signerOrProvider);
      } else if (abstract_provider_1.Provider.isProvider(signerOrProvider)) {
        properties_1.defineReadOnly(this, "provider", signerOrProvider);
        properties_1.defineReadOnly(this, "signer", null);
      } else {
        logger.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
      }

      properties_1.defineReadOnly(this, "callStatic", {});
      properties_1.defineReadOnly(this, "estimateGas", {});
      properties_1.defineReadOnly(this, "functions", {});
      properties_1.defineReadOnly(this, "popuTransaction", {});
      properties_1.defineReadOnly(this, "filters", {});
      {
        var uniqueFilters_1 = {};
        Object.keys(this.interface.events).forEach(function (eventSignature) {
          var event = _this.interface.events[eventSignature];
          properties_1.defineReadOnly(_this.filters, eventSignature, function () {
            var args = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }

            return {
              address: _this.address,
              topics: _this.interface.encodeFilterTopics(event, args)
            };
          });

          if (!uniqueFilters_1[event.name]) {
            uniqueFilters_1[event.name] = [];
          }

          uniqueFilters_1[event.name].push(eventSignature);
        });
        Object.keys(uniqueFilters_1).forEach(function (name) {
          var filters = uniqueFilters_1[name];

          if (filters.length === 1) {
            properties_1.defineReadOnly(_this.filters, name, _this.filters[filters[0]]);
          } else {
            logger.warn("Duplicate definition of " + name + " (" + filters.join(", ") + ")");
          }
        });
      }
      properties_1.defineReadOnly(this, "_runningEvents", {});
      properties_1.defineReadOnly(this, "_wrappedEmits", {});
      properties_1.defineReadOnly(this, "address", addressOrName);

      if (this.provider) {
        properties_1.defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
      } else {
        try {
          properties_1.defineReadOnly(this, "resolvedAddress", Promise.resolve(address_1.getAddress(addressOrName)));
        } catch (error) {
          logger.throwError("provider is required to use ENS name as contract address", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new Contract"
          });
        }
      }

      var uniqueNames = {};
      var uniqueSignatures = {};
      Object.keys(this.interface.functions).forEach(function (signature) {
        var fragment = _this.interface.functions[signature];

        if (uniqueSignatures[signature]) {
          logger.warn("Duplicate ABI entry for " + JSON.stringify(name));
          return;
        }

        uniqueSignatures[signature] = true;
        {
          var name_1 = fragment.name;

          if (!uniqueNames[name_1]) {
            uniqueNames[name_1] = [];
          }

          uniqueNames[name_1].push(signature);
        }

        if (_this[signature] == null) {
          properties_1.defineReadOnly(_this, signature, buildDefault(_this, fragment, true));
        }

        if (_this.functions[signature] == null) {
          properties_1.defineReadOnly(_this.functions, signature, buildDefault(_this, fragment, false));
        }

        if (_this.callStatic[signature] == null) {
          properties_1.defineReadOnly(_this.callStatic, signature, buildCall(_this, fragment, true));
        }

        if (_this.popuTransaction[signature] == null) {
          properties_1.defineReadOnly(_this.popuTransaction, signature, buildPopu(_this, fragment));
        }

        if (_this.estimateGas[signature] == null) {
          properties_1.defineReadOnly(_this.estimateGas, signature, buildEstimate(_this, fragment));
        }
      });
      Object.keys(uniqueNames).forEach(function (name) {
        var signatures = uniqueNames[name];

        if (signatures.length > 1) {
          return;
        }

        var signature = signatures[0];

        if (_this[name] == null) {
          properties_1.defineReadOnly(_this, name, _this[signature]);
        }

        if (_this.functions[name] == null) {
          properties_1.defineReadOnly(_this.functions, name, _this.functions[signature]);
        }

        if (_this.callStatic[name] == null) {
          properties_1.defineReadOnly(_this.callStatic, name, _this.callStatic[signature]);
        }

        if (_this.popuTransaction[name] == null) {
          properties_1.defineReadOnly(_this.popuTransaction, name, _this.popuTransaction[signature]);
        }

        if (_this.estimateGas[name] == null) {
          properties_1.defineReadOnly(_this.estimateGas, name, _this.estimateGas[signature]);
        }
      });
    }

    Contract.getContractAddress = function (transaction) {
      return address_1.getContractAddress(transaction);
    };

    Contract.getInterface = function (contractInterface) {
      if (abi_1.Interface.isInterface(contractInterface)) {
        return contractInterface;
      }

      return new abi_1.Interface(contractInterface);
    };

    Contract.prototype.deployed = function () {
      return this._deployed();
    };

    Contract.prototype._deployed = function (blockTag) {
      var _this = this;

      if (!this._deployedPromise) {
        if (this.deployTransaction) {
          this._deployedPromise = this.deployTransaction.wait().then(function () {
            return _this;
          });
        } else {
          this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {
            if (code === "0x") {
              logger.throwError("contract not deployed", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                contractAddress: _this.address,
                operation: "getDeployed"
              });
            }

            return _this;
          });
        }
      }

      return this._deployedPromise;
    };

    Contract.prototype.fallback = function (overrides) {
      var _this = this;

      if (!this.signer) {
        logger.throwError("sending a transactions require a signer", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "sendTransaction(fallback)"
        });
      }

      var tx = properties_1.shallowCopy(overrides || {});
      ["from", "to"].forEach(function (key) {
        if (tx[key] == null) {
          return;
        }

        logger.throwError("cannot override " + key, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: key
        });
      });
      tx.to = this.resolvedAddress;
      return this.deployed().then(function () {
        return _this.signer.sendTransaction(tx);
      });
    };

    Contract.prototype.connect = function (signerOrProvider) {
      if (typeof signerOrProvider === "string") {
        signerOrProvider = new abstract_signer_1.VoidSigner(signerOrProvider, this.provider);
      }

      var contract = new this.constructor(this.address, this.interface, signerOrProvider);

      if (this.deployTransaction) {
        properties_1.defineReadOnly(contract, "deployTransaction", this.deployTransaction);
      }

      return contract;
    };

    Contract.prototype.attach = function (addressOrName) {
      return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
    };

    Contract.isIndexed = function (value) {
      return abi_1.Indexed.isIndexed(value);
    };

    Contract.prototype._normalizeRunningEvent = function (runningEvent) {
      if (this._runningEvents[runningEvent.tag]) {
        return this._runningEvents[runningEvent.tag];
      }

      return runningEvent;
    };

    Contract.prototype._getRunningEvent = function (eventName) {
      if (typeof eventName === "string") {
        if (eventName === "error") {
          return this._normalizeRunningEvent(new ErrorRunningEvent());
        }

        if (eventName === "event") {
          return this._normalizeRunningEvent(new RunningEvent("event", null));
        }

        if (eventName === "*") {
          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        }

        var fragment = this.interface.getEvent(eventName);
        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
      }

      if (eventName.topics && eventName.topics.length > 0) {
        try {
          var topic = eventName.topics[0];

          if (typeof topic !== "string") {
            throw new Error("invalid topic");
          }

          var fragment = this.interface.getEvent(topic);
          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
        } catch (error) {}

        var filter = {
          address: this.address,
          topics: eventName.topics
        };
        return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
      }

      return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
    };

    Contract.prototype._checkRunningEvents = function (runningEvent) {
      if (runningEvent.listenerCount() === 0) {
        delete this._runningEvents[runningEvent.tag];
        var emit = this._wrappedEmits[runningEvent.tag];

        if (emit) {
          this.provider.off(runningEvent.filter, emit);
          delete this._wrappedEmits[runningEvent.tag];
        }
      }
    };

    Contract.prototype._wrapEvent = function (runningEvent, log, listener) {
      var _this = this;

      var event = properties_1.deepCopy(log);

      event.removeListener = function () {
        if (!listener) {
          return;
        }

        runningEvent.removeListener(listener);

        _this._checkRunningEvents(runningEvent);
      };

      event.getBlock = function () {
        return _this.provider.getBlock(log.blockHash);
      };

      event.getTransaction = function () {
        return _this.provider.getTransaction(log.transactionHash);
      };

      event.getTransactionReceipt = function () {
        return _this.provider.getTransactionReceipt(log.transactionHash);
      };

      runningEvent.prepareEvent(event);
      return event;
    };

    Contract.prototype._addEventListener = function (runningEvent, listener, once) {
      var _this = this;

      if (!this.provider) {
        logger.throwError("events require a provider or a signer with a provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "once"
        });
      }

      runningEvent.addListener(listener, once);
      this._runningEvents[runningEvent.tag] = runningEvent;

      if (!this._wrappedEmits[runningEvent.tag]) {
        var wrappedEmit = function (log) {
          var event = _this._wrapEvent(runningEvent, log, listener);

          if (event.decodeError == null) {
            try {
              var args = runningEvent.getEmit(event);

              _this.emit.apply(_this, __spreadArrays([runningEvent.filter], args));
            } catch (error) {
              event.decodeError = error.error;
            }
          }

          if (runningEvent.filter != null) {
            _this.emit("event", event);
          }

          if (event.decodeError != null) {
            _this.emit("error", event.decodeError, event);
          }
        };

        this._wrappedEmits[runningEvent.tag] = wrappedEmit;

        if (runningEvent.filter != null) {
          this.provider.on(runningEvent.filter, wrappedEmit);
        }
      }
    };

    Contract.prototype.queryFilter = function (event, fromBlockOrBlockhash, toBlock) {
      var _this = this;

      var runningEvent = this._getRunningEvent(event);

      var filter = properties_1.shallowCopy(runningEvent.filter);

      if (typeof fromBlockOrBlockhash === "string" && bytes_1.isHexString(fromBlockOrBlockhash, 32)) {
        if (toBlock != null) {
          logger.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
        }

        filter.blockHash = fromBlockOrBlockhash;
      } else {
        filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
        filter.toBlock = toBlock != null ? toBlock : "st";
      }

      return this.provider.getLogs(filter).then(function (logs) {
        return logs.map(function (log) {
          return _this._wrapEvent(runningEvent, log, null);
        });
      });
    };

    Contract.prototype.on = function (event, listener) {
      this._addEventListener(this._getRunningEvent(event), listener, false);

      return this;
    };

    Contract.prototype.once = function (event, listener) {
      this._addEventListener(this._getRunningEvent(event), listener, true);

      return this;
    };

    Contract.prototype.emit = function (eventName) {
      var args = [];

      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }

      if (!this.provider) {
        return false;
      }

      var runningEvent = this._getRunningEvent(eventName);

      var result = runningEvent.run(args) > 0;

      this._checkRunningEvents(runningEvent);

      return result;
    };

    Contract.prototype.listenerCount = function (eventName) {
      if (!this.provider) {
        return 0;
      }

      return this._getRunningEvent(eventName).listenerCount();
    };

    Contract.prototype.listeners = function (eventName) {
      if (!this.provider) {
        return [];
      }

      if (eventName == null) {
        var result_1 = [];

        for (var tag in this._runningEvents) {
          this._runningEvents[tag].listeners().forEach(function (listener) {
            result_1.push(listener);
          });
        }

        return result_1;
      }

      return this._getRunningEvent(eventName).listeners();
    };

    Contract.prototype.removeAllListeners = function (eventName) {
      if (!this.provider) {
        return this;
      }

      if (eventName == null) {
        for (var tag in this._runningEvents) {
          var runningEvent_1 = this._runningEvents[tag];
          runningEvent_1.removeAllListeners();

          this._checkRunningEvents(runningEvent_1);
        }

        return this;
      }

      var runningEvent = this._getRunningEvent(eventName);

      runningEvent.removeAllListeners();

      this._checkRunningEvents(runningEvent);

      return this;
    };

    Contract.prototype.off = function (eventName, listener) {
      if (!this.provider) {
        return this;
      }

      var runningEvent = this._getRunningEvent(eventName);

      runningEvent.removeListener(listener);

      this._checkRunningEvents(runningEvent);

      return this;
    };

    Contract.prototype.removeListener = function (eventName, listener) {
      return this.off(eventName, listener);
    };

    return Contract;
  }();

  exports.Contract = Contract;

  var ContractFactory = function () {
    function ContractFactory(contractInterface, bytecode, signer) {
      var _newTarget = this.constructor;
      var bytecodeHex = null;

      if (typeof bytecode === "string") {
        bytecodeHex = bytecode;
      } else if (bytes_1.isBytes(bytecode)) {
        bytecodeHex = bytes_1.hexlify(bytecode);
      } else if (bytecode && typeof bytecode.object === "string") {
        bytecodeHex = bytecode.object;
      } else {
        bytecodeHex = "!";
      }

      if (bytecodeHex.substring(0, 2) !== "0x") {
        bytecodeHex = "0x" + bytecodeHex;
      }

      if (!bytes_1.isHexString(bytecodeHex) || bytecodeHex.length % 2) {
        logger.throwArgumentError("invalid bytecode", "bytecode", bytecode);
      }

      if (signer && !abstract_signer_1.Signer.isSigner(signer)) {
        logger.throwArgumentError("invalid signer", "signer", signer);
      }

      properties_1.defineReadOnly(this, "bytecode", bytecodeHex);
      properties_1.defineReadOnly(this, "interface", properties_1.getStatic(_newTarget, "getInterface")(contractInterface));
      properties_1.defineReadOnly(this, "signer", signer || null);
    }

    ContractFactory.prototype.getDeployTransaction = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var tx = {};

      if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        tx = properties_1.shallowCopy(args.pop());

        for (var key in tx) {
          if (!allowedTransactionKeys[key]) {
            throw new Error("unknown transaction override " + key);
          }
        }
      }

      ["data", "from", "to"].forEach(function (key) {
        if (tx[key] == null) {
          return;
        }

        logger.throwError("cannot override " + key, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: key
        });
      });
      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
      tx.data = bytes_1.hexlify(bytes_1.concat([this.bytecode, this.interface.encodeDeploy(args)]));
      return tx;
    };

    ContractFactory.prototype.deploy = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return __awaiter(this, undefined, undefined, function () {
        var overrides, params, unsignedTx, tx, address, contract;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              overrides = {};

              if (args.length === this.interface.deploy.inputs.length + 1) {
                overrides = args.pop();
              }

              logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
              return [4, resolveAddresses(this.signer, args, this.interface.deploy.inputs)];

            case 1:
              params = _a.sent();
              params.push(overrides);
              unsignedTx = this.getDeployTransaction.apply(this, params);
              return [4, this.signer.sendTransaction(unsignedTx)];

            case 2:
              tx = _a.sent();
              address = properties_1.getStatic(this.constructor, "getContractAddress")(tx);
              contract = properties_1.getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
              properties_1.defineReadOnly(contract, "deployTransaction", tx);
              return [2, contract];
          }
        });
      });
    };

    ContractFactory.prototype.attach = function (address) {
      return this.constructor.getContract(address, this.interface, this.signer);
    };

    ContractFactory.prototype.connect = function (signer) {
      return new this.constructor(this.interface, this.bytecode, signer);
    };

    ContractFactory.fromSolidity = function (compilerOutput, signer) {
      if (compilerOutput == null) {
        logger.throwError("missing compiler output", logger_1.Logger.errors.MISSING_ARGUMENT, {
          argument: "compilerOutput"
        });
      }

      if (typeof compilerOutput === "string") {
        compilerOutput = JSON.parse(compilerOutput);
      }

      var abi = compilerOutput.abi;
      var bytecode = null;

      if (compilerOutput.bytecode) {
        bytecode = compilerOutput.bytecode;
      } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
        bytecode = compilerOutput.evm.bytecode;
      }

      return new this(abi, bytecode, signer);
    };

    ContractFactory.getInterface = function (contractInterface) {
      return Contract.getInterface(contractInterface);
    };

    ContractFactory.getContractAddress = function (tx) {
      return address_1.getContractAddress(tx);
    };

    ContractFactory.getContract = function (address, contractInterface, signer) {
      return new Contract(address, contractInterface, signer);
    };

    return ContractFactory;
  }();

  exports.ContractFactory = ContractFactory;
},29,[30,80,82,48,32,36,42,37,84]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var fragments_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.ConstructorFragment = fragments_1.ConstructorFragment;
  exports.EventFragment = fragments_1.EventFragment;
  exports.FormatTypes = fragments_1.FormatTypes;
  exports.Fragment = fragments_1.Fragment;
  exports.FunctionFragment = fragments_1.FunctionFragment;
  exports.ParamType = fragments_1.ParamType;

  var abi_coder_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.AbiCoder = abi_coder_1.AbiCoder;
  exports.defaultAbiCoder = abi_coder_1.defaultAbiCoder;

  var interface_1 = _$$_REQUIRE(_dependencyMap[2]);

  exports.checkResultErrors = interface_1.checkResultErrors;
  exports.Indexed = interface_1.Indexed;
  exports.Interface = interface_1.Interface;
  exports.LogDescription = interface_1.LogDescription;
  exports.TransactionDescription = interface_1.TransactionDescription;
},30,[31,45,73]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[0]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[2]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[3]);

  var logger = new logger_1.Logger(_version_1.version);
  ;
  var _constructorGuard = {};
  var ModifiersBytes = {
    calldata: true,
    memory: true,
    storage: true
  };
  var ModifiersNest = {
    calldata: true,
    memory: true
  };

  function checkModifier(type, name) {
    if (type === "bytes" || type === "string") {
      if (ModifiersBytes[name]) {
        return true;
      }
    } else if (type === "address") {
      if (name === "payable") {
        return true;
      }
    } else if (type.indexOf("[") >= 0 || type === "tuple") {
      if (ModifiersNest[name]) {
        return true;
      }
    }

    if (ModifiersBytes[name] || name === "payable") {
      logger.throwArgumentError("invalid modifier", "name", name);
    }

    return false;
  }

  function parseParamType(param, allowIndexed) {
    var originalParam = param;

    function throwError(i) {
      logger.throwArgumentError("unexpected character at position " + i, "param", param);
    }

    param = param.replace(/\s/g, " ");

    function newNode(parent) {
      var node = {
        type: "",
        name: "",
        parent: parent,
        state: {
          allowType: true
        }
      };

      if (allowIndexed) {
        node.indexed = false;
      }

      return node;
    }

    var parent = {
      type: "",
      name: "",
      state: {
        allowType: true
      }
    };
    var node = parent;

    for (var i = 0; i < param.length; i++) {
      var c = param[i];

      switch (c) {
        case "(":
          if (node.state.allowType && node.type === "") {
            node.type = "tuple";
          } else if (!node.state.allowParams) {
            throwError(i);
          }

          node.state.allowType = false;
          node.type = verifyType(node.type);
          node.components = [newNode(node)];
          node = node.components[0];
          break;

        case ")":
          delete node.state;

          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i);
            }

            node.indexed = true;
            node.name = "";
          }

          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }

          node.type = verifyType(node.type);
          var child = node;
          node = node.parent;

          if (!node) {
            throwError(i);
          }

          delete child.parent;
          node.state.allowParams = false;
          node.state.allowName = true;
          node.state.allowArray = true;
          break;

        case ",":
          delete node.state;

          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i);
            }

            node.indexed = true;
            node.name = "";
          }

          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }

          node.type = verifyType(node.type);
          var sibling = newNode(node.parent);
          node.parent.components.push(sibling);
          delete node.parent;
          node = sibling;
          break;

        case " ":
          if (node.state.allowType) {
            if (node.type !== "") {
              node.type = verifyType(node.type);
              delete node.state.allowType;
              node.state.allowName = true;
              node.state.allowParams = true;
            }
          }

          if (node.state.allowName) {
            if (node.name !== "") {
              if (node.name === "indexed") {
                if (!allowIndexed) {
                  throwError(i);
                }

                if (node.indexed) {
                  throwError(i);
                }

                node.indexed = true;
                node.name = "";
              } else if (checkModifier(node.type, node.name)) {
                node.name = "";
              } else {
                node.state.allowName = false;
              }
            }
          }

          break;

        case "[":
          if (!node.state.allowArray) {
            throwError(i);
          }

          node.type += c;
          node.state.allowArray = false;
          node.state.allowName = false;
          node.state.readArray = true;
          break;

        case "]":
          if (!node.state.readArray) {
            throwError(i);
          }

          node.type += c;
          node.state.readArray = false;
          node.state.allowArray = true;
          node.state.allowName = true;
          break;

        default:
          if (node.state.allowType) {
            node.type += c;
            node.state.allowParams = true;
            node.state.allowArray = true;
          } else if (node.state.allowName) {
            node.name += c;
            delete node.state.allowArray;
          } else if (node.state.readArray) {
            node.type += c;
          } else {
            throwError(i);
          }

      }
    }

    if (node.parent) {
      logger.throwArgumentError("unexpected eof", "param", param);
    }

    delete parent.state;

    if (node.name === "indexed") {
      if (!allowIndexed) {
        throwError(originalParam.length - 7);
      }

      if (node.indexed) {
        throwError(originalParam.length - 7);
      }

      node.indexed = true;
      node.name = "";
    } else if (checkModifier(node.type, node.name)) {
      node.name = "";
    }

    parent.type = verifyType(parent.type);
    return parent;
  }

  function popu(object, params) {
    for (var key in params) {
      properties_1.defineReadOnly(object, key, params[key]);
    }
  }

  exports.FormatTypes = Object.freeze({
    sighash: "sighash",
    minimal: "minimal",
    full: "full",
    json: "json"
  });
  var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);

  var ParamType = function () {
    function ParamType(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard) {
        logger.throwError("use fromString", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new ParamType()"
        });
      }

      popu(this, params);
      var match = this.type.match(paramTypeArray);

      if (match) {
        popu(this, {
          arrayLength: parseInt(match[2] || "-1"),
          arrayChildren: ParamType.fromObject({
            type: match[1],
            components: this.components
          }),
          baseType: "array"
        });
      } else {
        popu(this, {
          arrayLength: null,
          arrayChildren: null,
          baseType: this.components != null ? "tuple" : this.type
        });
      }

      this._isParamType = true;
      Object.freeze(this);
    }

    ParamType.prototype.format = function (format) {
      if (!format) {
        format = exports.FormatTypes.sighash;
      }

      if (!exports.FormatTypes[format]) {
        logger.throwArgumentError("invalid format type", "format", format);
      }

      if (format === exports.FormatTypes.json) {
        var result_1 = {
          type: this.baseType === "tuple" ? "tuple" : this.type,
          name: this.name || undefined
        };

        if (typeof this.indexed === "boolean") {
          result_1.indexed = this.indexed;
        }

        if (this.components) {
          result_1.components = this.components.map(function (comp) {
            return JSON.parse(comp.format(format));
          });
        }

        return JSON.stringify(result_1);
      }

      var result = "";

      if (this.baseType === "array") {
        result += this.arrayChildren.format(format);
        result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
      } else {
        if (this.baseType === "tuple") {
          if (format !== exports.FormatTypes.sighash) {
            result += this.type;
          }

          result += "(" + this.components.map(function (comp) {
            return comp.format(format);
          }).join(format === exports.FormatTypes.full ? ", " : ",") + ")";
        } else {
          result += this.type;
        }
      }

      if (format !== exports.FormatTypes.sighash) {
        if (this.indexed === true) {
          result += " indexed";
        }

        if (format === exports.FormatTypes.full && this.name) {
          result += " " + this.name;
        }
      }

      return result;
    };

    ParamType.from = function (value, allowIndexed) {
      if (typeof value === "string") {
        return ParamType.fromString(value, allowIndexed);
      }

      return ParamType.fromObject(value);
    };

    ParamType.fromObject = function (value) {
      if (ParamType.isParamType(value)) {
        return value;
      }

      return new ParamType(_constructorGuard, {
        name: value.name || null,
        type: verifyType(value.type),
        indexed: value.indexed == null ? null : !!value.indexed,
        components: value.components ? value.components.map(ParamType.fromObject) : null
      });
    };

    ParamType.fromString = function (value, allowIndexed) {
      function ParamTypify(node) {
        return ParamType.fromObject({
          name: node.name,
          type: node.type,
          indexed: node.indexed,
          components: node.components
        });
      }

      return ParamTypify(parseParamType(value, !!allowIndexed));
    };

    ParamType.isParamType = function (value) {
      return !!(value != null && value._isParamType);
    };

    return ParamType;
  }();

  exports.ParamType = ParamType;
  ;

  function parseParams(value, allowIndex) {
    return splitNesting(value).map(function (param) {
      return ParamType.fromString(param, allowIndex);
    });
  }

  var Fragment = function () {
    function Fragment(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard) {
        logger.throwError("use a static from method", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new Fragment()"
        });
      }

      popu(this, params);
      this._isFragment = true;
      Object.freeze(this);
    }

    Fragment.from = function (value) {
      if (Fragment.isFragment(value)) {
        return value;
      }

      if (typeof value === "string") {
        return Fragment.fromString(value);
      }

      return Fragment.fromObject(value);
    };

    Fragment.fromObject = function (value) {
      if (Fragment.isFragment(value)) {
        return value;
      }

      switch (value.type) {
        case "function":
          return FunctionFragment.fromObject(value);

        case "event":
          return EventFragment.fromObject(value);

        case "constructor":
          return ConstructorFragment.fromObject(value);

        case "fallback":
        case "receive":
          return null;
      }

      return logger.throwArgumentError("invalid fragment object", "value", value);
    };

    Fragment.fromString = function (value) {
      value = value.replace(/\s/g, " ");
      value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
      value = value.trim();

      if (value.split(" ")[0] === "event") {
        return EventFragment.fromString(value.substring(5).trim());
      } else if (value.split(" ")[0] === "function") {
        return FunctionFragment.fromString(value.substring(8).trim());
      } else if (value.split("(")[0].trim() === "constructor") {
        return ConstructorFragment.fromString(value.trim());
      }

      return logger.throwArgumentError("unsupported fragment", "value", value);
    };

    Fragment.isFragment = function (value) {
      return !!(value && value._isFragment);
    };

    return Fragment;
  }();

  exports.Fragment = Fragment;

  var EventFragment = function (_super) {
    __extends(EventFragment, _super);

    function EventFragment() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    EventFragment.prototype.format = function (format) {
      if (!format) {
        format = exports.FormatTypes.sighash;
      }

      if (!exports.FormatTypes[format]) {
        logger.throwArgumentError("invalid format type", "format", format);
      }

      if (format === exports.FormatTypes.json) {
        return JSON.stringify({
          type: "event",
          anonymous: this.anonymous,
          name: this.name,
          inputs: this.inputs.map(function (input) {
            return JSON.parse(input.format(format));
          })
        });
      }

      var result = "";

      if (format !== exports.FormatTypes.sighash) {
        result += "event ";
      }

      result += this.name + "(" + this.inputs.map(function (input) {
        return input.format(format);
      }).join(format === exports.FormatTypes.full ? ", " : ",") + ") ";

      if (format !== exports.FormatTypes.sighash) {
        if (this.anonymous) {
          result += "anonymous ";
        }
      }

      return result.trim();
    };

    EventFragment.from = function (value) {
      if (typeof value === "string") {
        return EventFragment.fromString(value);
      }

      return EventFragment.fromObject(value);
    };

    EventFragment.fromObject = function (value) {
      if (EventFragment.isEventFragment(value)) {
        return value;
      }

      if (value.type !== "event") {
        logger.throwArgumentError("invalid event object", "value", value);
      }

      var params = {
        name: verifyIdentifier(value.name),
        anonymous: value.anonymous,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        type: "event"
      };
      return new EventFragment(_constructorGuard, params);
    };

    EventFragment.fromString = function (value) {
      var match = value.match(regexParen);

      if (!match) {
        logger.throwArgumentError("invalid event string", "value", value);
      }

      var anonymous = false;
      match[3].split(" ").forEach(function (modifier) {
        switch (modifier.trim()) {
          case "anonymous":
            anonymous = true;
            break;

          case "":
            break;

          default:
            logger.warn("unknown modifier: " + modifier);
        }
      });
      return EventFragment.fromObject({
        name: match[1].trim(),
        anonymous: anonymous,
        inputs: parseParams(match[2], true),
        type: "event"
      });
    };

    EventFragment.isEventFragment = function (value) {
      return value && value._isFragment && value.type === "event";
    };

    return EventFragment;
  }(Fragment);

  exports.EventFragment = EventFragment;

  function parseGas(value, params) {
    params.gas = null;
    var comps = value.split("@");

    if (comps.length !== 1) {
      if (comps.length > 2) {
        logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
      }

      if (!comps[1].match(/^[0-9]+$/)) {
        logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
      }

      params.gas = bignumber_1.BigNumber.from(comps[1]);
      return comps[0];
    }

    return value;
  }

  function parseModifiers(value, params) {
    params.constant = false;
    params.payable = false;
    params.stateMutability = "nonpayable";
    value.split(" ").forEach(function (modifier) {
      switch (modifier.trim()) {
        case "constant":
          params.constant = true;
          break;

        case "payable":
          params.payable = true;
          params.stateMutability = "payable";
          break;

        case "nonpayable":
          params.payable = false;
          params.stateMutability = "nonpayable";
          break;

        case "pure":
          params.constant = true;
          params.stateMutability = "pure";
          break;

        case "view":
          params.constant = true;
          params.stateMutability = "view";
          break;

        case "external":
        case "public":
        case "":
          break;

        default:
          console.log("unknown modifier: " + modifier);
      }
    });
  }

  function verifyState(value) {
    var result = {
      constant: false,
      payable: true,
      stateMutability: "payable"
    };

    if (value.stateMutability != null) {
      result.stateMutability = value.stateMutability;
      result.constant = result.stateMutability === "view" || result.stateMutability === "pure";

      if (value.constant != null) {
        if (!!value.constant !== result.constant) {
          logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
        }
      }

      result.payable = result.stateMutability === "payable";

      if (value.payable != null) {
        if (!!value.payable !== result.payable) {
          logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
        }
      }
    } else if (value.payable != null) {
      result.payable = !!value.payable;

      if (value.constant == null && !result.payable && value.type !== "constructor") {
        logger.throwArgumentError("unable to determine stateMutability", "value", value);
      }

      result.constant = !!value.constant;

      if (result.constant) {
        result.stateMutability = "view";
      } else {
        result.stateMutability = result.payable ? "payable" : "nonpayable";
      }

      if (result.payable && result.constant) {
        logger.throwArgumentError("cannot have constant payable function", "value", value);
      }
    } else if (value.constant != null) {
      result.constant = !!value.constant;
      result.payable = !result.constant;
      result.stateMutability = result.constant ? "view" : "payable";
    } else if (value.type !== "constructor") {
      logger.throwArgumentError("unable to determine stateMutability", "value", value);
    }

    return result;
  }

  var ConstructorFragment = function (_super) {
    __extends(ConstructorFragment, _super);

    function ConstructorFragment() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    ConstructorFragment.prototype.format = function (format) {
      if (!format) {
        format = exports.FormatTypes.sighash;
      }

      if (!exports.FormatTypes[format]) {
        logger.throwArgumentError("invalid format type", "format", format);
      }

      if (format === exports.FormatTypes.json) {
        return JSON.stringify({
          type: "constructor",
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
          payble: this.payable,
          gas: this.gas ? this.gas.toNumber() : undefined,
          inputs: this.inputs.map(function (input) {
            return JSON.parse(input.format(format));
          })
        });
      }

      if (format === exports.FormatTypes.sighash) {
        logger.throwError("cannot format a constructor for sighash", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "format(sighash)"
        });
      }

      var result = "constructor(" + this.inputs.map(function (input) {
        return input.format(format);
      }).join(format === exports.FormatTypes.full ? ", " : ",") + ") ";

      if (this.stateMutability && this.stateMutability !== "nonpayable") {
        result += this.stateMutability + " ";
      }

      return result.trim();
    };

    ConstructorFragment.from = function (value) {
      if (typeof value === "string") {
        return ConstructorFragment.fromString(value);
      }

      return ConstructorFragment.fromObject(value);
    };

    ConstructorFragment.fromObject = function (value) {
      if (ConstructorFragment.isConstructorFragment(value)) {
        return value;
      }

      if (value.type !== "constructor") {
        logger.throwArgumentError("invalid constructor object", "value", value);
      }

      var state = verifyState(value);

      if (state.constant) {
        logger.throwArgumentError("constructor cannot be constant", "value", value);
      }

      var params = {
        name: null,
        type: value.type,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        payable: state.payable,
        stateMutability: state.stateMutability,
        gas: value.gas ? bignumber_1.BigNumber.from(value.gas) : null
      };
      return new ConstructorFragment(_constructorGuard, params);
    };

    ConstructorFragment.fromString = function (value) {
      var params = {
        type: "constructor"
      };
      value = parseGas(value, params);
      var parens = value.match(regexParen);

      if (!parens || parens[1].trim() !== "constructor") {
        logger.throwArgumentError("invalid constructor string", "value", value);
      }

      params.inputs = parseParams(parens[2].trim(), false);
      parseModifiers(parens[3].trim(), params);
      return ConstructorFragment.fromObject(params);
    };

    ConstructorFragment.isConstructorFragment = function (value) {
      return value && value._isFragment && value.type === "constructor";
    };

    return ConstructorFragment;
  }(Fragment);

  exports.ConstructorFragment = ConstructorFragment;

  var FunctionFragment = function (_super) {
    __extends(FunctionFragment, _super);

    function FunctionFragment() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    FunctionFragment.prototype.format = function (format) {
      if (!format) {
        format = exports.FormatTypes.sighash;
      }

      if (!exports.FormatTypes[format]) {
        logger.throwArgumentError("invalid format type", "format", format);
      }

      if (format === exports.FormatTypes.json) {
        return JSON.stringify({
          type: "function",
          name: this.name,
          constant: this.constant,
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
          payble: this.payable,
          gas: this.gas ? this.gas.toNumber() : undefined,
          inputs: this.inputs.map(function (input) {
            return JSON.parse(input.format(format));
          }),
          ouputs: this.outputs.map(function (output) {
            return JSON.parse(output.format(format));
          })
        });
      }

      var result = "";

      if (format !== exports.FormatTypes.sighash) {
        result += "function ";
      }

      result += this.name + "(" + this.inputs.map(function (input) {
        return input.format(format);
      }).join(format === exports.FormatTypes.full ? ", " : ",") + ") ";

      if (format !== exports.FormatTypes.sighash) {
        if (this.stateMutability) {
          if (this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
          }
        } else if (this.constant) {
          result += "view ";
        }

        if (this.outputs && this.outputs.length) {
          result += "returns (" + this.outputs.map(function (output) {
            return output.format(format);
          }).join(", ") + ") ";
        }

        if (this.gas != null) {
          result += "@" + this.gas.toString() + " ";
        }
      }

      return result.trim();
    };

    FunctionFragment.from = function (value) {
      if (typeof value === "string") {
        return FunctionFragment.fromString(value);
      }

      return FunctionFragment.fromObject(value);
    };

    FunctionFragment.fromObject = function (value) {
      if (FunctionFragment.isFunctionFragment(value)) {
        return value;
      }

      if (value.type !== "function") {
        logger.throwArgumentError("invalid function object", "value", value);
      }

      var state = verifyState(value);
      var params = {
        type: value.type,
        name: verifyIdentifier(value.name),
        constant: state.constant,
        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
        outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
        payable: state.payable,
        stateMutability: state.stateMutability,
        gas: value.gas ? bignumber_1.BigNumber.from(value.gas) : null
      };
      return new FunctionFragment(_constructorGuard, params);
    };

    FunctionFragment.fromString = function (value) {
      var params = {
        type: "function"
      };
      value = parseGas(value, params);
      var comps = value.split(" returns ");

      if (comps.length > 2) {
        logger.throwArgumentError("invalid function string", "value", value);
      }

      var parens = comps[0].match(regexParen);

      if (!parens) {
        logger.throwArgumentError("invalid function signature", "value", value);
      }

      params.name = parens[1].trim();

      if (params.name) {
        verifyIdentifier(params.name);
      }

      params.inputs = parseParams(parens[2], false);
      parseModifiers(parens[3].trim(), params);

      if (comps.length > 1) {
        var returns = comps[1].match(regexParen);

        if (returns[1].trim() != "" || returns[3].trim() != "") {
          logger.throwArgumentError("unexpected tokens", "value", value);
        }

        params.outputs = parseParams(returns[2], false);
      } else {
        params.outputs = [];
      }

      return FunctionFragment.fromObject(params);
    };

    FunctionFragment.isFunctionFragment = function (value) {
      return value && value._isFragment && value.type === "function";
    };

    return FunctionFragment;
  }(ConstructorFragment);

  exports.FunctionFragment = FunctionFragment;

  function verifyType(type) {
    if (type.match(/^uint($|[^1-9])/)) {
      type = "uint256" + type.substring(4);
    } else if (type.match(/^int($|[^1-9])/)) {
      type = "int256" + type.substring(3);
    }

    return type;
  }

  var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");

  function verifyIdentifier(value) {
    if (!value || !value.match(regexIdentifier)) {
      logger.throwArgumentError("invalid identifier \"" + value + "\"", "value", value);
    }

    return value;
  }

  var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");

  function splitNesting(value) {
    value = value.trim();
    var result = [];
    var accum = "";
    var depth = 0;

    for (var offset = 0; offset < value.length; offset++) {
      var c = value[offset];

      if (c === "," && depth === 0) {
        result.push(accum);
        accum = "";
      } else {
        accum += c;

        if (c === "(") {
          depth++;
        } else if (c === ")") {
          depth--;

          if (depth === -1) {
            logger.throwArgumentError("unbalanced parenthesis", "value", value);
          }
        }
      }
    }

    if (accum) {
      result.push(accum);
    }

    return result;
  }
},31,[32,42,37,44]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.BigNumber = bignumber_1.BigNumber;

  var fixednumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.formatFixed = fixednumber_1.formatFixed;
  exports.FixedFormat = fixednumber_1.FixedFormat;
  exports.FixedNumber = fixednumber_1.FixedNumber;
  exports.parseFixed = fixednumber_1.parseFixed;

  var bignumber_2 = _$$_REQUIRE(_dependencyMap[0]);

  exports._base16To36 = bignumber_2._base16To36;
  exports._base36To16 = bignumber_2._base36To16;
},32,[33,41]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __importDefault = this && this.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bn_js_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0]));

  var BN = bn_js_1.default.BN;

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[2]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[3]);

  var logger = new logger_1.Logger(_version_1.version);
  var _constructorGuard = {};
  var MAX_SAFE = 0x1fffffffffffff;

  function isBigNumberish(value) {
    return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || bytes_1.isHexString(value) || typeof value === "bigint" || bytes_1.isBytes(value));
  }

  exports.isBigNumberish = isBigNumberish;

  var BigNumber = function () {
    function BigNumber(constructorGuard, hex) {
      var _newTarget = this.constructor;
      logger.checkNew(_newTarget, BigNumber);

      if (constructorGuard !== _constructorGuard) {
        logger.throwError("cannot call constructor directly; use BigNumber.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new (BigNumber)"
        });
      }

      this._hex = hex;
      this._isBigNumber = true;
      Object.freeze(this);
    }

    BigNumber.prototype.fromTwos = function (value) {
      return toBigNumber(toBN(this).fromTwos(value));
    };

    BigNumber.prototype.toTwos = function (value) {
      return toBigNumber(toBN(this).toTwos(value));
    };

    BigNumber.prototype.abs = function () {
      if (this._hex[0] === "-") {
        return BigNumber.from(this._hex.substring(1));
      }

      return this;
    };

    BigNumber.prototype.add = function (other) {
      return toBigNumber(toBN(this).add(toBN(other)));
    };

    BigNumber.prototype.sub = function (other) {
      return toBigNumber(toBN(this).sub(toBN(other)));
    };

    BigNumber.prototype.div = function (other) {
      var o = BigNumber.from(other);

      if (o.isZero()) {
        throwFault("division by zero", "div");
      }

      return toBigNumber(toBN(this).div(toBN(other)));
    };

    BigNumber.prototype.mul = function (other) {
      return toBigNumber(toBN(this).mul(toBN(other)));
    };

    BigNumber.prototype.mod = function (other) {
      var value = toBN(other);

      if (value.isNeg()) {
        throwFault("cannot modulo negative values", "mod");
      }

      return toBigNumber(toBN(this).umod(value));
    };

    BigNumber.prototype.pow = function (other) {
      var value = toBN(other);

      if (value.isNeg()) {
        throwFault("cannot raise to negative values", "pow");
      }

      return toBigNumber(toBN(this).pow(value));
    };

    BigNumber.prototype.and = function (other) {
      var value = toBN(other);

      if (this.isNegative() || value.isNeg()) {
        throwFault("cannot 'and' negative values", "and");
      }

      return toBigNumber(toBN(this).and(value));
    };

    BigNumber.prototype.or = function (other) {
      var value = toBN(other);

      if (this.isNegative() || value.isNeg()) {
        throwFault("cannot 'or' negative values", "or");
      }

      return toBigNumber(toBN(this).or(value));
    };

    BigNumber.prototype.xor = function (other) {
      var value = toBN(other);

      if (this.isNegative() || value.isNeg()) {
        throwFault("cannot 'xor' negative values", "xor");
      }

      return toBigNumber(toBN(this).xor(value));
    };

    BigNumber.prototype.mask = function (value) {
      if (this.isNegative() || value < 0) {
        throwFault("cannot mask negative values", "mask");
      }

      return toBigNumber(toBN(this).maskn(value));
    };

    BigNumber.prototype.shl = function (value) {
      if (this.isNegative() || value < 0) {
        throwFault("cannot shift negative values", "shl");
      }

      return toBigNumber(toBN(this).shln(value));
    };

    BigNumber.prototype.shr = function (value) {
      if (this.isNegative() || value < 0) {
        throwFault("cannot shift negative values", "shr");
      }

      return toBigNumber(toBN(this).shrn(value));
    };

    BigNumber.prototype.eq = function (other) {
      return toBN(this).eq(toBN(other));
    };

    BigNumber.prototype.lt = function (other) {
      return toBN(this).lt(toBN(other));
    };

    BigNumber.prototype.lte = function (other) {
      return toBN(this).lte(toBN(other));
    };

    BigNumber.prototype.gt = function (other) {
      return toBN(this).gt(toBN(other));
    };

    BigNumber.prototype.gte = function (other) {
      return toBN(this).gte(toBN(other));
    };

    BigNumber.prototype.isNegative = function () {
      return this._hex[0] === "-";
    };

    BigNumber.prototype.isZero = function () {
      return toBN(this).isZero();
    };

    BigNumber.prototype.toNumber = function () {
      try {
        return toBN(this).toNumber();
      } catch (error) {
        throwFault("overflow", "toNumber", this.toString());
      }

      return null;
    };

    BigNumber.prototype.toString = function () {
      if (arguments.length !== 0) {
        logger.throwError("bigNumber.toString does not accept parameters", logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {});
      }

      return toBN(this).toString(10);
    };

    BigNumber.prototype.toHexString = function () {
      return this._hex;
    };

    BigNumber.prototype.toJSON = function (key) {
      return {
        type: "BigNumber",
        hex: this.toHexString()
      };
    };

    BigNumber.from = function (value) {
      if (value instanceof BigNumber) {
        return value;
      }

      if (typeof value === "string") {
        if (value.match(/^-?0x[0-9a-f]+$/i)) {
          return new BigNumber(_constructorGuard, toHex(value));
        }

        if (value.match(/^-?[0-9]+$/)) {
          return new BigNumber(_constructorGuard, toHex(new BN(value)));
        }

        return logger.throwArgumentError("invalid BigNumber string", "value", value);
      }

      if (typeof value === "number") {
        if (value % 1) {
          throwFault("underflow", "BigNumber.from", value);
        }

        if (value >= MAX_SAFE || value <= -9007199254740991) {
          throwFault("overflow", "BigNumber.from", value);
        }

        return BigNumber.from(String(value));
      }

      var anyValue = value;

      if (typeof anyValue === "bigint") {
        return BigNumber.from(anyValue.toString());
      }

      if (bytes_1.isBytes(anyValue)) {
        return BigNumber.from(bytes_1.hexlify(anyValue));
      }

      if (anyValue) {
        if (anyValue.toHexString) {
          var hex = anyValue.toHexString();

          if (typeof hex === "string") {
            return BigNumber.from(hex);
          }
        } else {
          var hex = anyValue._hex;

          if (hex == null && anyValue.type === "BigNumber") {
            hex = anyValue.hex;
          }

          if (typeof hex === "string") {
            if (bytes_1.isHexString(hex) || hex[0] === "-" && bytes_1.isHexString(hex.substring(1))) {
              return BigNumber.from(hex);
            }
          }
        }
      }

      return logger.throwArgumentError("invalid BigNumber value", "value", value);
    };

    BigNumber.isBigNumber = function (value) {
      return !!(value && value._isBigNumber);
    };

    return BigNumber;
  }();

  exports.BigNumber = BigNumber;

  function toHex(value) {
    if (typeof value !== "string") {
      return toHex(value.toString(16));
    }

    if (value[0] === "-") {
      value = value.substring(1);

      if (value[0] === "-") {
        logger.throwArgumentError("invalid hex", "value", value);
      }

      value = toHex(value);

      if (value === "0x00") {
        return value;
      }

      return "-" + value;
    }

    if (value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }

    if (value === "0x") {
      return "0x00";
    }

    if (value.length % 2) {
      value = "0x0" + value.substring(2);
    }

    while (value.length > 4 && value.substring(0, 4) === "0x00") {
      value = "0x" + value.substring(4);
    }

    return value;
  }

  function toBigNumber(value) {
    return BigNumber.from(toHex(value));
  }

  function toBN(value) {
    var hex = BigNumber.from(value).toHexString();

    if (hex[0] === "-") {
      return new BN("-" + hex.substring(3), 16);
    }

    return new BN(hex.substring(2), 16);
  }

  function throwFault(fault, operation, value) {
    var params = {
      fault: fault,
      operation: operation
    };

    if (value != null) {
      params.value = value;
    }

    return logger.throwError(fault, logger_1.Logger.errors.NUMERIC_FAULT, params);
  }

  function _base36To16(value) {
    return new BN(value, 36).toString(16);
  }

  exports._base36To16 = _base36To16;

  function _base16To36(value) {
    return new BN(value, 16).toString(36);
  }

  exports._base16To36 = _base16To36;
},33,[34,36,37,40]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  (function (module, exports) {
    'use strict';

    function assert(val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function () {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }

    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;

    try {
      Buffer = _$$_REQUIRE(_dependencyMap[0]).Buffer;
    } catch (e) {}

    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max(left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min(left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init(number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }

      assert(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, '');
      var start = 0;

      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();
      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }

      if (number < 0x4000000) {
        this.words = [number & 0x3ffffff];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000);
        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
        this.length = 3;
      }

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert(typeof number.length === 'number');

      if (number.length <= 0) {
        this.words = [0];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);

      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;

      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;

          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;

          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }

      return this.strip();
    };

    function parseHex(str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);

      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r <<= 4;

        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;
        } else {
          r |= c & 0xf;
        }
      }

      return r;
    }

    BN.prototype._parseHex = function _parseHex(number, start) {
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);

      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;

      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }

      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      }

      this.strip();
    };

    function parseBase(str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);

      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r *= mul;

        if (c >= 49) {
          r += c - 49 + 0xa;
        } else if (c >= 17) {
          r += c - 17 + 0xa;
        } else {
          r += c;
        }
      }

      return r;
    }

    BN.prototype._parseBase = function _parseBase(number, base, start) {
      this.words = [0];
      this.length = 1;

      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }

      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;

      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);
        this.imuln(limbPow);

        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);

        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy(dest) {
      dest.words = new Array(this.length);

      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }

      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone() {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand(size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }

      return this;
    };

    BN.prototype.strip = function strip() {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }

      return this._normSign();
    };

    BN.prototype._normSign = function _normSign() {
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }

      return this;
    };

    BN.prototype.inspect = function inspect() {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

    BN.prototype.toString = function toString(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;

      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;

        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = ((w << off | carry) & 0xffffff).toString(16);
          carry = w >>> 24 - off & 0xffffff;

          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }

          off += 2;

          if (off >= 26) {
            off -= 26;
            i--;
          }
        }

        if (carry !== 0) {
          out = carry.toString(16) + out;
        }

        while (out.length % padding !== 0) {
          out = '0' + out;
        }

        if (this.negative !== 0) {
          out = '-' + out;
        }

        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;

        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }

        if (this.isZero()) {
          out = '0' + out;
        }

        while (out.length % padding !== 0) {
          out = '0' + out;
        }

        if (this.negative !== 0) {
          out = '-' + out;
        }

        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber() {
      var ret = this.words[0];

      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }

      return this.negative !== 0 ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON() {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');
      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);
      var b, i;
      var q = this.clone();

      if (!littleEndian) {
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;

        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }

        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }

        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }

        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }

        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits(w) {
      if (w === 0) return 26;
      var t = w;
      var r = 0;

      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }

      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }

      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }

      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }

      if ((t & 0x1) === 0) {
        r++;
      }

      return r;
    };

    BN.prototype.bitLength = function bitLength() {
      var w = this.words[this.length - 1];

      var hi = this._countBits(w);

      return (this.length - 1) * 26 + hi;
    };

    function toBitArray(num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
      }

      return w;
    }

    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero()) return 0;
      var r = 0;

      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);

        r += b;
        if (b !== 26) break;
      }

      return r;
    };

    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos(width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }

      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }

      return this.clone();
    };

    BN.prototype.isNeg = function isNeg() {
      return this.negative !== 0;
    };

    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    BN.prototype.iuor = function iuor(num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    BN.prototype.or = function or(num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor(num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    BN.prototype.iuand = function iuand(num) {
      var b;

      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;
      return this.strip();
    };

    BN.prototype.iand = function iand(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    BN.prototype.and = function and(num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand(num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    BN.prototype.iuxor = function iuxor(num) {
      var a;
      var b;

      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;
      return this.strip();
    };

    BN.prototype.ixor = function ixor(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    BN.prototype.xor = function xor(num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor(num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    BN.prototype.inotn = function inotn(width) {
      assert(typeof width === 'number' && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
      }

      return this.strip();
    };

    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };

    BN.prototype.setn = function setn(bit, val) {
      assert(typeof bit === 'number' && bit >= 0);
      var off = bit / 26 | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | 1 << wbit;
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    BN.prototype.iadd = function iadd(num) {
      var r;

      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      var a, b;

      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;

      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;

      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    BN.prototype.add = function add(num) {
      var res;

      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);
      return num.clone().iadd(this);
    };

    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      var cmp = this.cmp(num);

      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      var a, b;

      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;

      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };

    function smallMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = self.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;
      var lo = r & 0x3ffffff;
      var carry = r / 0x4000000 | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);

        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += r / 0x4000000 | 0;
          rword = r & 0x3ffffff;
        }

        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }

      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    var comb10MulTo = function comb10MulTo(self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;
      out.negative = self.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 0x3ffffff;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 0x3ffffff;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
      w2 &= 0x3ffffff;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
      w3 &= 0x3ffffff;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 0x3ffffff;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 0x3ffffff;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 0x3ffffff;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 0x3ffffff;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 0x3ffffff;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 0x3ffffff;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 0x3ffffff;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 0x3ffffff;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 0x3ffffff;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 0x3ffffff;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 0x3ffffff;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 0x3ffffff;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 0x3ffffff;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 0x3ffffff;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;

      if (c !== 0) {
        o[19] = c;
        out.length++;
      }

      return out;
    };

    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;
      var carry = 0;
      var hncarry = 0;

      for (var k = 0; k < out.length - 1; k++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);

        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          ncarry = ncarry + (r / 0x4000000 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 0x3ffffff;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }

        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }

      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo(self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = this.length + num.length;

      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    function FFTM(x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT(N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;

      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    FFTM.prototype.revBin = function revBin(x, l, N) {
      if (x === 0 || x === N - 1) return x;
      var rb = 0;

      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << l - i - 1;
        x >>= 1;
      }

      return rb;
    };

    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;
        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];
            var ro = rtws[p + j + s];
            var io = itws[p + j + s];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;
            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;

      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];
        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;
        t = iws[i];
        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
      var carry = 0;

      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
      var carry = 0;

      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);
        rws[2 * i] = carry & 0x1fff;
        carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff;
        carry = carry >>> 13;
      }

      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & -8192) === 0);
    };

    FFTM.prototype.stub = function stub(N) {
      var ph = new Array(N);

      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp(x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);
      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);
      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);
      var rmws = out.words;
      rmws.length = N;
      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);
      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);
      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      var carry = 0;

      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += w / 0x4000000 | 0;
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };

    BN.prototype.sqr = function sqr() {
      return this.mul(this);
    };

    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };

    BN.prototype.pow = function pow(num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);
      var res = this;

      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;
          res = res.mul(q);
        }
      }

      return res;
    };

    BN.prototype.iushln = function iushln(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = (this.words[i] | 0) - newCarry << r;
          this.words[i] = c | carry;
          carry = newCarry >>> 26 - r;
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln(bits) {
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;

      if (hint) {
        h = (hint - hint % 26) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      var maskedWords = extended;
      h -= s;
      h = Math.max(0, h);

      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }

        maskedWords.length = s;
      }

      if (s === 0) {} else if (this.length > s) {
        this.length -= s;

        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;

      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = carry << 26 - r | word >>> r;
        carry = word & mask;
      }

      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };

    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };

    BN.prototype.testn = function testn(bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
      if (this.length <= s) return false;
      var w = this.words[s];
      return !!(w & q);
    };

    BN.prototype.imaskn = function imaskn(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }

      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };

    BN.prototype.iaddn = function iaddn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn(num) {
      this.words[0] += num;

      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;

        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }

      this.length = Math.max(this.length, i + 1);
      return this;
    };

    BN.prototype.isubn = function isubn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs() {
      this.negative = 0;
      return this;
    };

    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;

      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - (right / 0x4000000 | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }

      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();
      assert(carry === -1);
      carry = 0;

      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }

      this.negative = 1;
      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = this.length - num.length;
      var a = this.clone();
      var b = num;
      var bhi = b.words[b.length - 1] | 0;

      var bhiBits = this._countBits(bhi);

      shift = 26 - bhiBits;

      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);

        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);

      if (diff.negative === 0) {
        a = diff;

        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
        qj = Math.min(qj / bhi | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);

        while (a.negative !== 0) {
          qj--;
          a.negative = 0;

          a._ishlnsubmul(b, 1, j);

          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }

        if (q) {
          q.words[j] = qj;
        }
      }

      if (q) {
        q.strip();
      }

      a.strip();

      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;

      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();

          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();

          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    BN.prototype.div = function div(num) {
      return this.divmod(num, 'div', false).div;
    };

    BN.prototype.mod = function mod(num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod(num) {
      return this.divmod(num, 'mod', true).mod;
    };

    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero()) return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn(num) {
      assert(num <= 0x3ffffff);
      var p = 67108864 % num;
      var acc = 0;

      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    BN.prototype.idivn = function idivn(num) {
      assert(num <= 0x3ffffff);
      var carry = 0;

      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = w / num | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      var A = new BN(1);
      var B = new BN(0);
      var C = new BN(0);
      var D = new BN(1);
      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

        if (i > 0) {
          x.iushrn(i);

          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

        if (j > 0) {
          y.iushrn(j);

          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    BN.prototype._invmp = function _invmp(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);
      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);

        if (i > 0) {
          a.iushrn(i);

          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);

        if (j > 0) {
          b.iushrn(j);

          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;

      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd(num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();
      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }

        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);

        if (r < 0) {
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven() {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd() {
      return (this.words[0] & 1) === 1;
    };

    BN.prototype.andln = function andln(num) {
      return this.words[0] & num;
    };

    BN.prototype.bincn = function bincn(bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      if (this.length <= s) {
        this._expand(s + 1);

        this.words[s] |= q;
        return this;
      }

      var carry = q;

      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.isZero = function isZero() {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;
      this.strip();
      var res;

      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');
        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }

      if (this.negative !== 0) return -res | 0;
      return res;
    };

    BN.prototype.cmp = function cmp(num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;
      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    BN.prototype.ucmp = function ucmp(num) {
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;
      var res = 0;

      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;
        if (a === b) continue;

        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }

        break;
      }

      return res;
    };

    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };

    BN.red = function red(num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed() {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed(ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd(num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd(num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub(num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub(num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl(num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul(num) {
      assert(this.red, 'redMul works only with red numbers');

      this.red._verify2(this, num);

      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul(num) {
      assert(this.red, 'redMul works only with red numbers');

      this.red._verify2(this, num);

      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr() {
      assert(this.red, 'redSqr works only with red numbers');

      this.red._verify1(this);

      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr() {
      assert(this.red, 'redISqr works only with red numbers');

      this.red._verify1(this);

      return this.red.isqr(this);
    };

    BN.prototype.redSqrt = function redSqrt() {
      assert(this.red, 'redSqrt works only with red numbers');

      this.red._verify1(this);

      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm() {
      assert(this.red, 'redInvm works only with red numbers');

      this.red._verify1(this);

      return this.red.invm(this);
    };

    BN.prototype.redNeg = function redNeg() {
      assert(this.red, 'redNeg works only with red numbers');

      this.red._verify1(this);

      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow(num) {
      assert(this.red && !num.red, 'redPow(normalNum)');

      this.red._verify1(this);

      return this.red.pow(this, num);
    };

    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    function MPrime(name, p) {
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);
      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce(num) {
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        if (r.strip !== undefined) {
          r.strip();
        } else {
          r._strip();
        }
      }

      return r;
    };

    MPrime.prototype.split = function split(input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK(num) {
      return num.imul(this.k);
    };

    function K256() {
      MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }

    inherits(K256, MPrime);

    K256.prototype.split = function split(input, output) {
      var mask = 0x3fffff;
      var outLen = Math.min(input.length, 9);

      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }

      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }

      prev >>>= 22;
      input.words[i - 10] = prev;

      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;

      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + (lo / 0x4000000 | 0);
      }

      if (num.words[num.length - 1] === 0) {
        num.length--;

        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }

      return num;
    };

    function P224() {
      MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }

    inherits(P224, MPrime);

    function P192() {
      MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }

    inherits(P192, MPrime);

    function P25519() {
      MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }

    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;

      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;
        num.words[i] = lo;
        carry = hi;
      }

      if (carry !== 0) {
        num.words[num.length++] = carry;
      }

      return num;
    };

    BN._prime = function prime(name) {
      if (primes[name]) return primes[name];
      var prime;

      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }

      primes[name] = prime;
      return prime;
    };

    function Red(m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);

        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1(a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2(a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red, 'red works only with red numbers');
    };

    Red.prototype.imod = function imod(a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg(a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add(a, b) {
      this._verify2(a, b);

      var res = a.add(b);

      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }

      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd(a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);

      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }

      return res;
    };

    Red.prototype.sub = function sub(a, b) {
      this._verify2(a, b);

      var res = a.sub(b);

      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Red.prototype.isub = function isub(a, b) {
      this._verify2(a, b);

      var res = a.isub(b);

      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }

      return res;
    };

    Red.prototype.shl = function shl(a, num) {
      this._verify1(a);

      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul(a, b) {
      this._verify2(a, b);

      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul(a, b) {
      this._verify2(a, b);

      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr(a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr(a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt(a) {
      if (a.isZero()) return a.clone();
      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      var q = this.m.subn(1);
      var s = 0;

      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }

      assert(!q.isZero());
      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;

      while (t.cmp(one) !== 0) {
        var tmp = t;

        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }

        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm(a) {
      var inv = a._invmp(this.m);

      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow(a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();
      var windowSize = 4;
      var wnd = new Array(16);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;

      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;

      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];

        for (var j = start - 1; j >= 0; j--) {
          var bit = word >> j & 1;

          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }

        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo(num) {
      var r = num.umod(this.m);
      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    BN.mont = function mont(num) {
      return new Mont(num);
    };

    function Mont(m) {
      Red.call(this, m);
      this.shift = this.m.bitLength();

      if (this.shift % 26 !== 0) {
        this.shift += 26 - this.shift % 26;
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }

    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom(num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul(a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul(a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm(a) {
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(typeof module === 'undefined' || module, this);
},34,[35]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('buffer');
},35,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var logger_1 = _$$_REQUIRE(_dependencyMap[0]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger = new logger_1.Logger(_version_1.version);

  function isHexable(value) {
    return !!value.toHexString;
  }

  function addSlice(array) {
    if (array.slice) {
      return array;
    }

    array.slice = function () {
      var args = Array.prototype.slice.call(arguments);
      return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
    };

    return array;
  }

  function isBytesLike(value) {
    return isHexString(value) && !(value.length % 2) || isBytes(value);
  }

  exports.isBytesLike = isBytesLike;

  function isBytes(value) {
    if (value == null) {
      return false;
    }

    if (value.constructor === Uint8Array) {
      return true;
    }

    if (typeof value === "string") {
      return false;
    }

    if (value.length == null) {
      return false;
    }

    for (var i = 0; i < value.length; i++) {
      var v = value[i];

      if (v < 0 || v >= 256 || v % 1) {
        return false;
      }
    }

    return true;
  }

  exports.isBytes = isBytes;

  function arrayify(value, options) {
    if (!options) {
      options = {};
    }

    if (typeof value === "number") {
      logger.checkSafeUint53(value, "invalid arrayify value");
      var result = [];

      while (value) {
        result.unshift(value & 0xff);
        value = parseInt(String(value / 256));
      }

      if (result.length === 0) {
        result.push(0);
      }

      return addSlice(new Uint8Array(result));
    }

    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }

    if (isHexable(value)) {
      value = value.toHexString();
    }

    if (isHexString(value)) {
      var hex = value.substring(2);

      if (hex.length % 2) {
        if (options.hexPad === "left") {
          hex = "0x0" + hex.substring(2);
        } else if (options.hexPad === "right") {
          hex += "0";
        } else {
          logger.throwArgumentError("hex data is odd-length", "value", value);
        }
      }

      var result = [];

      for (var i = 0; i < hex.length; i += 2) {
        result.push(parseInt(hex.substring(i, i + 2), 16));
      }

      return addSlice(new Uint8Array(result));
    }

    if (isBytes(value)) {
      return addSlice(new Uint8Array(value));
    }

    return logger.throwArgumentError("invalid arrayify value", "value", value);
  }

  exports.arrayify = arrayify;

  function concat(items) {
    var objects = items.map(function (item) {
      return arrayify(item);
    });
    var length = objects.reduce(function (accum, item) {
      return accum + item.length;
    }, 0);
    var result = new Uint8Array(length);
    objects.reduce(function (offset, object) {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice(result);
  }

  exports.concat = concat;

  function stripZeros(value) {
    var result = arrayify(value);

    if (result.length === 0) {
      return result;
    }

    var start = 0;

    while (start < result.length && result[start] === 0) {
      start++;
    }

    if (start) {
      result = result.slice(start);
    }

    return result;
  }

  exports.stripZeros = stripZeros;

  function zeroPad(value, length) {
    value = arrayify(value);

    if (value.length > length) {
      logger.throwArgumentError("value out of range", "value", arguments[0]);
    }

    var result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice(result);
  }

  exports.zeroPad = zeroPad;

  function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }

    if (length && value.length !== 2 + 2 * length) {
      return false;
    }

    return true;
  }

  exports.isHexString = isHexString;
  var HexCharacters = "0123456789abcdef";

  function hexlify(value, options) {
    if (!options) {
      options = {};
    }

    if (typeof value === "number") {
      logger.checkSafeUint53(value, "invalid hexlify value");
      var hex = "";

      while (value) {
        hex = HexCharacters[value & 0x0f] + hex;
        value = Math.floor(value / 16);
      }

      if (hex.length) {
        if (hex.length % 2) {
          hex = "0" + hex;
        }

        return "0x" + hex;
      }

      return "0x00";
    }

    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }

    if (isHexable(value)) {
      return value.toHexString();
    }

    if (isHexString(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger.throwArgumentError("hex data is odd-length", "value", value);
        }
      }

      return value.toLowerCase();
    }

    if (isBytes(value)) {
      var result = "0x";

      for (var i = 0; i < value.length; i++) {
        var v = value[i];
        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
      }

      return result;
    }

    return logger.throwArgumentError("invalid hexlify value", "value", value);
  }

  exports.hexlify = hexlify;

  function hexDataLength(data) {
    if (typeof data !== "string") {
      data = hexlify(data);
    } else if (!isHexString(data) || data.length % 2) {
      return null;
    }

    return (data.length - 2) / 2;
  }

  exports.hexDataLength = hexDataLength;

  function hexDataSlice(data, offset, endOffset) {
    if (typeof data !== "string") {
      data = hexlify(data);
    } else if (!isHexString(data) || data.length % 2) {
      logger.throwArgumentError("invalid hexData", "value", data);
    }

    offset = 2 + 2 * offset;

    if (endOffset != null) {
      return "0x" + data.substring(offset, 2 + 2 * endOffset);
    }

    return "0x" + data.substring(offset);
  }

  exports.hexDataSlice = hexDataSlice;

  function hexConcat(items) {
    var result = "0x";
    items.forEach(function (item) {
      result += hexlify(item).substring(2);
    });
    return result;
  }

  exports.hexConcat = hexConcat;

  function hexValue(value) {
    var trimmed = hexStripZeros(hexlify(value, {
      hexPad: "left"
    }));

    if (trimmed === "0x") {
      return "0x0";
    }

    return trimmed;
  }

  exports.hexValue = hexValue;

  function hexStripZeros(value) {
    if (typeof value !== "string") {
      value = hexlify(value);
    }

    if (!isHexString(value)) {
      logger.throwArgumentError("invalid hex string", "value", value);
    }

    value = value.substring(2);
    var offset = 0;

    while (offset < value.length && value[offset] === "0") {
      offset++;
    }

    return "0x" + value.substring(offset);
  }

  exports.hexStripZeros = hexStripZeros;

  function hexZeroPad(value, length) {
    if (typeof value !== "string") {
      value = hexlify(value);
    } else if (!isHexString(value)) {
      logger.throwArgumentError("invalid hex string", "value", value);
    }

    if (value.length > 2 * length + 2) {
      logger.throwArgumentError("value out of range", "value", arguments[1]);
    }

    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }

    return value;
  }

  exports.hexZeroPad = hexZeroPad;

  function splitSignature(signature) {
    var result = {
      r: "0x",
      s: "0x",
      _vs: "0x",
      recoveryParam: 0,
      v: 0
    };

    if (isBytesLike(signature)) {
      var bytes = arrayify(signature);

      if (bytes.length !== 65) {
        logger.throwArgumentError("invalid signature string; must be 65 bytes", "signature", signature);
      }

      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];

      if (result.v < 27) {
        if (result.v === 0 || result.v === 1) {
          result.v += 27;
        } else {
          logger.throwArgumentError("signature invalid v byte", "signature", signature);
        }
      }

      result.recoveryParam = 1 - result.v % 2;

      if (result.recoveryParam) {
        bytes[32] |= 0x80;
      }

      result._vs = hexlify(bytes.slice(32, 64));
    } else {
      result.r = signature.r;
      result.s = signature.s;
      result.v = signature.v;
      result.recoveryParam = signature.recoveryParam;
      result._vs = signature._vs;

      if (result._vs != null) {
        var vs_1 = zeroPad(arrayify(result._vs), 32);
        result._vs = hexlify(vs_1);
        var recoveryParam = vs_1[0] >= 128 ? 1 : 0;

        if (result.recoveryParam == null) {
          result.recoveryParam = recoveryParam;
        } else if (result.recoveryParam !== recoveryParam) {
          logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
        }

        vs_1[0] &= 0x7f;
        var s = hexlify(vs_1);

        if (result.s == null) {
          result.s = s;
        } else if (result.s !== s) {
          logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
        }
      }

      if (result.recoveryParam == null) {
        if (result.v == null) {
          logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
        } else {
          result.recoveryParam = 1 - result.v % 2;
        }
      } else {
        if (result.v == null) {
          result.v = 27 + result.recoveryParam;
        } else if (result.recoveryParam !== 1 - result.v % 2) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
        }
      }

      if (result.r == null || !isHexString(result.r)) {
        logger.throwArgumentError("signature missing or invalid r", "signature", signature);
      } else {
        result.r = hexZeroPad(result.r, 32);
      }

      if (result.s == null || !isHexString(result.s)) {
        logger.throwArgumentError("signature missing or invalid s", "signature", signature);
      } else {
        result.s = hexZeroPad(result.s, 32);
      }

      var vs = arrayify(result.s);

      if (vs[0] >= 128) {
        logger.throwArgumentError("signature s out of range", "signature", signature);
      }

      if (result.recoveryParam) {
        vs[0] |= 0x80;
      }

      var _vs = hexlify(vs);

      if (result._vs) {
        if (!isHexString(result._vs)) {
          logger.throwArgumentError("signature invalid _vs", "signature", signature);
        }

        result._vs = hexZeroPad(result._vs, 32);
      }

      if (result._vs == null) {
        result._vs = _vs;
      } else if (result._vs !== _vs) {
        logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
      }
    }

    return result;
  }

  exports.splitSignature = splitSignature;

  function joinSignature(signature) {
    signature = splitSignature(signature);
    return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? "0x1c" : "0x1b"]));
  }

  exports.joinSignature = joinSignature;
},36,[37,39]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _permanentCensorErrors = false;
  var _censorErrors = false;
  var LogLevels = {
    debug: 1,
    "default": 2,
    info: 2,
    warning: 3,
    error: 4,
    off: 5
  };
  var _logLevel = LogLevels["default"];

  var _version_1 = _$$_REQUIRE(_dependencyMap[0]);

  var _globalLogger = null;

  function _checkNormalize() {
    try {
      var missing_1 = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach(function (form) {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }

          ;
        } catch (error) {
          missing_1.push(form);
        }
      });

      if (missing_1.length) {
        throw new Error("missing " + missing_1.join(", "));
      }

      if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }

    return null;
  }

  var _normalizeError = _checkNormalize();

  var LogLevel;

  (function (LogLevel) {
    LogLevel["DEBUG"] = "DEBUG";
    LogLevel["INFO"] = "INFO";
    LogLevel["WARNING"] = "WARNING";
    LogLevel["ERROR"] = "ERROR";
    LogLevel["OFF"] = "OFF";
  })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));

  var ErrorCode;

  (function (ErrorCode) {
    ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
    ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
    ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
    ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
    ErrorCode["TIMEOUT"] = "TIMEOUT";
    ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
    ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
    ErrorCode["MISSING_NEW"] = "MISSING_NEW";
    ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
    ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
    ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
    ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
    ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
    ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
    ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  })(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));

  ;

  var Logger = function () {
    function Logger(version) {
      Object.defineProperty(this, "version", {
        enumerable: true,
        value: version,
        writable: false
      });
    }

    Logger.prototype._log = function (logLevel, args) {
      var level = logLevel.toLowerCase();

      if (LogLevels[level] == null) {
        this.throwArgumentError("invalid log level name", "logLevel", logLevel);
      }

      if (_logLevel > LogLevels[level]) {
        return;
      }

      console.log.apply(console, args);
    };

    Logger.prototype.debug = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      this._log(Logger.levels.DEBUG, args);
    };

    Logger.prototype.info = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      this._log(Logger.levels.INFO, args);
    };

    Logger.prototype.warn = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      this._log(Logger.levels.WARNING, args);
    };

    Logger.prototype.makeError = function (message, code, params) {
      if (_censorErrors) {
        return this.makeError("censored error", code, {});
      }

      if (!code) {
        code = Logger.errors.UNKNOWN_ERROR;
      }

      if (!params) {
        params = {};
      }

      var messageDetails = [];
      Object.keys(params).forEach(function (key) {
        try {
          messageDetails.push(key + "=" + JSON.stringify(params[key]));
        } catch (error) {
          messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
        }
      });
      messageDetails.push("code=" + code);
      messageDetails.push("version=" + this.version);
      var reason = message;

      if (messageDetails.length) {
        message += " (" + messageDetails.join(", ") + ")";
      }

      var error = new Error(message);
      error.reason = reason;
      error.code = code;
      Object.keys(params).forEach(function (key) {
        error[key] = params[key];
      });
      return error;
    };

    Logger.prototype.throwError = function (message, code, params) {
      throw this.makeError(message, code, params);
    };

    Logger.prototype.throwArgumentError = function (message, name, value) {
      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
        argument: name,
        value: value
      });
    };

    Logger.prototype.assert = function (condition, message, code, params) {
      if (!!condition) {
        return;
      }

      this.throwError(message, code, params);
    };

    Logger.prototype.assertArgument = function (condition, message, name, value) {
      if (!!condition) {
        return;
      }

      this.throwArgumentError(message, name, value);
    };

    Logger.prototype.checkNormalize = function (message) {
      if (message == null) {
        message = "platform missing String.prototype.normalize";
      }

      if (_normalizeError) {
        this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "String.prototype.normalize",
          form: _normalizeError
        });
      }
    };

    Logger.prototype.checkSafeUint53 = function (value, message) {
      if (typeof value !== "number") {
        return;
      }

      if (message == null) {
        message = "value not safe";
      }

      if (value < 0 || value >= 0x1fffffffffffff) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
          operation: "checkSafeInteger",
          fault: "out-of-safe-range",
          value: value
        });
      }

      if (value % 1) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
          operation: "checkSafeInteger",
          fault: "non-integer",
          value: value
        });
      }
    };

    Logger.prototype.checkArgumentCount = function (count, expectedCount, message) {
      if (message) {
        message = ": " + message;
      } else {
        message = "";
      }

      if (count < expectedCount) {
        this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
          count: count,
          expectedCount: expectedCount
        });
      }

      if (count > expectedCount) {
        this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
          count: count,
          expectedCount: expectedCount
        });
      }
    };

    Logger.prototype.checkNew = function (target, kind) {
      if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, {
          name: kind.name
        });
      }
    };

    Logger.prototype.checkAbstract = function (target, kind) {
      if (target === kind) {
        this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, {
          name: target.name,
          operation: "new"
        });
      } else if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, {
          name: kind.name
        });
      }
    };

    Logger.globalLogger = function () {
      if (!_globalLogger) {
        _globalLogger = new Logger(_version_1.version);
      }

      return _globalLogger;
    };

    Logger.setCensorship = function (censorship, permanent) {
      if (!censorship && permanent) {
        this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setCensorship"
        });
      }

      if (_permanentCensorErrors) {
        if (!censorship) {
          return;
        }

        this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setCensorship"
        });
      }

      _censorErrors = !!censorship;
      _permanentCensorErrors = !!permanent;
    };

    Logger.setLogLevel = function (logLevel) {
      var level = LogLevels[logLevel.toLowerCase()];

      if (level == null) {
        Logger.globalLogger().warn("invalid log level - " + logLevel);
        return;
      }

      _logLevel = level;
    };

    Logger.from = function (version) {
      return new Logger(version);
    };

    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;
    return Logger;
  }();

  exports.Logger = Logger;
},37,[38]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "logger/5.0.7";
},38,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "bytes/5.0.6";
},39,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "bignumber/5.0.10";
},40,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[1]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger = new logger_1.Logger(_version_1.version);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[3]);

  var _constructorGuard = {};
  var Zero = bignumber_1.BigNumber.from(0);
  var NegativeOne = bignumber_1.BigNumber.from(-1);

  function throwFault(message, fault, operation, value) {
    var params = {
      fault: fault,
      operation: operation
    };

    if (value !== undefined) {
      params.value = value;
    }

    return logger.throwError(message, logger_1.Logger.errors.NUMERIC_FAULT, params);
  }

  var zeros = "0";

  while (zeros.length < 256) {
    zeros += zeros;
  }

  function getMultiplier(decimals) {
    if (typeof decimals !== "number") {
      try {
        decimals = bignumber_1.BigNumber.from(decimals).toNumber();
      } catch (e) {}
    }

    if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
      return "1" + zeros.substring(0, decimals);
    }

    return logger.throwArgumentError("invalid decimal size", "decimals", decimals);
  }

  function formatFixed(value, decimals) {
    if (decimals == null) {
      decimals = 0;
    }

    var multiplier = getMultiplier(decimals);
    value = bignumber_1.BigNumber.from(value);
    var negative = value.lt(Zero);

    if (negative) {
      value = value.mul(NegativeOne);
    }

    var fraction = value.mod(multiplier).toString();

    while (fraction.length < multiplier.length - 1) {
      fraction = "0" + fraction;
    }

    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    var whole = value.div(multiplier).toString();
    value = whole + "." + fraction;

    if (negative) {
      value = "-" + value;
    }

    return value;
  }

  exports.formatFixed = formatFixed;

  function parseFixed(value, decimals) {
    if (decimals == null) {
      decimals = 0;
    }

    var multiplier = getMultiplier(decimals);

    if (typeof value !== "string" || !value.match(/^-?[0-9.,]+$/)) {
      logger.throwArgumentError("invalid decimal value", "value", value);
    }

    if (multiplier.length - 1 === 0) {
      return bignumber_1.BigNumber.from(value);
    }

    var negative = value.substring(0, 1) === "-";

    if (negative) {
      value = value.substring(1);
    }

    if (value === ".") {
      logger.throwArgumentError("missing value", "value", value);
    }

    var comps = value.split(".");

    if (comps.length > 2) {
      logger.throwArgumentError("too many decimal points", "value", value);
    }

    var whole = comps[0],
        fraction = comps[1];

    if (!whole) {
      whole = "0";
    }

    if (!fraction) {
      fraction = "0";
    }

    if (fraction.length > multiplier.length - 1) {
      throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
    }

    while (fraction.length < multiplier.length - 1) {
      fraction += "0";
    }

    var wholeValue = bignumber_1.BigNumber.from(whole);
    var fractionValue = bignumber_1.BigNumber.from(fraction);
    var wei = wholeValue.mul(multiplier).add(fractionValue);

    if (negative) {
      wei = wei.mul(NegativeOne);
    }

    return wei;
  }

  exports.parseFixed = parseFixed;

  var FixedFormat = function () {
    function FixedFormat(constructorGuard, signed, width, decimals) {
      if (constructorGuard !== _constructorGuard) {
        logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new FixedFormat"
        });
      }

      this.signed = signed;
      this.width = width;
      this.decimals = decimals;
      this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
      this._multiplier = getMultiplier(decimals);
      Object.freeze(this);
    }

    FixedFormat.from = function (value) {
      if (value instanceof FixedFormat) {
        return value;
      }

      var signed = true;
      var width = 128;
      var decimals = 18;

      if (typeof value === "string") {
        if (value === "fixed") {} else if (value === "ufixed") {
          signed = false;
        } else if (value != null) {
          var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);

          if (!match) {
            logger.throwArgumentError("invalid fixed format", "format", value);
          }

          signed = match[1] !== "u";
          width = parseInt(match[2]);
          decimals = parseInt(match[3]);
        }
      } else if (value) {
        var check = function (key, type, defaultValue) {
          if (value[key] == null) {
            return defaultValue;
          }

          if (typeof value[key] !== type) {
            logger.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
          }

          return value[key];
        };

        signed = check("signed", "boolean", signed);
        width = check("width", "number", width);
        decimals = check("decimals", "number", decimals);
      }

      if (width % 8) {
        logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
      }

      if (decimals > 80) {
        logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
      }

      return new FixedFormat(_constructorGuard, signed, width, decimals);
    };

    return FixedFormat;
  }();

  exports.FixedFormat = FixedFormat;

  var FixedNumber = function () {
    function FixedNumber(constructorGuard, hex, value, format) {
      var _newTarget = this.constructor;
      logger.checkNew(_newTarget, FixedNumber);

      if (constructorGuard !== _constructorGuard) {
        logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new FixedFormat"
        });
      }

      this.format = format;
      this._hex = hex;
      this._value = value;
      this._isFixedNumber = true;
      Object.freeze(this);
    }

    FixedNumber.prototype._checkFormat = function (other) {
      if (this.format.name !== other.format.name) {
        logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
      }
    };

    FixedNumber.prototype.addUnsafe = function (other) {
      this._checkFormat(other);

      var a = parseFixed(this._value, this.format.decimals);
      var b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
    };

    FixedNumber.prototype.subUnsafe = function (other) {
      this._checkFormat(other);

      var a = parseFixed(this._value, this.format.decimals);
      var b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
    };

    FixedNumber.prototype.mulUnsafe = function (other) {
      this._checkFormat(other);

      var a = parseFixed(this._value, this.format.decimals);
      var b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
    };

    FixedNumber.prototype.divUnsafe = function (other) {
      this._checkFormat(other);

      var a = parseFixed(this._value, this.format.decimals);
      var b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
    };

    FixedNumber.prototype.floor = function () {
      var comps = this.toString().split(".");
      var result = FixedNumber.from(comps[0], this.format);
      var hasFraction = !comps[1].match(/^(0*)$/);

      if (this.isNegative() && hasFraction) {
        result = result.subUnsafe(ONE);
      }

      return result;
    };

    FixedNumber.prototype.ceiling = function () {
      var comps = this.toString().split(".");
      var result = FixedNumber.from(comps[0], this.format);
      var hasFraction = !comps[1].match(/^(0*)$/);

      if (!this.isNegative() && hasFraction) {
        result = result.addUnsafe(ONE);
      }

      return result;
    };

    FixedNumber.prototype.round = function (decimals) {
      if (decimals == null) {
        decimals = 0;
      }

      var comps = this.toString().split(".");

      if (decimals < 0 || decimals > 80 || decimals % 1) {
        logger.throwArgumentError("invalid decimal count", "decimals", decimals);
      }

      if (comps[1].length <= decimals) {
        return this;
      }

      var factor = FixedNumber.from("1" + zeros.substring(0, decimals));
      return this.mulUnsafe(factor).addUnsafe(BUMP).floor().divUnsafe(factor);
    };

    FixedNumber.prototype.isZero = function () {
      return this._value === "0.0";
    };

    FixedNumber.prototype.isNegative = function () {
      return this._value[0] === "-";
    };

    FixedNumber.prototype.toString = function () {
      return this._value;
    };

    FixedNumber.prototype.toHexString = function (width) {
      if (width == null) {
        return this._hex;
      }

      if (width % 8) {
        logger.throwArgumentError("invalid byte width", "width", width);
      }

      var hex = bignumber_1.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
      return bytes_1.hexZeroPad(hex, width / 8);
    };

    FixedNumber.prototype.toUnsafeFloat = function () {
      return parseFloat(this.toString());
    };

    FixedNumber.prototype.toFormat = function (format) {
      return FixedNumber.fromString(this._value, format);
    };

    FixedNumber.fromValue = function (value, decimals, format) {
      if (format == null && decimals != null && !bignumber_1.isBigNumberish(decimals)) {
        format = decimals;
        decimals = null;
      }

      if (decimals == null) {
        decimals = 0;
      }

      if (format == null) {
        format = "fixed";
      }

      return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
    };

    FixedNumber.fromString = function (value, format) {
      if (format == null) {
        format = "fixed";
      }

      var fixedFormat = FixedFormat.from(format);
      var numeric = parseFixed(value, fixedFormat.decimals);

      if (!fixedFormat.signed && numeric.lt(Zero)) {
        throwFault("unsigned value cannot be negative", "overflow", "value", value);
      }

      var hex = null;

      if (fixedFormat.signed) {
        hex = numeric.toTwos(fixedFormat.width).toHexString();
      } else {
        hex = numeric.toHexString();
        hex = bytes_1.hexZeroPad(hex, fixedFormat.width / 8);
      }

      var decimal = formatFixed(numeric, fixedFormat.decimals);
      return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
    };

    FixedNumber.fromBytes = function (value, format) {
      if (format == null) {
        format = "fixed";
      }

      var fixedFormat = FixedFormat.from(format);

      if (bytes_1.arrayify(value).length > fixedFormat.width / 8) {
        throw new Error("overflow");
      }

      var numeric = bignumber_1.BigNumber.from(value);

      if (fixedFormat.signed) {
        numeric = numeric.fromTwos(fixedFormat.width);
      }

      var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
      var decimal = formatFixed(numeric, fixedFormat.decimals);
      return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
    };

    FixedNumber.from = function (value, format) {
      if (typeof value === "string") {
        return FixedNumber.fromString(value, format);
      }

      if (bytes_1.isBytes(value)) {
        return FixedNumber.fromBytes(value, format);
      }

      try {
        return FixedNumber.fromValue(value, 0, format);
      } catch (error) {
        if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT) {
          throw error;
        }
      }

      return logger.throwArgumentError("invalid FixedNumber value", "value", value);
    };

    FixedNumber.isFixedNumber = function (value) {
      return !!(value && value._isFixedNumber);
    };

    return FixedNumber;
  }();

  exports.FixedNumber = FixedNumber;
  var ONE = FixedNumber.from(1);
  var BUMP = FixedNumber.from("0.5");
},41,[36,37,40,33]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var logger_1 = _$$_REQUIRE(_dependencyMap[0]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger = new logger_1.Logger(_version_1.version);

  function defineReadOnly(object, name, value) {
    Object.defineProperty(object, name, {
      enumerable: true,
      value: value,
      writable: false
    });
  }

  exports.defineReadOnly = defineReadOnly;

  function getStatic(ctor, key) {
    for (var i = 0; i < 32; i++) {
      if (ctor[key]) {
        return ctor[key];
      }

      if (!ctor.prototype || typeof ctor.prototype !== "object") {
        break;
      }

      ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }

    return null;
  }

  exports.getStatic = getStatic;

  function resolveProperties(object) {
    return __awaiter(this, undefined, undefined, function () {
      var promises, results;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            promises = Object.keys(object).map(function (key) {
              var value = object[key];
              return Promise.resolve(value).then(function (v) {
                return {
                  key: key,
                  value: v
                };
              });
            });
            return [4, Promise.all(promises)];

          case 1:
            results = _a.sent();
            return [2, results.reduce(function (accum, result) {
              accum[result.key] = result.value;
              return accum;
            }, {})];
        }
      });
    });
  }

  exports.resolveProperties = resolveProperties;

  function checkProperties(object, properties) {
    if (!object || typeof object !== "object") {
      logger.throwArgumentError("invalid object", "object", object);
    }

    Object.keys(object).forEach(function (key) {
      if (!properties[key]) {
        logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
      }
    });
  }

  exports.checkProperties = checkProperties;

  function shallowCopy(object) {
    var result = {};

    for (var key in object) {
      result[key] = object[key];
    }

    return result;
  }

  exports.shallowCopy = shallowCopy;
  var opaque = {
    bigint: true,
    boolean: true,
    "function": true,
    number: true,
    string: true
  };

  function _isFrozen(object) {
    if (object === undefined || object === null || opaque[typeof object]) {
      return true;
    }

    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }

      var keys = Object.keys(object);

      for (var i = 0; i < keys.length; i++) {
        if (!_isFrozen(object[keys[i]])) {
          return false;
        }
      }

      return true;
    }

    return logger.throwArgumentError("Cannot deepCopy " + typeof object, "object", object);
  }

  function _deepCopy(object) {
    if (_isFrozen(object)) {
      return object;
    }

    if (Array.isArray(object)) {
      return Object.freeze(object.map(function (item) {
        return deepCopy(item);
      }));
    }

    if (typeof object === "object") {
      var result = {};

      for (var key in object) {
        var value = object[key];

        if (value === undefined) {
          continue;
        }

        defineReadOnly(result, key, deepCopy(value));
      }

      return result;
    }

    return logger.throwArgumentError("Cannot deepCopy " + typeof object, "object", object);
  }

  function deepCopy(object) {
    return _deepCopy(object);
  }

  exports.deepCopy = deepCopy;

  var Description = function () {
    function Description(info) {
      for (var key in info) {
        this[key] = deepCopy(info[key]);
      }
    }

    return Description;
  }();

  exports.Description = Description;
},42,[37,43]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "properties/5.0.5";
},43,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "abi/5.0.8";
},44,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[2]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[3]);

  var logger = new logger_1.Logger(_version_1.version);

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[4]);

  var address_1 = _$$_REQUIRE(_dependencyMap[5]);

  var array_1 = _$$_REQUIRE(_dependencyMap[6]);

  var boolean_1 = _$$_REQUIRE(_dependencyMap[7]);

  var bytes_2 = _$$_REQUIRE(_dependencyMap[8]);

  var fixed_bytes_1 = _$$_REQUIRE(_dependencyMap[9]);

  var null_1 = _$$_REQUIRE(_dependencyMap[10]);

  var number_1 = _$$_REQUIRE(_dependencyMap[11]);

  var string_1 = _$$_REQUIRE(_dependencyMap[12]);

  var tuple_1 = _$$_REQUIRE(_dependencyMap[13]);

  var fragments_1 = _$$_REQUIRE(_dependencyMap[14]);

  var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);

  var AbiCoder = function () {
    function AbiCoder(coerceFunc) {
      var _newTarget = this.constructor;
      logger.checkNew(_newTarget, AbiCoder);
      properties_1.defineReadOnly(this, "coerceFunc", coerceFunc || null);
    }

    AbiCoder.prototype._getCoder = function (param) {
      var _this = this;

      switch (param.baseType) {
        case "address":
          return new address_1.AddressCoder(param.name);

        case "bool":
          return new boolean_1.BooleanCoder(param.name);

        case "string":
          return new string_1.StringCoder(param.name);

        case "bytes":
          return new bytes_2.BytesCoder(param.name);

        case "array":
          return new array_1.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);

        case "tuple":
          return new tuple_1.TupleCoder((param.components || []).map(function (component) {
            return _this._getCoder(component);
          }), param.name);

        case "":
          return new null_1.NullCoder(param.name);
      }

      var match = param.type.match(paramTypeNumber);

      if (match) {
        var size = parseInt(match[2] || "256");

        if (size === 0 || size > 256 || size % 8 !== 0) {
          logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
        }

        return new number_1.NumberCoder(size / 8, match[1] === "int", param.name);
      }

      match = param.type.match(paramTypeBytes);

      if (match) {
        var size = parseInt(match[1]);

        if (size === 0 || size > 32) {
          logger.throwArgumentError("invalid bytes length", "param", param);
        }

        return new fixed_bytes_1.FixedBytesCoder(size, param.name);
      }

      return logger.throwArgumentError("invalid type", "type", param.type);
    };

    AbiCoder.prototype._getWordSize = function () {
      return 32;
    };

    AbiCoder.prototype._getReader = function (data, allowLoose) {
      return new abstract_coder_1.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
    };

    AbiCoder.prototype._getWriter = function () {
      return new abstract_coder_1.Writer(this._getWordSize());
    };

    AbiCoder.prototype.encode = function (types, values) {
      var _this = this;

      if (types.length !== values.length) {
        logger.throwError("types/values length mismatch", logger_1.Logger.errors.INVALID_ARGUMENT, {
          count: {
            types: types.length,
            values: values.length
          },
          value: {
            types: types,
            values: values
          }
        });
      }

      var coders = types.map(function (type) {
        return _this._getCoder(fragments_1.ParamType.from(type));
      });
      var coder = new tuple_1.TupleCoder(coders, "_");

      var writer = this._getWriter();

      coder.encode(writer, values);
      return writer.data;
    };

    AbiCoder.prototype.decode = function (types, data, loose) {
      var _this = this;

      var coders = types.map(function (type) {
        return _this._getCoder(fragments_1.ParamType.from(type));
      });
      var coder = new tuple_1.TupleCoder(coders, "_");
      return coder.decode(this._getReader(bytes_1.arrayify(data), loose));
    };

    return AbiCoder;
  }();

  exports.AbiCoder = AbiCoder;
  exports.defaultAbiCoder = new AbiCoder();
},45,[36,42,37,44,46,47,54,56,57,58,59,60,66,72,31]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[3]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[4]);

  var logger = new logger_1.Logger(_version_1.version);

  function checkResultErrors(result) {
    var errors = [];

    var checkErrors = function (path, object) {
      if (!Array.isArray(object)) {
        return;
      }

      for (var key in object) {
        var childPath = path.slice();
        childPath.push(key);

        try {
          checkErrors(childPath, object[key]);
        } catch (error) {
          errors.push({
            path: childPath,
            error: error
          });
        }
      }
    };

    checkErrors([], result);
    return errors;
  }

  exports.checkResultErrors = checkResultErrors;

  var Coder = function () {
    function Coder(name, type, localName, dynamic) {
      this.name = name;
      this.type = type;
      this.localName = localName;
      this.dynamic = dynamic;
    }

    Coder.prototype._throwError = function (message, value) {
      logger.throwArgumentError(message, this.localName, value);
    };

    return Coder;
  }();

  exports.Coder = Coder;

  var Writer = function () {
    function Writer(wordSize) {
      properties_1.defineReadOnly(this, "wordSize", wordSize || 32);
      this._data = [];
      this._dataLength = 0;
      this._padding = new Uint8Array(wordSize);
    }

    Object.defineProperty(Writer.prototype, "data", {
      get: function () {
        return bytes_1.hexConcat(this._data);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Writer.prototype, "length", {
      get: function () {
        return this._dataLength;
      },
      enumerable: true,
      configurable: true
    });

    Writer.prototype._writeData = function (data) {
      this._data.push(data);

      this._dataLength += data.length;
      return data.length;
    };

    Writer.prototype.appendWriter = function (writer) {
      return this._writeData(bytes_1.concat(writer._data));
    };

    Writer.prototype.writeBytes = function (value) {
      var bytes = bytes_1.arrayify(value);
      var paddingOffset = bytes.length % this.wordSize;

      if (paddingOffset) {
        bytes = bytes_1.concat([bytes, this._padding.slice(paddingOffset)]);
      }

      return this._writeData(bytes);
    };

    Writer.prototype._getValue = function (value) {
      var bytes = bytes_1.arrayify(bignumber_1.BigNumber.from(value));

      if (bytes.length > this.wordSize) {
        logger.throwError("value out-of-bounds", logger_1.Logger.errors.BUFFER_OVERRUN, {
          length: this.wordSize,
          offset: bytes.length
        });
      }

      if (bytes.length % this.wordSize) {
        bytes = bytes_1.concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
      }

      return bytes;
    };

    Writer.prototype.writeValue = function (value) {
      return this._writeData(this._getValue(value));
    };

    Writer.prototype.writeUpdatableValue = function () {
      var _this = this;

      var offset = this._data.length;

      this._data.push(this._padding);

      this._dataLength += this.wordSize;
      return function (value) {
        _this._data[offset] = _this._getValue(value);
      };
    };

    return Writer;
  }();

  exports.Writer = Writer;

  var Reader = function () {
    function Reader(data, wordSize, coerceFunc, allowLoose) {
      properties_1.defineReadOnly(this, "_data", bytes_1.arrayify(data));
      properties_1.defineReadOnly(this, "wordSize", wordSize || 32);
      properties_1.defineReadOnly(this, "_coerceFunc", coerceFunc);
      properties_1.defineReadOnly(this, "allowLoose", allowLoose);
      this._offset = 0;
    }

    Object.defineProperty(Reader.prototype, "data", {
      get: function () {
        return bytes_1.hexlify(this._data);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Reader.prototype, "consumed", {
      get: function () {
        return this._offset;
      },
      enumerable: true,
      configurable: true
    });

    Reader.coerce = function (name, value) {
      var match = name.match("^u?int([0-9]+)$");

      if (match && parseInt(match[1]) <= 48) {
        value = value.toNumber();
      }

      return value;
    };

    Reader.prototype.coerce = function (name, value) {
      if (this._coerceFunc) {
        return this._coerceFunc(name, value);
      }

      return Reader.coerce(name, value);
    };

    Reader.prototype._peekBytes = function (offset, length, loose) {
      var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;

      if (this._offset + alignedLength > this._data.length) {
        if (this.allowLoose && loose && this._offset + length <= this._data.length) {
          alignedLength = length;
        } else {
          logger.throwError("data out-of-bounds", logger_1.Logger.errors.BUFFER_OVERRUN, {
            length: this._data.length,
            offset: this._offset + alignedLength
          });
        }
      }

      return this._data.slice(this._offset, this._offset + alignedLength);
    };

    Reader.prototype.subReader = function (offset) {
      return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
    };

    Reader.prototype.readBytes = function (length, loose) {
      var bytes = this._peekBytes(0, length, !!loose);

      this._offset += bytes.length;
      return bytes.slice(0, length);
    };

    Reader.prototype.readValue = function () {
      return bignumber_1.BigNumber.from(this.readBytes(this.wordSize));
    };

    return Reader;
  }();

  exports.Reader = Reader;
},46,[36,32,42,37,44]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var address_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[2]);

  var AddressCoder = function (_super) {
    __extends(AddressCoder, _super);

    function AddressCoder(localName) {
      return _super.call(this, "address", "address", localName, false) || this;
    }

    AddressCoder.prototype.encode = function (writer, value) {
      try {
        address_1.getAddress(value);
      } catch (error) {
        this._throwError(error.message, value);
      }

      return writer.writeValue(value);
    };

    AddressCoder.prototype.decode = function (reader) {
      return address_1.getAddress(bytes_1.hexZeroPad(reader.readValue().toHexString(), 20));
    };

    return AddressCoder;
  }(abstract_coder_1.Coder);

  exports.AddressCoder = AddressCoder;
},47,[48,36,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[2]);

  var rlp_1 = _$$_REQUIRE(_dependencyMap[3]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[4]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[5]);

  var logger = new logger_1.Logger(_version_1.version);

  function getChecksumAddress(address) {
    if (!bytes_1.isHexString(address, 20)) {
      logger.throwArgumentError("invalid address", "address", address);
    }

    address = address.toLowerCase();
    var chars = address.substring(2).split("");
    var expanded = new Uint8Array(40);

    for (var i = 0; i < 40; i++) {
      expanded[i] = chars[i].charCodeAt(0);
    }

    var hashed = bytes_1.arrayify(keccak256_1.keccak256(expanded));

    for (var i = 0; i < 40; i += 2) {
      if (hashed[i >> 1] >> 4 >= 8) {
        chars[i] = chars[i].toUpperCase();
      }

      if ((hashed[i >> 1] & 0x0f) >= 8) {
        chars[i + 1] = chars[i + 1].toUpperCase();
      }
    }

    return "0x" + chars.join("");
  }

  var MAX_SAFE_INTEGER = 0x1fffffffffffff;

  function log10(x) {
    if (Math.log10) {
      return Math.log10(x);
    }

    return Math.log(x) / Math.LN10;
  }

  var ibanLookup = {};

  for (var i = 0; i < 10; i++) {
    ibanLookup[String(i)] = String(i);
  }

  for (var i = 0; i < 26; i++) {
    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  }

  var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));

  function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    var expanded = address.split("").map(function (c) {
      return ibanLookup[c];
    }).join("");

    while (expanded.length >= safeDigits) {
      var block = expanded.substring(0, safeDigits);
      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }

    var checksum = String(98 - parseInt(expanded, 10) % 97);

    while (checksum.length < 2) {
      checksum = "0" + checksum;
    }

    return checksum;
  }

  ;

  function getAddress(address) {
    var result = null;

    if (typeof address !== "string") {
      logger.throwArgumentError("invalid address", "address", address);
    }

    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
      if (address.substring(0, 2) !== "0x") {
        address = "0x" + address;
      }

      result = getChecksumAddress(address);

      if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
        logger.throwArgumentError("bad address checksum", "address", address);
      }
    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
      if (address.substring(2, 4) !== ibanChecksum(address)) {
        logger.throwArgumentError("bad icap checksum", "address", address);
      }

      result = bignumber_1._base36To16(address.substring(4));

      while (result.length < 40) {
        result = "0" + result;
      }

      result = getChecksumAddress("0x" + result);
    } else {
      logger.throwArgumentError("invalid address", "address", address);
    }

    return result;
  }

  exports.getAddress = getAddress;

  function isAddress(address) {
    try {
      getAddress(address);
      return true;
    } catch (error) {}

    return false;
  }

  exports.isAddress = isAddress;

  function getIcapAddress(address) {
    var base36 = bignumber_1._base16To36(getAddress(address).substring(2)).toUpperCase();

    while (base36.length < 30) {
      base36 = "0" + base36;
    }

    return "XE" + ibanChecksum("XE00" + base36) + base36;
  }

  exports.getIcapAddress = getIcapAddress;

  function getContractAddress(transaction) {
    var from = null;

    try {
      from = getAddress(transaction.from);
    } catch (error) {
      logger.throwArgumentError("missing from address", "transaction", transaction);
    }

    var nonce = bytes_1.stripZeros(bytes_1.arrayify(bignumber_1.BigNumber.from(transaction.nonce).toHexString()));
    return getAddress(bytes_1.hexDataSlice(keccak256_1.keccak256(rlp_1.encode([from, nonce])), 12));
  }

  exports.getContractAddress = getContractAddress;

  function getCreate2Address(from, salt, initCodeHash) {
    if (bytes_1.hexDataLength(salt) !== 32) {
      logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
    }

    if (bytes_1.hexDataLength(initCodeHash) !== 32) {
      logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
    }

    return getAddress(bytes_1.hexDataSlice(keccak256_1.keccak256(bytes_1.concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
  }

  exports.getCreate2Address = getCreate2Address;
},48,[36,32,49,51,37,53]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __importDefault = this && this.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var js_sha3_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0]));

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  function keccak256(data) {
    return '0x' + js_sha3_1.default.keccak_256(bytes_1.arrayify(data));
  }

  exports.keccak256 = keccak256;
},49,[50,36]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  /**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.5.7
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2016
   * @license MIT
   */
  (function () {
    'use strict';

    var root = typeof window === 'object' ? window : {};
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;

    if (NODE_JS) {
      root = global;
    }

    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
    var HEX_CHARS = '0123456789abcdef'.split('');
    var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var PADDING = [6, 1536, 393216, 100663296];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    var BITS = [224, 256, 384, 512];
    var SHAKE_BITS = [128, 256];
    var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];

    var createOutputMethod = function (bits, padding, outputType) {
      return function (message) {
        return new Keccak(bits, padding, bits).update(message)[outputType]();
      };
    };

    var createShakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits) {
        return new Keccak(bits, padding, outputBits).update(message)[outputType]();
      };
    };

    var createMethod = function (bits, padding) {
      var method = createOutputMethod(bits, padding, 'hex');

      method.create = function () {
        return new Keccak(bits, padding, bits);
      };

      method.update = function (message) {
        return method.create().update(message);
      };

      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createOutputMethod(bits, padding, type);
      }

      return method;
    };

    var createShakeMethod = function (bits, padding) {
      var method = createShakeOutputMethod(bits, padding, 'hex');

      method.create = function (outputBits) {
        return new Keccak(bits, padding, outputBits);
      };

      method.update = function (message, outputBits) {
        return method.create(outputBits).update(message);
      };

      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createShakeOutputMethod(bits, padding, type);
      }

      return method;
    };

    var algorithms = [{
      name: 'keccak',
      padding: KECCAK_PADDING,
      bits: BITS,
      createMethod: createMethod
    }, {
      name: 'sha3',
      padding: PADDING,
      bits: BITS,
      createMethod: createMethod
    }, {
      name: 'shake',
      padding: SHAKE_PADDING,
      bits: SHAKE_BITS,
      createMethod: createShakeMethod
    }];
    var methods = {},
        methodNames = [];

    for (var i = 0; i < algorithms.length; ++i) {
      var algorithm = algorithms[i];
      var bits = algorithm.bits;

      for (var j = 0; j < bits.length; ++j) {
        var methodName = algorithm.name + '_' + bits[j];
        methodNames.push(methodName);
        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      }
    }

    function Keccak(bits, padding, outputBits) {
      this.blocks = [];
      this.s = [];
      this.padding = padding;
      this.outputBits = outputBits;
      this.reset = true;
      this.block = 0;
      this.start = 0;
      this.blockCount = 1600 - (bits << 1) >> 5;
      this.byteCount = this.blockCount << 2;
      this.outputBlocks = outputBits >> 5;
      this.extraBytes = (outputBits & 31) >> 3;

      for (var i = 0; i < 50; ++i) {
        this.s[i] = 0;
      }
    }

    Keccak.prototype.update = function (message) {
      var notString = typeof message !== 'string';

      if (notString && message.constructor === ArrayBuffer) {
        message = new Uint8Array(message);
      }

      var length = message.length,
          blocks = this.blocks,
          byteCount = this.byteCount,
          blockCount = this.blockCount,
          index = 0,
          s = this.s,
          i,
          code;

      while (index < length) {
        if (this.reset) {
          this.reset = false;
          blocks[0] = this.block;

          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }

        if (notString) {
          for (i = this.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = this.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);

            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
              blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
            }
          }
        }

        this.lastByteIndex = i;

        if (i >= byteCount) {
          this.start = i - byteCount;
          this.block = blocks[blockCount];

          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }

          f(s);
          this.reset = true;
        } else {
          this.start = i;
        }
      }

      return this;
    };

    Keccak.prototype.finalize = function () {
      var blocks = this.blocks,
          i = this.lastByteIndex,
          blockCount = this.blockCount,
          s = this.s;
      blocks[i >> 2] |= this.padding[i & 3];

      if (this.lastByteIndex === this.byteCount) {
        blocks[0] = blocks[blockCount];

        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }

      blocks[blockCount - 1] |= 0x80000000;

      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }

      f(s);
    };

    Keccak.prototype.toString = Keccak.prototype.hex = function () {
      this.finalize();
      var blockCount = this.blockCount,
          s = this.s,
          outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes,
          i = 0,
          j = 0;
      var hex = '',
          block;

      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
        }

        if (j % blockCount === 0) {
          f(s);
          i = 0;
        }
      }

      if (extraBytes) {
        block = s[i];

        if (extraBytes > 0) {
          hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];
        }

        if (extraBytes > 1) {
          hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];
        }

        if (extraBytes > 2) {
          hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];
        }
      }

      return hex;
    };

    Keccak.prototype.arrayBuffer = function () {
      this.finalize();
      var blockCount = this.blockCount,
          s = this.s,
          outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes,
          i = 0,
          j = 0;
      var bytes = this.outputBits >> 3;
      var buffer;

      if (extraBytes) {
        buffer = new ArrayBuffer(outputBlocks + 1 << 2);
      } else {
        buffer = new ArrayBuffer(bytes);
      }

      var array = new Uint32Array(buffer);

      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          array[j] = s[i];
        }

        if (j % blockCount === 0) {
          f(s);
        }
      }

      if (extraBytes) {
        array[i] = s[i];
        buffer = buffer.slice(0, bytes);
      }

      return buffer;
    };

    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

    Keccak.prototype.digest = Keccak.prototype.array = function () {
      this.finalize();
      var blockCount = this.blockCount,
          s = this.s,
          outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes,
          i = 0,
          j = 0;
      var array = [],
          offset,
          block;

      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          array[offset + 1] = block >> 8 & 0xFF;
          array[offset + 2] = block >> 16 & 0xFF;
          array[offset + 3] = block >> 24 & 0xFF;
        }

        if (j % blockCount === 0) {
          f(s);
        }
      }

      if (extraBytes) {
        offset = j << 2;
        block = s[i];

        if (extraBytes > 0) {
          array[offset] = block & 0xFF;
        }

        if (extraBytes > 1) {
          array[offset + 1] = block >> 8 & 0xFF;
        }

        if (extraBytes > 2) {
          array[offset + 2] = block >> 16 & 0xFF;
        }
      }

      return array;
    };

    var f = function (s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
        h = c8 ^ (c2 << 1 | c3 >>> 31);
        l = c9 ^ (c3 << 1 | c2 >>> 31);
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ (c4 << 1 | c5 >>> 31);
        l = c1 ^ (c5 << 1 | c4 >>> 31);
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ (c6 << 1 | c7 >>> 31);
        l = c3 ^ (c7 << 1 | c6 >>> 31);
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ (c8 << 1 | c9 >>> 31);
        l = c5 ^ (c9 << 1 | c8 >>> 31);
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ (c0 << 1 | c1 >>> 31);
        l = c7 ^ (c1 << 1 | c0 >>> 31);
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;
        b0 = s[0];
        b1 = s[1];
        b32 = s[11] << 4 | s[10] >>> 28;
        b33 = s[10] << 4 | s[11] >>> 28;
        b14 = s[20] << 3 | s[21] >>> 29;
        b15 = s[21] << 3 | s[20] >>> 29;
        b46 = s[31] << 9 | s[30] >>> 23;
        b47 = s[30] << 9 | s[31] >>> 23;
        b28 = s[40] << 18 | s[41] >>> 14;
        b29 = s[41] << 18 | s[40] >>> 14;
        b20 = s[2] << 1 | s[3] >>> 31;
        b21 = s[3] << 1 | s[2] >>> 31;
        b2 = s[13] << 12 | s[12] >>> 20;
        b3 = s[12] << 12 | s[13] >>> 20;
        b34 = s[22] << 10 | s[23] >>> 22;
        b35 = s[23] << 10 | s[22] >>> 22;
        b16 = s[33] << 13 | s[32] >>> 19;
        b17 = s[32] << 13 | s[33] >>> 19;
        b48 = s[42] << 2 | s[43] >>> 30;
        b49 = s[43] << 2 | s[42] >>> 30;
        b40 = s[5] << 30 | s[4] >>> 2;
        b41 = s[4] << 30 | s[5] >>> 2;
        b22 = s[14] << 6 | s[15] >>> 26;
        b23 = s[15] << 6 | s[14] >>> 26;
        b4 = s[25] << 11 | s[24] >>> 21;
        b5 = s[24] << 11 | s[25] >>> 21;
        b36 = s[34] << 15 | s[35] >>> 17;
        b37 = s[35] << 15 | s[34] >>> 17;
        b18 = s[45] << 29 | s[44] >>> 3;
        b19 = s[44] << 29 | s[45] >>> 3;
        b10 = s[6] << 28 | s[7] >>> 4;
        b11 = s[7] << 28 | s[6] >>> 4;
        b42 = s[17] << 23 | s[16] >>> 9;
        b43 = s[16] << 23 | s[17] >>> 9;
        b24 = s[26] << 25 | s[27] >>> 7;
        b25 = s[27] << 25 | s[26] >>> 7;
        b6 = s[36] << 21 | s[37] >>> 11;
        b7 = s[37] << 21 | s[36] >>> 11;
        b38 = s[47] << 24 | s[46] >>> 8;
        b39 = s[46] << 24 | s[47] >>> 8;
        b30 = s[8] << 27 | s[9] >>> 5;
        b31 = s[9] << 27 | s[8] >>> 5;
        b12 = s[18] << 20 | s[19] >>> 12;
        b13 = s[19] << 20 | s[18] >>> 12;
        b44 = s[29] << 7 | s[28] >>> 25;
        b45 = s[28] << 7 | s[29] >>> 25;
        b26 = s[38] << 8 | s[39] >>> 24;
        b27 = s[39] << 8 | s[38] >>> 24;
        b8 = s[48] << 14 | s[49] >>> 18;
        b9 = s[49] << 14 | s[48] >>> 18;
        s[0] = b0 ^ ~b2 & b4;
        s[1] = b1 ^ ~b3 & b5;
        s[10] = b10 ^ ~b12 & b14;
        s[11] = b11 ^ ~b13 & b15;
        s[20] = b20 ^ ~b22 & b24;
        s[21] = b21 ^ ~b23 & b25;
        s[30] = b30 ^ ~b32 & b34;
        s[31] = b31 ^ ~b33 & b35;
        s[40] = b40 ^ ~b42 & b44;
        s[41] = b41 ^ ~b43 & b45;
        s[2] = b2 ^ ~b4 & b6;
        s[3] = b3 ^ ~b5 & b7;
        s[12] = b12 ^ ~b14 & b16;
        s[13] = b13 ^ ~b15 & b17;
        s[22] = b22 ^ ~b24 & b26;
        s[23] = b23 ^ ~b25 & b27;
        s[32] = b32 ^ ~b34 & b36;
        s[33] = b33 ^ ~b35 & b37;
        s[42] = b42 ^ ~b44 & b46;
        s[43] = b43 ^ ~b45 & b47;
        s[4] = b4 ^ ~b6 & b8;
        s[5] = b5 ^ ~b7 & b9;
        s[14] = b14 ^ ~b16 & b18;
        s[15] = b15 ^ ~b17 & b19;
        s[24] = b24 ^ ~b26 & b28;
        s[25] = b25 ^ ~b27 & b29;
        s[34] = b34 ^ ~b36 & b38;
        s[35] = b35 ^ ~b37 & b39;
        s[44] = b44 ^ ~b46 & b48;
        s[45] = b45 ^ ~b47 & b49;
        s[6] = b6 ^ ~b8 & b0;
        s[7] = b7 ^ ~b9 & b1;
        s[16] = b16 ^ ~b18 & b10;
        s[17] = b17 ^ ~b19 & b11;
        s[26] = b26 ^ ~b28 & b20;
        s[27] = b27 ^ ~b29 & b21;
        s[36] = b36 ^ ~b38 & b30;
        s[37] = b37 ^ ~b39 & b31;
        s[46] = b46 ^ ~b48 & b40;
        s[47] = b47 ^ ~b49 & b41;
        s[8] = b8 ^ ~b0 & b2;
        s[9] = b9 ^ ~b1 & b3;
        s[18] = b18 ^ ~b10 & b12;
        s[19] = b19 ^ ~b11 & b13;
        s[28] = b28 ^ ~b20 & b22;
        s[29] = b29 ^ ~b21 & b23;
        s[38] = b38 ^ ~b30 & b32;
        s[39] = b39 ^ ~b31 & b33;
        s[48] = b48 ^ ~b40 & b42;
        s[49] = b49 ^ ~b41 & b43;
        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };

    if (COMMON_JS) {
      module.exports = methods;
    } else {
      for (var i = 0; i < methodNames.length; ++i) {
        root[methodNames[i]] = methods[methodNames[i]];
      }
    }
  })();
},50,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[1]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger = new logger_1.Logger(_version_1.version);

  function arrayifyInteger(value) {
    var result = [];

    while (value) {
      result.unshift(value & 0xff);
      value >>= 8;
    }

    return result;
  }

  function unarrayifyInteger(data, offset, length) {
    var result = 0;

    for (var i = 0; i < length; i++) {
      result = result * 256 + data[offset + i];
    }

    return result;
  }

  function _encode(object) {
    if (Array.isArray(object)) {
      var payload_1 = [];
      object.forEach(function (child) {
        payload_1 = payload_1.concat(_encode(child));
      });

      if (payload_1.length <= 55) {
        payload_1.unshift(0xc0 + payload_1.length);
        return payload_1;
      }

      var length_1 = arrayifyInteger(payload_1.length);
      length_1.unshift(0xf7 + length_1.length);
      return length_1.concat(payload_1);
    }

    if (!bytes_1.isBytesLike(object)) {
      logger.throwArgumentError("RLP object must be BytesLike", "object", object);
    }

    var data = Array.prototype.slice.call(bytes_1.arrayify(object));

    if (data.length === 1 && data[0] <= 0x7f) {
      return data;
    } else if (data.length <= 55) {
      data.unshift(0x80 + data.length);
      return data;
    }

    var length = arrayifyInteger(data.length);
    length.unshift(0xb7 + length.length);
    return length.concat(data);
  }

  function encode(object) {
    return bytes_1.hexlify(_encode(object));
  }

  exports.encode = encode;

  function _decodeChildren(data, offset, childOffset, length) {
    var result = [];

    while (childOffset < offset + 1 + length) {
      var decoded = _decode(data, childOffset);

      result.push(decoded.result);
      childOffset += decoded.consumed;

      if (childOffset > offset + 1 + length) {
        logger.throwError("child data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
      }
    }

    return {
      consumed: 1 + length,
      result: result
    };
  }

  function _decode(data, offset) {
    if (data.length === 0) {
      logger.throwError("data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
    }

    if (data[offset] >= 0xf8) {
      var lengthLength = data[offset] - 0xf7;

      if (offset + 1 + lengthLength > data.length) {
        logger.throwError("data short segment too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
      }

      var length_2 = unarrayifyInteger(data, offset + 1, lengthLength);

      if (offset + 1 + lengthLength + length_2 > data.length) {
        logger.throwError("data long segment too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
      }

      return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length_2);
    } else if (data[offset] >= 0xc0) {
      var length_3 = data[offset] - 0xc0;

      if (offset + 1 + length_3 > data.length) {
        logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
      }

      return _decodeChildren(data, offset, offset + 1, length_3);
    } else if (data[offset] >= 0xb8) {
      var lengthLength = data[offset] - 0xb7;

      if (offset + 1 + lengthLength > data.length) {
        logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
      }

      var length_4 = unarrayifyInteger(data, offset + 1, lengthLength);

      if (offset + 1 + lengthLength + length_4 > data.length) {
        logger.throwError("data array too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
      }

      var result = bytes_1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length_4));
      return {
        consumed: 1 + lengthLength + length_4,
        result: result
      };
    } else if (data[offset] >= 0x80) {
      var length_5 = data[offset] - 0x80;

      if (offset + 1 + length_5 > data.length) {
        logger.throwError("data too short", logger_1.Logger.errors.BUFFER_OVERRUN, {});
      }

      var result = bytes_1.hexlify(data.slice(offset + 1, offset + 1 + length_5));
      return {
        consumed: 1 + length_5,
        result: result
      };
    }

    return {
      consumed: 1,
      result: bytes_1.hexlify(data[offset])
    };
  }

  function decode(data) {
    var bytes = bytes_1.arrayify(data);

    var decoded = _decode(bytes, 0);

    if (decoded.consumed !== bytes.length) {
      logger.throwArgumentError("invalid rlp data", "data", data);
    }

    return decoded.result;
  }

  exports.decode = decode;
},51,[36,37,52]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "rlp/5.0.5";
},52,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "address/5.0.7";
},53,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var logger_1 = _$$_REQUIRE(_dependencyMap[0]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger = new logger_1.Logger(_version_1.version);

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[2]);

  var anonymous_1 = _$$_REQUIRE(_dependencyMap[3]);

  function pack(writer, coders, values) {
    var arrayValues = null;

    if (Array.isArray(values)) {
      arrayValues = values;
    } else if (values && typeof values === "object") {
      var unique_1 = {};
      arrayValues = coders.map(function (coder) {
        var name = coder.localName;

        if (!name) {
          logger.throwError("cannot encode object for signature with missing names", logger_1.Logger.errors.INVALID_ARGUMENT, {
            argument: "values",
            coder: coder,
            value: values
          });
        }

        if (unique_1[name]) {
          logger.throwError("cannot encode object for signature with duplicate names", logger_1.Logger.errors.INVALID_ARGUMENT, {
            argument: "values",
            coder: coder,
            value: values
          });
        }

        unique_1[name] = true;
        return values[name];
      });
    } else {
      logger.throwArgumentError("invalid tuple value", "tuple", values);
    }

    if (coders.length !== arrayValues.length) {
      logger.throwArgumentError("types/value length mismatch", "tuple", values);
    }

    var staticWriter = new abstract_coder_1.Writer(writer.wordSize);
    var dynamicWriter = new abstract_coder_1.Writer(writer.wordSize);
    var updateFuncs = [];
    coders.forEach(function (coder, index) {
      var value = arrayValues[index];

      if (coder.dynamic) {
        var dynamicOffset_1 = dynamicWriter.length;
        coder.encode(dynamicWriter, value);
        var updateFunc_1 = staticWriter.writeUpdatableValue();
        updateFuncs.push(function (baseOffset) {
          updateFunc_1(baseOffset + dynamicOffset_1);
        });
      } else {
        coder.encode(staticWriter, value);
      }
    });
    updateFuncs.forEach(function (func) {
      func(staticWriter.length);
    });
    var length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
  }

  exports.pack = pack;

  function unpack(reader, coders) {
    var values = [];
    var baseReader = reader.subReader(0);
    coders.forEach(function (coder) {
      var value = null;

      if (coder.dynamic) {
        var offset = reader.readValue();
        var offsetReader = baseReader.subReader(offset.toNumber());

        try {
          value = coder.decode(offsetReader);
        } catch (error) {
          if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {
            throw error;
          }

          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      } else {
        try {
          value = coder.decode(reader);
        } catch (error) {
          if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {
            throw error;
          }

          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      }

      if (value != undefined) {
        values.push(value);
      }
    });
    var uniqueNames = coders.reduce(function (accum, coder) {
      var name = coder.localName;

      if (name) {
        if (!accum[name]) {
          accum[name] = 0;
        }

        accum[name]++;
      }

      return accum;
    }, {});
    coders.forEach(function (coder, index) {
      var name = coder.localName;

      if (!name || uniqueNames[name] !== 1) {
        return;
      }

      if (name === "length") {
        name = "_length";
      }

      if (values[name] != null) {
        return;
      }

      var value = values[index];

      if (value instanceof Error) {
        Object.defineProperty(values, name, {
          get: function () {
            throw value;
          }
        });
      } else {
        values[name] = value;
      }
    });

    var _loop_1 = function (i) {
      var value = values[i];

      if (value instanceof Error) {
        Object.defineProperty(values, i, {
          get: function () {
            throw value;
          }
        });
      }
    };

    for (var i = 0; i < values.length; i++) {
      _loop_1(i);
    }

    return Object.freeze(values);
  }

  exports.unpack = unpack;

  var ArrayCoder = function (_super) {
    __extends(ArrayCoder, _super);

    function ArrayCoder(coder, length, localName) {
      var _this = this;

      var type = coder.type + "[" + (length >= 0 ? length : "") + "]";
      var dynamic = length === -1 || coder.dynamic;
      _this = _super.call(this, "array", type, localName, dynamic) || this;
      _this.coder = coder;
      _this.length = length;
      return _this;
    }

    ArrayCoder.prototype.encode = function (writer, value) {
      if (!Array.isArray(value)) {
        this._throwError("expected array value", value);
      }

      var count = this.length;

      if (count === -1) {
        count = value.length;
        writer.writeValue(value.length);
      }

      logger.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
      var coders = [];

      for (var i = 0; i < value.length; i++) {
        coders.push(this.coder);
      }

      return pack(writer, coders, value);
    };

    ArrayCoder.prototype.decode = function (reader) {
      var count = this.length;

      if (count === -1) {
        count = reader.readValue().toNumber();
      }

      var coders = [];

      for (var i = 0; i < count; i++) {
        coders.push(new anonymous_1.AnonymousCoder(this.coder));
      }

      return reader.coerce(this.name, unpack(reader, coders));
    };

    return ArrayCoder;
  }(abstract_coder_1.Coder);

  exports.ArrayCoder = ArrayCoder;
},54,[37,44,46,55]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[0]);

  var AnonymousCoder = function (_super) {
    __extends(AnonymousCoder, _super);

    function AnonymousCoder(coder) {
      var _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic) || this;

      _this.coder = coder;
      return _this;
    }

    AnonymousCoder.prototype.encode = function (writer, value) {
      return this.coder.encode(writer, value);
    };

    AnonymousCoder.prototype.decode = function (reader) {
      return this.coder.decode(reader);
    };

    return AnonymousCoder;
  }(abstract_coder_1.Coder);

  exports.AnonymousCoder = AnonymousCoder;
},55,[46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[0]);

  var BooleanCoder = function (_super) {
    __extends(BooleanCoder, _super);

    function BooleanCoder(localName) {
      return _super.call(this, "bool", "bool", localName, false) || this;
    }

    BooleanCoder.prototype.encode = function (writer, value) {
      return writer.writeValue(value ? 1 : 0);
    };

    BooleanCoder.prototype.decode = function (reader) {
      return reader.coerce(this.type, !reader.readValue().isZero());
    };

    return BooleanCoder;
  }(abstract_coder_1.Coder);

  exports.BooleanCoder = BooleanCoder;
},56,[46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[1]);

  var DynamicBytesCoder = function (_super) {
    __extends(DynamicBytesCoder, _super);

    function DynamicBytesCoder(type, localName) {
      return _super.call(this, type, type, localName, true) || this;
    }

    DynamicBytesCoder.prototype.encode = function (writer, value) {
      value = bytes_1.arrayify(value);
      var length = writer.writeValue(value.length);
      length += writer.writeBytes(value);
      return length;
    };

    DynamicBytesCoder.prototype.decode = function (reader) {
      return reader.readBytes(reader.readValue().toNumber(), true);
    };

    return DynamicBytesCoder;
  }(abstract_coder_1.Coder);

  exports.DynamicBytesCoder = DynamicBytesCoder;

  var BytesCoder = function (_super) {
    __extends(BytesCoder, _super);

    function BytesCoder(localName) {
      return _super.call(this, "bytes", localName) || this;
    }

    BytesCoder.prototype.decode = function (reader) {
      return reader.coerce(this.name, bytes_1.hexlify(_super.prototype.decode.call(this, reader)));
    };

    return BytesCoder;
  }(DynamicBytesCoder);

  exports.BytesCoder = BytesCoder;
},57,[36,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[1]);

  var FixedBytesCoder = function (_super) {
    __extends(FixedBytesCoder, _super);

    function FixedBytesCoder(size, localName) {
      var _this = this;

      var name = "bytes" + String(size);
      _this = _super.call(this, name, name, localName, false) || this;
      _this.size = size;
      return _this;
    }

    FixedBytesCoder.prototype.encode = function (writer, value) {
      var data = bytes_1.arrayify(value);

      if (data.length !== this.size) {
        this._throwError("incorrect data length", value);
      }

      return writer.writeBytes(data);
    };

    FixedBytesCoder.prototype.decode = function (reader) {
      return reader.coerce(this.name, bytes_1.hexlify(reader.readBytes(this.size)));
    };

    return FixedBytesCoder;
  }(abstract_coder_1.Coder);

  exports.FixedBytesCoder = FixedBytesCoder;
},58,[36,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[0]);

  var NullCoder = function (_super) {
    __extends(NullCoder, _super);

    function NullCoder(localName) {
      return _super.call(this, "null", "", localName, false) || this;
    }

    NullCoder.prototype.encode = function (writer, value) {
      if (value != null) {
        this._throwError("not null", value);
      }

      return writer.writeBytes([]);
    };

    NullCoder.prototype.decode = function (reader) {
      reader.readBytes(0);
      return reader.coerce(this.name, null);
    };

    return NullCoder;
  }(abstract_coder_1.Coder);

  exports.NullCoder = NullCoder;
},59,[46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[0]);

  var constants_1 = _$$_REQUIRE(_dependencyMap[1]);

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[2]);

  var NumberCoder = function (_super) {
    __extends(NumberCoder, _super);

    function NumberCoder(size, signed, localName) {
      var _this = this;

      var name = (signed ? "int" : "uint") + size * 8;
      _this = _super.call(this, name, name, localName, false) || this;
      _this.size = size;
      _this.signed = signed;
      return _this;
    }

    NumberCoder.prototype.encode = function (writer, value) {
      var v = bignumber_1.BigNumber.from(value);
      var maxUintValue = constants_1.MaxUint256.mask(writer.wordSize * 8);

      if (this.signed) {
        var bounds = maxUintValue.mask(this.size * 8 - 1);

        if (v.gt(bounds) || v.lt(bounds.add(constants_1.One).mul(constants_1.NegativeOne))) {
          this._throwError("value out-of-bounds", value);
        }
      } else if (v.lt(constants_1.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
        this._throwError("value out-of-bounds", value);
      }

      v = v.toTwos(this.size * 8).mask(this.size * 8);

      if (this.signed) {
        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
      }

      return writer.writeValue(v);
    };

    NumberCoder.prototype.decode = function (reader) {
      var value = reader.readValue().mask(this.size * 8);

      if (this.signed) {
        value = value.fromTwos(this.size * 8);
      }

      return reader.coerce(this.name, value);
    };

    return NumberCoder;
  }(abstract_coder_1.Coder);

  exports.NumberCoder = NumberCoder;
},60,[32,61,46]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var addresses_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.AddressZero = addresses_1.AddressZero;

  var bignumbers_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.NegativeOne = bignumbers_1.NegativeOne;
  exports.Zero = bignumbers_1.Zero;
  exports.One = bignumbers_1.One;
  exports.Two = bignumbers_1.Two;
  exports.WeiPerEther = bignumbers_1.WeiPerEther;
  exports.MaxUint256 = bignumbers_1.MaxUint256;

  var hashes_1 = _$$_REQUIRE(_dependencyMap[2]);

  exports.HashZero = hashes_1.HashZero;

  var strings_1 = _$$_REQUIRE(_dependencyMap[3]);

  exports.EtherSymbol = strings_1.EtherSymbol;
},61,[62,63,64,65]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AddressZero = "0x0000000000000000000000000000000000000000";
},62,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[0]);

  var NegativeOne = bignumber_1.BigNumber.from(-1);
  exports.NegativeOne = NegativeOne;
  var Zero = bignumber_1.BigNumber.from(0);
  exports.Zero = Zero;
  var One = bignumber_1.BigNumber.from(1);
  exports.One = One;
  var Two = bignumber_1.BigNumber.from(2);
  exports.Two = Two;
  var WeiPerEther = bignumber_1.BigNumber.from("1000000000000000000");
  exports.WeiPerEther = WeiPerEther;
  var MaxUint256 = bignumber_1.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  exports.MaxUint256 = MaxUint256;
},63,[32]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
},64,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EtherSymbol = "\u039e";
},65,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var strings_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  var StringCoder = function (_super) {
    __extends(StringCoder, _super);

    function StringCoder(localName) {
      return _super.call(this, "string", localName) || this;
    }

    StringCoder.prototype.encode = function (writer, value) {
      return _super.prototype.encode.call(this, writer, strings_1.toUtf8Bytes(value));
    };

    StringCoder.prototype.decode = function (reader) {
      return strings_1.toUtf8String(_super.prototype.decode.call(this, reader));
    };

    return StringCoder;
  }(bytes_1.DynamicBytesCoder);

  exports.StringCoder = StringCoder;
},66,[67,57]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes32_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.formatBytes32String = bytes32_1.formatBytes32String;
  exports.parseBytes32String = bytes32_1.parseBytes32String;

  var idna_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.nameprep = idna_1.nameprep;

  var utf8_1 = _$$_REQUIRE(_dependencyMap[2]);

  exports._toEscapedUtf8String = utf8_1._toEscapedUtf8String;
  exports.toUtf8Bytes = utf8_1.toUtf8Bytes;
  exports.toUtf8CodePoints = utf8_1.toUtf8CodePoints;
  exports.toUtf8String = utf8_1.toUtf8String;
  exports.UnicodeNormalizationForm = utf8_1.UnicodeNormalizationForm;
  exports.Utf8ErrorFuncs = utf8_1.Utf8ErrorFuncs;
  exports.Utf8ErrorReason = utf8_1.Utf8ErrorReason;
},67,[68,71,69]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var constants_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  var utf8_1 = _$$_REQUIRE(_dependencyMap[2]);

  function formatBytes32String(text) {
    var bytes = utf8_1.toUtf8Bytes(text);

    if (bytes.length > 31) {
      throw new Error("bytes32 string must be less than 32 bytes");
    }

    return bytes_1.hexlify(bytes_1.concat([bytes, constants_1.HashZero]).slice(0, 32));
  }

  exports.formatBytes32String = formatBytes32String;

  function parseBytes32String(bytes) {
    var data = bytes_1.arrayify(bytes);

    if (data.length !== 32) {
      throw new Error("invalid bytes32 - not 32 bytes long");
    }

    if (data[31] !== 0) {
      throw new Error("invalid bytes32 string - no null terminator");
    }

    var length = 31;

    while (data[length - 1] === 0) {
      length--;
    }

    return utf8_1.toUtf8String(data.slice(0, length));
  }

  exports.parseBytes32String = parseBytes32String;
},68,[61,36,69]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[1]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger = new logger_1.Logger(_version_1.version);
  var UnicodeNormalizationForm;

  (function (UnicodeNormalizationForm) {
    UnicodeNormalizationForm["current"] = "";
    UnicodeNormalizationForm["NFC"] = "NFC";
    UnicodeNormalizationForm["NFD"] = "NFD";
    UnicodeNormalizationForm["NFKC"] = "NFKC";
    UnicodeNormalizationForm["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));

  ;
  var Utf8ErrorReason;

  (function (Utf8ErrorReason) {
    Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
    Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
    Utf8ErrorReason["OVERRUN"] = "string overrun";
    Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
    Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
    Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
    Utf8ErrorReason["OVERLONG"] = "overlong representation";
  })(Utf8ErrorReason = exports.Utf8ErrorReason || (exports.Utf8ErrorReason = {}));

  ;

  function errorFunc(reason, offset, bytes, output, badCodepoint) {
    return logger.throwArgumentError("invalid codepoint at offset " + offset + "; " + reason, "bytes", bytes);
  }

  function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
      var i = 0;

      for (var o = offset + 1; o < bytes.length; o++) {
        if (bytes[o] >> 6 !== 0x02) {
          break;
        }

        i++;
      }

      return i;
    }

    if (reason === Utf8ErrorReason.OVERRUN) {
      return bytes.length - offset - 1;
    }

    return 0;
  }

  function replaceFunc(reason, offset, bytes, output, badCodepoint) {
    if (reason === Utf8ErrorReason.OVERLONG) {
      output.push(badCodepoint);
      return 0;
    }

    output.push(0xfffd);
    return ignoreFunc(reason, offset, bytes, output, badCodepoint);
  }

  exports.Utf8ErrorFuncs = Object.freeze({
    error: errorFunc,
    ignore: ignoreFunc,
    replace: replaceFunc
  });

  function getUtf8CodePoints(bytes, onError) {
    if (onError == null) {
      onError = exports.Utf8ErrorFuncs.error;
    }

    bytes = bytes_1.arrayify(bytes);
    var result = [];
    var i = 0;

    while (i < bytes.length) {
      var c = bytes[i++];

      if (c >> 7 === 0) {
        result.push(c);
        continue;
      }

      var extraLength = null;
      var overlongMask = null;

      if ((c & 0xe0) === 0xc0) {
        extraLength = 1;
        overlongMask = 0x7f;
      } else if ((c & 0xf0) === 0xe0) {
        extraLength = 2;
        overlongMask = 0x7ff;
      } else if ((c & 0xf8) === 0xf0) {
        extraLength = 3;
        overlongMask = 0xffff;
      } else {
        if ((c & 0xc0) === 0x80) {
          i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
        } else {
          i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
        }

        continue;
      }

      if (i - 1 + extraLength >= bytes.length) {
        i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
        continue;
      }

      var res = c & (1 << 8 - extraLength - 1) - 1;

      for (var j = 0; j < extraLength; j++) {
        var nextChar = bytes[i];

        if ((nextChar & 0xc0) != 0x80) {
          i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
          res = null;
          break;
        }

        ;
        res = res << 6 | nextChar & 0x3f;
        i++;
      }

      if (res === null) {
        continue;
      }

      if (res > 0x10ffff) {
        i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
        continue;
      }

      if (res >= 0xd800 && res <= 0xdfff) {
        i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
        continue;
      }

      if (res <= overlongMask) {
        i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
        continue;
      }

      result.push(res);
    }

    return result;
  }

  function toUtf8Bytes(str, form) {
    if (form === undefined) {
      form = UnicodeNormalizationForm.current;
    }

    if (form != UnicodeNormalizationForm.current) {
      logger.checkNormalize();
      str = str.normalize(form);
    }

    var result = [];

    for (var i = 0; i < str.length; i++) {
      var c = str.charCodeAt(i);

      if (c < 0x80) {
        result.push(c);
      } else if (c < 0x800) {
        result.push(c >> 6 | 0xc0);
        result.push(c & 0x3f | 0x80);
      } else if ((c & 0xfc00) == 0xd800) {
        i++;
        var c2 = str.charCodeAt(i);

        if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
          throw new Error("invalid utf-8 string");
        }

        var pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
        result.push(pair >> 18 | 0xf0);
        result.push(pair >> 12 & 0x3f | 0x80);
        result.push(pair >> 6 & 0x3f | 0x80);
        result.push(pair & 0x3f | 0x80);
      } else {
        result.push(c >> 12 | 0xe0);
        result.push(c >> 6 & 0x3f | 0x80);
        result.push(c & 0x3f | 0x80);
      }
    }

    return bytes_1.arrayify(result);
  }

  exports.toUtf8Bytes = toUtf8Bytes;
  ;

  function escapeChar(value) {
    var hex = "0000" + value.toString(16);
    return "\\u" + hex.substring(hex.length - 4);
  }

  function _toEscapedUtf8String(bytes, onError) {
    return '"' + getUtf8CodePoints(bytes, onError).map(function (codePoint) {
      if (codePoint < 256) {
        switch (codePoint) {
          case 8:
            return "\\b";

          case 9:
            return "\\t";

          case 10:
            return "\\n";

          case 13:
            return "\\r";

          case 34:
            return "\\\"";

          case 92:
            return "\\\\";
        }

        if (codePoint >= 32 && codePoint < 127) {
          return String.fromCharCode(codePoint);
        }
      }

      if (codePoint <= 0xffff) {
        return escapeChar(codePoint);
      }

      codePoint -= 0x10000;
      return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
    }).join("") + '"';
  }

  exports._toEscapedUtf8String = _toEscapedUtf8String;

  function _toUtf8String(codePoints) {
    return codePoints.map(function (codePoint) {
      if (codePoint <= 0xffff) {
        return String.fromCharCode(codePoint);
      }

      codePoint -= 0x10000;
      return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);
    }).join("");
  }

  exports._toUtf8String = _toUtf8String;

  function toUtf8String(bytes, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes, onError));
  }

  exports.toUtf8String = toUtf8String;

  function toUtf8CodePoints(str, form) {
    if (form === undefined) {
      form = UnicodeNormalizationForm.current;
    }

    return getUtf8CodePoints(toUtf8Bytes(str, form));
  }

  exports.toUtf8CodePoints = toUtf8CodePoints;
},69,[36,37,70]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "strings/5.0.6";
},70,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var utf8_1 = _$$_REQUIRE(_dependencyMap[0]);

  function bytes2(data) {
    if (data.length % 4 !== 0) {
      throw new Error("bad data");
    }

    var result = [];

    for (var i = 0; i < data.length; i += 4) {
      result.push(parseInt(data.substring(i, i + 4), 16));
    }

    return result;
  }

  function createTable(data, func) {
    if (!func) {
      func = function (value) {
        return [parseInt(value, 16)];
      };
    }

    var lo = 0;
    var result = {};
    data.split(",").forEach(function (pair) {
      var comps = pair.split(":");
      lo += parseInt(comps[0], 16);
      result[lo] = func(comps[1]);
    });
    return result;
  }

  function createRangeTable(data) {
    var hi = 0;
    return data.split(",").map(function (v) {
      var comps = v.split("-");

      if (comps.length === 1) {
        comps[1] = "0";
      } else if (comps[1] === "") {
        comps[1] = "1";
      }

      var lo = hi + parseInt(comps[0], 16);
      hi = parseInt(comps[1], 16);
      return {
        l: lo,
        h: hi
      };
    });
  }

  function matchMap(value, ranges) {
    var lo = 0;

    for (var i = 0; i < ranges.length; i++) {
      var range = ranges[i];
      lo += range.l;

      if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
        if (range.e && range.e.indexOf(value - lo) !== -1) {
          continue;
        }

        return range;
      }
    }

    return null;
  }

  var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
  var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function (v) {
    return parseInt(v, 16);
  });
  var Table_B_2_ranges = [{
    h: 25,
    s: 32,
    l: 65
  }, {
    h: 30,
    s: 32,
    e: [23],
    l: 127
  }, {
    h: 54,
    s: 1,
    e: [48],
    l: 64,
    d: 2
  }, {
    h: 14,
    s: 1,
    l: 57,
    d: 2
  }, {
    h: 44,
    s: 1,
    l: 17,
    d: 2
  }, {
    h: 10,
    s: 1,
    e: [2, 6, 8],
    l: 61,
    d: 2
  }, {
    h: 16,
    s: 1,
    l: 68,
    d: 2
  }, {
    h: 84,
    s: 1,
    e: [18, 24, 66],
    l: 19,
    d: 2
  }, {
    h: 26,
    s: 32,
    e: [17],
    l: 435
  }, {
    h: 22,
    s: 1,
    l: 71,
    d: 2
  }, {
    h: 15,
    s: 80,
    l: 40
  }, {
    h: 31,
    s: 32,
    l: 16
  }, {
    h: 32,
    s: 1,
    l: 80,
    d: 2
  }, {
    h: 52,
    s: 1,
    l: 42,
    d: 2
  }, {
    h: 12,
    s: 1,
    l: 55,
    d: 2
  }, {
    h: 40,
    s: 1,
    e: [38],
    l: 15,
    d: 2
  }, {
    h: 14,
    s: 1,
    l: 48,
    d: 2
  }, {
    h: 37,
    s: 48,
    l: 49
  }, {
    h: 148,
    s: 1,
    l: 6351,
    d: 2
  }, {
    h: 88,
    s: 1,
    l: 160,
    d: 2
  }, {
    h: 15,
    s: 16,
    l: 704
  }, {
    h: 25,
    s: 26,
    l: 854
  }, {
    h: 25,
    s: 32,
    l: 55915
  }, {
    h: 37,
    s: 40,
    l: 1247
  }, {
    h: 25,
    s: -119711,
    l: 53248
  }, {
    h: 25,
    s: -119763,
    l: 52
  }, {
    h: 25,
    s: -119815,
    l: 52
  }, {
    h: 25,
    s: -119867,
    e: [1, 4, 5, 7, 8, 11, 12, 17],
    l: 52
  }, {
    h: 25,
    s: -119919,
    l: 52
  }, {
    h: 24,
    s: -119971,
    e: [2, 7, 8, 17],
    l: 52
  }, {
    h: 24,
    s: -120023,
    e: [2, 7, 13, 15, 16, 17],
    l: 52
  }, {
    h: 25,
    s: -120075,
    l: 52
  }, {
    h: 25,
    s: -120127,
    l: 52
  }, {
    h: 25,
    s: -120179,
    l: 52
  }, {
    h: 25,
    s: -120231,
    l: 52
  }, {
    h: 25,
    s: -120283,
    l: 52
  }, {
    h: 25,
    s: -120335,
    l: 52
  }, {
    h: 24,
    s: -119543,
    e: [17],
    l: 56
  }, {
    h: 24,
    s: -119601,
    e: [17],
    l: 58
  }, {
    h: 24,
    s: -119659,
    e: [17],
    l: 58
  }, {
    h: 24,
    s: -119717,
    e: [17],
    l: 58
  }, {
    h: 24,
    s: -119775,
    e: [17],
    l: 58
  }];
  var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
  var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
  var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
  var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");

  function flatten(values) {
    return values.reduce(function (accum, value) {
      value.forEach(function (value) {
        accum.push(value);
      });
      return accum;
    }, []);
  }

  function _nameprepTableA1(codepoint) {
    return !!matchMap(codepoint, Table_A_1_ranges);
  }

  exports._nameprepTableA1 = _nameprepTableA1;

  function _nameprepTableB2(codepoint) {
    var range = matchMap(codepoint, Table_B_2_ranges);

    if (range) {
      return [codepoint + range.s];
    }

    var codes = Table_B_2_lut_abs[codepoint];

    if (codes) {
      return codes;
    }

    var shift = Table_B_2_lut_rel[codepoint];

    if (shift) {
      return [codepoint + shift[0]];
    }

    var complex = Table_B_2_complex[codepoint];

    if (complex) {
      return complex;
    }

    return null;
  }

  exports._nameprepTableB2 = _nameprepTableB2;

  function _nameprepTableC(codepoint) {
    return !!matchMap(codepoint, Table_C_ranges);
  }

  exports._nameprepTableC = _nameprepTableC;

  function nameprep(value) {
    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
      return value.toLowerCase();
    }

    var codes = utf8_1.toUtf8CodePoints(value);
    codes = flatten(codes.map(function (code) {
      if (Table_B_1_flags.indexOf(code) >= 0) {
        return [];
      }

      if (code >= 0xfe00 && code <= 0xfe0f) {
        return [];
      }

      var codesTableB2 = _nameprepTableB2(code);

      if (codesTableB2) {
        return codesTableB2;
      }

      return [code];
    }));
    codes = utf8_1.toUtf8CodePoints(utf8_1._toUtf8String(codes), utf8_1.UnicodeNormalizationForm.NFKC);
    codes.forEach(function (code) {
      if (_nameprepTableC(code)) {
        throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
      }
    });
    codes.forEach(function (code) {
      if (_nameprepTableA1(code)) {
        throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
      }
    });

    var name = utf8_1._toUtf8String(codes);

    if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
      throw new Error("invalid hyphen");
    }

    if (name.length > 63) {
      throw new Error("too long");
    }

    return name;
  }

  exports.nameprep = nameprep;
},71,[69]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[0]);

  var array_1 = _$$_REQUIRE(_dependencyMap[1]);

  var TupleCoder = function (_super) {
    __extends(TupleCoder, _super);

    function TupleCoder(coders, localName) {
      var _this = this;

      var dynamic = false;
      var types = [];
      coders.forEach(function (coder) {
        if (coder.dynamic) {
          dynamic = true;
        }

        types.push(coder.type);
      });
      var type = "tuple(" + types.join(",") + ")";
      _this = _super.call(this, "tuple", type, localName, dynamic) || this;
      _this.coders = coders;
      return _this;
    }

    TupleCoder.prototype.encode = function (writer, value) {
      return array_1.pack(writer, this.coders, value);
    };

    TupleCoder.prototype.decode = function (reader) {
      return reader.coerce(this.name, array_1.unpack(reader, this.coders));
    };

    return TupleCoder;
  }(abstract_coder_1.Coder);

  exports.TupleCoder = TupleCoder;
},72,[46,54]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var address_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[2]);

  var hash_1 = _$$_REQUIRE(_dependencyMap[3]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[4]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[5]);

  var abi_coder_1 = _$$_REQUIRE(_dependencyMap[6]);

  var abstract_coder_1 = _$$_REQUIRE(_dependencyMap[7]);

  exports.checkResultErrors = abstract_coder_1.checkResultErrors;

  var fragments_1 = _$$_REQUIRE(_dependencyMap[8]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[9]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[10]);

  var logger = new logger_1.Logger(_version_1.version);

  var LogDescription = function (_super) {
    __extends(LogDescription, _super);

    function LogDescription() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    return LogDescription;
  }(properties_1.Description);

  exports.LogDescription = LogDescription;

  var TransactionDescription = function (_super) {
    __extends(TransactionDescription, _super);

    function TransactionDescription() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    return TransactionDescription;
  }(properties_1.Description);

  exports.TransactionDescription = TransactionDescription;

  var Indexed = function (_super) {
    __extends(Indexed, _super);

    function Indexed() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    Indexed.isIndexed = function (value) {
      return !!(value && value._isIndexed);
    };

    return Indexed;
  }(properties_1.Description);

  exports.Indexed = Indexed;

  function wrapAccessError(property, error) {
    var wrap = new Error("deferred error during ABI decoding triggered accessing " + property);
    wrap.error = error;
    return wrap;
  }

  var Interface = function () {
    function Interface(fragments) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, Interface);
      var abi = [];

      if (typeof fragments === "string") {
        abi = JSON.parse(fragments);
      } else {
        abi = fragments;
      }

      properties_1.defineReadOnly(this, "fragments", abi.map(function (fragment) {
        return fragments_1.Fragment.from(fragment);
      }).filter(function (fragment) {
        return fragment != null;
      }));
      properties_1.defineReadOnly(this, "_abiCoder", properties_1.getStatic(_newTarget, "getAbiCoder")());
      properties_1.defineReadOnly(this, "functions", {});
      properties_1.defineReadOnly(this, "errors", {});
      properties_1.defineReadOnly(this, "events", {});
      properties_1.defineReadOnly(this, "structs", {});
      this.fragments.forEach(function (fragment) {
        var bucket = null;

        switch (fragment.type) {
          case "constructor":
            if (_this.deploy) {
              logger.warn("duplicate definition - constructor");
              return;
            }

            properties_1.defineReadOnly(_this, "deploy", fragment);
            return;

          case "function":
            bucket = _this.functions;
            break;

          case "event":
            bucket = _this.events;
            break;

          default:
            return;
        }

        var signature = fragment.format();

        if (bucket[signature]) {
          logger.warn("duplicate definition - " + signature);
          return;
        }

        bucket[signature] = fragment;
      });

      if (!this.deploy) {
        properties_1.defineReadOnly(this, "deploy", fragments_1.ConstructorFragment.from({
          payable: false,
          type: "constructor"
        }));
      }

      properties_1.defineReadOnly(this, "_isInterface", true);
    }

    Interface.prototype.format = function (format) {
      if (!format) {
        format = fragments_1.FormatTypes.full;
      }

      if (format === fragments_1.FormatTypes.sighash) {
        logger.throwArgumentError("interface does not support formatting sighash", "format", format);
      }

      var abi = this.fragments.map(function (fragment) {
        return fragment.format(format);
      });

      if (format === fragments_1.FormatTypes.json) {
        return JSON.stringify(abi.map(function (j) {
          return JSON.parse(j);
        }));
      }

      return abi;
    };

    Interface.getAbiCoder = function () {
      return abi_coder_1.defaultAbiCoder;
    };

    Interface.getAddress = function (address) {
      return address_1.getAddress(address);
    };

    Interface.getSighash = function (functionFragment) {
      return bytes_1.hexDataSlice(hash_1.id(functionFragment.format()), 0, 4);
    };

    Interface.getEventTopic = function (eventFragment) {
      return hash_1.id(eventFragment.format());
    };

    Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {
      if (bytes_1.isHexString(nameOrSignatureOrSighash)) {
        for (var name_1 in this.functions) {
          if (nameOrSignatureOrSighash === this.getSighash(name_1)) {
            return this.functions[name_1];
          }
        }

        logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
      }

      if (nameOrSignatureOrSighash.indexOf("(") === -1) {
        var name_2 = nameOrSignatureOrSighash.trim();
        var matching = Object.keys(this.functions).filter(function (f) {
          return f.split("(")[0] === name_2;
        });

        if (matching.length === 0) {
          logger.throwArgumentError("no matching function", "name", name_2);
        } else if (matching.length > 1) {
          logger.throwArgumentError("multiple matching functions", "name", name_2);
        }

        return this.functions[matching[0]];
      }

      var result = this.functions[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];

      if (!result) {
        logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
      }

      return result;
    };

    Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {
      if (bytes_1.isHexString(nameOrSignatureOrTopic)) {
        var topichash = nameOrSignatureOrTopic.toLowerCase();

        for (var name_3 in this.events) {
          if (topichash === this.getEventTopic(name_3)) {
            return this.events[name_3];
          }
        }

        logger.throwArgumentError("no matching event", "topichash", topichash);
      }

      if (nameOrSignatureOrTopic.indexOf("(") === -1) {
        var name_4 = nameOrSignatureOrTopic.trim();
        var matching = Object.keys(this.events).filter(function (f) {
          return f.split("(")[0] === name_4;
        });

        if (matching.length === 0) {
          logger.throwArgumentError("no matching event", "name", name_4);
        } else if (matching.length > 1) {
          logger.throwArgumentError("multiple matching events", "name", name_4);
        }

        return this.events[matching[0]];
      }

      var result = this.events[fragments_1.EventFragment.fromString(nameOrSignatureOrTopic).format()];

      if (!result) {
        logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
      }

      return result;
    };

    Interface.prototype.getSighash = function (functionFragment) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }

      return properties_1.getStatic(this.constructor, "getSighash")(functionFragment);
    };

    Interface.prototype.getEventTopic = function (eventFragment) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }

      return properties_1.getStatic(this.constructor, "getEventTopic")(eventFragment);
    };

    Interface.prototype._decodeParams = function (params, data) {
      return this._abiCoder.decode(params, data);
    };

    Interface.prototype._encodeParams = function (params, values) {
      return this._abiCoder.encode(params, values);
    };

    Interface.prototype.encodeDeploy = function (values) {
      return this._encodeParams(this.deploy.inputs, values || []);
    };

    Interface.prototype.decodeFunctionData = function (functionFragment, data) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }

      var bytes = bytes_1.arrayify(data);

      if (bytes_1.hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
        logger.throwArgumentError("data signature does not match function " + functionFragment.name + ".", "data", bytes_1.hexlify(bytes));
      }

      return this._decodeParams(functionFragment.inputs, bytes.slice(4));
    };

    Interface.prototype.encodeFunctionData = function (functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }

      return bytes_1.hexlify(bytes_1.concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));
    };

    Interface.prototype.decodeFunctionResult = function (functionFragment, data) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }

      var bytes = bytes_1.arrayify(data);
      var reason = null;
      var errorSignature = null;

      switch (bytes.length % this._abiCoder._getWordSize()) {
        case 0:
          try {
            return this._abiCoder.decode(functionFragment.outputs, bytes);
          } catch (error) {}

          break;

        case 4:
          if (bytes_1.hexlify(bytes.slice(0, 4)) === "0x08c379a0") {
            errorSignature = "Error(string)";
            reason = this._abiCoder.decode(["string"], bytes.slice(4))[0];
          }

          break;
      }

      return logger.throwError("call revert exception", logger_1.Logger.errors.CALL_EXCEPTION, {
        method: functionFragment.format(),
        errorSignature: errorSignature,
        errorArgs: [reason],
        reason: reason
      });
    };

    Interface.prototype.encodeFunctionResult = function (functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }

      return bytes_1.hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
    };

    Interface.prototype.encodeFilterTopics = function (eventFragment, values) {
      var _this = this;

      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }

      if (values.length > eventFragment.inputs.length) {
        logger.throwError("too many arguments for " + eventFragment.format(), logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {
          argument: "values",
          value: values
        });
      }

      var topics = [];

      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }

      var encodeTopic = function (param, value) {
        if (param.type === "string") {
          return hash_1.id(value);
        } else if (param.type === "bytes") {
          return keccak256_1.keccak256(bytes_1.hexlify(value));
        }

        if (param.type === "address") {
          _this._abiCoder.encode(["address"], [value]);
        }

        return bytes_1.hexZeroPad(bytes_1.hexlify(value), 32);
      };

      values.forEach(function (value, index) {
        var param = eventFragment.inputs[index];

        if (!param.indexed) {
          if (value != null) {
            logger.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
          }

          return;
        }

        if (value == null) {
          topics.push(null);
        } else if (param.baseType === "array" || param.baseType === "tuple") {
          logger.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
        } else if (Array.isArray(value)) {
          topics.push(value.map(function (value) {
            return encodeTopic(param, value);
          }));
        } else {
          topics.push(encodeTopic(param, value));
        }
      });

      while (topics.length && topics[topics.length - 1] === null) {
        topics.pop();
      }

      return topics;
    };

    Interface.prototype.encodeEventLog = function (eventFragment, values) {
      var _this = this;

      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }

      var topics = [];
      var dataTypes = [];
      var dataValues = [];

      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }

      if (values.length !== eventFragment.inputs.length) {
        logger.throwArgumentError("event arguments/values mismatch", "values", values);
      }

      eventFragment.inputs.forEach(function (param, index) {
        var value = values[index];

        if (param.indexed) {
          if (param.type === "string") {
            topics.push(hash_1.id(value));
          } else if (param.type === "bytes") {
            topics.push(keccak256_1.keccak256(value));
          } else if (param.baseType === "tuple" || param.baseType === "array") {
            throw new Error("not implemented");
          } else {
            topics.push(_this._abiCoder.encode([param.type], [value]));
          }
        } else {
          dataTypes.push(param);
          dataValues.push(value);
        }
      });
      return {
        data: this._abiCoder.encode(dataTypes, dataValues),
        topics: topics
      };
    };

    Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }

      if (topics != null && !eventFragment.anonymous) {
        var topicHash = this.getEventTopic(eventFragment);

        if (!bytes_1.isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
          logger.throwError("fragment/topic mismatch", logger_1.Logger.errors.INVALID_ARGUMENT, {
            argument: "topics[0]",
            expected: topicHash,
            value: topics[0]
          });
        }

        topics = topics.slice(1);
      }

      var indexed = [];
      var nonIndexed = [];
      var dynamic = [];
      eventFragment.inputs.forEach(function (param, index) {
        if (param.indexed) {
          if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
            indexed.push(fragments_1.ParamType.fromObject({
              type: "bytes32",
              name: param.name
            }));
            dynamic.push(true);
          } else {
            indexed.push(param);
            dynamic.push(false);
          }
        } else {
          nonIndexed.push(param);
          dynamic.push(false);
        }
      });
      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, bytes_1.concat(topics)) : null;

      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);

      var result = [];
      var nonIndexedIndex = 0,
          indexedIndex = 0;
      eventFragment.inputs.forEach(function (param, index) {
        if (param.indexed) {
          if (resultIndexed == null) {
            result[index] = new Indexed({
              _isIndexed: true,
              hash: null
            });
          } else if (dynamic[index]) {
            result[index] = new Indexed({
              _isIndexed: true,
              hash: resultIndexed[indexedIndex++]
            });
          } else {
            try {
              result[index] = resultIndexed[indexedIndex++];
            } catch (error) {
              result[index] = error;
            }
          }
        } else {
          try {
            result[index] = resultNonIndexed[nonIndexedIndex++];
          } catch (error) {
            result[index] = error;
          }
        }

        if (param.name && result[param.name] == null) {
          var value_1 = result[index];

          if (value_1 instanceof Error) {
            Object.defineProperty(result, param.name, {
              get: function () {
                throw wrapAccessError("property " + JSON.stringify(param.name), value_1);
              }
            });
          } else {
            result[param.name] = value_1;
          }
        }
      });

      var _loop_1 = function (i) {
        var value = result[i];

        if (value instanceof Error) {
          Object.defineProperty(result, i, {
            get: function () {
              throw wrapAccessError("index " + i, value);
            }
          });
        }
      };

      for (var i = 0; i < result.length; i++) {
        _loop_1(i);
      }

      return Object.freeze(result);
    };

    Interface.prototype.parseTransaction = function (tx) {
      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());

      if (!fragment) {
        return null;
      }

      return new TransactionDescription({
        args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
        functionFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        sighash: this.getSighash(fragment),
        value: bignumber_1.BigNumber.from(tx.value || "0")
      });
    };

    Interface.prototype.parseLog = function (log) {
      var fragment = this.getEvent(log.topics[0]);

      if (!fragment || fragment.anonymous) {
        return null;
      }

      return new LogDescription({
        eventFragment: fragment,
        name: fragment.name,
        signature: fragment.format(),
        topic: this.getEventTopic(fragment),
        args: this.decodeEventLog(fragment, log.data, log.topics)
      });
    };

    Interface.isInterface = function (value) {
      return !!(value && value._isInterface);
    };

    return Interface;
  }();

  exports.Interface = Interface;
},73,[48,32,36,74,49,42,45,46,31,37,44]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var id_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.id = id_1.id;

  var namehash_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.isValidName = namehash_1.isValidName;
  exports.namehash = namehash_1.namehash;

  var message_1 = _$$_REQUIRE(_dependencyMap[2]);

  exports.hashMessage = message_1.hashMessage;
  exports.messagePrefix = message_1.messagePrefix;

  var typed_data_1 = _$$_REQUIRE(_dependencyMap[3]);

  exports._TypedDataEncoder = typed_data_1.TypedDataEncoder;
},74,[75,76,78,79]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[0]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[1]);

  function id(text) {
    return keccak256_1.keccak256(strings_1.toUtf8Bytes(text));
  }

  exports.id = id;
},75,[49,67]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[1]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[3]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[4]);

  var logger = new logger_1.Logger(_version_1.version);
  var Zeros = new Uint8Array(32);
  Zeros.fill(0);
  var Partition = new RegExp("^((.*)\\.)?([^.]+)$");

  function isValidName(name) {
    try {
      var comps = name.split(".");

      for (var i = 0; i < comps.length; i++) {
        if (strings_1.nameprep(comps[i]).length === 0) {
          throw new Error("empty");
        }
      }

      return true;
    } catch (error) {}

    return false;
  }

  exports.isValidName = isValidName;

  function namehash(name) {
    if (typeof name !== "string") {
      logger.throwArgumentError("invalid address - " + String(name), "name", name);
    }

    var result = Zeros;

    while (name.length) {
      var partition = name.match(Partition);
      var label = strings_1.toUtf8Bytes(strings_1.nameprep(partition[3]));
      result = keccak256_1.keccak256(bytes_1.concat([result, keccak256_1.keccak256(label)]));
      name = partition[2] || "";
    }

    return bytes_1.hexlify(result);
  }

  exports.namehash = namehash;
},76,[36,67,49,37,77]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "hash/5.0.7";
},77,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[1]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[2]);

  exports.messagePrefix = "\x19Ethereum Signed Message:\n";

  function hashMessage(message) {
    if (typeof message === "string") {
      message = strings_1.toUtf8Bytes(message);
    }

    return keccak256_1.keccak256(bytes_1.concat([strings_1.toUtf8Bytes(exports.messagePrefix), strings_1.toUtf8Bytes(String(message.length)), message]));
  }

  exports.hashMessage = hashMessage;
},78,[36,49,67]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var address_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[2]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[3]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[4]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[5]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[6]);

  var logger = new logger_1.Logger(_version_1.version);

  var id_1 = _$$_REQUIRE(_dependencyMap[7]);

  var padding = new Uint8Array(32);
  padding.fill(0);
  var NegativeOne = bignumber_1.BigNumber.from(-1);
  var Zero = bignumber_1.BigNumber.from(0);
  var One = bignumber_1.BigNumber.from(1);
  var MaxUint256 = bignumber_1.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

  function hexPadRight(value) {
    var bytes = bytes_1.arrayify(value);
    var padOffset = bytes.length % 32;

    if (padOffset) {
      return bytes_1.hexConcat([bytes, padding.slice(padOffset)]);
    }

    return bytes_1.hexlify(bytes);
  }

  var hexTrue = bytes_1.hexZeroPad(One.toHexString(), 32);
  var hexFalse = bytes_1.hexZeroPad(Zero.toHexString(), 32);
  var domainFieldTypes = {
    name: "string",
    version: "string",
    chainId: "uint256",
    verifyingContract: "address",
    salt: "bytes32"
  };
  var domainFieldNames = ["name", "version", "chainId", "verifyingContract", "salt"];

  function checkString(key) {
    return function (value) {
      if (typeof value !== "string") {
        logger.throwArgumentError("invalid domain value for " + JSON.stringify(key), "domain." + key, value);
      }

      return value;
    };
  }

  var domainChecks = {
    name: checkString("name"),
    version: checkString("version"),
    chainId: function (value) {
      try {
        return bignumber_1.BigNumber.from(value).toString();
      } catch (error) {}

      return logger.throwArgumentError("invalid domain value for \"chainId\"", "domain.chainId", value);
    },
    verifyingContract: function (value) {
      try {
        return address_1.getAddress(value).toLowerCase();
      } catch (error) {}

      return logger.throwArgumentError("invalid domain value \"verifyingContract\"", "domain.verifyingContract", value);
    },
    salt: function (value) {
      try {
        var bytes = bytes_1.arrayify(value);

        if (bytes.length !== 32) {
          throw new Error("bad length");
        }

        return bytes_1.hexlify(bytes);
      } catch (error) {}

      return logger.throwArgumentError("invalid domain value \"salt\"", "domain.salt", value);
    }
  };

  function getBaseEncoder(type) {
    {
      var match = type.match(/^(u?)int(\d*)$/);

      if (match) {
        var signed = match[1] === "";
        var width = parseInt(match[2] || "256");

        if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
          logger.throwArgumentError("invalid numeric width", "type", type);
        }

        var boundsUpper_1 = MaxUint256.mask(signed ? width - 1 : width);
        var boundsLower_1 = signed ? boundsUpper_1.add(One).mul(NegativeOne) : Zero;
        return function (value) {
          var v = bignumber_1.BigNumber.from(value);

          if (v.lt(boundsLower_1) || v.gt(boundsUpper_1)) {
            logger.throwArgumentError("value out-of-bounds for " + type, "value", value);
          }

          return bytes_1.hexZeroPad(v.toTwos(256).toHexString(), 32);
        };
      }
    }
    {
      var match = type.match(/^bytes(\d+)$/);

      if (match) {
        var width_1 = parseInt(match[1]);

        if (width_1 === 0 || width_1 > 32 || match[1] !== String(width_1)) {
          logger.throwArgumentError("invalid bytes width", "type", type);
        }

        return function (value) {
          var bytes = bytes_1.arrayify(value);

          if (bytes.length !== width_1) {
            logger.throwArgumentError("invalid length for " + type, "value", value);
          }

          return hexPadRight(value);
        };
      }
    }

    switch (type) {
      case "address":
        return function (value) {
          return bytes_1.hexZeroPad(address_1.getAddress(value), 32);
        };

      case "bool":
        return function (value) {
          return !value ? hexFalse : hexTrue;
        };

      case "bytes":
        return function (value) {
          return keccak256_1.keccak256(value);
        };

      case "string":
        return function (value) {
          return id_1.id(value);
        };
    }

    return null;
  }

  function encodeType(name, fields) {
    return name + "(" + fields.map(function (_a) {
      var name = _a.name,
          type = _a.type;
      return type + " " + name;
    }).join(",") + ")";
  }

  var TypedDataEncoder = function () {
    function TypedDataEncoder(types) {
      properties_1.defineReadOnly(this, "types", Object.freeze(properties_1.deepCopy(types)));
      properties_1.defineReadOnly(this, "_encoderCache", {});
      properties_1.defineReadOnly(this, "_types", {});
      var links = {};
      var parents = {};
      var subtypes = {};
      Object.keys(types).forEach(function (type) {
        links[type] = {};
        parents[type] = [];
        subtypes[type] = {};
      });

      var _loop_1 = function (name_1) {
        var uniqueNames = {};
        types[name_1].forEach(function (field) {
          if (uniqueNames[field.name]) {
            logger.throwArgumentError("duplicate variable name " + JSON.stringify(field.name) + " in " + JSON.stringify(name_1), "types", types);
          }

          uniqueNames[field.name] = true;
          var baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];

          if (baseType === name_1) {
            logger.throwArgumentError("circular type reference to " + JSON.stringify(baseType), "types", types);
          }

          var encoder = getBaseEncoder(baseType);

          if (encoder) {
            return;
          }

          if (!parents[baseType]) {
            logger.throwArgumentError("unknown type " + JSON.stringify(baseType), "types", types);
          }

          parents[baseType].push(name_1);
          links[name_1][baseType] = true;
        });
      };

      for (var name_1 in types) {
        _loop_1(name_1);
      }

      var primaryTypes = Object.keys(parents).filter(function (n) {
        return parents[n].length === 0;
      });

      if (primaryTypes.length === 0) {
        logger.throwArgumentError("missing primary type", "types", types);
      } else if (primaryTypes.length > 1) {
        logger.throwArgumentError("ambiguous primary types or unused types: " + primaryTypes.map(function (t) {
          return JSON.stringify(t);
        }).join(", "), "types", types);
      }

      properties_1.defineReadOnly(this, "primaryType", primaryTypes[0]);

      function checkCircular(type, found) {
        if (found[type]) {
          logger.throwArgumentError("circular type reference to " + JSON.stringify(type), "types", types);
        }

        found[type] = true;
        Object.keys(links[type]).forEach(function (child) {
          if (!parents[child]) {
            return;
          }

          checkCircular(child, found);
          Object.keys(found).forEach(function (subtype) {
            subtypes[subtype][child] = true;
          });
        });
        delete found[type];
      }

      checkCircular(this.primaryType, {});

      for (var name_2 in subtypes) {
        var st = Object.keys(subtypes[name_2]);
        st.sort();
        this._types[name_2] = encodeType(name_2, types[name_2]) + st.map(function (t) {
          return encodeType(t, types[t]);
        }).join("");
      }
    }

    TypedDataEncoder.prototype.getEncoder = function (type) {
      var encoder = this._encoderCache[type];

      if (!encoder) {
        encoder = this._encoderCache[type] = this._getEncoder(type);
      }

      return encoder;
    };

    TypedDataEncoder.prototype._getEncoder = function (type) {
      var _this = this;

      {
        var encoder = getBaseEncoder(type);

        if (encoder) {
          return encoder;
        }
      }
      var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);

      if (match) {
        var subtype_1 = match[1];
        var subEncoder_1 = this.getEncoder(subtype_1);
        var length_1 = parseInt(match[3]);
        return function (value) {
          if (length_1 >= 0 && value.length !== length_1) {
            logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
          }

          var result = value.map(subEncoder_1);

          if (_this._types[subtype_1]) {
            result = result.map(keccak256_1.keccak256);
          }

          return keccak256_1.keccak256(bytes_1.hexConcat(result));
        };
      }

      var fields = this.types[type];

      if (fields) {
        var encodedType_1 = id_1.id(this._types[type]);
        return function (value) {
          var values = fields.map(function (_a) {
            var name = _a.name,
                type = _a.type;

            var result = _this.getEncoder(type)(value[name]);

            if (_this._types[type]) {
              return keccak256_1.keccak256(result);
            }

            return result;
          });
          values.unshift(encodedType_1);
          return bytes_1.hexConcat(values);
        };
      }

      return logger.throwArgumentError("unknown type: " + type, "type", type);
    };

    TypedDataEncoder.prototype.encodeType = function (name) {
      var result = this._types[name];

      if (!result) {
        logger.throwArgumentError("unknown type: " + JSON.stringify(name), "name", name);
      }

      return result;
    };

    TypedDataEncoder.prototype.encodeData = function (type, value) {
      return this.getEncoder(type)(value);
    };

    TypedDataEncoder.prototype.hashStruct = function (name, value) {
      return keccak256_1.keccak256(this.encodeData(name, value));
    };

    TypedDataEncoder.prototype.encode = function (value) {
      return this.encodeData(this.primaryType, value);
    };

    TypedDataEncoder.prototype.hash = function (value) {
      return this.hashStruct(this.primaryType, value);
    };

    TypedDataEncoder.prototype._visit = function (type, value, callback) {
      var _this = this;

      {
        var encoder = getBaseEncoder(type);

        if (encoder) {
          return callback(type, value);
        }
      }
      var match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);

      if (match) {
        var subtype_2 = match[1];
        var length_2 = parseInt(match[3]);

        if (length_2 >= 0 && value.length !== length_2) {
          logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
        }

        return value.map(function (v) {
          return _this._visit(subtype_2, v, callback);
        });
      }

      var fields = this.types[type];

      if (fields) {
        return fields.reduce(function (accum, _a) {
          var name = _a.name,
              type = _a.type;
          accum[name] = _this._visit(type, value[name], callback);
          return accum;
        }, {});
      }

      return logger.throwArgumentError("unknown type: " + type, "type", type);
    };

    TypedDataEncoder.prototype.visit = function (value, callback) {
      return this._visit(this.primaryType, value, callback);
    };

    TypedDataEncoder.from = function (types) {
      return new TypedDataEncoder(types);
    };

    TypedDataEncoder.getPrimaryType = function (types) {
      return TypedDataEncoder.from(types).primaryType;
    };

    TypedDataEncoder.hashStruct = function (name, types, value) {
      return TypedDataEncoder.from(types).hashStruct(name, value);
    };

    TypedDataEncoder.hashDomain = function (domain) {
      var domainFields = [];

      for (var name_3 in domain) {
        var type = domainFieldTypes[name_3];

        if (!type) {
          logger.throwArgumentError("invalid typed-data domain key: " + JSON.stringify(name_3), "domain", domain);
        }

        domainFields.push({
          name: name_3,
          type: type
        });
      }

      domainFields.sort(function (a, b) {
        return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
      });
      return TypedDataEncoder.hashStruct("EIP712Domain", {
        EIP712Domain: domainFields
      }, domain);
    };

    TypedDataEncoder.encode = function (domain, types, value) {
      return bytes_1.hexConcat(["0x1901", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);
    };

    TypedDataEncoder.hash = function (domain, types, value) {
      return keccak256_1.keccak256(TypedDataEncoder.encode(domain, types, value));
    };

    TypedDataEncoder.resolveNames = function (domain, types, value, resolveName) {
      return __awaiter(this, undefined, undefined, function () {
        var ensCache, encoder, _a, _b, _i, name_4, _c, _d;

        return __generator(this, function (_e) {
          switch (_e.label) {
            case 0:
              domain = properties_1.shallowCopy(domain);
              ensCache = {};

              if (domain.verifyingContract && !bytes_1.isHexString(domain.verifyingContract, 20)) {
                ensCache[domain.verifyingContract] = "0x";
              }

              encoder = TypedDataEncoder.from(types);
              encoder.visit(value, function (type, value) {
                if (type === "address" && !bytes_1.isHexString(value, 20)) {
                  ensCache[value] = "0x";
                }

                return value;
              });
              _a = [];

              for (_b in ensCache) _a.push(_b);

              _i = 0;
              _e.label = 1;

            case 1:
              if (!(_i < _a.length)) return [3, 4];
              name_4 = _a[_i];
              _c = ensCache;
              _d = name_4;
              return [4, resolveName(name_4)];

            case 2:
              _c[_d] = _e.sent();
              _e.label = 3;

            case 3:
              _i++;
              return [3, 1];

            case 4:
              if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                domain.verifyingContract = ensCache[domain.verifyingContract];
              }

              value = encoder.visit(value, function (type, value) {
                if (type === "address" && ensCache[value]) {
                  return ensCache[value];
                }

                return value;
              });
              return [2, {
                domain: domain,
                value: value
              }];
          }
        });
      });
    };

    TypedDataEncoder.getPayload = function (domain, types, value) {
      TypedDataEncoder.hashDomain(domain);
      var domainValues = {};
      var domainTypes = [];
      domainFieldNames.forEach(function (name) {
        var value = domain[name];

        if (value == null) {
          return;
        }

        domainValues[name] = domainChecks[name](value);
        domainTypes.push({
          name: name,
          type: domainFieldTypes[name]
        });
      });
      var encoder = TypedDataEncoder.from(types);
      var typesWithDomain = properties_1.shallowCopy(types);

      if (typesWithDomain.EIP712Domain) {
        typesWithDomain.EIP712Domain = domainTypes;
      }

      encoder.encode(value);
      return {
        types: typesWithDomain,
        domain: domainValues,
        primaryType: encoder.primaryType,
        message: encoder.visit(value, function (type, value) {
          if (type.match(/^bytes(\d*)/)) {
            return bytes_1.hexlify(bytes_1.arrayify(value));
          }

          if (type.match(/^u?int/)) {
            var prefix = "";
            var v = bignumber_1.BigNumber.from(value);

            if (v.isNegative()) {
              prefix = "-";
              v = v.mul(-1);
            }

            return prefix + bytes_1.hexValue(v.toHexString());
          }

          switch (type) {
            case "address":
              return value.toLowerCase();

            case "bool":
              return !!value;

            case "string":
              if (typeof value !== "string") {
                logger.throwArgumentError("invalid string", "value", value);
              }

              return value;
          }

          return logger.throwArgumentError("unsupported type", "type", type);
        })
      };
    };

    return TypedDataEncoder;
  }();

  exports.TypedDataEncoder = TypedDataEncoder;
},79,[48,32,36,49,42,37,77,75]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[2]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[3]);

  var logger = new logger_1.Logger(_version_1.version);
  ;
  ;

  var ForkEvent = function (_super) {
    __extends(ForkEvent, _super);

    function ForkEvent() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    ForkEvent.isForkEvent = function (value) {
      return !!(value && value._isForkEvent);
    };

    return ForkEvent;
  }(properties_1.Description);

  exports.ForkEvent = ForkEvent;

  var BlockForkEvent = function (_super) {
    __extends(BlockForkEvent, _super);

    function BlockForkEvent(blockHash, expiry) {
      var _this = this;

      if (!bytes_1.isHexString(blockHash, 32)) {
        logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
      }

      _this = _super.call(this, {
        _isForkEvent: true,
        _isBlockForkEvent: true,
        expiry: expiry || 0,
        blockHash: blockHash
      }) || this;
      return _this;
    }

    return BlockForkEvent;
  }(ForkEvent);

  exports.BlockForkEvent = BlockForkEvent;

  var TransactionForkEvent = function (_super) {
    __extends(TransactionForkEvent, _super);

    function TransactionForkEvent(hash, expiry) {
      var _this = this;

      if (!bytes_1.isHexString(hash, 32)) {
        logger.throwArgumentError("invalid transaction hash", "hash", hash);
      }

      _this = _super.call(this, {
        _isForkEvent: true,
        _isTransactionForkEvent: true,
        expiry: expiry || 0,
        hash: hash
      }) || this;
      return _this;
    }

    return TransactionForkEvent;
  }(ForkEvent);

  exports.TransactionForkEvent = TransactionForkEvent;

  var TransactionOrderForkEvent = function (_super) {
    __extends(TransactionOrderForkEvent, _super);

    function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {
      var _this = this;

      if (!bytes_1.isHexString(beforeHash, 32)) {
        logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
      }

      if (!bytes_1.isHexString(afterHash, 32)) {
        logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
      }

      _this = _super.call(this, {
        _isForkEvent: true,
        _isTransactionOrderForkEvent: true,
        expiry: expiry || 0,
        beforeHash: beforeHash,
        afterHash: afterHash
      }) || this;
      return _this;
    }

    return TransactionOrderForkEvent;
  }(ForkEvent);

  exports.TransactionOrderForkEvent = TransactionOrderForkEvent;

  var Provider = function () {
    function Provider() {
      var _newTarget = this.constructor;
      logger.checkAbstract(_newTarget, Provider);
      properties_1.defineReadOnly(this, "_isProvider", true);
    }

    Provider.prototype.addListener = function (eventName, listener) {
      return this.on(eventName, listener);
    };

    Provider.prototype.removeListener = function (eventName, listener) {
      return this.off(eventName, listener);
    };

    Provider.isProvider = function (value) {
      return !!(value && value._isProvider);
    };

    return Provider;
  }();

  exports.Provider = Provider;
},80,[36,42,37,81]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "abstract-provider/5.0.6";
},81,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var properties_1 = _$$_REQUIRE(_dependencyMap[0]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[1]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger = new logger_1.Logger(_version_1.version);
  var allowedTransactionKeys = ["chainId", "data", "from", "gasLimit", "gasPrice", "nonce", "to", "value"];
  var forwardErrors = [logger_1.Logger.errors.INSUFFICIENT_FUNDS, logger_1.Logger.errors.NONCE_EXPIRED, logger_1.Logger.errors.REPLACEMENT_UNDERPRICED];
  ;
  ;

  var Signer = function () {
    function Signer() {
      var _newTarget = this.constructor;
      logger.checkAbstract(_newTarget, Signer);
      properties_1.defineReadOnly(this, "_isSigner", true);
    }

    Signer.prototype.getBalance = function (blockTag) {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this._checkProvider("getBalance");

              return [4, this.provider.getBalance(this.getAddress(), blockTag)];

            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };

    Signer.prototype.getTransactionCount = function (blockTag) {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this._checkProvider("getTransactionCount");

              return [4, this.provider.getTransactionCount(this.getAddress(), blockTag)];

            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };

    Signer.prototype.estimateGas = function (transaction) {
      return __awaiter(this, undefined, undefined, function () {
        var tx;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this._checkProvider("estimateGas");

              return [4, properties_1.resolveProperties(this.checkTransaction(transaction))];

            case 1:
              tx = _a.sent();
              return [4, this.provider.estimateGas(tx)];

            case 2:
              return [2, _a.sent()];
          }
        });
      });
    };

    Signer.prototype.call = function (transaction, blockTag) {
      return __awaiter(this, undefined, undefined, function () {
        var tx;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this._checkProvider("call");

              return [4, properties_1.resolveProperties(this.checkTransaction(transaction))];

            case 1:
              tx = _a.sent();
              return [4, this.provider.call(tx, blockTag)];

            case 2:
              return [2, _a.sent()];
          }
        });
      });
    };

    Signer.prototype.sendTransaction = function (transaction) {
      var _this = this;

      this._checkProvider("sendTransaction");

      return this.popuTransaction(transaction).then(function (tx) {
        return _this.signTransaction(tx).then(function (signedTx) {
          return _this.provider.sendTransaction(signedTx);
        });
      });
    };

    Signer.prototype.getChainId = function () {
      return __awaiter(this, undefined, undefined, function () {
        var network;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this._checkProvider("getChainId");

              return [4, this.provider.getNetwork()];

            case 1:
              network = _a.sent();
              return [2, network.chainId];
          }
        });
      });
    };

    Signer.prototype.getGasPrice = function () {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this._checkProvider("getGasPrice");

              return [4, this.provider.getGasPrice()];

            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };

    Signer.prototype.resolveName = function (name) {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this._checkProvider("resolveName");

              return [4, this.provider.resolveName(name)];

            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };

    Signer.prototype.checkTransaction = function (transaction) {
      for (var key in transaction) {
        if (allowedTransactionKeys.indexOf(key) === -1) {
          logger.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
        }
      }

      var tx = properties_1.shallowCopy(transaction);

      if (tx.from == null) {
        tx.from = this.getAddress();
      } else {
        tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(function (result) {
          if (result[0] !== result[1]) {
            logger.throwArgumentError("from address mismatch", "transaction", transaction);
          }

          return result[0];
        });
      }

      return tx;
    };

    Signer.prototype.popuTransaction = function (transaction) {
      return __awaiter(this, undefined, undefined, function () {
        var tx;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, properties_1.resolveProperties(this.checkTransaction(transaction))];

            case 1:
              tx = _a.sent();

              if (tx.to != null) {
                tx.to = Promise.resolve(tx.to).then(function (to) {
                  return _this.resolveName(to);
                });
              }

              if (tx.gasPrice == null) {
                tx.gasPrice = this.getGasPrice();
              }

              if (tx.nonce == null) {
                tx.nonce = this.getTransactionCount("pending");
              }

              if (tx.gasLimit == null) {
                tx.gasLimit = this.estimateGas(tx).catch(function (error) {
                  if (forwardErrors.indexOf(error.code) >= 0) {
                    throw error;
                  }

                  return logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                    error: error,
                    tx: tx
                  });
                });
              }

              if (tx.chainId == null) {
                tx.chainId = this.getChainId();
              } else {
                tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(function (results) {
                  if (results[1] !== 0 && results[0] !== results[1]) {
                    logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
                  }

                  return results[0];
                });
              }

              return [4, properties_1.resolveProperties(tx)];

            case 2:
              return [2, _a.sent()];
          }
        });
      });
    };

    Signer.prototype._checkProvider = function (operation) {
      if (!this.provider) {
        logger.throwError("missing provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: operation || "_checkProvider"
        });
      }
    };

    Signer.isSigner = function (value) {
      return !!(value && value._isSigner);
    };

    return Signer;
  }();

  exports.Signer = Signer;

  var VoidSigner = function (_super) {
    __extends(VoidSigner, _super);

    function VoidSigner(address, provider) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, VoidSigner);
      _this = _super.call(this) || this;
      properties_1.defineReadOnly(_this, "address", address);
      properties_1.defineReadOnly(_this, "provider", provider || null);
      return _this;
    }

    VoidSigner.prototype.getAddress = function () {
      return Promise.resolve(this.address);
    };

    VoidSigner.prototype._fail = function (message, operation) {
      return Promise.resolve().then(function () {
        logger.throwError(message, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: operation
        });
      });
    };

    VoidSigner.prototype.signMessage = function (message) {
      return this._fail("VoidSigner cannot sign messages", "signMessage");
    };

    VoidSigner.prototype.signTransaction = function (transaction) {
      return this._fail("VoidSigner cannot sign transactions", "signTransaction");
    };

    VoidSigner.prototype._signTypedData = function (domain, types, value) {
      return this._fail("VoidSigner cannot sign typed data", "signTypedData");
    };

    VoidSigner.prototype.connect = function (provider) {
      return new VoidSigner(this.address, provider);
    };

    return VoidSigner;
  }(Signer);

  exports.VoidSigner = VoidSigner;
},82,[42,37,83]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "abstract-signer/5.0.8";
},83,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "contracts/5.0.7";
},84,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var address_1 = _$$_REQUIRE(_dependencyMap[0]);

  var abstract_provider_1 = _$$_REQUIRE(_dependencyMap[1]);

  var abstract_signer_1 = _$$_REQUIRE(_dependencyMap[2]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[3]);

  var hash_1 = _$$_REQUIRE(_dependencyMap[4]);

  var hdnode_1 = _$$_REQUIRE(_dependencyMap[5]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[6]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[7]);

  var random_1 = _$$_REQUIRE(_dependencyMap[8]);

  var signing_key_1 = _$$_REQUIRE(_dependencyMap[9]);

  var json_wallets_1 = _$$_REQUIRE(_dependencyMap[10]);

  var transactions_1 = _$$_REQUIRE(_dependencyMap[11]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[12]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[13]);

  var logger = new logger_1.Logger(_version_1.version);

  function isAccount(value) {
    return value != null && bytes_1.isHexString(value.privateKey, 32) && value.address != null;
  }

  function hasMnemonic(value) {
    var mnemonic = value.mnemonic;
    return mnemonic && mnemonic.phrase;
  }

  var Wallet = function (_super) {
    __extends(Wallet, _super);

    function Wallet(privateKey, provider) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, Wallet);
      _this = _super.call(this) || this;

      if (isAccount(privateKey)) {
        var signingKey_1 = new signing_key_1.SigningKey(privateKey.privateKey);
        properties_1.defineReadOnly(_this, "_signingKey", function () {
          return signingKey_1;
        });
        properties_1.defineReadOnly(_this, "address", transactions_1.computeAddress(_this.publicKey));

        if (_this.address !== address_1.getAddress(privateKey.address)) {
          logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
        }

        if (hasMnemonic(privateKey)) {
          var srcMnemonic_1 = privateKey.mnemonic;
          properties_1.defineReadOnly(_this, "_mnemonic", function () {
            return {
              phrase: srcMnemonic_1.phrase,
              path: srcMnemonic_1.path || hdnode_1.defaultPath,
              locale: srcMnemonic_1.locale || "en"
            };
          });
          var mnemonic = _this.mnemonic;
          var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);

          if (transactions_1.computeAddress(node.privateKey) !== _this.address) {
            logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
          }
        } else {
          properties_1.defineReadOnly(_this, "_mnemonic", function () {
            return null;
          });
        }
      } else {
        if (signing_key_1.SigningKey.isSigningKey(privateKey)) {
          if (privateKey.curve !== "secp256k1") {
            logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
          }

          properties_1.defineReadOnly(_this, "_signingKey", function () {
            return privateKey;
          });
        } else {
          var signingKey_2 = new signing_key_1.SigningKey(privateKey);
          properties_1.defineReadOnly(_this, "_signingKey", function () {
            return signingKey_2;
          });
        }

        properties_1.defineReadOnly(_this, "_mnemonic", function () {
          return null;
        });
        properties_1.defineReadOnly(_this, "address", transactions_1.computeAddress(_this.publicKey));
      }

      if (provider && !abstract_provider_1.Provider.isProvider(provider)) {
        logger.throwArgumentError("invalid provider", "provider", provider);
      }

      properties_1.defineReadOnly(_this, "provider", provider || null);
      return _this;
    }

    Object.defineProperty(Wallet.prototype, "mnemonic", {
      get: function () {
        return this._mnemonic();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Wallet.prototype, "privateKey", {
      get: function () {
        return this._signingKey().privateKey;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Wallet.prototype, "publicKey", {
      get: function () {
        return this._signingKey().publicKey;
      },
      enumerable: true,
      configurable: true
    });

    Wallet.prototype.getAddress = function () {
      return Promise.resolve(this.address);
    };

    Wallet.prototype.connect = function (provider) {
      return new Wallet(this, provider);
    };

    Wallet.prototype.signTransaction = function (transaction) {
      var _this = this;

      return properties_1.resolveProperties(transaction).then(function (tx) {
        if (tx.from != null) {
          if (address_1.getAddress(tx.from) !== _this.address) {
            logger.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
          }

          delete tx.from;
        }

        var signature = _this._signingKey().signDigest(keccak256_1.keccak256(transactions_1.serialize(tx)));

        return transactions_1.serialize(tx, signature);
      });
    };

    Wallet.prototype.signMessage = function (message) {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          return [2, bytes_1.joinSignature(this._signingKey().signDigest(hash_1.hashMessage(message)))];
        });
      });
    };

    Wallet.prototype._signTypedData = function (domain, types, value) {
      return __awaiter(this, undefined, undefined, function () {
        var popud;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, hash_1._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
                if (_this.provider == null) {
                  logger.throwError("cannot resolve ENS names without a provider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "resolveName",
                    value: name
                  });
                }

                return _this.provider.resolveName(name);
              })];

            case 1:
              popud = _a.sent();
              return [2, bytes_1.joinSignature(this._signingKey().signDigest(hash_1._TypedDataEncoder.hash(popud.domain, types, popud.value)))];
          }
        });
      });
    };

    Wallet.prototype.encrypt = function (password, options, progressCallback) {
      if (typeof options === "function" && !progressCallback) {
        progressCallback = options;
        options = {};
      }

      if (progressCallback && typeof progressCallback !== "function") {
        throw new Error("invalid callback");
      }

      if (!options) {
        options = {};
      }

      return json_wallets_1.encryptKeystore(this, password, options, progressCallback);
    };

    Wallet.createRandom = function (options) {
      var entropy = random_1.randomBytes(16);

      if (!options) {
        options = {};
      }

      if (options.extraEntropy) {
        entropy = bytes_1.arrayify(bytes_1.hexDataSlice(keccak256_1.keccak256(bytes_1.concat([entropy, options.extraEntropy])), 0, 16));
      }

      var mnemonic = hdnode_1.entropyToMnemonic(entropy, options.locale);
      return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
    };

    Wallet.fromEncryptedJson = function (json, password, progressCallback) {
      return json_wallets_1.decryptJsonWallet(json, password, progressCallback).then(function (account) {
        return new Wallet(account);
      });
    };

    Wallet.fromEncryptedJsonSync = function (json, password) {
      return new Wallet(json_wallets_1.decryptJsonWalletSync(json, password));
    };

    Wallet.fromMnemonic = function (mnemonic, path, wordlist) {
      if (!path) {
        path = hdnode_1.defaultPath;
      }

      return new Wallet(hdnode_1.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
    };

    return Wallet;
  }(abstract_signer_1.Signer);

  exports.Wallet = Wallet;

  function verifyMessage(message, signature) {
    return transactions_1.recoverAddress(hash_1.hashMessage(message), signature);
  }

  exports.verifyMessage = verifyMessage;

  function verifyTypedData(domain, types, value, signature) {
    return transactions_1.recoverAddress(hash_1._TypedDataEncoder.hash(domain, types, value), signature);
  }

  exports.verifyTypedData = verifyTypedData;
},85,[48,80,82,36,74,86,49,42,148,91,151,133,37,159]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var basex_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[2]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[3]);

  var pbkdf2_1 = _$$_REQUIRE(_dependencyMap[4]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[5]);

  var signing_key_1 = _$$_REQUIRE(_dependencyMap[6]);

  var sha2_1 = _$$_REQUIRE(_dependencyMap[7]);

  var transactions_1 = _$$_REQUIRE(_dependencyMap[8]);

  var wordlists_1 = _$$_REQUIRE(_dependencyMap[9]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[10]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[11]);

  var logger = new logger_1.Logger(_version_1.version);
  var N = bignumber_1.BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  var MasterSecret = strings_1.toUtf8Bytes("Bitcoin seed");
  var HardenedBit = 0x80000000;

  function getUpperMask(bits) {
    return (1 << bits) - 1 << 8 - bits;
  }

  function getLowerMask(bits) {
    return (1 << bits) - 1;
  }

  function bytes32(value) {
    return bytes_1.hexZeroPad(bytes_1.hexlify(value), 32);
  }

  function base58check(data) {
    return basex_1.Base58.encode(bytes_1.concat([data, bytes_1.hexDataSlice(sha2_1.sha256(sha2_1.sha256(data)), 0, 4)]));
  }

  function getWordlist(wordlist) {
    if (wordlist == null) {
      return wordlists_1.wordlists["en"];
    }

    if (typeof wordlist === "string") {
      var words = wordlists_1.wordlists[wordlist];

      if (words == null) {
        logger.throwArgumentError("unknown locale", "wordlist", wordlist);
      }

      return words;
    }

    return wordlist;
  }

  var _constructorGuard = {};
  exports.defaultPath = "m/44'/60'/0'/0/0";
  ;

  var HDNode = function () {
    function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
      var _newTarget = this.constructor;
      logger.checkNew(_newTarget, HDNode);

      if (constructorGuard !== _constructorGuard) {
        throw new Error("HDNode constructor cannot be called directly");
      }

      if (privateKey) {
        var signingKey = new signing_key_1.SigningKey(privateKey);
        properties_1.defineReadOnly(this, "privateKey", signingKey.privateKey);
        properties_1.defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
      } else {
        properties_1.defineReadOnly(this, "privateKey", null);
        properties_1.defineReadOnly(this, "publicKey", bytes_1.hexlify(publicKey));
      }

      properties_1.defineReadOnly(this, "parentFingerprint", parentFingerprint);
      properties_1.defineReadOnly(this, "fingerprint", bytes_1.hexDataSlice(sha2_1.ripemd160(sha2_1.sha256(this.publicKey)), 0, 4));
      properties_1.defineReadOnly(this, "address", transactions_1.computeAddress(this.publicKey));
      properties_1.defineReadOnly(this, "chainCode", chainCode);
      properties_1.defineReadOnly(this, "index", index);
      properties_1.defineReadOnly(this, "depth", depth);

      if (mnemonicOrPath == null) {
        properties_1.defineReadOnly(this, "mnemonic", null);
        properties_1.defineReadOnly(this, "path", null);
      } else if (typeof mnemonicOrPath === "string") {
        properties_1.defineReadOnly(this, "mnemonic", null);
        properties_1.defineReadOnly(this, "path", mnemonicOrPath);
      } else {
        properties_1.defineReadOnly(this, "mnemonic", mnemonicOrPath);
        properties_1.defineReadOnly(this, "path", mnemonicOrPath.path);
      }
    }

    Object.defineProperty(HDNode.prototype, "extendedKey", {
      get: function () {
        if (this.depth >= 256) {
          throw new Error("Depth too large!");
        }

        return base58check(bytes_1.concat([this.privateKey != null ? "0x0488ADE4" : "0x0488B21E", bytes_1.hexlify(this.depth), this.parentFingerprint, bytes_1.hexZeroPad(bytes_1.hexlify(this.index), 4), this.chainCode, this.privateKey != null ? bytes_1.concat(["0x00", this.privateKey]) : this.publicKey]));
      },
      enumerable: true,
      configurable: true
    });

    HDNode.prototype.neuter = function () {
      return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
    };

    HDNode.prototype._derive = function (index) {
      if (index > 0xffffffff) {
        throw new Error("invalid index - " + String(index));
      }

      var path = this.path;

      if (path) {
        path += "/" + (index & 2147483647);
      }

      var data = new Uint8Array(37);

      if (index & HardenedBit) {
        if (!this.privateKey) {
          throw new Error("cannot derive child of neutered node");
        }

        data.set(bytes_1.arrayify(this.privateKey), 1);

        if (path) {
          path += "'";
        }
      } else {
        data.set(bytes_1.arrayify(this.publicKey));
      }

      for (var i = 24; i >= 0; i -= 8) {
        data[33 + (i >> 3)] = index >> 24 - i & 0xff;
      }

      var I = bytes_1.arrayify(sha2_1.computeHmac(sha2_1.SupportedAlgorithm.sha512, this.chainCode, data));
      var IL = I.slice(0, 32);
      var IR = I.slice(32);
      var ki = null;
      var Ki = null;

      if (this.privateKey) {
        ki = bytes32(bignumber_1.BigNumber.from(IL).add(this.privateKey).mod(N));
      } else {
        var ek = new signing_key_1.SigningKey(bytes_1.hexlify(IL));
        Ki = ek._addPoint(this.publicKey);
      }

      var mnemonicOrPath = path;
      var srcMnemonic = this.mnemonic;

      if (srcMnemonic) {
        mnemonicOrPath = Object.freeze({
          phrase: srcMnemonic.phrase,
          path: path,
          locale: srcMnemonic.locale || "en"
        });
      }

      return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
    };

    HDNode.prototype.derivePath = function (path) {
      var components = path.split("/");

      if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
        throw new Error("invalid path - " + path);
      }

      if (components[0] === "m") {
        components.shift();
      }

      var result = this;

      for (var i = 0; i < components.length; i++) {
        var component = components[i];

        if (component.match(/^[0-9]+'$/)) {
          var index = parseInt(component.substring(0, component.length - 1));

          if (index >= HardenedBit) {
            throw new Error("invalid path index - " + component);
          }

          result = result._derive(HardenedBit + index);
        } else if (component.match(/^[0-9]+$/)) {
          var index = parseInt(component);

          if (index >= HardenedBit) {
            throw new Error("invalid path index - " + component);
          }

          result = result._derive(index);
        } else {
          throw new Error("invalid path component - " + component);
        }
      }

      return result;
    };

    HDNode._fromSeed = function (seed, mnemonic) {
      var seedArray = bytes_1.arrayify(seed);

      if (seedArray.length < 16 || seedArray.length > 64) {
        throw new Error("invalid seed");
      }

      var I = bytes_1.arrayify(sha2_1.computeHmac(sha2_1.SupportedAlgorithm.sha512, MasterSecret, seedArray));
      return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
    };

    HDNode.fromMnemonic = function (mnemonic, password, wordlist) {
      wordlist = getWordlist(wordlist);
      mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
      return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
        phrase: mnemonic,
        path: "m",
        locale: wordlist.locale
      });
    };

    HDNode.fromSeed = function (seed) {
      return HDNode._fromSeed(seed, null);
    };

    HDNode.fromExtendedKey = function (extendedKey) {
      var bytes = basex_1.Base58.decode(extendedKey);

      if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
        logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
      }

      var depth = bytes[4];
      var parentFingerprint = bytes_1.hexlify(bytes.slice(5, 9));
      var index = parseInt(bytes_1.hexlify(bytes.slice(9, 13)).substring(2), 16);
      var chainCode = bytes_1.hexlify(bytes.slice(13, 45));
      var key = bytes.slice(45, 78);

      switch (bytes_1.hexlify(bytes.slice(0, 4))) {
        case "0x0488b21e":
        case "0x043587cf":
          return new HDNode(_constructorGuard, null, bytes_1.hexlify(key), parentFingerprint, chainCode, index, depth, null);

        case "0x0488ade4":
        case "0x04358394 ":
          if (key[0] !== 0) {
            break;
          }

          return new HDNode(_constructorGuard, bytes_1.hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
      }

      return logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
    };

    return HDNode;
  }();

  exports.HDNode = HDNode;

  function mnemonicToSeed(mnemonic, password) {
    if (!password) {
      password = "";
    }

    var salt = strings_1.toUtf8Bytes("mnemonic" + password, strings_1.UnicodeNormalizationForm.NFKD);
    return pbkdf2_1.pbkdf2(strings_1.toUtf8Bytes(mnemonic, strings_1.UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
  }

  exports.mnemonicToSeed = mnemonicToSeed;

  function mnemonicToEntropy(mnemonic, wordlist) {
    wordlist = getWordlist(wordlist);
    logger.checkNormalize();
    var words = wordlist.split(mnemonic);

    if (words.length % 3 !== 0) {
      throw new Error("invalid mnemonic");
    }

    var entropy = bytes_1.arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
    var offset = 0;

    for (var i = 0; i < words.length; i++) {
      var index = wordlist.getWordIndex(words[i].normalize("NFKD"));

      if (index === -1) {
        throw new Error("invalid mnemonic");
      }

      for (var bit = 0; bit < 11; bit++) {
        if (index & 1 << 10 - bit) {
          entropy[offset >> 3] |= 1 << 7 - offset % 8;
        }

        offset++;
      }
    }

    var entropyBits = 32 * words.length / 3;
    var checksumBits = words.length / 3;
    var checksumMask = getUpperMask(checksumBits);
    var checksum = bytes_1.arrayify(sha2_1.sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;

    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
      throw new Error("invalid checksum");
    }

    return bytes_1.hexlify(entropy.slice(0, entropyBits / 8));
  }

  exports.mnemonicToEntropy = mnemonicToEntropy;

  function entropyToMnemonic(entropy, wordlist) {
    wordlist = getWordlist(wordlist);
    entropy = bytes_1.arrayify(entropy);

    if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
      throw new Error("invalid entropy");
    }

    var indices = [0];
    var remainingBits = 11;

    for (var i = 0; i < entropy.length; i++) {
      if (remainingBits > 8) {
        indices[indices.length - 1] <<= 8;
        indices[indices.length - 1] |= entropy[i];
        remainingBits -= 8;
      } else {
        indices[indices.length - 1] <<= remainingBits;
        indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
        indices.push(entropy[i] & getLowerMask(8 - remainingBits));
        remainingBits += 3;
      }
    }

    var checksumBits = entropy.length / 4;
    var checksum = bytes_1.arrayify(sha2_1.sha256(entropy))[0] & getUpperMask(checksumBits);
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum >> 8 - checksumBits;
    return wordlist.join(indices.map(function (index) {
      return wordlist.getWord(index);
    }));
  }

  exports.entropyToMnemonic = entropyToMnemonic;

  function isValidMnemonic(mnemonic, wordlist) {
    try {
      mnemonicToEntropy(mnemonic, wordlist);
      return true;
    } catch (error) {}

    return false;
  }

  exports.isValidMnemonic = isValidMnemonic;
},86,[87,36,32,67,88,42,91,129,133,135,37,147]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[1]);

  var BaseX = function () {
    function BaseX(alphabet) {
      properties_1.defineReadOnly(this, "alphabet", alphabet);
      properties_1.defineReadOnly(this, "base", alphabet.length);
      properties_1.defineReadOnly(this, "_alphabetMap", {});
      properties_1.defineReadOnly(this, "_leader", alphabet.charAt(0));

      for (var i = 0; i < alphabet.length; i++) {
        this._alphabetMap[alphabet.charAt(i)] = i;
      }
    }

    BaseX.prototype.encode = function (value) {
      var source = bytes_1.arrayify(value);

      if (source.length === 0) {
        return "";
      }

      var digits = [0];

      for (var i = 0; i < source.length; ++i) {
        var carry = source[i];

        for (var j = 0; j < digits.length; ++j) {
          carry += digits[j] << 8;
          digits[j] = carry % this.base;
          carry = carry / this.base | 0;
        }

        while (carry > 0) {
          digits.push(carry % this.base);
          carry = carry / this.base | 0;
        }
      }

      var string = "";

      for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
        string += this._leader;
      }

      for (var q = digits.length - 1; q >= 0; --q) {
        string += this.alphabet[digits[q]];
      }

      return string;
    };

    BaseX.prototype.decode = function (value) {
      if (typeof value !== "string") {
        throw new TypeError("Expected String");
      }

      var bytes = [];

      if (value.length === 0) {
        return new Uint8Array(bytes);
      }

      bytes.push(0);

      for (var i = 0; i < value.length; i++) {
        var byte = this._alphabetMap[value[i]];

        if (byte === undefined) {
          throw new Error("Non-base" + this.base + " character");
        }

        var carry = byte;

        for (var j = 0; j < bytes.length; ++j) {
          carry += bytes[j] * this.base;
          bytes[j] = carry & 0xff;
          carry >>= 8;
        }

        while (carry > 0) {
          bytes.push(carry & 0xff);
          carry >>= 8;
        }
      }

      for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
        bytes.push(0);
      }

      return bytes_1.arrayify(new Uint8Array(bytes.reverse()));
    };

    return BaseX;
  }();

  exports.BaseX = BaseX;
  var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
  exports.Base32 = Base32;
  var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  exports.Base58 = Base58;
},87,[36,42]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var pbkdf2_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.pbkdf2 = pbkdf2_1.pbkdf2;
},88,[89]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var crypto_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  function bufferify(value) {
    return Buffer.from(bytes_1.arrayify(value));
  }

  function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
    return bytes_1.hexlify(crypto_1.pbkdf2Sync(bufferify(password), bufferify(salt), iterations, keylen, hashAlgorithm));
  }

  exports.pbkdf2 = pbkdf2;
},89,[90,36]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('crypto');
},90,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var elliptic_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[3]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[4]);

  var logger = new logger_1.Logger(_version_1.version);
  var _curve = null;

  function getCurve() {
    if (!_curve) {
      _curve = new elliptic_1.EC("secp256k1");
    }

    return _curve;
  }

  var SigningKey = function () {
    function SigningKey(privateKey) {
      properties_1.defineReadOnly(this, "curve", "secp256k1");
      properties_1.defineReadOnly(this, "privateKey", bytes_1.hexlify(privateKey));
      var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));
      properties_1.defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
      properties_1.defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
      properties_1.defineReadOnly(this, "_isSigningKey", true);
    }

    SigningKey.prototype._addPoint = function (other) {
      var p0 = getCurve().keyFromPublic(bytes_1.arrayify(this.publicKey));
      var p1 = getCurve().keyFromPublic(bytes_1.arrayify(other));
      return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    };

    SigningKey.prototype.signDigest = function (digest) {
      var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));
      var signature = keyPair.sign(bytes_1.arrayify(digest), {
        canonical: true
      });
      return bytes_1.splitSignature({
        recoveryParam: signature.recoveryParam,
        r: bytes_1.hexZeroPad("0x" + signature.r.toString(16), 32),
        s: bytes_1.hexZeroPad("0x" + signature.s.toString(16), 32)
      });
    };

    SigningKey.prototype.computeSharedSecret = function (otherKey) {
      var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));
      var otherKeyPair = getCurve().keyFromPublic(bytes_1.arrayify(computePublicKey(otherKey)));
      return bytes_1.hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
    };

    SigningKey.isSigningKey = function (value) {
      return !!(value && value._isSigningKey);
    };

    return SigningKey;
  }();

  exports.SigningKey = SigningKey;

  function recoverPublicKey(digest, signature) {
    var sig = bytes_1.splitSignature(signature);
    var rs = {
      r: bytes_1.arrayify(sig.r),
      s: bytes_1.arrayify(sig.s)
    };
    return "0x" + getCurve().recoverPubKey(bytes_1.arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
  }

  exports.recoverPublicKey = recoverPublicKey;

  function computePublicKey(key, compressed) {
    var bytes = bytes_1.arrayify(key);

    if (bytes.length === 32) {
      var signingKey = new SigningKey(bytes);

      if (compressed) {
        return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
      }

      return signingKey.publicKey;
    } else if (bytes.length === 33) {
      if (compressed) {
        return bytes_1.hexlify(bytes);
      }

      return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
    } else if (bytes.length === 65) {
      if (!compressed) {
        return bytes_1.hexlify(bytes);
      }

      return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
    }

    return logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
  }

  exports.computePublicKey = computePublicKey;
},91,[92,36,42,37,128]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __importDefault = this && this.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var elliptic_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0]));

  var EC = elliptic_1.default.ec;
  exports.EC = EC;
},92,[93]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var elliptic = exports;
  elliptic.version = _$$_REQUIRE(_dependencyMap[0]).version;
  elliptic.utils = _$$_REQUIRE(_dependencyMap[1]);
  elliptic.rand = _$$_REQUIRE(_dependencyMap[2]);
  elliptic.curve = _$$_REQUIRE(_dependencyMap[3]);
  elliptic.curves = _$$_REQUIRE(_dependencyMap[4]);
  elliptic.ec = _$$_REQUIRE(_dependencyMap[5]);
  elliptic.eddsa = _$$_REQUIRE(_dependencyMap[6]);
},93,[94,95,98,99,107,121,125]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "_from": "elliptic@^6.5.3",
  "_id": "elliptic@6.5.3",
  "_inBundle": false,
  "_integrity": "sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw==",
  "_location": "/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.5.3",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.5.3",
    "saveSpec": null,
    "fetchSpec": "^6.5.3"
  },
  "_requiredBy": [
    "/@ethersproject/signing-key",
    "/tronweb"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz",
  "_shasum": "cb59eb2efdaf73a0bd78ccd7015a62ad6e0f93d6",
  "_spec": "elliptic@^6.5.3",
  "_where": "C:\\btro_app\\android\\node_modules\\tronweb",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^3.0.8",
    "grunt": "^1.0.4",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.2",
    "jscs": "^3.0.7",
    "jshint": "^2.10.3",
    "mocha": "^6.2.2"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.5.3"
}
;
},94,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = exports;

  var BN = _$$_REQUIRE(_dependencyMap[0]);

  var minAssert = _$$_REQUIRE(_dependencyMap[1]);

  var minUtils = _$$_REQUIRE(_dependencyMap[2]);

  utils.assert = minAssert;
  utils.toArray = minUtils.toArray;
  utils.zero2 = minUtils.zero2;
  utils.toHex = minUtils.toHex;
  utils.encode = minUtils.encode;

  function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();

    for (var i = 0; i < naf.length; i++) {
      var z;
      var mod = k.andln(ws - 1);

      if (k.isOdd()) {
        if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }

      naf[i] = z;
      k.iushrn(1);
    }

    return naf;
  }

  utils.getNAF = getNAF;

  function getJSF(k1, k2) {
    var jsf = [[], []];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;

    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
      var m14 = k1.andln(3) + d1 & 3;
      var m24 = k2.andln(3) + d2 & 3;
      if (m14 === 3) m14 = -1;
      if (m24 === 3) m24 = -1;
      var u1;

      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        var m8 = k1.andln(7) + d1 & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
      }

      jsf[0].push(u1);
      var u2;

      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        var m8 = k2.andln(7) + d2 & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
      }

      jsf[1].push(u2);
      if (2 * d1 === u1 + 1) d1 = 1 - d1;
      if (2 * d2 === u2 + 1) d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }

    return jsf;
  }

  utils.getJSF = getJSF;

  function cachedProperty(obj, name, computer) {
    var key = '_' + name;

    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
  }

  utils.cachedProperty = cachedProperty;

  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
  }

  utils.parseBytes = parseBytes;

  function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
  }

  utils.intFromLE = intFromLE;
},95,[34,96,97]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = assert;

  function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
  };
},96,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = exports;

  function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];

    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;

      return res;
    }

    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;

      for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);else res.push(lo);
      }
    }

    return res;
  }

  utils.toArray = toArray;

  function zero2(word) {
    if (word.length === 1) return '0' + word;else return word;
  }

  utils.zero2 = zero2;

  function toHex(msg) {
    var res = '';

    for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));

    return res;
  }

  utils.toHex = toHex;

  utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return toHex(arr);else return arr;
  };
},97,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var r;

  module.exports = function rand(len) {
    if (!r) r = new Rand(null);
    return r.generate(len);
  };

  function Rand(rand) {
    this.rand = rand;
  }

  module.exports.Rand = Rand;

  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };

  Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);

    for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();

    return res;
  };

  if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else if (typeof window === 'object') {
      Rand.prototype._rand = function () {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    try {
      var crypto = _$$_REQUIRE(_dependencyMap[0]);

      if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');

      Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
      };
    } catch (e) {}
  }
},98,[90]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var curve = exports;
  curve.base = _$$_REQUIRE(_dependencyMap[0]);
  curve.short = _$$_REQUIRE(_dependencyMap[1]);
  curve.mont = _$$_REQUIRE(_dependencyMap[2]);
  curve.edwards = _$$_REQUIRE(_dependencyMap[3]);
},99,[100,101,105,106]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BN = _$$_REQUIRE(_dependencyMap[0]);

  var utils = _$$_REQUIRE(_dependencyMap[1]);

  var getNAF = utils.getNAF;
  var getJSF = utils.getJSF;
  var assert = utils.assert;

  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);

    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }

  module.exports = BaseCurve;

  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);

    var doubles = p._getDoubles();

    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];

    for (var j = 0; j < naf.length; j += doubles.step) {
      var nafW = 0;

      for (var k = j + doubles.step - 1; k >= j; k--) nafW = (nafW << 1) + naf[k];

      repr.push(nafW);
    }

    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);

    for (var i = I; i > 0; i--) {
      for (var j = 0; j < repr.length; j++) {
        var nafW = repr[j];
        if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
      }

      a = a.add(b);
    }

    return a.toP();
  };

  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;

    var nafPoints = p._getNAFPoints(w);

    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w, this._bitLength);
    var acc = this.jpoint(null, null, null);

    for (var i = naf.length - 1; i >= 0; i--) {
      for (var k = 0; i >= 0 && naf[i] === 0; i--) k++;

      if (i >= 0) k++;
      acc = acc.dblp(k);
      if (i < 0) break;
      var z = naf[i];
      assert(z !== 0);

      if (p.type === 'affine') {
        if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
      } else {
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
      }
    }

    return p.type === 'affine' ? acc.toP() : acc;
  };

  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;

    for (var i = 0; i < len; i++) {
      var p = points[i];

      var nafPoints = p._getNAFPoints(defW);

      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }

    for (var i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;

      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }

      var comb = [points[a], null, null, points[b]];

      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }

      var index = [-3, -1, -5, -7, 0, 7, 5, 1, 3];
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);

      for (var j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }

    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;

    for (var i = max; i >= 0; i--) {
      var k = 0;

      while (i >= 0) {
        var zero = true;

        for (var j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0) zero = false;
        }

        if (!zero) break;
        k++;
        i--;
      }

      if (i >= 0) k++;
      acc = acc.dblp(k);
      if (i < 0) break;

      for (var j = 0; j < len; j++) {
        var z = tmp[j];
        var p;
        if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
        if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
      }
    }

    for (var i = 0; i < len; i++) wnd[i] = null;

    if (jacobianResult) return acc;else return acc.toP();
  };

  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }

  BaseCurve.BasePoint = BasePoint;

  BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
  };

  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };

  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();

    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
      if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
      var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
      return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }

    throw new Error('Unknown point format');
  };

  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };

  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
    return [0x04].concat(x, this.getY().toArray('be', len));
  };

  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
  };

  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };

  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };

  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;

    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++) acc = acc.dbl();

      doubles.push(acc);
    }

    return {
      step: step,
      points: doubles
    };
  };

  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();

    for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);

    return {
      wnd: wnd,
      points: res
    };
  };

  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };

  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;

    for (var i = 0; i < k; i++) r = r.dbl();

    return r;
  };
},100,[34,95]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var BN = _$$_REQUIRE(_dependencyMap[1]);

  var inherits = _$$_REQUIRE(_dependencyMap[2]);

  var Base = _$$_REQUIRE(_dependencyMap[3]);

  var assert = utils.assert;

  function ShortCurve(conf) {
    Base.call(this, 'short', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }

  inherits(ShortCurve, Base);
  module.exports = ShortCurve;

  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    var beta;
    var lambda;

    if (conf.beta) {
      beta = new BN(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);

      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }

    if (conf.lambda) {
      lambda = new BN(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);

      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }

    var basis;

    if (conf.basis) {
      basis = conf.basis.map(function (vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }

    return {
      beta: beta,
      lambda: lambda,
      basis: basis
    };
  };

  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [l1, l2];
  };

  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;

    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));

      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }

      prevR = r;
      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }

    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());

    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }

    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }

    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }

    return [{
      a: a1,
      b: b1
    }, {
      a: a2,
      b: b2
    }];
  };

  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
      k1: k1,
      k2: k2
    };
  };

  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
  };

  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };

  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;

    for (var i = 0; i < points.length; i++) {
      var split = this._endoSplit(coeffs[i]);

      var p = points[i];

      var beta = p._getBeta();

      if (split.k1.negative) {
        split.k1.ineg();
        p = p.neg(true);
      }

      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }

      npoints[i * 2] = p;
      npoints[i * 2 + 1] = beta;
      ncoeffs[i * 2] = split.k1;
      ncoeffs[i * 2 + 1] = split.k2;
    }

    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

    for (var j = 0; j < i * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }

    return res;
  };

  function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');

    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);

      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }

      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.y.red) this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }

  inherits(Point, Base.BasePoint);

  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };

  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };

  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

    if (pre) {
      var curve = this.curve;

      var endoMul = function (p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };

      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }

    return beta;
  };

  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };

  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string') obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;

    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }

    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };

  Point.prototype.add = function add(p) {
    if (this.inf) return p;
    if (p.inf) return this;
    if (this.eq(p)) return this.dbl();
    if (this.neg().eq(p)) return this.curve.point(null, null);
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };

  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };

  Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
  };

  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };

  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };

  Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };

  Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());

    if (_precompute && this.precomputed) {
      var pre = this.precomputed;

      var negate = function (p) {
        return p.neg();
      };

      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }

    return res;
  };

  Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };

  function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');

    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN(0);
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      this.z = new BN(z, 16);
    }

    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }

  inherits(JPoint, Base.BasePoint);

  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };

  JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };

  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };

  JPoint.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);

    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    if (this.isInfinity()) return p.toJ();
    if (p.isInfinity()) return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);

    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();

    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;

      for (var i = 0; i < pow; i++) r = r.dbl();

      return r;
    }

    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);

    for (var i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }

    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };

  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
  };

  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;

    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      var m = xx.redAdd(xx).redIAdd(xx);
      var t = m.redSqr().redISub(s).redISub(s);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t;
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = b.redSqr();
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      var e = a.redAdd(a).redIAdd(a);
      var f = e.redSqr();
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f.redISub(d).redISub(d);
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;

    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t = m.redSqr().redISub(s).redISub(s);
      nx = t;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m = xx.redAdd(xx).redIAdd(xx);
    var mm = m.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
  };

  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine') return this.eq(p.toJ());
    if (this === p) return true;
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };

  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);

    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0) return false;
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0) return true;
    }
  };

  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
  };

  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
},101,[95,34,102,100]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  try {
    var util = _$$_REQUIRE(_dependencyMap[0]);

    if (typeof util.inherits !== 'function') throw '';
    module.exports = util.inherits;
  } catch (e) {
    module.exports = _$$_REQUIRE(_dependencyMap[1]);
  }
},102,[103,104]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('util');
},103,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  if (typeof Object.create === 'function') {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;

        var TempCtor = function () {};

        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
},104,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BN = _$$_REQUIRE(_dependencyMap[0]);

  var inherits = _$$_REQUIRE(_dependencyMap[1]);

  var Base = _$$_REQUIRE(_dependencyMap[2]);

  var utils = _$$_REQUIRE(_dependencyMap[3]);

  function MontCurve(conf) {
    Base.call(this, 'mont', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }

  inherits(MontCurve, Base);
  module.exports = MontCurve;

  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
  };

  function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');

    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN(x, 16);
      this.z = new BN(z, 16);
      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
  }

  inherits(Point, Base.BasePoint);

  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
  };

  MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
  };

  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };

  Point.prototype.precompute = function precompute() {};

  Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
  };

  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };

  Point.prototype.dbl = function dbl() {
    var a = this.x.redAdd(this.z);
    var aa = a.redSqr();
    var b = this.x.redSub(this.z);
    var bb = b.redSqr();
    var c = aa.redSub(bb);
    var nx = aa.redMul(bb);
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };

  Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point.prototype.diffAdd = function diffAdd(p, diff) {
    var a = this.x.redAdd(this.z);
    var b = this.x.redSub(this.z);
    var c = p.x.redAdd(p.z);
    var d = p.x.redSub(p.z);
    var da = d.redMul(a);
    var cb = c.redMul(b);
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };

  Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this;
    var b = this.curve.point(null, null);
    var c = this;

    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) bits.push(t.andln(1));

    for (var i = bits.length - 1; i >= 0; i--) {
      if (bits[i] === 0) {
        a = a.diffAdd(b, c);
        b = b.dbl();
      } else {
        b = a.diffAdd(b, c);
        a = a.dbl();
      }
    }

    return b;
  };

  Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };

  Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };

  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
},105,[34,102,100,95]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var BN = _$$_REQUIRE(_dependencyMap[1]);

  var inherits = _$$_REQUIRE(_dependencyMap[2]);

  var Base = _$$_REQUIRE(_dependencyMap[3]);

  var assert = utils.assert;

  function EdwardsCurve(conf) {
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, 'edwards', conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }

  inherits(EdwardsCurve, Base);
  module.exports = EdwardsCurve;

  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
  };

  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;else return this.c.redMul(num);
  };

  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };

  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
  };

  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red) y = y.toRed(this.red);
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());

    if (x2.cmp(this.zero) === 0) {
      if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
    }

    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
  };

  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
  };

  function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');

    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      this.z = z ? new BN(z, 16) : this.curve.one;
      this.t = t && new BN(t, 16);
      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.y.red) this.y = this.y.toRed(this.curve.red);
      if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;

      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }

  inherits(Point, Base.BasePoint);

  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };

  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
  };

  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
  };

  Point.prototype._extDbl = function _extDbl() {
    var a = this.x.redSqr();
    var b = this.y.redSqr();
    var c = this.z.redSqr();
    c = c.redIAdd(c);

    var d = this.curve._mulA(a);

    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    var g = d.redAdd(b);
    var f = g.redSub(c);
    var h = d.redSub(b);
    var nx = e.redMul(f);
    var ny = g.redMul(h);
    var nt = e.redMul(h);
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projDbl = function _projDbl() {
    var b = this.x.redAdd(this.y).redSqr();
    var c = this.x.redSqr();
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;

    if (this.curve.twisted) {
      var e = this.curve._mulA(c);

      var f = e.redAdd(d);

      if (this.zOne) {
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        ny = f.redMul(e.redSub(d));
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        var h = this.z.redSqr();
        var j = f.redSub(h).redISub(h);
        nx = b.redSub(c).redISub(d).redMul(j);
        ny = f.redMul(e.redSub(d));
        nz = f.redMul(j);
      }
    } else {
      var e = c.redAdd(d);

      var h = this.curve._mulC(this.z).redSqr();

      var j = e.redSub(h).redSub(h);
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      nz = e.redMul(j);
    }

    return this.curve.point(nx, ny, nz);
  };

  Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.extended) return this._extDbl();else return this._projDbl();
  };

  Point.prototype._extAdd = function _extAdd(p) {
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    var d = this.z.redMul(p.z.redAdd(p.z));
    var e = b.redSub(a);
    var f = d.redSub(c);
    var g = d.redAdd(c);
    var h = b.redAdd(a);
    var nx = e.redMul(f);
    var ny = g.redMul(h);
    var nt = e.redMul(h);
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point.prototype._projAdd = function _projAdd(p) {
    var a = this.z.redMul(p.z);
    var b = a.redSqr();
    var c = this.x.redMul(p.x);
    var d = this.y.redMul(p.y);
    var e = this.curve.d.redMul(c).redMul(d);
    var f = b.redSub(e);
    var g = b.redAdd(e);
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;

    if (this.curve.twisted) {
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      nz = f.redMul(g);
    } else {
      ny = a.redMul(g).redMul(d.redSub(c));
      nz = this.curve._mulC(f).redMul(g);
    }

    return this.curve.point(nx, ny, nz);
  };

  Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
  };

  Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
  };

  Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
  };

  Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
  };

  Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };

  Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
  };

  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };

  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };

  Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
  };

  Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);

    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0) return false;
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0) return true;
    }
  };

  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;
},106,[95,34,102,100]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var curves = exports;

  var hash = _$$_REQUIRE(_dependencyMap[0]);

  var curve = _$$_REQUIRE(_dependencyMap[1]);

  var utils = _$$_REQUIRE(_dependencyMap[2]);

  var assert = utils.assert;

  function PresetCurve(options) {
    if (options.type === 'short') this.curve = new curve.short(options);else if (options.type === 'edwards') this.curve = new curve.edwards(options);else this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }

  curves.PresetCurve = PresetCurve;

  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function () {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }

  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
  });
  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
  });
  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
  });
  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]
  });
  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]
  });
  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: ['9']
  });
  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', '6666666666666666666666666666666666666666666666666666666666666658']
  });
  var pre;

  try {
    pre = _$$_REQUIRE(_dependencyMap[3]);
  } catch (e) {
    pre = undefined;
  }

  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [{
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    }, {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }],
    gRed: false,
    g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
  });
},107,[108,99,95,120]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var hash = exports;
  hash.utils = _$$_REQUIRE(_dependencyMap[0]);
  hash.common = _$$_REQUIRE(_dependencyMap[1]);
  hash.sha = _$$_REQUIRE(_dependencyMap[2]);
  hash.ripemd = _$$_REQUIRE(_dependencyMap[3]);
  hash.hmac = _$$_REQUIRE(_dependencyMap[4]);
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
},108,[109,110,111,118,119]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var assert = _$$_REQUIRE(_dependencyMap[0]);

  var inherits = _$$_REQUIRE(_dependencyMap[1]);

  exports.inherits = inherits;

  function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
      return false;
    }

    if (i < 0 || i + 1 >= msg.length) {
      return false;
    }

    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
  }

  function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];

    if (typeof msg === 'string') {
      if (!enc) {
        var p = 0;

        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);

          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = c >> 6 | 192;
            res[p++] = c & 63 | 128;
          } else if (isSurrogatePair(msg, i)) {
            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
            res[p++] = c >> 18 | 240;
            res[p++] = c >> 12 & 63 | 128;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          } else {
            res[p++] = c >> 12 | 224;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          }
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;

        for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
    }

    return res;
  }

  exports.toArray = toArray;

  function toHex(msg) {
    var res = '';

    for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));

    return res;
  }

  exports.toHex = toHex;

  function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
  }

  exports.htonl = htonl;

  function toHex32(msg, endian) {
    var res = '';

    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little') w = htonl(w);
      res += zero8(w.toString(16));
    }

    return res;
  }

  exports.toHex32 = toHex32;

  function zero2(word) {
    if (word.length === 1) return '0' + word;else return word;
  }

  exports.zero2 = zero2;

  function zero8(word) {
    if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
  }

  exports.zero8 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);

    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
      res[i] = w >>> 0;
    }

    return res;
  }

  exports.join32 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);

    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];

      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = m >>> 16 & 0xff;
        res[k + 2] = m >>> 8 & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = m >>> 16 & 0xff;
        res[k + 1] = m >>> 8 & 0xff;
        res[k] = m & 0xff;
      }
    }

    return res;
  }

  exports.split32 = split32;

  function rotr32(w, b) {
    return w >>> b | w << 32 - b;
  }

  exports.rotr32 = rotr32;

  function rotl32(w, b) {
    return w << b | w >>> 32 - b;
  }

  exports.rotl32 = rotl32;

  function sum32(a, b) {
    return a + b >>> 0;
  }

  exports.sum32 = sum32;

  function sum32_3(a, b, c) {
    return a + b + c >>> 0;
  }

  exports.sum32_3 = sum32_3;

  function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
  }

  exports.sum32_4 = sum32_4;

  function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
  }

  exports.sum32_5 = sum32_5;

  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }

  exports.sum64 = sum64;

  function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }

  exports.sum64_hi = sum64_hi;

  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }

  exports.sum64_lo = sum64_lo;

  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }

  exports.sum64_4_hi = sum64_4_hi;

  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }

  exports.sum64_4_lo = sum64_4_lo;

  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }

  exports.sum64_5_hi = sum64_5_hi;

  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }

  exports.sum64_5_lo = sum64_5_lo;

  function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
  }

  exports.rotr64_hi = rotr64_hi;

  function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
  }

  exports.rotr64_lo = rotr64_lo;

  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }

  exports.shr64_hi = shr64_hi;

  function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
  }

  exports.shr64_lo = shr64_lo;
},109,[96,102]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var assert = _$$_REQUIRE(_dependencyMap[1]);

  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }

  exports.BlockHash = BlockHash;

  BlockHash.prototype.update = function update(msg, enc) {
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0) this.pending = null;
      msg = utils.join32(msg, 0, msg.length - r, this.endian);

      for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);
    }

    return this;
  };

  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
  };

  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;

    for (var i = 1; i < k; i++) res[i] = 0;

    len <<= 3;

    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++) res[i++] = 0;

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = len >>> 24 & 0xff;
      res[i++] = len >>> 16 & 0xff;
      res[i++] = len >>> 8 & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = len >>> 8 & 0xff;
      res[i++] = len >>> 16 & 0xff;
      res[i++] = len >>> 24 & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (t = 8; t < this.padLength; t++) res[i++] = 0;
    }

    return res;
  };
},110,[109,96]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  exports.sha1 = _$$_REQUIRE(_dependencyMap[0]);
  exports.sha224 = _$$_REQUIRE(_dependencyMap[1]);
  exports.sha256 = _$$_REQUIRE(_dependencyMap[2]);
  exports.sha384 = _$$_REQUIRE(_dependencyMap[3]);
  exports.sha512 = _$$_REQUIRE(_dependencyMap[4]);
},111,[112,114,115,116,117]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var common = _$$_REQUIRE(_dependencyMap[1]);

  var shaCommon = _$$_REQUIRE(_dependencyMap[2]);

  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_5 = utils.sum32_5;
  var ft_1 = shaCommon.ft_1;
  var BlockHash = common.BlockHash;
  var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

  function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
    this.W = new Array(80);
  }

  utils.inherits(SHA1, BlockHash);
  module.exports = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;

  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++) W[i] = msg[start + i];

    for (; i < W.length; i++) W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32(b, 30);
      b = a;
      a = t;
    }

    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
  };

  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
  };
},112,[109,110,113]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var rotr32 = utils.rotr32;

  function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
  }

  exports.ft_1 = ft_1;

  function ch32(x, y, z) {
    return x & y ^ ~x & z;
  }

  exports.ch32 = ch32;

  function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
  }

  exports.maj32 = maj32;

  function p32(x, y, z) {
    return x ^ y ^ z;
  }

  exports.p32 = p32;

  function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }

  exports.s0_256 = s0_256;

  function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }

  exports.s1_256 = s1_256;

  function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
  }

  exports.g0_256 = g0_256;

  function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
  }

  exports.g1_256 = g1_256;
},113,[109]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var SHA256 = _$$_REQUIRE(_dependencyMap[1]);

  function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
  }

  utils.inherits(SHA224, SHA256);
  module.exports = SHA224;
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;

  SHA224.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
  };
},114,[109,115]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var common = _$$_REQUIRE(_dependencyMap[1]);

  var shaCommon = _$$_REQUIRE(_dependencyMap[2]);

  var assert = _$$_REQUIRE(_dependencyMap[3]);

  var sum32 = utils.sum32;
  var sum32_4 = utils.sum32_4;
  var sum32_5 = utils.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  var BlockHash = common.BlockHash;
  var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

  function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
    this.k = sha256_K;
    this.W = new Array(64);
  }

  utils.inherits(SHA256, BlockHash);
  module.exports = SHA256;
  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;

  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++) W[i] = msg[start + i];

    for (; i < W.length; i++) W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);

    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32(T1, T2);
    }

    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
  };

  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
  };
},115,[109,110,113,96]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var SHA512 = _$$_REQUIRE(_dependencyMap[1]);

  function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
  }

  utils.inherits(SHA384, SHA512);
  module.exports = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;

  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
  };
},116,[109,117]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var common = _$$_REQUIRE(_dependencyMap[1]);

  var assert = _$$_REQUIRE(_dependencyMap[2]);

  var rotr64_hi = utils.rotr64_hi;
  var rotr64_lo = utils.rotr64_lo;
  var shr64_hi = utils.shr64_hi;
  var shr64_lo = utils.shr64_lo;
  var sum64 = utils.sum64;
  var sum64_hi = utils.sum64_hi;
  var sum64_lo = utils.sum64_lo;
  var sum64_4_hi = utils.sum64_4_hi;
  var sum64_4_lo = utils.sum64_4_lo;
  var sum64_5_hi = utils.sum64_5_hi;
  var sum64_5_lo = utils.sum64_5_lo;
  var BlockHash = common.BlockHash;
  var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

  function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
    this.k = sha512_K;
    this.W = new Array(160);
  }

  utils.inherits(SHA512, BlockHash);
  module.exports = SHA512;
  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;

  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    for (var i = 0; i < 32; i++) W[i] = msg[start + i];

    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];
      var c3_lo = W[i - 31];
      W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
  };

  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);

    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];
      var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };

  SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
  };

  function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);
    var c2_hi = rotr64_hi(xl, xh, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);
    var c2_lo = rotr64_lo(xl, xh, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
  }

  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
  }
},117,[109,110,96]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var common = _$$_REQUIRE(_dependencyMap[1]);

  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_3 = utils.sum32_3;
  var sum32_4 = utils.sum32_4;
  var BlockHash = common.BlockHash;

  function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
    this.endian = 'little';
  }

  utils.inherits(RIPEMD160, BlockHash);
  exports.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;

  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;

    for (var j = 0; j < 80; j++) {
      var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }

    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };

  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
  };

  function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
  }

  function K(j) {
    if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
  }

  function Kh(j) {
    if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
  }

  var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
  var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
  var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
  var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
},118,[109,110]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var assert = _$$_REQUIRE(_dependencyMap[1]);

  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils.toArray(key, enc));
  }

  module.exports = Hmac;

  Hmac.prototype._init = function init(key) {
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);

    for (var i = key.length; i < this.blockSize; i++) key.push(0);

    for (i = 0; i < key.length; i++) key[i] ^= 0x36;

    this.inner = new this.Hash().update(key);

    for (i = 0; i < key.length; i++) key[i] ^= 0x6a;

    this.outer = new this.Hash().update(key);
  };

  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };

  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
},119,[109,96]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = {
    doubles: {
      step: 4,
      points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
    },
    naf: {
      wnd: 7,
      points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
    }
  };
},120,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BN = _$$_REQUIRE(_dependencyMap[0]);

  var HmacDRBG = _$$_REQUIRE(_dependencyMap[1]);

  var utils = _$$_REQUIRE(_dependencyMap[2]);

  var curves = _$$_REQUIRE(_dependencyMap[3]);

  var rand = _$$_REQUIRE(_dependencyMap[4]);

  var assert = utils.assert;

  var KeyPair = _$$_REQUIRE(_dependencyMap[5]);

  var Signature = _$$_REQUIRE(_dependencyMap[6]);

  function EC(options) {
    if (!(this instanceof EC)) return new EC(options);

    if (typeof options === 'string') {
      assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);
      options = curves[options];
    }

    if (options instanceof curves.PresetCurve) options = {
      curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }

  module.exports = EC;

  EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
  };

  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
  };

  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
  };

  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || 'utf8',
      nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));

    do {
      var priv = new BN(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0) continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    } while (true);
  };

  EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
  };

  EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }

    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    var nonce = msg.toArray('be', bytes);
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8'
    });
    var ns1 = this.n.sub(new BN(1));

    for (var iter = 0; true; iter++) {
      var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
      var kp = this.g.mul(k);
      if (kp.isInfinity()) continue;
      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0) continue;
      var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
      s = s.umod(this.n);
      if (s.cmpn(0) === 0) continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

      if (options.canonical && s.cmp(this.nh) > 0) {
        s = this.n.sub(s);
        recoveryParam ^= 1;
      }

      return new Signature({
        r: r,
        s: s,
        recoveryParam: recoveryParam
      });
    }
  };

  EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);

    if (!this.curve._maxwellTrick) {
      var p = this.g.mulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity()) return false;
      return p.getX().umod(this.n).cmp(r) === 0;
    }

    var p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    return p.eqXToP(r);
  };

  EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    return this.g.mulAdd(s1, r, s2);
  };

  EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;

    for (var i = 0; i < 4; i++) {
      var Qprime;

      try {
        Qprime = this.recoverPubKey(e, signature, i);
      } catch (e) {
        continue;
      }

      if (Qprime.eq(Q)) return i;
    }

    throw new Error('Unable to find valid recovery factor');
  };
},121,[34,122,95,107,98,123,124]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var hash = _$$_REQUIRE(_dependencyMap[0]);

  var utils = _$$_REQUIRE(_dependencyMap[1]);

  var assert = _$$_REQUIRE(_dependencyMap[2]);

  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils.toArray(options.pers, options.persEnc || 'hex');
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

    this._init(entropy, nonce, pers);
  }

  module.exports = HmacDRBG;

  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);

    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }

    this._update(seed);

    this._reseed = 1;
    this.reseedInterval = 0x1000000000000;
  };

  HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
  };

  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0x00]);

    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };

  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }

    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

    this._update(entropy.concat(add || []));

    this._reseed = 1;
  };

  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');

    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }

    if (add) {
      add = utils.toArray(add, addEnc || 'hex');

      this._update(add);
    }

    var temp = [];

    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }

    var res = temp.slice(0, len);

    this._update(add);

    this._reseed++;
    return utils.encode(res, enc);
  };
},122,[108,97,96]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BN = _$$_REQUIRE(_dependencyMap[0]);

  var utils = _$$_REQUIRE(_dependencyMap[1]);

  var assert = utils.assert;

  function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
  }

  module.exports = KeyPair;

  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec, {
      pub: pub,
      pubEnc: enc
    });
  };

  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec, {
      priv: priv,
      privEnc: enc
    });
  };

  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
      result: false,
      reason: 'Invalid public key'
    };
    if (!pub.validate()) return {
      result: false,
      reason: 'Public key is not a point'
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
      result: false,
      reason: 'Public key * N != O'
    };
    return {
      result: true,
      reason: null
    };
  };

  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }

    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
  };

  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
  };

  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };

  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      if (this.ec.curve.type === 'mont') {
        assert(key.x, 'Need x coordinate');
      } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
        assert(key.x && key.y, 'Need both x and y coordinate');
      }

      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }

    this.pub = this.ec.curve.decodePoint(key, enc);
  };

  KeyPair.prototype.derive = function derive(pub) {
    return pub.mul(this.priv).getX();
  };

  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };

  KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };

  KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };
},123,[34,95]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BN = _$$_REQUIRE(_dependencyMap[0]);

  var utils = _$$_REQUIRE(_dependencyMap[1]);

  var assert = utils.assert;

  function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert(options.r && options.s, 'Signature without r or s');
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
  }

  module.exports = Signature;

  function Position() {
    this.place = 0;
  }

  function getLength(buf, p) {
    var initial = buf[p.place++];

    if (!(initial & 0x80)) {
      return initial;
    }

    var octetLen = initial & 0xf;

    if (octetLen === 0 || octetLen > 4) {
      return false;
    }

    var val = 0;

    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }

    if (val <= 0x7f) {
      return false;
    }

    p.place = off;
    return val;
  }

  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;

    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
      i++;
    }

    if (i === 0) {
      return buf;
    }

    return buf.slice(i);
  }

  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();

    if (data[p.place++] !== 0x30) {
      return false;
    }

    var len = getLength(data, p);

    if (len === false) {
      return false;
    }

    if (len + p.place !== data.length) {
      return false;
    }

    if (data[p.place++] !== 0x02) {
      return false;
    }

    var rlen = getLength(data, p);

    if (rlen === false) {
      return false;
    }

    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;

    if (data[p.place++] !== 0x02) {
      return false;
    }

    var slen = getLength(data, p);

    if (slen === false) {
      return false;
    }

    if (data.length !== slen + p.place) {
      return false;
    }

    var s = data.slice(p.place, slen + p.place);

    if (r[0] === 0) {
      if (r[1] & 0x80) {
        r = r.slice(1);
      } else {
        return false;
      }
    }

    if (s[0] === 0) {
      if (s[1] & 0x80) {
        s = s.slice(1);
      } else {
        return false;
      }
    }

    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
    return true;
  };

  function constructLength(arr, len) {
    if (len < 0x80) {
      arr.push(len);
      return;
    }

    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);

    while (--octets) {
      arr.push(len >>> (octets << 3) & 0xff);
    }

    arr.push(len);
  }

  Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    if (r[0] & 0x80) r = [0].concat(r);
    if (s[0] & 0x80) s = [0].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);

    while (!s[0] && !(s[1] & 0x80)) {
      s = s.slice(1);
    }

    var arr = [0x02];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [0x30];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
  };
},124,[34,95]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var hash = _$$_REQUIRE(_dependencyMap[0]);

  var curves = _$$_REQUIRE(_dependencyMap[1]);

  var utils = _$$_REQUIRE(_dependencyMap[2]);

  var assert = utils.assert;
  var parseBytes = utils.parseBytes;

  var KeyPair = _$$_REQUIRE(_dependencyMap[3]);

  var Signature = _$$_REQUIRE(_dependencyMap[4]);

  function EDDSA(curve) {
    assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof EDDSA)) return new EDDSA(curve);
    var curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
  }

  module.exports = EDDSA;

  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
      R: R,
      S: S,
      Rencoded: Rencoded
    });
  };

  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
  };

  EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();

    for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);

    return utils.intFromLE(hash.digest()).umod(this.curve.n);
  };

  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };

  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };

  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
  };

  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
  };

  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };

  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
  };

  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
  };

  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };
},125,[108,107,95,126,127]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var assert = utils.assert;
  var parseBytes = utils.parseBytes;
  var cachedProperty = utils.cachedProperty;

  function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
  }

  KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(eddsa, {
      pub: pub
    });
  };

  KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair) return secret;
    return new KeyPair(eddsa, {
      secret: secret
    });
  };

  KeyPair.prototype.secret = function secret() {
    return this._secret;
  };

  cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });
  cachedProperty(KeyPair, 'pub', function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });
  cachedProperty(KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
  });
  cachedProperty(KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });
  cachedProperty(KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });
  cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });

  KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
  };

  KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };

  KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, 'KeyPair is public only');
    return utils.encode(this.secret(), enc);
  };

  KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
  };

  module.exports = KeyPair;
},126,[95]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var BN = _$$_REQUIRE(_dependencyMap[0]);

  var utils = _$$_REQUIRE(_dependencyMap[1]);

  var assert = utils.assert;
  var cachedProperty = utils.cachedProperty;
  var parseBytes = utils.parseBytes;

  function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object') sig = parseBytes(sig);

    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
      };
    }

    assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }

  cachedProperty(Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
  });
  cachedProperty(Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
  });
  cachedProperty(Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });
  cachedProperty(Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });

  Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };

  Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), 'hex').toUpperCase();
  };

  module.exports = Signature;
},127,[34,95]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "signing-key/5.0.6";
},128,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var sha2_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.computeHmac = sha2_1.computeHmac;
  exports.ripemd160 = sha2_1.ripemd160;
  exports.sha256 = sha2_1.sha256;
  exports.sha512 = sha2_1.sha512;

  var types_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.SupportedAlgorithm = types_1.SupportedAlgorithm;
},129,[130,131]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var crypto_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  var types_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[3]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[4]);

  var logger = new logger_1.Logger(_version_1.version);

  function ripemd160(data) {
    return "0x" + crypto_1.createHash("ripemd160").update(Buffer.from(bytes_1.arrayify(data))).digest("hex");
  }

  exports.ripemd160 = ripemd160;

  function sha256(data) {
    return "0x" + crypto_1.createHash("sha256").update(Buffer.from(bytes_1.arrayify(data))).digest("hex");
  }

  exports.sha256 = sha256;

  function sha512(data) {
    return "0x" + crypto_1.createHash("sha512").update(Buffer.from(bytes_1.arrayify(data))).digest("hex");
  }

  exports.sha512 = sha512;

  function computeHmac(algorithm, key, data) {
    if (!types_1.SupportedAlgorithm[algorithm]) {
      logger.throwError("unsupported algorithm - " + algorithm, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "computeHmac",
        algorithm: algorithm
      });
    }

    return "0x" + crypto_1.createHmac(algorithm, Buffer.from(bytes_1.arrayify(key))).update(Buffer.from(bytes_1.arrayify(data))).digest("hex");
  }

  exports.computeHmac = computeHmac;
},130,[90,36,131,37,132]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var SupportedAlgorithm;

  (function (SupportedAlgorithm) {
    SupportedAlgorithm["sha256"] = "sha256";
    SupportedAlgorithm["sha512"] = "sha512";
  })(SupportedAlgorithm = exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));

  ;
},131,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "sha2/5.0.5";
},132,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __importStar = this && this.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var address_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[2]);

  var constants_1 = _$$_REQUIRE(_dependencyMap[3]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[4]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[5]);

  var RLP = __importStar(_$$_REQUIRE(_dependencyMap[6]));

  var signing_key_1 = _$$_REQUIRE(_dependencyMap[7]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[8]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[9]);

  var logger = new logger_1.Logger(_version_1.version);

  function handleAddress(value) {
    if (value === "0x") {
      return null;
    }

    return address_1.getAddress(value);
  }

  function handleNumber(value) {
    if (value === "0x") {
      return constants_1.Zero;
    }

    return bignumber_1.BigNumber.from(value);
  }

  var transactionFields = [{
    name: "nonce",
    maxLength: 32,
    numeric: true
  }, {
    name: "gasPrice",
    maxLength: 32,
    numeric: true
  }, {
    name: "gasLimit",
    maxLength: 32,
    numeric: true
  }, {
    name: "to",
    length: 20
  }, {
    name: "value",
    maxLength: 32,
    numeric: true
  }, {
    name: "data"
  }];
  var allowedTransactionKeys = {
    chainId: true,
    data: true,
    gasLimit: true,
    gasPrice: true,
    nonce: true,
    to: true,
    value: true
  };

  function computeAddress(key) {
    var publicKey = signing_key_1.computePublicKey(key);
    return address_1.getAddress(bytes_1.hexDataSlice(keccak256_1.keccak256(bytes_1.hexDataSlice(publicKey, 1)), 12));
  }

  exports.computeAddress = computeAddress;

  function recoverAddress(digest, signature) {
    return computeAddress(signing_key_1.recoverPublicKey(bytes_1.arrayify(digest), signature));
  }

  exports.recoverAddress = recoverAddress;

  function serialize(transaction, signature) {
    properties_1.checkProperties(transaction, allowedTransactionKeys);
    var raw = [];
    transactionFields.forEach(function (fieldInfo) {
      var value = transaction[fieldInfo.name] || [];
      var options = {};

      if (fieldInfo.numeric) {
        options.hexPad = "left";
      }

      value = bytes_1.arrayify(bytes_1.hexlify(value, options));

      if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
        logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
      }

      if (fieldInfo.maxLength) {
        value = bytes_1.stripZeros(value);

        if (value.length > fieldInfo.maxLength) {
          logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
        }
      }

      raw.push(bytes_1.hexlify(value));
    });
    var chainId = 0;

    if (transaction.chainId != null) {
      chainId = transaction.chainId;

      if (typeof chainId !== "number") {
        logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
      }
    } else if (signature && !bytes_1.isBytesLike(signature) && signature.v > 28) {
      chainId = Math.floor((signature.v - 35) / 2);
    }

    if (chainId !== 0) {
      raw.push(bytes_1.hexlify(chainId));
      raw.push("0x");
      raw.push("0x");
    }

    if (!signature) {
      return RLP.encode(raw);
    }

    var sig = bytes_1.splitSignature(signature);
    var v = 27 + sig.recoveryParam;

    if (chainId !== 0) {
      raw.pop();
      raw.pop();
      raw.pop();
      v += chainId * 2 + 8;

      if (sig.v > 28 && sig.v !== v) {
        logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
      }
    } else if (sig.v !== v) {
      logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
    }

    raw.push(bytes_1.hexlify(v));
    raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.r)));
    raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.s)));
    return RLP.encode(raw);
  }

  exports.serialize = serialize;

  function parse(rawTransaction) {
    var transaction = RLP.decode(rawTransaction);

    if (transaction.length !== 9 && transaction.length !== 6) {
      logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
    }

    var tx = {
      nonce: handleNumber(transaction[0]).toNumber(),
      gasPrice: handleNumber(transaction[1]),
      gasLimit: handleNumber(transaction[2]),
      to: handleAddress(transaction[3]),
      value: handleNumber(transaction[4]),
      data: transaction[5],
      chainId: 0
    };

    if (transaction.length === 6) {
      return tx;
    }

    try {
      tx.v = bignumber_1.BigNumber.from(transaction[6]).toNumber();
    } catch (error) {
      console.log(error);
      return tx;
    }

    tx.r = bytes_1.hexZeroPad(transaction[7], 32);
    tx.s = bytes_1.hexZeroPad(transaction[8], 32);

    if (bignumber_1.BigNumber.from(tx.r).isZero() && bignumber_1.BigNumber.from(tx.s).isZero()) {
      tx.chainId = tx.v;
      tx.v = 0;
    } else {
      tx.chainId = Math.floor((tx.v - 35) / 2);

      if (tx.chainId < 0) {
        tx.chainId = 0;
      }

      var recoveryParam = tx.v - 27;
      var raw = transaction.slice(0, 6);

      if (tx.chainId !== 0) {
        raw.push(bytes_1.hexlify(tx.chainId));
        raw.push("0x");
        raw.push("0x");
        recoveryParam -= tx.chainId * 2 + 8;
      }

      var digest = keccak256_1.keccak256(RLP.encode(raw));

      try {
        tx.from = recoverAddress(digest, {
          r: bytes_1.hexlify(tx.r),
          s: bytes_1.hexlify(tx.s),
          recoveryParam: recoveryParam
        });
      } catch (error) {
        console.log(error);
      }

      tx.hash = keccak256_1.keccak256(rawTransaction);
    }

    return tx;
  }

  exports.parse = parse;
},133,[48,32,36,61,49,42,51,91,37,134]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "transactions/5.0.7";
},134,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var wordlist_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.logger = wordlist_1.logger;
  exports.Wordlist = wordlist_1.Wordlist;

  var wordlists_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.wordlists = wordlists_1.wordlists;
},135,[136,138]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var exportWordlist = false;

  var hash_1 = _$$_REQUIRE(_dependencyMap[0]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[2]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[3]);

  exports.logger = new logger_1.Logger(_version_1.version);

  var Wordlist = function () {
    function Wordlist(locale) {
      var _newTarget = this.constructor;
      exports.logger.checkAbstract(_newTarget, Wordlist);
      properties_1.defineReadOnly(this, "locale", locale);
    }

    Wordlist.prototype.split = function (mnemonic) {
      return mnemonic.toLowerCase().split(/ +/g);
    };

    Wordlist.prototype.join = function (words) {
      return words.join(" ");
    };

    Wordlist.check = function (wordlist) {
      var words = [];

      for (var i = 0; i < 2048; i++) {
        var word = wordlist.getWord(i);

        if (i !== wordlist.getWordIndex(word)) {
          return "0x";
        }

        words.push(word);
      }

      return hash_1.id(words.join("\n") + "\n");
    };

    Wordlist.register = function (lang, name) {
      if (!name) {
        name = lang.locale;
      }
    };

    return Wordlist;
  }();

  exports.Wordlist = Wordlist;
},136,[74,42,37,137]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "wordlists/5.0.6";
},137,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var lang_cz_1 = _$$_REQUIRE(_dependencyMap[0]);

  var lang_en_1 = _$$_REQUIRE(_dependencyMap[1]);

  var lang_es_1 = _$$_REQUIRE(_dependencyMap[2]);

  var lang_fr_1 = _$$_REQUIRE(_dependencyMap[3]);

  var lang_ja_1 = _$$_REQUIRE(_dependencyMap[4]);

  var lang_ko_1 = _$$_REQUIRE(_dependencyMap[5]);

  var lang_it_1 = _$$_REQUIRE(_dependencyMap[6]);

  var lang_zh_1 = _$$_REQUIRE(_dependencyMap[7]);

  exports.wordlists = {
    cz: lang_cz_1.langCz,
    en: lang_en_1.langEn,
    es: lang_es_1.langEs,
    fr: lang_fr_1.langFr,
    it: lang_it_1.langIt,
    ja: lang_ja_1.langJa,
    ko: lang_ko_1.langKo,
    zh: lang_zh_1.langZhCn,
    zh_cn: lang_zh_1.langZhCn,
    zh_tw: lang_zh_1.langZhTw
  };
},138,[139,140,141,142,143,144,145,146]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var wordlist_1 = _$$_REQUIRE(_dependencyMap[0]);

  var words = "AbdikaceAbecedaAdresaAgreseAkceAktovkaAlejAlkoholAmputaceAnanasAndulkaAnekdotaAnketaAntikaAnulovatArchaAroganceAsfaltAsistentAspiraceAstmaAstronomAtlasAtletikaAtolAutobusAzylBabkaBachorBacilBaculkaBadatelBagetaBagrBahnoBakterieBaladaBaletkaBalkonBalonekBalvanBalzaBambusBankomatBarbarBaretBarmanBarokoBarvaBaterkaBatohBavlnaBazalkaBazilikaBazukaBednaBeranBesedaBestieBetonBezinkaBezmocBeztakBicyklBidloBiftekBikinyBilanceBiografBiologBitvaBizonBlahobytBlatouchBlechaBleduleBleskBlikatBliznaBlokovatBlouditBludBobekBobrBodlinaBodnoutBohatostBojkotBojovatBokorysBolestBorecBoroviceBotaBoubelBouchatBoudaBouleBouratBoxerBradavkaBramboraBrankaBratrBreptaBriketaBrkoBrlohBronzBroskevBrunetkaBrusinkaBrzdaBrzyBublinaBubnovatBuchtaBuditelBudkaBudovaBufetBujarostBukviceBuldokBulvaBundaBunkrBurzaButikBuvolBuzolaBydletBylinaBytovkaBzukotCapartCarevnaCedrCeduleCejchCejnCelaCelerCelkemCelniceCeninaCennostCenovkaCentrumCenzorCestopisCetkaChalupaChapadloCharitaChataChechtatChemieChichotChirurgChladChlebaChlubitChmelChmuraChobotChocholChodbaCholeraChomoutChopitChorobaChovChrapotChrlitChrtChrupChtivostChudinaChutnatChvatChvilkaChvostChybaChystatChytitCibuleCigaretaCihelnaCihlaCinkotCirkusCisternaCitaceCitrusCizinecCizostClonaCokolivCouvatCtitelCtnostCudnostCuketaCukrCupotCvaknoutCvalCvikCvrkotCyklistaDalekoDarebaDatelDatumDceraDebataDechovkaDecibelDeficitDeflaceDeklDekretDemokratDepreseDerbyDeskaDetektivDikobrazDiktovatDiodaDiplomDiskDisplejDivadloDivochDlahaDlouhoDluhopisDnesDobroDobytekDocentDochutitDodnesDohledDohodaDohraDojemDojniceDokladDokolaDoktorDokumentDolarDolevaDolinaDomaDominantDomluvitDomovDonutitDopadDopisDoplnitDoposudDoprovodDopustitDorazitDorostDortDosahDoslovDostatekDosudDosytaDotazDotekDotknoutDoufatDoutnatDovozceDozaduDoznatDozorceDrahotaDrakDramatikDravecDrazeDrdolDrobnostDrogerieDrozdDrsnostDrtitDrzostDubenDuchovnoDudekDuhaDuhovkaDusitDusnoDutostDvojiceDvorecDynamitEkologEkonomieElektronElipsaEmailEmiseEmoceEmpatieEpizodaEpochaEpopejEposEsejEsenceEskortaEskymoEtiketaEuforieEvoluceExekuceExkurzeExpediceExplozeExportExtraktFackaFajfkaFakultaFanatikFantazieFarmacieFavoritFazoleFederaceFejetonFenkaFialkaFigurantFilozofFiltrFinanceFintaFixaceFjordFlanelFlirtFlotilaFondFosforFotbalFotkaFotonFrakceFreskaFrontaFukarFunkceFyzikaGalejeGarantGenetikaGeologGilotinaGlazuraGlejtGolemGolfistaGotikaGrafGramofonGranuleGrepGrilGrogGroteskaGumaHadiceHadrHalaHalenkaHanbaHanopisHarfaHarpunaHavranHebkostHejkalHejnoHejtmanHektarHelmaHematomHerecHernaHesloHezkyHistorikHladovkaHlasivkyHlavaHledatHlenHlodavecHlohHloupostHltatHlubinaHluchotaHmatHmotaHmyzHnisHnojivoHnoutHoblinaHobojHochHodinyHodlatHodnotaHodovatHojnostHokejHolinkaHolkaHolubHomoleHonitbaHonoraceHoralHordaHorizontHorkoHorlivecHormonHorninaHoroskopHorstvoHospodaHostinaHotovostHoubaHoufHoupatHouskaHovorHradbaHraniceHravostHrazdaHrbolekHrdinaHrdloHrdostHrnekHrobkaHromadaHrotHroudaHrozenHrstkaHrubostHryzatHubenostHubnoutHudbaHukotHumrHusitaHustotaHvozdHybnostHydrantHygienaHymnaHysterikIdylkaIhnedIkonaIluzeImunitaInfekceInflaceInkasoInovaceInspekceInternetInvalidaInvestorInzerceIronieJablkoJachtaJahodaJakmileJakostJalovecJantarJarmarkJaroJasanJasnoJatkaJavorJazykJedinecJedleJednatelJehlanJekotJelenJelitoJemnostJenomJepiceJeseterJevitJezdecJezeroJinakJindyJinochJiskraJistotaJitrniceJizvaJmenovatJogurtJurtaKabaretKabelKabinetKachnaKadetKadidloKahanKajakKajutaKakaoKaktusKalamitaKalhotyKalibrKalnostKameraKamkolivKamnaKanibalKanoeKantorKapalinaKapelaKapitolaKapkaKapleKapotaKaprKapustaKapybaraKaramelKarotkaKartonKasaKatalogKatedraKauceKauzaKavalecKazajkaKazetaKazivostKdekolivKdesiKedlubenKempKeramikaKinoKlacekKladivoKlamKlapotKlasikaKlaunKlecKlenbaKlepatKlesnoutKlidKlimaKlisnaKloboukKlokanKlopaKloubKlubovnaKlusatKluzkostKmenKmitatKmotrKnihaKnotKoaliceKoberecKobkaKoblihaKobylaKocourKohoutKojenecKokosKoktejlKolapsKoledaKolizeKoloKomandoKometaKomikKomnataKomoraKompasKomunitaKonatKonceptKondiceKonecKonfeseKongresKoninaKonkursKontaktKonzervaKopanecKopieKopnoutKoprovkaKorbelKorektorKormidloKoroptevKorpusKorunaKorytoKorzetKosatecKostkaKotelKotletaKotoulKoukatKoupelnaKousekKouzloKovbojKozaKozorohKrabiceKrachKrajinaKralovatKrasopisKravataKreditKrejcarKresbaKrevetaKriketKritikKrizeKrkavecKrmelecKrmivoKrocanKrokKronikaKropitKroupaKrovkaKrtekKruhadloKrupiceKrutostKrvinkaKrychleKryptaKrystalKrytKudlankaKufrKujnostKuklaKulajdaKulichKulkaKulometKulturaKunaKupodivuKurtKurzorKutilKvalitaKvasinkaKvestorKynologKyselinaKytaraKyticeKytkaKytovecKyvadloLabradorLachtanLadnostLaikLakomecLamelaLampaLanovkaLasiceLasoLasturaLatinkaLavinaLebkaLeckdyLedenLedniceLedovkaLedvinaLegendaLegieLegraceLehceLehkostLehnoutLektvarLenochodLentilkaLepenkaLepidloLetadloLetecLetmoLetokruhLevhartLevitaceLevobokLibraLichotkaLidojedLidskostLihovinaLijavecLilekLimetkaLinieLinkaLinoleumListopadLitinaLitovatLobistaLodivodLogikaLogopedLokalitaLoketLomcovatLopataLopuchLordLososLotrLoudalLouhLoukaLouskatLovecLstivostLucernaLuciferLumpLuskLustraceLviceLyraLyrikaLysinaMadamMadloMagistrMahagonMajetekMajitelMajoritaMakakMakoviceMakrelaMalbaMalinaMalovatMalviceMaminkaMandleMankoMarnostMasakrMaskotMasopustMaticeMatrikaMaturitaMazanecMazivoMazlitMazurkaMdlobaMechanikMeditaceMedovinaMelasaMelounMentolkaMetlaMetodaMetrMezeraMigraceMihnoutMihuleMikinaMikrofonMilenecMilimetrMilostMimikaMincovnaMinibarMinometMinulostMiskaMistrMixovatMladostMlhaMlhovinaMlokMlsatMluvitMnichMnohemMobilMocnostModelkaModlitbaMohylaMokroMolekulaMomentkaMonarchaMonoklMonstrumMontovatMonzunMosazMoskytMostMotivaceMotorkaMotykaMouchaMoudrostMozaikaMozekMozolMramorMravenecMrkevMrtvolaMrzetMrzutostMstitelMudrcMuflonMulatMumieMuniceMusetMutaceMuzeumMuzikantMyslivecMzdaNabouratNachytatNadaceNadbytekNadhozNadobroNadpisNahlasNahnatNahodileNahraditNaivitaNajednouNajistoNajmoutNaklonitNakonecNakrmitNalevoNamazatNamluvitNanometrNaokoNaopakNaostroNapadatNapevnoNaplnitNapnoutNaposledNaprostoNaroditNarubyNarychloNasaditNasekatNaslepoNastatNatolikNavenekNavrchNavzdoryNazvatNebeNechatNeckyNedalekoNedbatNeduhNegaceNehetNehodaNejenNejprveNeklidNelibostNemilostNemocNeochotaNeonkaNepokojNerostNervNesmyslNesouladNetvorNeuronNevinaNezvykleNicotaNijakNikamNikdyNiklNikterakNitroNoclehNohaviceNominaceNoraNorekNositelNosnostNouzeNovinyNovotaNozdraNudaNudleNugetNutitNutnostNutrieNymfaObalObarvitObavaObdivObecObehnatObejmoutObezitaObhajobaObilniceObjasnitObjektObklopitOblastOblekOblibaOblohaObludaObnosObohatitObojekOboutObrazecObrnaObrubaObrysObsahObsluhaObstaratObuvObvazObvinitObvodObvykleObyvatelObzorOcasOcelOcenitOchladitOchotaOchranaOcitnoutOdbojOdbytOdchodOdcizitOdebratOdeslatOdevzdatOdezvaOdhadceOdhoditOdjetOdjinudOdkazOdkoupitOdlivOdlukaOdmlkaOdolnostOdpadOdpisOdploutOdporOdpustitOdpykatOdrazkaOdsouditOdstupOdsunOdtokOdtudOdvahaOdvetaOdvolatOdvracetOdznakOfinaOfsajdOhlasOhniskoOhradaOhrozitOhryzekOkapOkeniceOklikaOknoOkouzlitOkovyOkrasaOkresOkrsekOkruhOkupantOkurkaOkusitOlejninaOlizovatOmakOmeletaOmezitOmladinaOmlouvatOmluvaOmylOnehdyOpakovatOpasekOperaceOpiceOpilostOpisovatOporaOpoziceOpravduOprotiOrbitalOrchestrOrgieOrliceOrlojOrtelOsadaOschnoutOsikaOsivoOslavaOslepitOslnitOslovitOsnovaOsobaOsolitOspalecOstenOstrahaOstudaOstychOsvojitOteplitOtiskOtopOtrhatOtrlostOtrokOtrubyOtvorOvanoutOvarOvesOvlivnitOvoceOxidOzdobaPachatelPacientPadouchPahorekPaktPalandaPalecPalivoPalubaPamfletPamlsekPanenkaPanikaPannaPanovatPanstvoPantoflePaprikaParketaParodiePartaParukaParybaPasekaPasivitaPastelkaPatentPatronaPavoukPaznehtPazourekPeckaPedagogPejsekPekloPelotonPenaltaPendrekPenzePeriskopPeroPestrostPetardaPeticePetrolejPevninaPexesoPianistaPihaPijavicePiklePiknikPilinaPilnostPilulkaPinzetaPipetaPisatelPistolePitevnaPivnicePivovarPlacentaPlakatPlamenPlanetaPlastikaPlatitPlavidloPlazPlechPlemenoPlentaPlesPletivoPlevelPlivatPlnitPlnoPlochaPlodinaPlombaPloutPlukPlynPobavitPobytPochodPocitPoctivecPodatPodcenitPodepsatPodhledPodivitPodkladPodmanitPodnikPodobaPodporaPodrazPodstataPodvodPodzimPoeziePohankaPohnutkaPohovorPohromaPohybPointaPojistkaPojmoutPokazitPoklesPokojPokrokPokutaPokynPolednePolibekPolknoutPolohaPolynomPomaluPominoutPomlkaPomocPomstaPomysletPonechatPonorkaPonurostPopadatPopelPopisekPoplachPoprositPopsatPopudPoradcePorcePorodPoruchaPoryvPosaditPosedPosilaPoskokPoslanecPosouditPospoluPostavaPosudekPosypPotahPotkanPotleskPotomekPotravaPotupaPotvoraPoukazPoutoPouzdroPovahaPovidlaPovlakPovozPovrchPovstatPovykPovzdechPozdravPozemekPoznatekPozorPozvatPracovatPrahoryPraktikaPralesPraotecPraporekPrasePravdaPrincipPrknoProbuditProcentoProdejProfeseProhraProjektProlomitPromilePronikatPropadProrokProsbaProtonProutekProvazPrskavkaPrstenPrudkostPrutPrvekPrvohoryPsanecPsovodPstruhPtactvoPubertaPuchPudlPukavecPuklinaPukrlePultPumpaPuncPupenPusaPusinkaPustinaPutovatPutykaPyramidaPyskPytelRacekRachotRadiaceRadniceRadonRaftRagbyRaketaRakovinaRamenoRampouchRandeRarachRaritaRasovnaRastrRatolestRazanceRazidloReagovatReakceReceptRedaktorReferentReflexRejnokReklamaRekordRekrutRektorReputaceRevizeRevmaRevolverRezervaRiskovatRizikoRobotikaRodokmenRohovkaRokleRokokoRomanetoRopovodRopuchaRorejsRosolRostlinaRotmistrRotopedRotundaRoubenkaRouchoRoupRouraRovinaRovniceRozborRozchodRozdatRozeznatRozhodceRozinkaRozjezdRozkazRozlohaRozmarRozpadRozruchRozsahRoztokRozumRozvodRubrikaRuchadloRukaviceRukopisRybaRybolovRychlostRydloRypadloRytinaRyzostSadistaSahatSakoSamecSamizdatSamotaSanitkaSardinkaSasankaSatelitSazbaSazeniceSborSchovatSebrankaSeceseSedadloSedimentSedloSehnatSejmoutSekeraSektaSekundaSekvojeSemenoSenoServisSesaditSeshoraSeskokSeslatSestraSesuvSesypatSetbaSetinaSetkatSetnoutSetrvatSeverSeznamShodaShrnoutSifonSilniceSirkaSirotekSirupSituaceSkafandrSkaliskoSkanzenSkautSkeptikSkicaSkladbaSkleniceSkloSkluzSkobaSkokanSkoroSkriptaSkrzSkupinaSkvostSkvrnaSlabikaSladidloSlaninaSlastSlavnostSledovatSlepecSlevaSlezinaSlibSlinaSlizniceSlonSloupekSlovoSluchSluhaSlunceSlupkaSlzaSmaragdSmetanaSmilstvoSmlouvaSmogSmradSmrkSmrtkaSmutekSmyslSnadSnahaSnobSobotaSochaSodovkaSokolSopkaSotvaSoubojSoucitSoudceSouhlasSouladSoumrakSoupravaSousedSoutokSouvisetSpalovnaSpasitelSpisSplavSpodekSpojenecSpoluSponzorSpornostSpoustaSprchaSpustitSrandaSrazSrdceSrnaSrnecSrovnatSrpenSrstSrubStaniceStarostaStatikaStavbaStehnoStezkaStodolaStolekStopaStornoStoupatStrachStresStrhnoutStromStrunaStudnaStupniceStvolStykSubjektSubtropySucharSudostSuknoSundatSunoutSurikataSurovinaSvahSvalstvoSvetrSvatbaSvazekSvisleSvitekSvobodaSvodidloSvorkaSvrabSykavkaSykotSynekSynovecSypatSypkostSyrovostSyselSytostTabletkaTabuleTahounTajemnoTajfunTajgaTajitTajnostTaktikaTamhleTamponTancovatTanecTankerTapetaTaveninaTazatelTechnikaTehdyTekutinaTelefonTemnotaTendenceTenistaTenorTeplotaTepnaTeprveTerapieTermoskaTextilTichoTiskopisTitulekTkadlecTkaninaTlapkaTleskatTlukotTlupaTmelToaletaTopinkaTopolTorzoTouhaToulecTradiceTraktorTrampTrasaTraverzaTrefitTrestTrezorTrhavinaTrhlinaTrochuTrojiceTroskaTroubaTrpceTrpitelTrpkostTrubecTruchlitTruhliceTrusTrvatTudyTuhnoutTuhostTundraTuristaTurnajTuzemskoTvarohTvorbaTvrdostTvrzTygrTykevUbohostUbozeUbratUbrousekUbrusUbytovnaUchoUctivostUdivitUhraditUjednatUjistitUjmoutUkazatelUklidnitUklonitUkotvitUkrojitUliceUlitaUlovitUmyvadloUnavitUniformaUniknoutUpadnoutUplatnitUplynoutUpoutatUpravitUranUrazitUsednoutUsilovatUsmrtitUsnadnitUsnoutUsouditUstlatUstrnoutUtahovatUtkatUtlumitUtonoutUtopenecUtrousitUvalitUvolnitUvozovkaUzdravitUzelUzeninaUzlinaUznatVagonValchaValounVanaVandalVanilkaVaranVarhanyVarovatVcelkuVchodVdovaVedroVegetaceVejceVelbloudVeletrhVelitelVelmocVelrybaVenkovVerandaVerzeVeselkaVeskrzeVesniceVespoduVestaVeterinaVeverkaVibraceVichrVideohraVidinaVidleVilaViniceVisetVitalitaVizeVizitkaVjezdVkladVkusVlajkaVlakVlasecVlevoVlhkostVlivVlnovkaVloupatVnucovatVnukVodaVodivostVodoznakVodstvoVojenskyVojnaVojskoVolantVolbaVolitVolnoVoskovkaVozidloVozovnaVpravoVrabecVracetVrahVrataVrbaVrcholekVrhatVrstvaVrtuleVsaditVstoupitVstupVtipVybavitVybratVychovatVydatVydraVyfotitVyhledatVyhnoutVyhoditVyhraditVyhubitVyjasnitVyjetVyjmoutVyklopitVykonatVylekatVymazatVymezitVymizetVymysletVynechatVynikatVynutitVypadatVyplatitVypravitVypustitVyrazitVyrovnatVyrvatVyslovitVysokoVystavitVysunoutVysypatVytasitVytesatVytratitVyvinoutVyvolatVyvrhelVyzdobitVyznatVzaduVzbuditVzchopitVzdorVzduchVzdychatVzestupVzhledemVzkazVzlykatVznikVzorekVzpouraVztahVztekXylofonZabratZabydletZachovatZadarmoZadusitZafoukatZahltitZahoditZahradaZahynoutZajatecZajetZajistitZaklepatZakoupitZalepitZamezitZamotatZamysletZanechatZanikatZaplatitZapojitZapsatZarazitZastavitZasunoutZatajitZatemnitZatknoutZaujmoutZavalitZaveletZavinitZavolatZavrtatZazvonitZbavitZbrusuZbudovatZbytekZdalekaZdarmaZdatnostZdivoZdobitZdrojZdvihZdymadloZeleninaZemanZeminaZeptatZezaduZezdolaZhatitZhltnoutZhlubokaZhotovitZhrubaZimaZimniceZjemnitZklamatZkoumatZkratkaZkumavkaZlatoZlehkaZlobaZlomZlostZlozvykZmapovatZmarZmatekZmijeZmizetZmocnitZmodratZmrzlinaZmutovatZnakZnalostZnamenatZnovuZobrazitZotavitZoubekZoufaleZploditZpomalitZpravaZprostitZprudkaZprvuZradaZranitZrcadloZrnitostZrnoZrovnaZrychlitZrzavostZtichaZtratitZubovinaZubrZvednoutZvenkuZveselaZvonZvratZvukovodZvyk";
  var wordlist = null;

  function loadWords(lang) {
    if (wordlist != null) {
      return;
    }

    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");

    if (wordlist_1.Wordlist.check(lang) !== "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a") {
      wordlist = null;
      throw new Error("BIP39 Wordlist for en (English) FAILED");
    }
  }

  var LangCz = function (_super) {
    __extends(LangCz, _super);

    function LangCz() {
      return _super.call(this, "cz") || this;
    }

    LangCz.prototype.getWord = function (index) {
      loadWords(this);
      return wordlist[index];
    };

    LangCz.prototype.getWordIndex = function (word) {
      loadWords(this);
      return wordlist.indexOf(word);
    };

    return LangCz;
  }(wordlist_1.Wordlist);

  var langCz = new LangCz();
  exports.langCz = langCz;
  wordlist_1.Wordlist.register(langCz);
},139,[136]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var wordlist_1 = _$$_REQUIRE(_dependencyMap[0]);

  var words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsoIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargerLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPPlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
  var wordlist = null;

  function loadWords(lang) {
    if (wordlist != null) {
      return;
    }

    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");

    if (wordlist_1.Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
      wordlist = null;
      throw new Error("BIP39 Wordlist for en (English) FAILED");
    }
  }

  var LangEn = function (_super) {
    __extends(LangEn, _super);

    function LangEn() {
      return _super.call(this, "en") || this;
    }

    LangEn.prototype.getWord = function (index) {
      loadWords(this);
      return wordlist[index];
    };

    LangEn.prototype.getWordIndex = function (word) {
      loadWords(this);
      return wordlist.indexOf(word);
    };

    return LangEn;
  }(wordlist_1.Wordlist);

  var langEn = new LangEn();
  exports.langEn = langEn;
  wordlist_1.Wordlist.register(langEn);
},140,[136]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var strings_1 = _$$_REQUIRE(_dependencyMap[0]);

  var wordlist_1 = _$$_REQUIRE(_dependencyMap[1]);

  var words = "A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTec/cnicaTejadoTejerTejidoTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo";
  var lookup = {};
  var wordlist = null;

  function dropDiacritic(word) {
    wordlist_1.logger.checkNormalize();
    return strings_1.toUtf8String(Array.prototype.filter.call(strings_1.toUtf8Bytes(word.normalize("NFD").toLowerCase()), function (c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 123;
    }));
  }

  function expand(word) {
    var output = [];
    Array.prototype.forEach.call(strings_1.toUtf8Bytes(word), function (c) {
      if (c === 47) {
        output.push(204);
        output.push(129);
      } else if (c === 126) {
        output.push(110);
        output.push(204);
        output.push(131);
      } else {
        output.push(c);
      }
    });
    return strings_1.toUtf8String(output);
  }

  function loadWords(lang) {
    if (wordlist != null) {
      return;
    }

    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function (w) {
      return expand(w);
    });
    wordlist.forEach(function (word, index) {
      lookup[dropDiacritic(word)] = index;
    });

    if (wordlist_1.Wordlist.check(lang) !== "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300") {
      wordlist = null;
      throw new Error("BIP39 Wordlist for es (Spanish) FAILED");
    }
  }

  var LangEs = function (_super) {
    __extends(LangEs, _super);

    function LangEs() {
      return _super.call(this, "es") || this;
    }

    LangEs.prototype.getWord = function (index) {
      loadWords(this);
      return wordlist[index];
    };

    LangEs.prototype.getWordIndex = function (word) {
      loadWords(this);
      return lookup[dropDiacritic(word)];
    };

    return LangEs;
  }(wordlist_1.Wordlist);

  var langEs = new LangEs();
  exports.langEs = langEs;
  wordlist_1.Wordlist.register(langEs);
},141,[67,136]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var strings_1 = _$$_REQUIRE(_dependencyMap[0]);

  var wordlist_1 = _$$_REQUIRE(_dependencyMap[1]);

  var words = "";
  var wordlist = null;
  var lookup = {};

  function dropDiacritic(word) {
    wordlist_1.logger.checkNormalize();
    return strings_1.toUtf8String(Array.prototype.filter.call(strings_1.toUtf8Bytes(word.normalize("NFD").toLowerCase()), function (c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 123;
    }));
  }

  function expand(word) {
    var output = [];
    Array.prototype.forEach.call(strings_1.toUtf8Bytes(word), function (c) {
      if (c === 47) {
        output.push(204);
        output.push(129);
      } else if (c === 45) {
        output.push(204);
        output.push(128);
      } else {
        output.push(c);
      }
    });
    return strings_1.toUtf8String(output);
  }

  function loadWords(lang) {
    if (wordlist != null) {
      return;
    }

    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map(function (w) {
      return expand(w);
    });
    wordlist.forEach(function (word, index) {
      lookup[dropDiacritic(word)] = index;
    });

    if (wordlist_1.Wordlist.check(lang) !== "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045") {
      wordlist = null;
      throw new Error("BIP39 Wordlist for fr (French) FAILED");
    }
  }

  var LangFr = function (_super) {
    __extends(LangFr, _super);

    function LangFr() {
      return _super.call(this, "fr") || this;
    }

    LangFr.prototype.getWord = function (index) {
      loadWords(this);
      return wordlist[index];
    };

    LangFr.prototype.getWordIndex = function (word) {
      loadWords(this);
      return lookup[dropDiacritic(word)];
    };

    return LangFr;
  }(wordlist_1.Wordlist);

  var langFr = new LangFr();
  exports.langFr = langFr;
  wordlist_1.Wordlist.register(langFr);
},142,[67,136]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[1]);

  var wordlist_1 = _$$_REQUIRE(_dependencyMap[2]);

  var data = ["AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR", "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR", "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm", "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC", "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD", "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD", "IJBEJqXZJ"];
  var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
  var wordlist = null;

  function hex(word) {
    return bytes_1.hexlify(strings_1.toUtf8Bytes(word));
  }

  var KiYoKu = "0xe3818de38284e3818f";
  var KyoKu = "0xe3818de38283e3818f";

  function loadWords(lang) {
    if (wordlist !== null) {
      return;
    }

    wordlist = [];
    var transform = {};
    transform[strings_1.toUtf8String([227, 130, 154])] = false;
    transform[strings_1.toUtf8String([227, 130, 153])] = false;
    transform[strings_1.toUtf8String([227, 130, 133])] = strings_1.toUtf8String([227, 130, 134]);
    transform[strings_1.toUtf8String([227, 129, 163])] = strings_1.toUtf8String([227, 129, 164]);
    transform[strings_1.toUtf8String([227, 130, 131])] = strings_1.toUtf8String([227, 130, 132]);
    transform[strings_1.toUtf8String([227, 130, 135])] = strings_1.toUtf8String([227, 130, 136]);

    function normalize(word) {
      var result = "";

      for (var i = 0; i < word.length; i++) {
        var kana = word[i];
        var target = transform[kana];

        if (target === false) {
          continue;
        }

        if (target) {
          kana = target;
        }

        result += kana;
      }

      return result;
    }

    function sortJapanese(a, b) {
      a = normalize(a);
      b = normalize(b);

      if (a < b) {
        return -1;
      }

      if (a > b) {
        return 1;
      }

      return 0;
    }

    for (var length_1 = 3; length_1 <= 9; length_1++) {
      var d = data[length_1 - 3];

      for (var offset = 0; offset < d.length; offset += length_1) {
        var word = [];

        for (var i = 0; i < length_1; i++) {
          var k = mapping.indexOf(d[offset + i]);
          word.push(227);
          word.push(k & 0x40 ? 130 : 129);
          word.push((k & 0x3f) + 128);
        }

        wordlist.push(strings_1.toUtf8String(word));
      }
    }

    wordlist.sort(sortJapanese);

    if (hex(wordlist[442]) === KiYoKu && hex(wordlist[443]) === KyoKu) {
      var tmp = wordlist[442];
      wordlist[442] = wordlist[443];
      wordlist[443] = tmp;
    }

    if (wordlist_1.Wordlist.check(lang) !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
      wordlist = null;
      throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
    }
  }

  var LangJa = function (_super) {
    __extends(LangJa, _super);

    function LangJa() {
      return _super.call(this, "ja") || this;
    }

    LangJa.prototype.getWord = function (index) {
      loadWords(this);
      return wordlist[index];
    };

    LangJa.prototype.getWordIndex = function (word) {
      loadWords(this);
      return wordlist.indexOf(word);
    };

    LangJa.prototype.split = function (mnemonic) {
      wordlist_1.logger.checkNormalize();
      return mnemonic.split(/(?:\u3000| )+/g);
    };

    LangJa.prototype.join = function (words) {
      return words.join("\u3000");
    };

    return LangJa;
  }(wordlist_1.Wordlist);

  var langJa = new LangJa();
  exports.langJa = langJa;
  wordlist_1.Wordlist.register(langJa);
},143,[36,67,136]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var strings_1 = _$$_REQUIRE(_dependencyMap[0]);

  var wordlist_1 = _$$_REQUIRE(_dependencyMap[1]);

  var data = ["OYAa", "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8", "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6", "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv", "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo", "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg", "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb", "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"];
  var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";

  function getHangul(code) {
    if (code >= 40) {
      code = code + 168 - 40;
    } else if (code >= 19) {
      code = code + 97 - 19;
    }

    return strings_1.toUtf8String([225, (code >> 6) + 132, (code & 0x3f) + 128]);
  }

  var wordlist = null;

  function loadWords(lang) {
    if (wordlist != null) {
      return;
    }

    wordlist = [];
    data.forEach(function (data, length) {
      length += 4;

      for (var i = 0; i < data.length; i += length) {
        var word = "";

        for (var j = 0; j < length; j++) {
          word += getHangul(codes.indexOf(data[i + j]));
        }

        wordlist.push(word);
      }
    });
    wordlist.sort();

    if (wordlist_1.Wordlist.check(lang) !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
      wordlist = null;
      throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
    }
  }

  var LangKo = function (_super) {
    __extends(LangKo, _super);

    function LangKo() {
      return _super.call(this, "ko") || this;
    }

    LangKo.prototype.getWord = function (index) {
      loadWords(this);
      return wordlist[index];
    };

    LangKo.prototype.getWordIndex = function (word) {
      loadWords(this);
      return wordlist.indexOf(word);
    };

    return LangKo;
  }(wordlist_1.Wordlist);

  var langKo = new LangKo();
  exports.langKo = langKo;
  wordlist_1.Wordlist.register(langKo);
},144,[67,136]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var wordlist_1 = _$$_REQUIRE(_dependencyMap[0]);

  var words = "AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGaoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastranzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa";
  var wordlist = null;

  function loadWords(lang) {
    if (wordlist != null) {
      return;
    }

    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");

    if (wordlist_1.Wordlist.check(lang) !== "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620") {
      wordlist = null;
      throw new Error("BIP39 Wordlist for it (Italian) FAILED");
    }
  }

  var LangIt = function (_super) {
    __extends(LangIt, _super);

    function LangIt() {
      return _super.call(this, "it") || this;
    }

    LangIt.prototype.getWord = function (index) {
      loadWords(this);
      return wordlist[index];
    };

    LangIt.prototype.getWordIndex = function (word) {
      loadWords(this);
      return wordlist.indexOf(word);
    };

    return LangIt;
  }(wordlist_1.Wordlist);

  var langIt = new LangIt();
  exports.langIt = langIt;
  wordlist_1.Wordlist.register(langIt);
},145,[136]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var strings_1 = _$$_REQUIRE(_dependencyMap[0]);

  var wordlist_1 = _$$_REQUIRE(_dependencyMap[1]);

  var data = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
  var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
  var wordlist = {
    zh_cn: null,
    zh_tw: null
  };
  var Checks = {
    zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1",
    zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d"
  };
  var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";

  function loadWords(lang) {
    if (wordlist[lang.locale] !== null) {
      return;
    }

    wordlist[lang.locale] = [];
    var deltaOffset = 0;

    for (var i = 0; i < 2048; i++) {
      var s = style.indexOf(data[i * 3]);
      var bytes = [228 + (s >> 2), 128 + codes.indexOf(data[i * 3 + 1]), 128 + codes.indexOf(data[i * 3 + 2])];

      if (lang.locale === "zh_tw") {
        var common = s % 4;

        for (var i_1 = common; i_1 < 3; i_1++) {
          bytes[i_1] = codes.indexOf(deltaData[deltaOffset++]) + (i_1 == 0 ? 228 : 128);
        }
      }

      wordlist[lang.locale].push(strings_1.toUtf8String(bytes));
    }

    if (wordlist_1.Wordlist.check(lang) !== Checks[lang.locale]) {
      wordlist[lang.locale] = null;
      throw new Error("BIP39 Wordlist for " + lang.locale + " (Chinese) FAILED");
    }
  }

  var LangZh = function (_super) {
    __extends(LangZh, _super);

    function LangZh(country) {
      return _super.call(this, "zh_" + country) || this;
    }

    LangZh.prototype.getWord = function (index) {
      loadWords(this);
      return wordlist[this.locale][index];
    };

    LangZh.prototype.getWordIndex = function (word) {
      loadWords(this);
      return wordlist[this.locale].indexOf(word);
    };

    LangZh.prototype.split = function (mnemonic) {
      mnemonic = mnemonic.replace(/(?:\u3000| )+/g, "");
      return mnemonic.split("");
    };

    return LangZh;
  }(wordlist_1.Wordlist);

  var langZhCn = new LangZh("cn");
  exports.langZhCn = langZhCn;
  wordlist_1.Wordlist.register(langZhCn);
  wordlist_1.Wordlist.register(langZhCn, "zh");
  var langZhTw = new LangZh("tw");
  exports.langZhTw = langZhTw;
  wordlist_1.Wordlist.register(langZhTw);
},146,[67,136]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "hdnode/5.0.6";
},147,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var random_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.randomBytes = random_1.randomBytes;

  var shuffle_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.shuffled = shuffle_1.shuffled;
},148,[149,150]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var crypto_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  function randomBytes(length) {
    return bytes_1.arrayify(crypto_1.randomBytes(length));
  }

  exports.randomBytes = randomBytes;
},149,[90,36]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function shuffled(array) {
    array = array.slice();

    for (var i = array.length - 1; i > 0; i--) {
      var j = Math.floor(Math.random() * (i + 1));
      var tmp = array[i];
      array[i] = array[j];
      array[j] = tmp;
    }

    return array;
  }

  exports.shuffled = shuffled;
},150,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var crowdsale_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.decryptCrowdsale = crowdsale_1.decrypt;

  var inspect_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.getJsonWalletAddress = inspect_1.getJsonWalletAddress;
  exports.isCrowdsaleWallet = inspect_1.isCrowdsaleWallet;
  exports.isKeystoreWallet = inspect_1.isKeystoreWallet;

  var keystore_1 = _$$_REQUIRE(_dependencyMap[2]);

  exports.decryptKeystore = keystore_1.decrypt;
  exports.decryptKeystoreSync = keystore_1.decryptSync;
  exports.encryptKeystore = keystore_1.encrypt;

  function decryptJsonWallet(json, password, progressCallback) {
    if (inspect_1.isCrowdsaleWallet(json)) {
      if (progressCallback) {
        progressCallback(0);
      }

      var account = crowdsale_1.decrypt(json, password);

      if (progressCallback) {
        progressCallback(1);
      }

      return Promise.resolve(account);
    }

    if (inspect_1.isKeystoreWallet(json)) {
      return keystore_1.decrypt(json, password, progressCallback);
    }

    return Promise.reject(new Error("invalid JSON wallet"));
  }

  exports.decryptJsonWallet = decryptJsonWallet;

  function decryptJsonWalletSync(json, password) {
    if (inspect_1.isCrowdsaleWallet(json)) {
      return crowdsale_1.decrypt(json, password);
    }

    if (inspect_1.isKeystoreWallet(json)) {
      return keystore_1.decryptSync(json, password);
    }

    throw new Error("invalid JSON wallet");
  }

  exports.decryptJsonWalletSync = decryptJsonWalletSync;
},151,[152,156,157]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __importDefault = this && this.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var aes_js_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0]));

  var address_1 = _$$_REQUIRE(_dependencyMap[1]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[2]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[3]);

  var pbkdf2_1 = _$$_REQUIRE(_dependencyMap[4]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[5]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[6]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[7]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[8]);

  var logger = new logger_1.Logger(_version_1.version);

  var utils_1 = _$$_REQUIRE(_dependencyMap[9]);

  var CrowdsaleAccount = function (_super) {
    __extends(CrowdsaleAccount, _super);

    function CrowdsaleAccount() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    CrowdsaleAccount.prototype.isCrowdsaleAccount = function (value) {
      return !!(value && value._isCrowdsaleAccount);
    };

    return CrowdsaleAccount;
  }(properties_1.Description);

  exports.CrowdsaleAccount = CrowdsaleAccount;

  function decrypt(json, password) {
    var data = JSON.parse(json);
    password = utils_1.getPassword(password);
    var ethaddr = address_1.getAddress(utils_1.searchPath(data, "ethaddr"));
    var encseed = utils_1.looseArrayify(utils_1.searchPath(data, "encseed"));

    if (!encseed || encseed.length % 16 !== 0) {
      logger.throwArgumentError("invalid encseed", "json", json);
    }

    var key = bytes_1.arrayify(pbkdf2_1.pbkdf2(password, password, 2000, 32, "sha256")).slice(0, 16);
    var iv = encseed.slice(0, 16);
    var encryptedSeed = encseed.slice(16);
    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);
    var seed = aes_js_1.default.padding.pkcs7.strip(bytes_1.arrayify(aesCbc.decrypt(encryptedSeed)));
    var seedHex = "";

    for (var i = 0; i < seed.length; i++) {
      seedHex += String.fromCharCode(seed[i]);
    }

    var seedHexBytes = strings_1.toUtf8Bytes(seedHex);
    var privateKey = keccak256_1.keccak256(seedHexBytes);
    return new CrowdsaleAccount({
      _isCrowdsaleAccount: true,
      address: ethaddr,
      privateKey: privateKey
    });
  }

  exports.decrypt = decrypt;
},152,[153,48,36,49,88,67,42,37,154,155]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  (function (root) {
    function checkInt(value) {
      return parseInt(value) === value;
    }

    function checkInts(arrayish) {
      if (!checkInt(arrayish.length)) {
        return false;
      }

      for (var i = 0; i < arrayish.length; i++) {
        if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
          return false;
        }
      }

      return true;
    }

    function coerceArray(arg, copy) {
      if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {
        if (copy) {
          if (arg.slice) {
            arg = arg.slice();
          } else {
            arg = Array.prototype.slice.call(arg);
          }
        }

        return arg;
      }

      if (Array.isArray(arg)) {
        if (!checkInts(arg)) {
          throw new Error('Array contains invalid value: ' + arg);
        }

        return new Uint8Array(arg);
      }

      if (checkInt(arg.length) && checkInts(arg)) {
        return new Uint8Array(arg);
      }

      throw new Error('unsupported array-like object');
    }

    function createArray(length) {
      return new Uint8Array(length);
    }

    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
      if (sourceStart != null || sourceEnd != null) {
        if (sourceArray.slice) {
          sourceArray = sourceArray.slice(sourceStart, sourceEnd);
        } else {
          sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
        }
      }

      targetArray.set(sourceArray, targetStart);
    }

    var convertUtf8 = function () {
      function toBytes(text) {
        var result = [],
            i = 0;
        text = encodeURI(text);

        while (i < text.length) {
          var c = text.charCodeAt(i++);

          if (c === 37) {
            result.push(parseInt(text.substr(i, 2), 16));
            i += 2;
          } else {
            result.push(c);
          }
        }

        return coerceArray(result);
      }

      function fromBytes(bytes) {
        var result = [],
            i = 0;

        while (i < bytes.length) {
          var c = bytes[i];

          if (c < 128) {
            result.push(String.fromCharCode(c));
            i++;
          } else if (c > 191 && c < 224) {
            result.push(String.fromCharCode((c & 0x1f) << 6 | bytes[i + 1] & 0x3f));
            i += 2;
          } else {
            result.push(String.fromCharCode((c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f));
            i += 3;
          }
        }

        return result.join('');
      }

      return {
        toBytes: toBytes,
        fromBytes: fromBytes
      };
    }();

    var convertHex = function () {
      function toBytes(text) {
        var result = [];

        for (var i = 0; i < text.length; i += 2) {
          result.push(parseInt(text.substr(i, 2), 16));
        }

        return result;
      }

      var Hex = '0123456789abcdef';

      function fromBytes(bytes) {
        var result = [];

        for (var i = 0; i < bytes.length; i++) {
          var v = bytes[i];
          result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
        }

        return result.join('');
      }

      return {
        toBytes: toBytes,
        fromBytes: fromBytes
      };
    }();

    var numberOfRounds = {
      16: 10,
      24: 12,
      32: 14
    };
    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];
    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    var Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];
    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];
    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];
    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    function convertToInt32(bytes) {
      var result = [];

      for (var i = 0; i < bytes.length; i += 4) {
        result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
      }

      return result;
    }

    var AES = function (key) {
      if (!(this instanceof AES)) {
        throw Error('AES must be instanitated with `new`');
      }

      Object.defineProperty(this, 'key', {
        value: coerceArray(key, true)
      });

      this._prepare();
    };

    AES.prototype._prepare = function () {
      var rounds = numberOfRounds[this.key.length];

      if (rounds == null) {
        throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
      }

      this._Ke = [];
      this._Kd = [];

      for (var i = 0; i <= rounds; i++) {
        this._Ke.push([0, 0, 0, 0]);

        this._Kd.push([0, 0, 0, 0]);
      }

      var roundKeyCount = (rounds + 1) * 4;
      var KC = this.key.length / 4;
      var tk = convertToInt32(this.key);
      var index;

      for (var i = 0; i < KC; i++) {
        index = i >> 2;
        this._Ke[index][i % 4] = tk[i];
        this._Kd[rounds - index][i % 4] = tk[i];
      }

      var rconpointer = 0;
      var t = KC,
          tt;

      while (t < roundKeyCount) {
        tt = tk[KC - 1];
        tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;
        rconpointer += 1;

        if (KC != 8) {
          for (var i = 1; i < KC; i++) {
            tk[i] ^= tk[i - 1];
          }
        } else {
          for (var i = 1; i < KC / 2; i++) {
            tk[i] ^= tk[i - 1];
          }

          tt = tk[KC / 2 - 1];
          tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;

          for (var i = KC / 2 + 1; i < KC; i++) {
            tk[i] ^= tk[i - 1];
          }
        }

        var i = 0,
            r,
            c;

        while (i < KC && t < roundKeyCount) {
          r = t >> 2;
          c = t % 4;
          this._Ke[r][c] = tk[i];
          this._Kd[rounds - r][c] = tk[i++];
          t++;
        }
      }

      for (var r = 1; r < rounds; r++) {
        for (var c = 0; c < 4; c++) {
          tt = this._Kd[r][c];
          this._Kd[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];
        }
      }
    };

    AES.prototype.encrypt = function (plaintext) {
      if (plaintext.length != 16) {
        throw new Error('invalid plaintext size (must be 16 bytes)');
      }

      var rounds = this._Ke.length - 1;
      var a = [0, 0, 0, 0];
      var t = convertToInt32(plaintext);

      for (var i = 0; i < 4; i++) {
        t[i] ^= this._Ke[0][i];
      }

      for (var r = 1; r < rounds; r++) {
        for (var i = 0; i < 4; i++) {
          a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ this._Ke[r][i];
        }

        t = a.slice();
      }

      var result = createArray(16),
          tt;

      for (var i = 0; i < 4; i++) {
        tt = this._Ke[rounds][i];
        result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
        result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
        result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
        result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;
      }

      return result;
    };

    AES.prototype.decrypt = function (ciphertext) {
      if (ciphertext.length != 16) {
        throw new Error('invalid ciphertext size (must be 16 bytes)');
      }

      var rounds = this._Kd.length - 1;
      var a = [0, 0, 0, 0];
      var t = convertToInt32(ciphertext);

      for (var i = 0; i < 4; i++) {
        t[i] ^= this._Kd[0][i];
      }

      for (var r = 1; r < rounds; r++) {
        for (var i = 0; i < 4; i++) {
          a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ this._Kd[r][i];
        }

        t = a.slice();
      }

      var result = createArray(16),
          tt;

      for (var i = 0; i < 4; i++) {
        tt = this._Kd[rounds][i];
        result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
        result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
        result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
        result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;
      }

      return result;
    };

    var ModeOfOperationECB = function (key) {
      if (!(this instanceof ModeOfOperationECB)) {
        throw Error('AES must be instanitated with `new`');
      }

      this.description = "Electronic Code Block";
      this.name = "ecb";
      this._aes = new AES(key);
    };

    ModeOfOperationECB.prototype.encrypt = function (plaintext) {
      plaintext = coerceArray(plaintext);

      if (plaintext.length % 16 !== 0) {
        throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
      }

      var ciphertext = createArray(plaintext.length);
      var block = createArray(16);

      for (var i = 0; i < plaintext.length; i += 16) {
        copyArray(plaintext, block, 0, i, i + 16);
        block = this._aes.encrypt(block);
        copyArray(block, ciphertext, i);
      }

      return ciphertext;
    };

    ModeOfOperationECB.prototype.decrypt = function (ciphertext) {
      ciphertext = coerceArray(ciphertext);

      if (ciphertext.length % 16 !== 0) {
        throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
      }

      var plaintext = createArray(ciphertext.length);
      var block = createArray(16);

      for (var i = 0; i < ciphertext.length; i += 16) {
        copyArray(ciphertext, block, 0, i, i + 16);
        block = this._aes.decrypt(block);
        copyArray(block, plaintext, i);
      }

      return plaintext;
    };

    var ModeOfOperationCBC = function (key, iv) {
      if (!(this instanceof ModeOfOperationCBC)) {
        throw Error('AES must be instanitated with `new`');
      }

      this.description = "Cipher Block Chaining";
      this.name = "cbc";

      if (!iv) {
        iv = createArray(16);
      } else if (iv.length != 16) {
        throw new Error('invalid initialation vector size (must be 16 bytes)');
      }

      this._lastCipherblock = coerceArray(iv, true);
      this._aes = new AES(key);
    };

    ModeOfOperationCBC.prototype.encrypt = function (plaintext) {
      plaintext = coerceArray(plaintext);

      if (plaintext.length % 16 !== 0) {
        throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
      }

      var ciphertext = createArray(plaintext.length);
      var block = createArray(16);

      for (var i = 0; i < plaintext.length; i += 16) {
        copyArray(plaintext, block, 0, i, i + 16);

        for (var j = 0; j < 16; j++) {
          block[j] ^= this._lastCipherblock[j];
        }

        this._lastCipherblock = this._aes.encrypt(block);
        copyArray(this._lastCipherblock, ciphertext, i);
      }

      return ciphertext;
    };

    ModeOfOperationCBC.prototype.decrypt = function (ciphertext) {
      ciphertext = coerceArray(ciphertext);

      if (ciphertext.length % 16 !== 0) {
        throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
      }

      var plaintext = createArray(ciphertext.length);
      var block = createArray(16);

      for (var i = 0; i < ciphertext.length; i += 16) {
        copyArray(ciphertext, block, 0, i, i + 16);
        block = this._aes.decrypt(block);

        for (var j = 0; j < 16; j++) {
          plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
        }

        copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
      }

      return plaintext;
    };

    var ModeOfOperationCFB = function (key, iv, segmentSize) {
      if (!(this instanceof ModeOfOperationCFB)) {
        throw Error('AES must be instanitated with `new`');
      }

      this.description = "Cipher Feedback";
      this.name = "cfb";

      if (!iv) {
        iv = createArray(16);
      } else if (iv.length != 16) {
        throw new Error('invalid initialation vector size (must be 16 size)');
      }

      if (!segmentSize) {
        segmentSize = 1;
      }

      this.segmentSize = segmentSize;
      this._shiftRegister = coerceArray(iv, true);
      this._aes = new AES(key);
    };

    ModeOfOperationCFB.prototype.encrypt = function (plaintext) {
      if (plaintext.length % this.segmentSize != 0) {
        throw new Error('invalid plaintext size (must be segmentSize bytes)');
      }

      var encrypted = coerceArray(plaintext, true);
      var xorSegment;

      for (var i = 0; i < encrypted.length; i += this.segmentSize) {
        xorSegment = this._aes.encrypt(this._shiftRegister);

        for (var j = 0; j < this.segmentSize; j++) {
          encrypted[i + j] ^= xorSegment[j];
        }

        copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
        copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
      }

      return encrypted;
    };

    ModeOfOperationCFB.prototype.decrypt = function (ciphertext) {
      if (ciphertext.length % this.segmentSize != 0) {
        throw new Error('invalid ciphertext size (must be segmentSize bytes)');
      }

      var plaintext = coerceArray(ciphertext, true);
      var xorSegment;

      for (var i = 0; i < plaintext.length; i += this.segmentSize) {
        xorSegment = this._aes.encrypt(this._shiftRegister);

        for (var j = 0; j < this.segmentSize; j++) {
          plaintext[i + j] ^= xorSegment[j];
        }

        copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
        copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
      }

      return plaintext;
    };

    var ModeOfOperationOFB = function (key, iv) {
      if (!(this instanceof ModeOfOperationOFB)) {
        throw Error('AES must be instanitated with `new`');
      }

      this.description = "Output Feedback";
      this.name = "ofb";

      if (!iv) {
        iv = createArray(16);
      } else if (iv.length != 16) {
        throw new Error('invalid initialation vector size (must be 16 bytes)');
      }

      this._lastPrecipher = coerceArray(iv, true);
      this._lastPrecipherIndex = 16;
      this._aes = new AES(key);
    };

    ModeOfOperationOFB.prototype.encrypt = function (plaintext) {
      var encrypted = coerceArray(plaintext, true);

      for (var i = 0; i < encrypted.length; i++) {
        if (this._lastPrecipherIndex === 16) {
          this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
          this._lastPrecipherIndex = 0;
        }

        encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
      }

      return encrypted;
    };

    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;

    var Counter = function (initialValue) {
      if (!(this instanceof Counter)) {
        throw Error('Counter must be instanitated with `new`');
      }

      if (initialValue !== 0 && !initialValue) {
        initialValue = 1;
      }

      if (typeof initialValue === 'number') {
        this._counter = createArray(16);
        this.setValue(initialValue);
      } else {
        this.setBytes(initialValue);
      }
    };

    Counter.prototype.setValue = function (value) {
      if (typeof value !== 'number' || parseInt(value) != value) {
        throw new Error('invalid counter value (must be an integer)');
      }

      for (var index = 15; index >= 0; --index) {
        this._counter[index] = value % 256;
        value = value >> 8;
      }
    };

    Counter.prototype.setBytes = function (bytes) {
      bytes = coerceArray(bytes, true);

      if (bytes.length != 16) {
        throw new Error('invalid counter bytes size (must be 16 bytes)');
      }

      this._counter = bytes;
    };

    Counter.prototype.increment = function () {
      for (var i = 15; i >= 0; i--) {
        if (this._counter[i] === 255) {
          this._counter[i] = 0;
        } else {
          this._counter[i]++;
          break;
        }
      }
    };

    var ModeOfOperationCTR = function (key, counter) {
      if (!(this instanceof ModeOfOperationCTR)) {
        throw Error('AES must be instanitated with `new`');
      }

      this.description = "Counter";
      this.name = "ctr";

      if (!(counter instanceof Counter)) {
        counter = new Counter(counter);
      }

      this._counter = counter;
      this._remainingCounter = null;
      this._remainingCounterIndex = 16;
      this._aes = new AES(key);
    };

    ModeOfOperationCTR.prototype.encrypt = function (plaintext) {
      var encrypted = coerceArray(plaintext, true);

      for (var i = 0; i < encrypted.length; i++) {
        if (this._remainingCounterIndex === 16) {
          this._remainingCounter = this._aes.encrypt(this._counter._counter);
          this._remainingCounterIndex = 0;

          this._counter.increment();
        }

        encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
      }

      return encrypted;
    };

    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;

    function pkcs7pad(data) {
      data = coerceArray(data, true);
      var padder = 16 - data.length % 16;
      var result = createArray(data.length + padder);
      copyArray(data, result);

      for (var i = data.length; i < result.length; i++) {
        result[i] = padder;
      }

      return result;
    }

    function pkcs7strip(data) {
      data = coerceArray(data, true);

      if (data.length < 16) {
        throw new Error('PKCS#7 invalid length');
      }

      var padder = data[data.length - 1];

      if (padder > 16) {
        throw new Error('PKCS#7 padding byte out of range');
      }

      var length = data.length - padder;

      for (var i = 0; i < padder; i++) {
        if (data[length + i] !== padder) {
          throw new Error('PKCS#7 invalid padding byte');
        }
      }

      var result = createArray(length);
      copyArray(data, result, 0, 0, length);
      return result;
    }

    var aesjs = {
      AES: AES,
      Counter: Counter,
      ModeOfOperation: {
        ecb: ModeOfOperationECB,
        cbc: ModeOfOperationCBC,
        cfb: ModeOfOperationCFB,
        ofb: ModeOfOperationOFB,
        ctr: ModeOfOperationCTR
      },
      utils: {
        hex: convertHex,
        utf8: convertUtf8
      },
      padding: {
        pkcs7: {
          pad: pkcs7pad,
          strip: pkcs7strip
        }
      },
      _arrayTest: {
        coerceArray: coerceArray,
        createArray: createArray,
        copyArray: copyArray
      }
    };

    if (typeof exports !== 'undefined') {
      module.exports = aesjs;
    } else if (typeof define === 'function' && define.amd) {
      define(aesjs);
    } else {
      if (root.aesjs) {
        aesjs._aesjs = root.aesjs;
      }

      root.aesjs = aesjs;
    }
  })(this);
},153,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "json-wallets/5.0.8";
},154,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[1]);

  function looseArrayify(hexString) {
    if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {
      hexString = '0x' + hexString;
    }

    return bytes_1.arrayify(hexString);
  }

  exports.looseArrayify = looseArrayify;

  function zpad(value, length) {
    value = String(value);

    while (value.length < length) {
      value = '0' + value;
    }

    return value;
  }

  exports.zpad = zpad;

  function getPassword(password) {
    if (typeof password === 'string') {
      return strings_1.toUtf8Bytes(password, strings_1.UnicodeNormalizationForm.NFKC);
    }

    return bytes_1.arrayify(password);
  }

  exports.getPassword = getPassword;

  function searchPath(object, path) {
    var currentChild = object;
    var comps = path.toLowerCase().split('/');

    for (var i = 0; i < comps.length; i++) {
      var matchingChild = null;

      for (var key in currentChild) {
        if (key.toLowerCase() === comps[i]) {
          matchingChild = currentChild[key];
          break;
        }
      }

      if (matchingChild === null) {
        return null;
      }

      currentChild = matchingChild;
    }

    return currentChild;
  }

  exports.searchPath = searchPath;

  function uuidV4(randomBytes) {
    var bytes = bytes_1.arrayify(randomBytes);
    bytes[6] = bytes[6] & 0x0f | 0x40;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    var value = bytes_1.hexlify(bytes);
    return [value.substring(2, 10), value.substring(10, 14), value.substring(14, 18), value.substring(18, 22), value.substring(22, 34)].join("-");
  }

  exports.uuidV4 = uuidV4;
},155,[36,67]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var address_1 = _$$_REQUIRE(_dependencyMap[0]);

  function isCrowdsaleWallet(json) {
    var data = null;

    try {
      data = JSON.parse(json);
    } catch (error) {
      return false;
    }

    return data.encseed && data.ethaddr;
  }

  exports.isCrowdsaleWallet = isCrowdsaleWallet;

  function isKeystoreWallet(json) {
    var data = null;

    try {
      data = JSON.parse(json);
    } catch (error) {
      return false;
    }

    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
      return false;
    }

    return true;
  }

  exports.isKeystoreWallet = isKeystoreWallet;

  function getJsonWalletAddress(json) {
    if (isCrowdsaleWallet(json)) {
      try {
        return address_1.getAddress(JSON.parse(json).ethaddr);
      } catch (error) {
        return null;
      }
    }

    if (isKeystoreWallet(json)) {
      try {
        return address_1.getAddress(JSON.parse(json).address);
      } catch (error) {
        return null;
      }
    }

    return null;
  }

  exports.getJsonWalletAddress = getJsonWalletAddress;
},156,[48]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  var __importDefault = this && this.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var aes_js_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0]));

  var scrypt_js_1 = __importDefault(_$$_REQUIRE(_dependencyMap[1]));

  var address_1 = _$$_REQUIRE(_dependencyMap[2]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[3]);

  var hdnode_1 = _$$_REQUIRE(_dependencyMap[4]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[5]);

  var pbkdf2_1 = _$$_REQUIRE(_dependencyMap[6]);

  var random_1 = _$$_REQUIRE(_dependencyMap[7]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[8]);

  var transactions_1 = _$$_REQUIRE(_dependencyMap[9]);

  var utils_1 = _$$_REQUIRE(_dependencyMap[10]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[11]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[12]);

  var logger = new logger_1.Logger(_version_1.version);

  function hasMnemonic(value) {
    return value != null && value.mnemonic && value.mnemonic.phrase;
  }

  var KeystoreAccount = function (_super) {
    __extends(KeystoreAccount, _super);

    function KeystoreAccount() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    KeystoreAccount.prototype.isKeystoreAccount = function (value) {
      return !!(value && value._isKeystoreAccount);
    };

    return KeystoreAccount;
  }(properties_1.Description);

  exports.KeystoreAccount = KeystoreAccount;

  function _decrypt(data, key, ciphertext) {
    var cipher = utils_1.searchPath(data, "crypto/cipher");

    if (cipher === "aes-128-ctr") {
      var iv = utils_1.looseArrayify(utils_1.searchPath(data, "crypto/cipherparams/iv"));
      var counter = new aes_js_1.default.Counter(iv);
      var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);
      return bytes_1.arrayify(aesCtr.decrypt(ciphertext));
    }

    return null;
  }

  function _getAccount(data, key) {
    var ciphertext = utils_1.looseArrayify(utils_1.searchPath(data, "crypto/ciphertext"));
    var computedMAC = bytes_1.hexlify(keccak256_1.keccak256(bytes_1.concat([key.slice(16, 32), ciphertext]))).substring(2);

    if (computedMAC !== utils_1.searchPath(data, "crypto/mac").toLowerCase()) {
      throw new Error("invalid password");
    }

    var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);

    if (!privateKey) {
      logger.throwError("unsupported cipher", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "decrypt"
      });
    }

    var mnemonicKey = key.slice(32, 64);
    var address = transactions_1.computeAddress(privateKey);

    if (data.address) {
      var check = data.address.toLowerCase();

      if (check.substring(0, 2) !== "0x") {
        check = "0x" + check;
      }

      if (address_1.getAddress(check) !== address) {
        throw new Error("address mismatch");
      }
    }

    var account = {
      _isKeystoreAccount: true,
      address: address,
      privateKey: bytes_1.hexlify(privateKey)
    };

    if (utils_1.searchPath(data, "x-ethers/version") === "0.1") {
      var mnemonicCiphertext = utils_1.looseArrayify(utils_1.searchPath(data, "x-ethers/mnemonicCiphertext"));
      var mnemonicIv = utils_1.looseArrayify(utils_1.searchPath(data, "x-ethers/mnemonicCounter"));
      var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
      var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      var path = utils_1.searchPath(data, "x-ethers/path") || hdnode_1.defaultPath;
      var locale = utils_1.searchPath(data, "x-ethers/locale") || "en";
      var entropy = bytes_1.arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));

      try {
        var mnemonic = hdnode_1.entropyToMnemonic(entropy, locale);
        var node = hdnode_1.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);

        if (node.privateKey != account.privateKey) {
          throw new Error("mnemonic mismatch");
        }

        account.mnemonic = node.mnemonic;
      } catch (error) {
        if (error.code !== logger_1.Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
          throw error;
        }
      }
    }

    return new KeystoreAccount(account);
  }

  function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
    return bytes_1.arrayify(pbkdf2_1.pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
  }

  function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
  }

  function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
    var passwordBytes = utils_1.getPassword(password);
    var kdf = utils_1.searchPath(data, "crypto/kdf");

    if (kdf && typeof kdf === "string") {
      var throwError = function (name, value) {
        return logger.throwArgumentError("invalid key-derivation function parameters", name, value);
      };

      if (kdf.toLowerCase() === "scrypt") {
        var salt = utils_1.looseArrayify(utils_1.searchPath(data, "crypto/kdfparams/salt"));
        var N = parseInt(utils_1.searchPath(data, "crypto/kdfparams/n"));
        var r = parseInt(utils_1.searchPath(data, "crypto/kdfparams/r"));
        var p = parseInt(utils_1.searchPath(data, "crypto/kdfparams/p"));

        if (!N || !r || !p) {
          throwError("kdf", kdf);
        }

        if ((N & N - 1) !== 0) {
          throwError("N", N);
        }

        var dkLen = parseInt(utils_1.searchPath(data, "crypto/kdfparams/dklen"));

        if (dkLen !== 32) {
          throwError("dklen", dkLen);
        }

        return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
      } else if (kdf.toLowerCase() === "pbkdf2") {
        var salt = utils_1.looseArrayify(utils_1.searchPath(data, "crypto/kdfparams/salt"));
        var prfFunc = null;
        var prf = utils_1.searchPath(data, "crypto/kdfparams/prf");

        if (prf === "hmac-sha256") {
          prfFunc = "sha256";
        } else if (prf === "hmac-sha512") {
          prfFunc = "sha512";
        } else {
          throwError("prf", prf);
        }

        var count = parseInt(utils_1.searchPath(data, "crypto/kdfparams/c"));
        var dkLen = parseInt(utils_1.searchPath(data, "crypto/kdfparams/dklen"));

        if (dkLen !== 32) {
          throwError("dklen", dkLen);
        }

        return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
      }
    }

    return logger.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
  }

  function decryptSync(json, password) {
    var data = JSON.parse(json);

    var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt_js_1.default.syncScrypt);

    return _getAccount(data, key);
  }

  exports.decryptSync = decryptSync;

  function decrypt(json, password, progressCallback) {
    return __awaiter(this, undefined, undefined, function () {
      var data, key;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            data = JSON.parse(json);
            return [4, _computeKdfKey(data, password, pbkdf2, scrypt_js_1.default.scrypt, progressCallback)];

          case 1:
            key = _a.sent();
            return [2, _getAccount(data, key)];
        }
      });
    });
  }

  exports.decrypt = decrypt;

  function encrypt(account, password, options, progressCallback) {
    try {
      if (address_1.getAddress(account.address) !== transactions_1.computeAddress(account.privateKey)) {
        throw new Error("address/privateKey mismatch");
      }

      if (hasMnemonic(account)) {
        var mnemonic = account.mnemonic;
        var node = hdnode_1.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || hdnode_1.defaultPath);

        if (node.privateKey != account.privateKey) {
          throw new Error("mnemonic mismatch");
        }
      }
    } catch (e) {
      return Promise.reject(e);
    }

    if (typeof options === "function" && !progressCallback) {
      progressCallback = options;
      options = {};
    }

    if (!options) {
      options = {};
    }

    var privateKey = bytes_1.arrayify(account.privateKey);
    var passwordBytes = utils_1.getPassword(password);
    var entropy = null;
    var path = null;
    var locale = null;

    if (hasMnemonic(account)) {
      var srcMnemonic = account.mnemonic;
      entropy = bytes_1.arrayify(hdnode_1.mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
      path = srcMnemonic.path || hdnode_1.defaultPath;
      locale = srcMnemonic.locale || "en";
    }

    var client = options.client;

    if (!client) {
      client = "ethers.js";
    }

    var salt = null;

    if (options.salt) {
      salt = bytes_1.arrayify(options.salt);
    } else {
      salt = random_1.randomBytes(32);
      ;
    }

    var iv = null;

    if (options.iv) {
      iv = bytes_1.arrayify(options.iv);

      if (iv.length !== 16) {
        throw new Error("invalid iv");
      }
    } else {
      iv = random_1.randomBytes(16);
    }

    var uuidRandom = null;

    if (options.uuid) {
      uuidRandom = bytes_1.arrayify(options.uuid);

      if (uuidRandom.length !== 16) {
        throw new Error("invalid uuid");
      }
    } else {
      uuidRandom = random_1.randomBytes(16);
    }

    var N = 131072,
        r = 8,
        p = 1;

    if (options.scrypt) {
      if (options.scrypt.N) {
        N = options.scrypt.N;
      }

      if (options.scrypt.r) {
        r = options.scrypt.r;
      }

      if (options.scrypt.p) {
        p = options.scrypt.p;
      }
    }

    return scrypt_js_1.default.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function (key) {
      key = bytes_1.arrayify(key);
      var derivedKey = key.slice(0, 16);
      var macPrefix = key.slice(16, 32);
      var mnemonicKey = key.slice(32, 64);
      var counter = new aes_js_1.default.Counter(iv);
      var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
      var ciphertext = bytes_1.arrayify(aesCtr.encrypt(privateKey));
      var mac = keccak256_1.keccak256(bytes_1.concat([macPrefix, ciphertext]));
      var data = {
        address: account.address.substring(2).toLowerCase(),
        id: utils_1.uuidV4(uuidRandom),
        version: 3,
        Crypto: {
          cipher: "aes-128-ctr",
          cipherparams: {
            iv: bytes_1.hexlify(iv).substring(2)
          },
          ciphertext: bytes_1.hexlify(ciphertext).substring(2),
          kdf: "scrypt",
          kdfparams: {
            salt: bytes_1.hexlify(salt).substring(2),
            n: N,
            dklen: 32,
            p: p,
            r: r
          },
          mac: mac.substring(2)
        }
      };

      if (entropy) {
        var mnemonicIv = random_1.randomBytes(16);
        var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
        var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
        var mnemonicCiphertext = bytes_1.arrayify(mnemonicAesCtr.encrypt(entropy));
        var now = new Date();
        var timestamp = now.getUTCFullYear() + "-" + utils_1.zpad(now.getUTCMonth() + 1, 2) + "-" + utils_1.zpad(now.getUTCDate(), 2) + "T" + utils_1.zpad(now.getUTCHours(), 2) + "-" + utils_1.zpad(now.getUTCMinutes(), 2) + "-" + utils_1.zpad(now.getUTCSeconds(), 2) + ".0Z";
        data["x-ethers"] = {
          client: client,
          gethFilename: "UTC--" + timestamp + "--" + data.address,
          mnemonicCounter: bytes_1.hexlify(mnemonicIv).substring(2),
          mnemonicCiphertext: bytes_1.hexlify(mnemonicCiphertext).substring(2),
          path: path,
          locale: locale,
          version: "0.1"
        };
      }

      return JSON.stringify(data);
    });
  }

  exports.encrypt = encrypt;
},157,[153,158,48,36,86,49,88,148,42,133,155,37,154]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  (function (root) {
    const MAX_VALUE = 0x7fffffff;

    function SHA256(m) {
      const K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
      let h0 = 0x6a09e667,
          h1 = 0xbb67ae85,
          h2 = 0x3c6ef372,
          h3 = 0xa54ff53a;
      let h4 = 0x510e527f,
          h5 = 0x9b05688c,
          h6 = 0x1f83d9ab,
          h7 = 0x5be0cd19;
      const w = new Uint32Array(64);

      function blocks(p) {
        let off = 0,
            len = p.length;

        while (len >= 64) {
          let a = h0,
              b = h1,
              c = h2,
              d = h3,
              e = h4,
              f = h5,
              g = h6,
              h = h7,
              u,
              i,
              j,
              t1,
              t2;

          for (i = 0; i < 16; i++) {
            j = off + i * 4;
            w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;
          }

          for (i = 16; i < 64; i++) {
            u = w[i - 2];
            t1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
            u = w[i - 15];
            t2 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0) | 0;
          }

          for (i = 0; i < 64; i++) {
            t1 = (((e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;
            t2 = ((a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10)) + (a & b ^ a & c ^ b & c) | 0;
            h = g;
            g = f;
            f = e;
            e = d + t1 | 0;
            d = c;
            c = b;
            b = a;
            a = t1 + t2 | 0;
          }

          h0 = h0 + a | 0;
          h1 = h1 + b | 0;
          h2 = h2 + c | 0;
          h3 = h3 + d | 0;
          h4 = h4 + e | 0;
          h5 = h5 + f | 0;
          h6 = h6 + g | 0;
          h7 = h7 + h | 0;
          off += 64;
          len -= 64;
        }
      }

      blocks(m);
      let i,
          bytesLeft = m.length % 64,
          bitLenHi = m.length / 0x20000000 | 0,
          bitLenLo = m.length << 3,
          numZeros = bytesLeft < 56 ? 56 : 120,
          p = m.slice(m.length - bytesLeft, m.length);
      p.push(0x80);

      for (i = bytesLeft + 1; i < numZeros; i++) {
        p.push(0);
      }

      p.push(bitLenHi >>> 24 & 0xff);
      p.push(bitLenHi >>> 16 & 0xff);
      p.push(bitLenHi >>> 8 & 0xff);
      p.push(bitLenHi >>> 0 & 0xff);
      p.push(bitLenLo >>> 24 & 0xff);
      p.push(bitLenLo >>> 16 & 0xff);
      p.push(bitLenLo >>> 8 & 0xff);
      p.push(bitLenLo >>> 0 & 0xff);
      blocks(p);
      return [h0 >>> 24 & 0xff, h0 >>> 16 & 0xff, h0 >>> 8 & 0xff, h0 >>> 0 & 0xff, h1 >>> 24 & 0xff, h1 >>> 16 & 0xff, h1 >>> 8 & 0xff, h1 >>> 0 & 0xff, h2 >>> 24 & 0xff, h2 >>> 16 & 0xff, h2 >>> 8 & 0xff, h2 >>> 0 & 0xff, h3 >>> 24 & 0xff, h3 >>> 16 & 0xff, h3 >>> 8 & 0xff, h3 >>> 0 & 0xff, h4 >>> 24 & 0xff, h4 >>> 16 & 0xff, h4 >>> 8 & 0xff, h4 >>> 0 & 0xff, h5 >>> 24 & 0xff, h5 >>> 16 & 0xff, h5 >>> 8 & 0xff, h5 >>> 0 & 0xff, h6 >>> 24 & 0xff, h6 >>> 16 & 0xff, h6 >>> 8 & 0xff, h6 >>> 0 & 0xff, h7 >>> 24 & 0xff, h7 >>> 16 & 0xff, h7 >>> 8 & 0xff, h7 >>> 0 & 0xff];
    }

    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
      password = password.length <= 64 ? password : SHA256(password);
      const innerLen = 64 + salt.length + 4;
      const inner = new Array(innerLen);
      const outerKey = new Array(64);
      let i;
      let dk = [];

      for (i = 0; i < 64; i++) {
        inner[i] = 0x36;
      }

      for (i = 0; i < password.length; i++) {
        inner[i] ^= password[i];
      }

      for (i = 0; i < salt.length; i++) {
        inner[64 + i] = salt[i];
      }

      for (i = innerLen - 4; i < innerLen; i++) {
        inner[i] = 0;
      }

      for (i = 0; i < 64; i++) outerKey[i] = 0x5c;

      for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

      function incrementCounter() {
        for (let i = innerLen - 1; i >= innerLen - 4; i--) {
          inner[i]++;
          if (inner[i] <= 0xff) return;
          inner[i] = 0;
        }
      }

      while (dkLen >= 32) {
        incrementCounter();
        dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
        dkLen -= 32;
      }

      if (dkLen > 0) {
        incrementCounter();
        dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
      }

      return dk;
    }

    function blockmix_salsa8(BY, Yi, r, x, _X) {
      let i;
      arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);

      for (i = 0; i < 2 * r; i++) {
        blockxor(BY, i * 16, _X, 16);
        salsa20_8(_X, x);
        arraycopy(_X, 0, BY, Yi + i * 16, 16);
      }

      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);
      }

      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
      }
    }

    function R(a, b) {
      return a << b | a >>> 32 - b;
    }

    function salsa20_8(B, x) {
      arraycopy(B, 0, x, 0, 16);

      for (let i = 8; i > 0; i -= 2) {
        x[4] ^= R(x[0] + x[12], 7);
        x[8] ^= R(x[4] + x[0], 9);
        x[12] ^= R(x[8] + x[4], 13);
        x[0] ^= R(x[12] + x[8], 18);
        x[9] ^= R(x[5] + x[1], 7);
        x[13] ^= R(x[9] + x[5], 9);
        x[1] ^= R(x[13] + x[9], 13);
        x[5] ^= R(x[1] + x[13], 18);
        x[14] ^= R(x[10] + x[6], 7);
        x[2] ^= R(x[14] + x[10], 9);
        x[6] ^= R(x[2] + x[14], 13);
        x[10] ^= R(x[6] + x[2], 18);
        x[3] ^= R(x[15] + x[11], 7);
        x[7] ^= R(x[3] + x[15], 9);
        x[11] ^= R(x[7] + x[3], 13);
        x[15] ^= R(x[11] + x[7], 18);
        x[1] ^= R(x[0] + x[3], 7);
        x[2] ^= R(x[1] + x[0], 9);
        x[3] ^= R(x[2] + x[1], 13);
        x[0] ^= R(x[3] + x[2], 18);
        x[6] ^= R(x[5] + x[4], 7);
        x[7] ^= R(x[6] + x[5], 9);
        x[4] ^= R(x[7] + x[6], 13);
        x[5] ^= R(x[4] + x[7], 18);
        x[11] ^= R(x[10] + x[9], 7);
        x[8] ^= R(x[11] + x[10], 9);
        x[9] ^= R(x[8] + x[11], 13);
        x[10] ^= R(x[9] + x[8], 18);
        x[12] ^= R(x[15] + x[14], 7);
        x[13] ^= R(x[12] + x[15], 9);
        x[14] ^= R(x[13] + x[12], 13);
        x[15] ^= R(x[14] + x[13], 18);
      }

      for (let i = 0; i < 16; ++i) {
        B[i] += x[i];
      }
    }

    function blockxor(S, Si, D, len) {
      for (let i = 0; i < len; i++) {
        D[i] ^= S[Si + i];
      }
    }

    function arraycopy(src, srcPos, dest, destPos, length) {
      while (length--) {
        dest[destPos++] = src[srcPos++];
      }
    }

    function checkBufferish(o) {
      if (!o || typeof o.length !== 'number') {
        return false;
      }

      for (let i = 0; i < o.length; i++) {
        const v = o[i];

        if (typeof v !== 'number' || v % 1 || v < 0 || v >= 256) {
          return false;
        }
      }

      return true;
    }

    function ensureInteger(value, name) {
      if (typeof value !== "number" || value % 1) {
        throw new Error('invalid ' + name);
      }

      return value;
    }

    function _scrypt(password, salt, N, r, p, dkLen, callback) {
      N = ensureInteger(N, 'N');
      r = ensureInteger(r, 'r');
      p = ensureInteger(p, 'p');
      dkLen = ensureInteger(dkLen, 'dkLen');

      if (N === 0 || (N & N - 1) !== 0) {
        throw new Error('N must be power of 2');
      }

      if (N > 16777215.9921875 / r) {
        throw new Error('N too large');
      }

      if (r > 16777215.9921875 / p) {
        throw new Error('r too large');
      }

      if (!checkBufferish(password)) {
        throw new Error('password must be an array or buffer');
      }

      password = Array.prototype.slice.call(password);

      if (!checkBufferish(salt)) {
        throw new Error('salt must be an array or buffer');
      }

      salt = Array.prototype.slice.call(salt);
      let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
      const B = new Uint32Array(p * 32 * r);

      for (let i = 0; i < B.length; i++) {
        const j = i * 4;
        B[i] = (b[j + 3] & 0xff) << 24 | (b[j + 2] & 0xff) << 16 | (b[j + 1] & 0xff) << 8 | (b[j + 0] & 0xff) << 0;
      }

      const XY = new Uint32Array(64 * r);
      const V = new Uint32Array(32 * r * N);
      const Yi = 32 * r;
      const x = new Uint32Array(16);

      const _X = new Uint32Array(16);

      const totalOps = p * N * 2;
      let currentOp = 0;
      let lastPercent10 = null;
      let stop = false;
      let state = 0;
      let i0 = 0,
          i1;
      let Bi;
      const limit = callback ? parseInt(1000 / r) : 0xffffffff;
      const nextTick = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout;

      const incrementalSMix = function () {
        if (stop) {
          return callback(new Error('cancelled'), currentOp / totalOps);
        }

        let steps;

        switch (state) {
          case 0:
            Bi = i0 * 32 * r;
            arraycopy(B, Bi, XY, 0, Yi);
            state = 1;
            i1 = 0;

          case 1:
            steps = N - i1;

            if (steps > limit) {
              steps = limit;
            }

            for (let i = 0; i < steps; i++) {
              arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);
              blockmix_salsa8(XY, Yi, r, x, _X);
            }

            i1 += steps;
            currentOp += steps;

            if (callback) {
              const percent10 = parseInt(1000 * currentOp / totalOps);

              if (percent10 !== lastPercent10) {
                stop = callback(null, currentOp / totalOps);

                if (stop) {
                  break;
                }

                lastPercent10 = percent10;
              }
            }

            if (i1 < N) {
              break;
            }

            i1 = 0;
            state = 2;

          case 2:
            steps = N - i1;

            if (steps > limit) {
              steps = limit;
            }

            for (let i = 0; i < steps; i++) {
              const offset = (2 * r - 1) * 16;
              const j = XY[offset] & N - 1;
              blockxor(V, j * Yi, XY, Yi);
              blockmix_salsa8(XY, Yi, r, x, _X);
            }

            i1 += steps;
            currentOp += steps;

            if (callback) {
              const percent10 = parseInt(1000 * currentOp / totalOps);

              if (percent10 !== lastPercent10) {
                stop = callback(null, currentOp / totalOps);

                if (stop) {
                  break;
                }

                lastPercent10 = percent10;
              }
            }

            if (i1 < N) {
              break;
            }

            arraycopy(XY, 0, B, Bi, Yi);
            i0++;

            if (i0 < p) {
              state = 0;
              break;
            }

            b = [];

            for (let i = 0; i < B.length; i++) {
              b.push(B[i] >> 0 & 0xff);
              b.push(B[i] >> 8 & 0xff);
              b.push(B[i] >> 16 & 0xff);
              b.push(B[i] >> 24 & 0xff);
            }

            const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

            if (callback) {
              callback(null, 1.0, derivedKey);
            }

            return derivedKey;
        }

        if (callback) {
          nextTick(incrementalSMix);
        }
      };

      if (!callback) {
        while (true) {
          const derivedKey = incrementalSMix();

          if (derivedKey != undefined) {
            return derivedKey;
          }
        }
      }

      incrementalSMix();
    }

    const lib = {
      scrypt: function (password, salt, N, r, p, dkLen, progressCallback) {
        return new Promise(function (resolve, reject) {
          let lastProgress = 0;

          if (progressCallback) {
            progressCallback(0);
          }

          _scrypt(password, salt, N, r, p, dkLen, function (error, progress, key) {
            if (error) {
              reject(error);
            } else if (key) {
              if (progressCallback && lastProgress !== 1) {
                progressCallback(1);
              }

              resolve(new Uint8Array(key));
            } else if (progressCallback && progress !== lastProgress) {
              lastProgress = progress;
              return progressCallback(progress);
            }
          });
        });
      },
      syncScrypt: function (password, salt, N, r, p, dkLen) {
        return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
      }
    };

    if (typeof exports !== 'undefined') {
      module.exports = lib;
    } else if (typeof define === 'function' && define.amd) {
      define(lib);
    } else if (root) {
      if (root.scrypt) {
        root._scrypt = root.scrypt;
      }

      root.scrypt = lib;
    }
  })(this);
},158,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "wallet/5.0.8";
},159,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abstract_provider_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.Provider = abstract_provider_1.Provider;

  var networks_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.getNetwork = networks_1.getNetwork;

  var base_provider_1 = _$$_REQUIRE(_dependencyMap[2]);

  exports.BaseProvider = base_provider_1.BaseProvider;
  exports.Resolver = base_provider_1.Resolver;

  var alchemy_provider_1 = _$$_REQUIRE(_dependencyMap[3]);

  exports.AlchemyProvider = alchemy_provider_1.AlchemyProvider;
  exports.AlchemyWebSocketProvider = alchemy_provider_1.AlchemyWebSocketProvider;

  var cloudflare_provider_1 = _$$_REQUIRE(_dependencyMap[4]);

  exports.CloudflareProvider = cloudflare_provider_1.CloudflareProvider;

  var etherscan_provider_1 = _$$_REQUIRE(_dependencyMap[5]);

  exports.EtherscanProvider = etherscan_provider_1.EtherscanProvider;

  var fallback_provider_1 = _$$_REQUIRE(_dependencyMap[6]);

  exports.FallbackProvider = fallback_provider_1.FallbackProvider;

  var ipc_provider_1 = _$$_REQUIRE(_dependencyMap[7]);

  exports.IpcProvider = ipc_provider_1.IpcProvider;

  var infura_provider_1 = _$$_REQUIRE(_dependencyMap[8]);

  exports.InfuraProvider = infura_provider_1.InfuraProvider;
  exports.InfuraWebSocketProvider = infura_provider_1.InfuraWebSocketProvider;

  var json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[9]);

  exports.JsonRpcProvider = json_rpc_provider_1.JsonRpcProvider;
  exports.JsonRpcSigner = json_rpc_provider_1.JsonRpcSigner;

  var nodesmith_provider_1 = _$$_REQUIRE(_dependencyMap[10]);

  exports.NodesmithProvider = nodesmith_provider_1.NodesmithProvider;

  var pocket_provider_1 = _$$_REQUIRE(_dependencyMap[11]);

  exports.PocketProvider = pocket_provider_1.PocketProvider;

  var url_json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[12]);

  exports.StaticJsonRpcProvider = url_json_rpc_provider_1.StaticJsonRpcProvider;
  exports.UrlJsonRpcProvider = url_json_rpc_provider_1.UrlJsonRpcProvider;

  var web3_provider_1 = _$$_REQUIRE(_dependencyMap[13]);

  exports.Web3Provider = web3_provider_1.Web3Provider;

  var websocket_provider_1 = _$$_REQUIRE(_dependencyMap[14]);

  exports.WebSocketProvider = websocket_provider_1.WebSocketProvider;

  var formatter_1 = _$$_REQUIRE(_dependencyMap[15]);

  exports.Formatter = formatter_1.Formatter;
  exports.isCommunityResourcable = formatter_1.isCommunityResourcable;
  exports.isCommunityResource = formatter_1.isCommunityResource;
  exports.showThrottleMessage = formatter_1.showThrottleMessage;

  var logger_1 = _$$_REQUIRE(_dependencyMap[16]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[17]);

  var logger = new logger_1.Logger(_version_1.version);

  function getDefaultProvider(network, options) {
    if (network == null) {
      network = "homestead";
    }

    if (typeof network === "string") {
      var match = network.match(/^(ws|http)s?:/i);

      if (match) {
        switch (match[1]) {
          case "http":
            return new json_rpc_provider_1.JsonRpcProvider(network);

          case "ws":
            return new websocket_provider_1.WebSocketProvider(network);

          default:
            logger.throwArgumentError("unsupported URL scheme", "network", network);
        }
      }
    }

    var n = networks_1.getNetwork(network);

    if (!n || !n._defaultProvider) {
      logger.throwError("unsupported getDefaultProvider network", logger_1.Logger.errors.NETWORK_ERROR, {
        operation: "getDefaultProvider",
        network: network
      });
    }

    return n._defaultProvider({
      FallbackProvider: fallback_provider_1.FallbackProvider,
      AlchemyProvider: alchemy_provider_1.AlchemyProvider,
      CloudflareProvider: cloudflare_provider_1.CloudflareProvider,
      EtherscanProvider: etherscan_provider_1.EtherscanProvider,
      InfuraProvider: infura_provider_1.InfuraProvider,
      JsonRpcProvider: json_rpc_provider_1.JsonRpcProvider,
      NodesmithProvider: nodesmith_provider_1.NodesmithProvider,
      PocketProvider: pocket_provider_1.PocketProvider,
      Web3Provider: web3_provider_1.Web3Provider,
      IpcProvider: ipc_provider_1.IpcProvider
    }, options);
  }

  exports.getDefaultProvider = getDefaultProvider;
},160,[80,161,163,176,198,199,200,201,202,178,203,204,197,205,177,175,37,174]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var logger_1 = _$$_REQUIRE(_dependencyMap[0]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger = new logger_1.Logger(_version_1.version);
  ;

  function isRenetworkable(value) {
    return value && typeof value.renetwork === "function";
  }

  function ethDefaultProvider(network) {
    var func = function (providers, options) {
      if (options == null) {
        options = {};
      }

      var providerList = [];

      if (providers.InfuraProvider) {
        try {
          providerList.push(new providers.InfuraProvider(network, options.infura));
        } catch (error) {}
      }

      if (providers.EtherscanProvider) {
        try {
          providerList.push(new providers.EtherscanProvider(network, options.etherscan));
        } catch (error) {}
      }

      if (providers.AlchemyProvider) {
        try {
          providerList.push(new providers.AlchemyProvider(network, options.alchemy));
        } catch (error) {}
      }

      if (providers.CloudflareProvider) {
        try {
          providerList.push(new providers.CloudflareProvider(network));
        } catch (error) {}
      }

      if (providerList.length === 0) {
        return null;
      }

      if (providers.FallbackProvider) {
        var quorum = 1;

        if (options.quorum != null) {
          quorum = options.quorum;
        } else if (network === "homestead") {
          quorum = 2;
        }

        return new providers.FallbackProvider(providerList, quorum);
      }

      return providerList[0];
    };

    func.renetwork = function (network) {
      return ethDefaultProvider(network);
    };

    return func;
  }

  function etcDefaultProvider(url, network) {
    var func = function (providers, options) {
      if (providers.JsonRpcProvider) {
        return new providers.JsonRpcProvider(url, network);
      }

      return null;
    };

    func.renetwork = function (network) {
      return etcDefaultProvider(url, network);
    };

    return func;
  }

  var homestead = {
    chainId: 1,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "homestead",
    _defaultProvider: ethDefaultProvider("homestead")
  };
  var ropsten = {
    chainId: 3,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "ropsten",
    _defaultProvider: ethDefaultProvider("ropsten")
  };
  var classicMordor = {
    chainId: 63,
    name: "classicMordor",
    _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
  };
  var networks = {
    unspecified: {
      chainId: 0,
      name: "unspecified"
    },
    homestead: homestead,
    mainnet: homestead,
    morden: {
      chainId: 2,
      name: "morden"
    },
    ropsten: ropsten,
    testnet: ropsten,
    rinkeby: {
      chainId: 4,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "rinkeby",
      _defaultProvider: ethDefaultProvider("rinkeby")
    },
    kovan: {
      chainId: 42,
      name: "kovan",
      _defaultProvider: ethDefaultProvider("kovan")
    },
    goerli: {
      chainId: 5,
      ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      name: "goerli",
      _defaultProvider: ethDefaultProvider("goerli")
    },
    classic: {
      chainId: 61,
      name: "classic",
      _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
    },
    classicMorden: {
      chainId: 62,
      name: "classicMorden"
    },
    classicMordor: classicMordor,
    classicTestnet: classicMordor,
    classicKotti: {
      chainId: 6,
      name: "classicKotti",
      _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
    }
  };

  function getNetwork(network) {
    if (network == null) {
      return null;
    }

    if (typeof network === "number") {
      for (var name_1 in networks) {
        var standard_1 = networks[name_1];

        if (standard_1.chainId === network) {
          return {
            name: standard_1.name,
            chainId: standard_1.chainId,
            ensAddress: standard_1.ensAddress || null,
            _defaultProvider: standard_1._defaultProvider || null
          };
        }
      }

      return {
        chainId: network,
        name: "unknown"
      };
    }

    if (typeof network === "string") {
      var standard_2 = networks[network];

      if (standard_2 == null) {
        return null;
      }

      return {
        name: standard_2.name,
        chainId: standard_2.chainId,
        ensAddress: standard_2.ensAddress,
        _defaultProvider: standard_2._defaultProvider || null
      };
    }

    var standard = networks[network.name];

    if (!standard) {
      if (typeof network.chainId !== "number") {
        logger.throwArgumentError("invalid network chainId", "network", network);
      }

      return network;
    }

    if (network.chainId !== 0 && network.chainId !== standard.chainId) {
      logger.throwArgumentError("network chainId mismatch", "network", network);
    }

    var defaultProvider = network._defaultProvider || null;

    if (defaultProvider == null && standard._defaultProvider) {
      if (isRenetworkable(standard._defaultProvider)) {
        defaultProvider = standard._defaultProvider.renetwork(network);
      } else {
        defaultProvider = standard._defaultProvider;
      }
    }

    return {
      name: network.name,
      chainId: standard.chainId,
      ensAddress: network.ensAddress || standard.ensAddress || null,
      _defaultProvider: defaultProvider
    };
  }

  exports.getNetwork = getNetwork;
},161,[37,162]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "networks/5.0.5";
},162,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  var __importDefault = this && this.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abstract_provider_1 = _$$_REQUIRE(_dependencyMap[0]);

  var basex_1 = _$$_REQUIRE(_dependencyMap[1]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[2]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[3]);

  var constants_1 = _$$_REQUIRE(_dependencyMap[4]);

  var hash_1 = _$$_REQUIRE(_dependencyMap[5]);

  var networks_1 = _$$_REQUIRE(_dependencyMap[6]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[7]);

  var sha2_1 = _$$_REQUIRE(_dependencyMap[8]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[9]);

  var web_1 = _$$_REQUIRE(_dependencyMap[10]);

  var bech32_1 = __importDefault(_$$_REQUIRE(_dependencyMap[11]));

  var logger_1 = _$$_REQUIRE(_dependencyMap[12]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[13]);

  var logger = new logger_1.Logger(_version_1.version);

  var formatter_1 = _$$_REQUIRE(_dependencyMap[14]);

  function checkTopic(topic) {
    if (topic == null) {
      return "null";
    }

    if (bytes_1.hexDataLength(topic) !== 32) {
      logger.throwArgumentError("invalid topic", "topic", topic);
    }

    return topic.toLowerCase();
  }

  function serializeTopics(topics) {
    topics = topics.slice();

    while (topics.length > 0 && topics[topics.length - 1] == null) {
      topics.pop();
    }

    return topics.map(function (topic) {
      if (Array.isArray(topic)) {
        var unique_1 = {};
        topic.forEach(function (topic) {
          unique_1[checkTopic(topic)] = true;
        });
        var sorted = Object.keys(unique_1);
        sorted.sort();
        return sorted.join("|");
      } else {
        return checkTopic(topic);
      }
    }).join("&");
  }

  function deserializeTopics(data) {
    if (data === "") {
      return [];
    }

    return data.split(/&/g).map(function (topic) {
      if (topic === "") {
        return [];
      }

      var comps = topic.split("|").map(function (topic) {
        return topic === "null" ? null : topic;
      });
      return comps.length === 1 ? comps[0] : comps;
    });
  }

  function getEventTag(eventName) {
    if (typeof eventName === "string") {
      eventName = eventName.toLowerCase();

      if (bytes_1.hexDataLength(eventName) === 32) {
        return "tx:" + eventName;
      }

      if (eventName.indexOf(":") === -1) {
        return eventName;
      }
    } else if (Array.isArray(eventName)) {
      return "filter:*:" + serializeTopics(eventName);
    } else if (abstract_provider_1.ForkEvent.isForkEvent(eventName)) {
      logger.warn("not implemented");
      throw new Error("not implemented");
    } else if (eventName && typeof eventName === "object") {
      return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
    }

    throw new Error("invalid event - " + eventName);
  }

  function getTime() {
    return new Date().getTime();
  }

  function stall(duration) {
    return new Promise(function (resolve) {
      setTimeout(resolve, duration);
    });
  }

  var PollableEvents = ["block", "network", "pending", "poll"];

  var Event = function () {
    function Event(tag, listener, once) {
      properties_1.defineReadOnly(this, "tag", tag);
      properties_1.defineReadOnly(this, "listener", listener);
      properties_1.defineReadOnly(this, "once", once);
    }

    Object.defineProperty(Event.prototype, "event", {
      get: function () {
        switch (this.type) {
          case "tx":
            return this.hash;

          case "filter":
            return this.filter;
        }

        return this.tag;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Event.prototype, "type", {
      get: function () {
        return this.tag.split(":")[0];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Event.prototype, "hash", {
      get: function () {
        var comps = this.tag.split(":");

        if (comps[0] !== "tx") {
          return null;
        }

        return comps[1];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Event.prototype, "filter", {
      get: function () {
        var comps = this.tag.split(":");

        if (comps[0] !== "filter") {
          return null;
        }

        var address = comps[1];
        var topics = deserializeTopics(comps[2]);
        var filter = {};

        if (topics.length > 0) {
          filter.topics = topics;
        }

        if (address && address !== "*") {
          filter.address = address;
        }

        return filter;
      },
      enumerable: true,
      configurable: true
    });

    Event.prototype.pollable = function () {
      return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
    };

    return Event;
  }();

  exports.Event = Event;
  ;
  var coinInfos = {
    "0": {
      symbol: "btc",
      p2pkh: 0x00,
      p2sh: 0x05,
      prefix: "bc"
    },
    "2": {
      symbol: "ltc",
      p2pkh: 0x30,
      p2sh: 0x32,
      prefix: "ltc"
    },
    "3": {
      symbol: "doge",
      p2pkh: 0x1e,
      p2sh: 0x16
    },
    "60": {
      symbol: "eth",
      ilk: "eth"
    },
    "61": {
      symbol: "etc",
      ilk: "eth"
    },
    "700": {
      symbol: "xdai",
      ilk: "eth"
    }
  };

  function bytes32ify(value) {
    return bytes_1.hexZeroPad(bignumber_1.BigNumber.from(value).toHexString(), 32);
  }

  function base58Encode(data) {
    return basex_1.Base58.encode(bytes_1.concat([data, bytes_1.hexDataSlice(sha2_1.sha256(sha2_1.sha256(data)), 0, 4)]));
  }

  var Resolver = function () {
    function Resolver(provider, address, name) {
      properties_1.defineReadOnly(this, "provider", provider);
      properties_1.defineReadOnly(this, "name", name);
      properties_1.defineReadOnly(this, "address", provider.formatter.address(address));
    }

    Resolver.prototype._fetchBytes = function (selector, parameters) {
      return __awaiter(this, undefined, undefined, function () {
        var transaction, result, offset, length;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              transaction = {
                to: this.address,
                data: bytes_1.hexConcat([selector, hash_1.namehash(this.name), parameters || "0x"])
              };
              return [4, this.provider.call(transaction)];

            case 1:
              result = _a.sent();

              if (result === "0x") {
                return [2, null];
              }

              offset = bignumber_1.BigNumber.from(bytes_1.hexDataSlice(result, 0, 32)).toNumber();
              length = bignumber_1.BigNumber.from(bytes_1.hexDataSlice(result, offset, offset + 32)).toNumber();
              return [2, bytes_1.hexDataSlice(result, offset + 32, offset + 32 + length)];
          }
        });
      });
    };

    Resolver.prototype._getAddress = function (coinType, hexBytes) {
      var coinInfo = coinInfos[String(coinType)];

      if (coinInfo == null) {
        logger.throwError("unsupported coin type: " + coinType, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "getAddress(" + coinType + ")"
        });
      }

      if (coinInfo.ilk === "eth") {
        return this.provider.formatter.address(hexBytes);
      }

      var bytes = bytes_1.arrayify(hexBytes);

      if (coinInfo.p2pkh != null) {
        var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);

        if (p2pkh) {
          var length_1 = parseInt(p2pkh[1], 16);

          if (p2pkh[2].length === length_1 * 2 && length_1 >= 1 && length_1 <= 75) {
            return base58Encode(bytes_1.concat([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
          }
        }
      }

      if (coinInfo.p2sh != null) {
        var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);

        if (p2sh) {
          var length_2 = parseInt(p2sh[1], 16);

          if (p2sh[2].length === length_2 * 2 && length_2 >= 1 && length_2 <= 75) {
            return base58Encode(bytes_1.concat([[coinInfo.p2sh], "0x" + p2sh[2]]));
          }
        }
      }

      if (coinInfo.prefix != null) {
        var length_3 = bytes[1];
        var version_1 = bytes[0];

        if (version_1 === 0x00) {
          if (length_3 !== 20 && length_3 !== 32) {
            version_1 = -1;
          }
        } else {
          version_1 = -1;
        }

        if (version_1 >= 0 && bytes.length === 2 + length_3 && length_3 >= 1 && length_3 <= 75) {
          var words = bech32_1.default.toWords(bytes.slice(2));
          words.unshift(version_1);
          return bech32_1.default.encode(coinInfo.prefix, words);
        }
      }

      return null;
    };

    Resolver.prototype.getAddress = function (coinType) {
      return __awaiter(this, undefined, undefined, function () {
        var transaction, hexBytes_1, hexBytes, address;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (coinType == null) {
                coinType = 60;
              }

              if (!(coinType === 60)) return [3, 2];
              transaction = {
                to: this.address,
                data: "0x3b3b57de" + hash_1.namehash(this.name).substring(2)
              };
              return [4, this.provider.call(transaction)];

            case 1:
              hexBytes_1 = _a.sent();

              if (hexBytes_1 === "0x" || hexBytes_1 === constants_1.HashZero) {
                return [2, null];
              }

              return [2, this.provider.formatter.callAddress(hexBytes_1)];

            case 2:
              return [4, this._fetchBytes("0xf1cb7e06", bytes32ify(coinType))];

            case 3:
              hexBytes = _a.sent();

              if (hexBytes == null || hexBytes === "0x") {
                return [2, null];
              }

              address = this._getAddress(coinType, hexBytes);

              if (address == null) {
                logger.throwError("invalid or unsupported coin data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "getAddress(" + coinType + ")",
                  coinType: coinType,
                  data: hexBytes
                });
              }

              return [2, address];
          }
        });
      });
    };

    Resolver.prototype.getContentHash = function () {
      return __awaiter(this, undefined, undefined, function () {
        var hexBytes, ipfs, length_4, swarm;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this._fetchBytes("0xbc1c58d1")];

            case 1:
              hexBytes = _a.sent();

              if (hexBytes == null || hexBytes === "0x") {
                return [2, null];
              }

              ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);

              if (ipfs) {
                length_4 = parseInt(ipfs[3], 16);

                if (ipfs[4].length === length_4 * 2) {
                  return [2, "ipfs:/\/" + basex_1.Base58.encode("0x" + ipfs[1])];
                }
              }

              swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);

              if (swarm) {
                if (swarm[1].length === 64) {
                  return [2, "bzz:/\/" + swarm[1]];
                }
              }

              return [2, logger.throwError("invalid or unsupported content hash data", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "getContentHash()",
                data: hexBytes
              })];
          }
        });
      });
    };

    Resolver.prototype.getText = function (key) {
      return __awaiter(this, undefined, undefined, function () {
        var keyBytes, hexBytes;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              keyBytes = strings_1.toUtf8Bytes(key);
              keyBytes = bytes_1.concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);

              if (keyBytes.length % 32 !== 0) {
                keyBytes = bytes_1.concat([keyBytes, bytes_1.hexZeroPad("0x", 32 - key.length % 32)]);
              }

              return [4, this._fetchBytes("0x59d1d43c", bytes_1.hexlify(keyBytes))];

            case 1:
              hexBytes = _a.sent();

              if (hexBytes == null || hexBytes === "0x") {
                return [2, null];
              }

              return [2, strings_1.toUtf8String(hexBytes)];
          }
        });
      });
    };

    return Resolver;
  }();

  exports.Resolver = Resolver;
  var defaultFormatter = null;
  var nextPollId = 1;

  var BaseProvider = function (_super) {
    __extends(BaseProvider, _super);

    function BaseProvider(network) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, abstract_provider_1.Provider);
      _this = _super.call(this) || this;
      _this._events = [];
      _this._emitted = {
        block: -2
      };
      _this.formatter = _newTarget.getFormatter();
      properties_1.defineReadOnly(_this, "anyNetwork", network === "any");

      if (_this.anyNetwork) {
        network = _this.detectNetwork();
      }

      if (network instanceof Promise) {
        _this._networkPromise = network;
        network.catch(function (error) {});

        _this._ready().catch(function (error) {});
      } else {
        var knownNetwork = properties_1.getStatic(_newTarget, "getNetwork")(network);

        if (knownNetwork) {
          properties_1.defineReadOnly(_this, "_network", knownNetwork);

          _this.emit("network", knownNetwork, null);
        } else {
          logger.throwArgumentError("invalid network", "network", network);
        }
      }

      _this._maxInternalBlockNumber = -1024;
      _this._lastBlockNumber = -2;
      _this._pollingInterval = 4000;
      _this._fastQueryDate = 0;
      return _this;
    }

    BaseProvider.prototype._ready = function () {
      return __awaiter(this, undefined, undefined, function () {
        var network, error_1;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(this._network == null)) return [3, 7];
              network = null;
              if (!this._networkPromise) return [3, 4];
              _a.label = 1;

            case 1:
              _a.trys.push([1, 3,, 4]);

              return [4, this._networkPromise];

            case 2:
              network = _a.sent();
              return [3, 4];

            case 3:
              error_1 = _a.sent();
              return [3, 4];

            case 4:
              if (!(network == null)) return [3, 6];
              return [4, this.detectNetwork()];

            case 5:
              network = _a.sent();
              _a.label = 6;

            case 6:
              if (!network) {
                logger.throwError("no network detected", logger_1.Logger.errors.UNKNOWN_ERROR, {});
              }

              if (this._network == null) {
                if (this.anyNetwork) {
                  this._network = network;
                } else {
                  properties_1.defineReadOnly(this, "_network", network);
                }

                this.emit("network", network, null);
              }

              _a.label = 7;

            case 7:
              return [2, this._network];
          }
        });
      });
    };

    Object.defineProperty(BaseProvider.prototype, "ready", {
      get: function () {
        var _this = this;

        return web_1.poll(function () {
          return _this._ready().then(function (network) {
            return network;
          }, function (error) {
            if (error.code === logger_1.Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
              return undefined;
            }

            throw error;
          });
        });
      },
      enumerable: true,
      configurable: true
    });

    BaseProvider.getFormatter = function () {
      if (defaultFormatter == null) {
        defaultFormatter = new formatter_1.Formatter();
      }

      return defaultFormatter;
    };

    BaseProvider.getNetwork = function (network) {
      return networks_1.getNetwork(network == null ? "homestead" : network);
    };

    BaseProvider.prototype._getInternalBlockNumber = function (maxAge) {
      return __awaiter(this, undefined, undefined, function () {
        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this._ready()];

            case 1:
              _a.sent();

              internalBlockNumber = this._internalBlockNumber;
              if (!(maxAge > 0 && this._internalBlockNumber)) return [3, 3];
              return [4, internalBlockNumber];

            case 2:
              result = _a.sent();

              if (getTime() - result.respTime <= maxAge) {
                return [2, result.blockNumber];
              }

              _a.label = 3;

            case 3:
              reqTime = getTime();
              checkInternalBlockNumber = properties_1.resolveProperties({
                blockNumber: this.perform("getBlockNumber", {}),
                networkError: this.getNetwork().then(function (network) {
                  return null;
                }, function (error) {
                  return error;
                })
              }).then(function (_a) {
                var blockNumber = _a.blockNumber,
                    networkError = _a.networkError;

                if (networkError) {
                  if (_this._internalBlockNumber === checkInternalBlockNumber) {
                    _this._internalBlockNumber = null;
                  }

                  throw networkError;
                }

                var respTime = getTime();
                blockNumber = bignumber_1.BigNumber.from(blockNumber).toNumber();

                if (blockNumber < _this._maxInternalBlockNumber) {
                  blockNumber = _this._maxInternalBlockNumber;
                }

                _this._maxInternalBlockNumber = blockNumber;

                _this._setFastBlockNumber(blockNumber);

                return {
                  blockNumber: blockNumber,
                  reqTime: reqTime,
                  respTime: respTime
                };
              });
              this._internalBlockNumber = checkInternalBlockNumber;
              return [4, checkInternalBlockNumber];

            case 4:
              return [2, _a.sent().blockNumber];
          }
        });
      });
    };

    BaseProvider.prototype.poll = function () {
      return __awaiter(this, undefined, undefined, function () {
        var pollId, runners, blockNumber, i;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              pollId = nextPollId++;
              runners = [];
              return [4, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];

            case 1:
              blockNumber = _a.sent();

              this._setFastBlockNumber(blockNumber);

              this.emit("poll", pollId, blockNumber);

              if (blockNumber === this._lastBlockNumber) {
                this.emit("didPoll", pollId);
                return [2];
              }

              if (this._emitted.block === -2) {
                this._emitted.block = blockNumber - 1;
              }

              if (Math.abs(this._emitted.block - blockNumber) > 1000) {
                logger.warn("network block skew detected; skipping block events");
                this.emit("error", logger.makeError("network block skew detected", logger_1.Logger.errors.NETWORK_ERROR, {
                  blockNumber: blockNumber,
                  event: "blockSkew",
                  previousBlockNumber: this._emitted.block
                }));
                this.emit("block", blockNumber);
              } else {
                for (i = this._emitted.block + 1; i <= blockNumber; i++) {
                  this.emit("block", i);
                }
              }

              if (this._emitted.block !== blockNumber) {
                this._emitted.block = blockNumber;
                Object.keys(this._emitted).forEach(function (key) {
                  if (key === "block") {
                    return;
                  }

                  var eventBlockNumber = _this._emitted[key];

                  if (eventBlockNumber === "pending") {
                    return;
                  }

                  if (blockNumber - eventBlockNumber > 12) {
                    delete _this._emitted[key];
                  }
                });
              }

              if (this._lastBlockNumber === -2) {
                this._lastBlockNumber = blockNumber - 1;
              }

              this._events.forEach(function (event) {
                switch (event.type) {
                  case "tx":
                    {
                      var hash_2 = event.hash;

                      var runner = _this.getTransactionReceipt(hash_2).then(function (receipt) {
                        if (!receipt || receipt.blockNumber == null) {
                          return null;
                        }

                        _this._emitted["t:" + hash_2] = receipt.blockNumber;

                        _this.emit(hash_2, receipt);

                        return null;
                      }).catch(function (error) {
                        _this.emit("error", error);
                      });

                      runners.push(runner);
                      break;
                    }

                  case "filter":
                    {
                      var filter_1 = event.filter;
                      filter_1.fromBlock = _this._lastBlockNumber + 1;
                      filter_1.toBlock = blockNumber;

                      var runner = _this.getLogs(filter_1).then(function (logs) {
                        if (logs.length === 0) {
                          return;
                        }

                        logs.forEach(function (log) {
                          _this._emitted["b:" + log.blockHash] = log.blockNumber;
                          _this._emitted["t:" + log.transactionHash] = log.blockNumber;

                          _this.emit(filter_1, log);
                        });
                      }).catch(function (error) {
                        _this.emit("error", error);
                      });

                      runners.push(runner);
                      break;
                    }
                }
              });

              this._lastBlockNumber = blockNumber;
              Promise.all(runners).then(function () {
                _this.emit("didPoll", pollId);
              });
              return [2, null];
          }
        });
      });
    };

    BaseProvider.prototype.resetEventsBlock = function (blockNumber) {
      this._lastBlockNumber = blockNumber - 1;

      if (this.polling) {
        this.poll();
      }
    };

    Object.defineProperty(BaseProvider.prototype, "network", {
      get: function () {
        return this._network;
      },
      enumerable: true,
      configurable: true
    });

    BaseProvider.prototype.detectNetwork = function () {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          return [2, logger.throwError("provider does not support network detection", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "provider.detectNetwork"
          })];
        });
      });
    };

    BaseProvider.prototype.getNetwork = function () {
      return __awaiter(this, undefined, undefined, function () {
        var network, currentNetwork, error;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this._ready()];

            case 1:
              network = _a.sent();
              return [4, this.detectNetwork()];

            case 2:
              currentNetwork = _a.sent();
              if (!(network.chainId !== currentNetwork.chainId)) return [3, 5];
              if (!this.anyNetwork) return [3, 4];
              this._network = currentNetwork;
              this._lastBlockNumber = -2;
              this._fastBlockNumber = null;
              this._fastBlockNumberPromise = null;
              this._fastQueryDate = 0;
              this._emitted.block = -2;
              this._maxInternalBlockNumber = -1024;
              this._internalBlockNumber = null;
              this.emit("network", currentNetwork, network);
              return [4, stall(0)];

            case 3:
              _a.sent();

              return [2, this._network];

            case 4:
              error = logger.makeError("underlying network changed", logger_1.Logger.errors.NETWORK_ERROR, {
                event: "changed",
                network: network,
                detectedNetwork: currentNetwork
              });
              this.emit("error", error);
              throw error;

            case 5:
              return [2, network];
          }
        });
      });
    };

    Object.defineProperty(BaseProvider.prototype, "blockNumber", {
      get: function () {
        var _this = this;

        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {
          _this._setFastBlockNumber(blockNumber);
        });

        return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseProvider.prototype, "polling", {
      get: function () {
        return this._poller != null;
      },
      set: function (value) {
        var _this = this;

        if (value && !this._poller) {
          this._poller = setInterval(this.poll.bind(this), this.pollingInterval);

          if (!this._bootstrapPoll) {
            this._bootstrapPoll = setTimeout(function () {
              _this.poll();

              _this._bootstrapPoll = setTimeout(function () {
                if (!_this._poller) {
                  _this.poll();
                }

                _this._bootstrapPoll = null;
              }, _this.pollingInterval);
            }, 0);
          }
        } else if (!value && this._poller) {
          clearInterval(this._poller);
          this._poller = null;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseProvider.prototype, "pollingInterval", {
      get: function () {
        return this._pollingInterval;
      },
      set: function (value) {
        var _this = this;

        if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
          throw new Error("invalid polling interval");
        }

        this._pollingInterval = value;

        if (this._poller) {
          clearInterval(this._poller);
          this._poller = setInterval(function () {
            _this.poll();
          }, this._pollingInterval);
        }
      },
      enumerable: true,
      configurable: true
    });

    BaseProvider.prototype._getFastBlockNumber = function () {
      var _this = this;

      var now = getTime();

      if (now - this._fastQueryDate > 2 * this._pollingInterval) {
        this._fastQueryDate = now;
        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {
          if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
            _this._fastBlockNumber = blockNumber;
          }

          return _this._fastBlockNumber;
        });
      }

      return this._fastBlockNumberPromise;
    };

    BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {
      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
        return;
      }

      this._fastQueryDate = getTime();

      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
        this._fastBlockNumber = blockNumber;
        this._fastBlockNumberPromise = Promise.resolve(blockNumber);
      }
    };

    BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations, timeout) {
      return __awaiter(this, undefined, undefined, function () {
        var receipt;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (confirmations == null) {
                confirmations = 1;
              }

              return [4, this.getTransactionReceipt(transactionHash)];

            case 1:
              receipt = _a.sent();

              if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                return [2, receipt];
              }

              return [2, new Promise(function (resolve, reject) {
                var timer = null;
                var done = false;

                var handler = function (receipt) {
                  if (receipt.confirmations < confirmations) {
                    return;
                  }

                  if (timer) {
                    clearTimeout(timer);
                  }

                  if (done) {
                    return;
                  }

                  done = true;

                  _this.removeListener(transactionHash, handler);

                  resolve(receipt);
                };

                _this.on(transactionHash, handler);

                if (typeof timeout === "number" && timeout > 0) {
                  timer = setTimeout(function () {
                    if (done) {
                      return;
                    }

                    timer = null;
                    done = true;

                    _this.removeListener(transactionHash, handler);

                    reject(logger.makeError("timeout exceeded", logger_1.Logger.errors.TIMEOUT, {
                      timeout: timeout
                    }));
                  }, timeout);

                  if (timer.unref) {
                    timer.unref();
                  }
                }
              })];
          }
        });
      });
    };

    BaseProvider.prototype.getBlockNumber = function () {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          return [2, this._getInternalBlockNumber(0)];
        });
      });
    };

    BaseProvider.prototype.getGasPrice = function () {
      return __awaiter(this, undefined, undefined, function () {
        var _a, _b;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _c.sent();

              _b = (_a = bignumber_1.BigNumber).from;
              return [4, this.perform("getGasPrice", {})];

            case 2:
              return [2, _b.apply(_a, [_c.sent()])];
          }
        });
      });
    };

    BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {
      return __awaiter(this, undefined, undefined, function () {
        var params, _a, _b;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _c.sent();

              return [4, properties_1.resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
              })];

            case 2:
              params = _c.sent();
              _b = (_a = bignumber_1.BigNumber).from;
              return [4, this.perform("getBalance", params)];

            case 3:
              return [2, _b.apply(_a, [_c.sent()])];
          }
        });
      });
    };

    BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {
      return __awaiter(this, undefined, undefined, function () {
        var params, _a, _b;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _c.sent();

              return [4, properties_1.resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
              })];

            case 2:
              params = _c.sent();
              _b = (_a = bignumber_1.BigNumber).from;
              return [4, this.perform("getTransactionCount", params)];

            case 3:
              return [2, _b.apply(_a, [_c.sent()]).toNumber()];
          }
        });
      });
    };

    BaseProvider.prototype.getCode = function (addressOrName, blockTag) {
      return __awaiter(this, undefined, undefined, function () {
        var params, _a;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _b.sent();

              return [4, properties_1.resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
              })];

            case 2:
              params = _b.sent();
              _a = bytes_1.hexlify;
              return [4, this.perform("getCode", params)];

            case 3:
              return [2, _a.apply(undefined, [_b.sent()])];
          }
        });
      });
    };

    BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {
      return __awaiter(this, undefined, undefined, function () {
        var params, _a;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _b.sent();

              return [4, properties_1.resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag),
                position: Promise.resolve(position).then(function (p) {
                  return bytes_1.hexValue(p);
                })
              })];

            case 2:
              params = _b.sent();
              _a = bytes_1.hexlify;
              return [4, this.perform("getStorageAt", params)];

            case 3:
              return [2, _a.apply(undefined, [_b.sent()])];
          }
        });
      });
    };

    BaseProvider.prototype._wrapTransaction = function (tx, hash) {
      var _this = this;

      if (hash != null && bytes_1.hexDataLength(hash) !== 32) {
        throw new Error("invalid response - sendTransaction");
      }

      var result = tx;

      if (hash != null && tx.hash !== hash) {
        logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", logger_1.Logger.errors.UNKNOWN_ERROR, {
          expectedHash: tx.hash,
          returnedHash: hash
        });
      }

      result.wait = function (confirmations) {
        return __awaiter(_this, undefined, undefined, function () {
          var receipt;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (confirmations !== 0) {
                  this._emitted["t:" + tx.hash] = "pending";
                }

                return [4, this.waitForTransaction(tx.hash, confirmations)];

              case 1:
                receipt = _a.sent();

                if (receipt == null && confirmations === 0) {
                  return [2, null];
                }

                this._emitted["t:" + tx.hash] = receipt.blockNumber;

                if (receipt.status === 0) {
                  logger.throwError("transaction failed", logger_1.Logger.errors.CALL_EXCEPTION, {
                    transactionHash: tx.hash,
                    transaction: tx,
                    receipt: receipt
                  });
                }

                return [2, receipt];
            }
          });
        });
      };

      return result;
    };

    BaseProvider.prototype.sendTransaction = function (signedTransaction) {
      return __awaiter(this, undefined, undefined, function () {
        var hexTx, tx, hash, error_2;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _a.sent();

              return [4, Promise.resolve(signedTransaction).then(function (t) {
                return bytes_1.hexlify(t);
              })];

            case 2:
              hexTx = _a.sent();
              tx = this.formatter.transaction(signedTransaction);
              _a.label = 3;

            case 3:
              _a.trys.push([3, 5,, 6]);

              return [4, this.perform("sendTransaction", {
                signedTransaction: hexTx
              })];

            case 4:
              hash = _a.sent();
              return [2, this._wrapTransaction(tx, hash)];

            case 5:
              error_2 = _a.sent();
              error_2.transaction = tx;
              error_2.transactionHash = tx.hash;
              throw error_2;

            case 6:
              return [2];
          }
        });
      });
    };

    BaseProvider.prototype._getTransactionRequest = function (transaction) {
      return __awaiter(this, undefined, undefined, function () {
        var values, tx, _a, _b;

        var _this = this;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              return [4, transaction];

            case 1:
              values = _c.sent();
              tx = {};
              ["from", "to"].forEach(function (key) {
                if (values[key] == null) {
                  return;
                }

                tx[key] = Promise.resolve(values[key]).then(function (v) {
                  return v ? _this._getAddress(v) : null;
                });
              });
              ["gasLimit", "gasPrice", "value"].forEach(function (key) {
                if (values[key] == null) {
                  return;
                }

                tx[key] = Promise.resolve(values[key]).then(function (v) {
                  return v ? bignumber_1.BigNumber.from(v) : null;
                });
              });
              ["data"].forEach(function (key) {
                if (values[key] == null) {
                  return;
                }

                tx[key] = Promise.resolve(values[key]).then(function (v) {
                  return v ? bytes_1.hexlify(v) : null;
                });
              });
              _b = (_a = this.formatter).transactionRequest;
              return [4, properties_1.resolveProperties(tx)];

            case 2:
              return [2, _b.apply(_a, [_c.sent()])];
          }
        });
      });
    };

    BaseProvider.prototype._getFilter = function (filter) {
      return __awaiter(this, undefined, undefined, function () {
        var result, _a, _b;

        var _this = this;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              return [4, filter];

            case 1:
              filter = _c.sent();
              result = {};

              if (filter.address != null) {
                result.address = this._getAddress(filter.address);
              }

              ["blockHash", "topics"].forEach(function (key) {
                if (filter[key] == null) {
                  return;
                }

                result[key] = filter[key];
              });
              ["fromBlock", "toBlock"].forEach(function (key) {
                if (filter[key] == null) {
                  return;
                }

                result[key] = _this._getBlockTag(filter[key]);
              });
              _b = (_a = this.formatter).filter;
              return [4, properties_1.resolveProperties(result)];

            case 2:
              return [2, _b.apply(_a, [_c.sent()])];
          }
        });
      });
    };

    BaseProvider.prototype.call = function (transaction, blockTag) {
      return __awaiter(this, undefined, undefined, function () {
        var params, _a;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _b.sent();

              return [4, properties_1.resolveProperties({
                transaction: this._getTransactionRequest(transaction),
                blockTag: this._getBlockTag(blockTag)
              })];

            case 2:
              params = _b.sent();
              _a = bytes_1.hexlify;
              return [4, this.perform("call", params)];

            case 3:
              return [2, _a.apply(undefined, [_b.sent()])];
          }
        });
      });
    };

    BaseProvider.prototype.estimateGas = function (transaction) {
      return __awaiter(this, undefined, undefined, function () {
        var params, _a, _b;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _c.sent();

              return [4, properties_1.resolveProperties({
                transaction: this._getTransactionRequest(transaction)
              })];

            case 2:
              params = _c.sent();
              _b = (_a = bignumber_1.BigNumber).from;
              return [4, this.perform("estimateGas", params)];

            case 3:
              return [2, _b.apply(_a, [_c.sent()])];
          }
        });
      });
    };

    BaseProvider.prototype._getAddress = function (addressOrName) {
      return __awaiter(this, undefined, undefined, function () {
        var address;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this.resolveName(addressOrName)];

            case 1:
              address = _a.sent();

              if (address == null) {
                logger.throwError("ENS name not configured", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "resolveName(" + JSON.stringify(addressOrName) + ")"
                });
              }

              return [2, address];
          }
        });
      });
    };

    BaseProvider.prototype._getBlock = function (blockHashOrBlockTag, includeTransactions) {
      return __awaiter(this, undefined, undefined, function () {
        var blockNumber, params, _a, _b, _c, error_3;

        var _this = this;

        return __generator(this, function (_d) {
          switch (_d.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _d.sent();

              return [4, blockHashOrBlockTag];

            case 2:
              blockHashOrBlockTag = _d.sent();
              blockNumber = -128;
              params = {
                includeTransactions: !!includeTransactions
              };
              if (!bytes_1.isHexString(blockHashOrBlockTag, 32)) return [3, 3];
              params.blockHash = blockHashOrBlockTag;
              return [3, 6];

            case 3:
              _d.trys.push([3, 5,, 6]);

              _a = params;
              _c = (_b = this.formatter).blockTag;
              return [4, this._getBlockTag(blockHashOrBlockTag)];

            case 4:
              _a.blockTag = _c.apply(_b, [_d.sent()]);

              if (bytes_1.isHexString(params.blockTag)) {
                blockNumber = parseInt(params.blockTag.substring(2), 16);
              }

              return [3, 6];

            case 5:
              error_3 = _d.sent();
              logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
              return [3, 6];

            case 6:
              return [2, web_1.poll(function () {
                return __awaiter(_this, undefined, undefined, function () {
                  var block, blockNumber_1, i, tx, confirmations;
                  return __generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        return [4, this.perform("getBlock", params)];

                      case 1:
                        block = _a.sent();

                        if (block == null) {
                          if (params.blockHash != null) {
                            if (this._emitted["b:" + params.blockHash] == null) {
                              return [2, null];
                            }
                          }

                          if (params.blockTag != null) {
                            if (blockNumber > this._emitted.block) {
                              return [2, null];
                            }
                          }

                          return [2, undefined];
                        }

                        if (!includeTransactions) return [3, 8];
                        blockNumber_1 = null;
                        i = 0;
                        _a.label = 2;

                      case 2:
                        if (!(i < block.transactions.length)) return [3, 7];
                        tx = block.transactions[i];
                        if (!(tx.blockNumber == null)) return [3, 3];
                        tx.confirmations = 0;
                        return [3, 6];

                      case 3:
                        if (!(tx.confirmations == null)) return [3, 6];
                        if (!(blockNumber_1 == null)) return [3, 5];
                        return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];

                      case 4:
                        blockNumber_1 = _a.sent();
                        _a.label = 5;

                      case 5:
                        confirmations = blockNumber_1 - tx.blockNumber + 1;

                        if (confirmations <= 0) {
                          confirmations = 1;
                        }

                        tx.confirmations = confirmations;
                        _a.label = 6;

                      case 6:
                        i++;
                        return [3, 2];

                      case 7:
                        return [2, this.formatter.blockWithTransactions(block)];

                      case 8:
                        return [2, this.formatter.block(block)];
                    }
                  });
                });
              }, {
                oncePoll: this
              })];
          }
        });
      });
    };

    BaseProvider.prototype.getBlock = function (blockHashOrBlockTag) {
      return this._getBlock(blockHashOrBlockTag, false);
    };

    BaseProvider.prototype.getBlockWithTransactions = function (blockHashOrBlockTag) {
      return this._getBlock(blockHashOrBlockTag, true);
    };

    BaseProvider.prototype.getTransaction = function (transactionHash) {
      return __awaiter(this, undefined, undefined, function () {
        var params;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _a.sent();

              return [4, transactionHash];

            case 2:
              transactionHash = _a.sent();
              params = {
                transactionHash: this.formatter.hash(transactionHash, true)
              };
              return [2, web_1.poll(function () {
                return __awaiter(_this, undefined, undefined, function () {
                  var result, tx, blockNumber, confirmations;
                  return __generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        return [4, this.perform("getTransaction", params)];

                      case 1:
                        result = _a.sent();

                        if (result == null) {
                          if (this._emitted["t:" + transactionHash] == null) {
                            return [2, null];
                          }

                          return [2, undefined];
                        }

                        tx = this.formatter.transactionResponse(result);
                        if (!(tx.blockNumber == null)) return [3, 2];
                        tx.confirmations = 0;
                        return [3, 4];

                      case 2:
                        if (!(tx.confirmations == null)) return [3, 4];
                        return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];

                      case 3:
                        blockNumber = _a.sent();
                        confirmations = blockNumber - tx.blockNumber + 1;

                        if (confirmations <= 0) {
                          confirmations = 1;
                        }

                        tx.confirmations = confirmations;
                        _a.label = 4;

                      case 4:
                        return [2, this._wrapTransaction(tx)];
                    }
                  });
                });
              }, {
                oncePoll: this
              })];
          }
        });
      });
    };

    BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {
      return __awaiter(this, undefined, undefined, function () {
        var params;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _a.sent();

              return [4, transactionHash];

            case 2:
              transactionHash = _a.sent();
              params = {
                transactionHash: this.formatter.hash(transactionHash, true)
              };
              return [2, web_1.poll(function () {
                return __awaiter(_this, undefined, undefined, function () {
                  var result, receipt, blockNumber, confirmations;
                  return __generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        return [4, this.perform("getTransactionReceipt", params)];

                      case 1:
                        result = _a.sent();

                        if (result == null) {
                          if (this._emitted["t:" + transactionHash] == null) {
                            return [2, null];
                          }

                          return [2, undefined];
                        }

                        if (result.blockHash == null) {
                          return [2, undefined];
                        }

                        receipt = this.formatter.receipt(result);
                        if (!(receipt.blockNumber == null)) return [3, 2];
                        receipt.confirmations = 0;
                        return [3, 4];

                      case 2:
                        if (!(receipt.confirmations == null)) return [3, 4];
                        return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];

                      case 3:
                        blockNumber = _a.sent();
                        confirmations = blockNumber - receipt.blockNumber + 1;

                        if (confirmations <= 0) {
                          confirmations = 1;
                        }

                        receipt.confirmations = confirmations;
                        _a.label = 4;

                      case 4:
                        return [2, receipt];
                    }
                  });
                });
              }, {
                oncePoll: this
              })];
          }
        });
      });
    };

    BaseProvider.prototype.getLogs = function (filter) {
      return __awaiter(this, undefined, undefined, function () {
        var params, logs;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _a.sent();

              return [4, properties_1.resolveProperties({
                filter: this._getFilter(filter)
              })];

            case 2:
              params = _a.sent();
              return [4, this.perform("getLogs", params)];

            case 3:
              logs = _a.sent();
              logs.forEach(function (log) {
                if (log.removed == null) {
                  log.removed = false;
                }
              });
              return [2, formatter_1.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];
          }
        });
      });
    };

    BaseProvider.prototype.getEtherPrice = function () {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              _a.sent();

              return [2, this.perform("getEtherPrice", {})];
          }
        });
      });
    };

    BaseProvider.prototype._getBlockTag = function (blockTag) {
      return __awaiter(this, undefined, undefined, function () {
        var blockNumber;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, blockTag];

            case 1:
              blockTag = _a.sent();
              if (!(typeof blockTag === "number" && blockTag < 0)) return [3, 3];

              if (blockTag % 1) {
                logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
              }

              return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];

            case 2:
              blockNumber = _a.sent();
              blockNumber += blockTag;

              if (blockNumber < 0) {
                blockNumber = 0;
              }

              return [2, this.formatter.blockTag(blockNumber)];

            case 3:
              return [2, this.formatter.blockTag(blockTag)];
          }
        });
      });
    };

    BaseProvider.prototype.getResolver = function (name) {
      return __awaiter(this, undefined, undefined, function () {
        var address;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, this._getResolver(name)];

            case 1:
              address = _a.sent();

              if (address == null) {
                return [2, null];
              }

              return [2, new Resolver(this, address, name)];
          }
        });
      });
    };

    BaseProvider.prototype._getResolver = function (name) {
      return __awaiter(this, undefined, undefined, function () {
        var network, transaction, _a, _b;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              return [4, this.getNetwork()];

            case 1:
              network = _c.sent();

              if (!network.ensAddress) {
                logger.throwError("network does not support ENS", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "ENS",
                  network: network.name
                });
              }

              transaction = {
                to: network.ensAddress,
                data: "0x0178b8bf" + hash_1.namehash(name).substring(2)
              };
              _b = (_a = this.formatter).callAddress;
              return [4, this.call(transaction)];

            case 2:
              return [2, _b.apply(_a, [_c.sent()])];
          }
        });
      });
    };

    BaseProvider.prototype.resolveName = function (name) {
      return __awaiter(this, undefined, undefined, function () {
        var resolver;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, name];

            case 1:
              name = _a.sent();

              try {
                return [2, Promise.resolve(this.formatter.address(name))];
              } catch (error) {
                if (bytes_1.isHexString(name)) {
                  throw error;
                }
              }

              if (typeof name !== "string") {
                logger.throwArgumentError("invalid ENS name", "name", name);
              }

              return [4, this.getResolver(name)];

            case 2:
              resolver = _a.sent();

              if (!resolver) {
                return [2, null];
              }

              return [4, resolver.getAddress()];

            case 3:
              return [2, _a.sent()];
          }
        });
      });
    };

    BaseProvider.prototype.lookupAddress = function (address) {
      return __awaiter(this, undefined, undefined, function () {
        var reverseName, resolverAddress, bytes, _a, length, name, addr;

        return __generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              return [4, address];

            case 1:
              address = _b.sent();
              address = this.formatter.address(address);
              reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
              return [4, this._getResolver(reverseName)];

            case 2:
              resolverAddress = _b.sent();

              if (!resolverAddress) {
                return [2, null];
              }

              _a = bytes_1.arrayify;
              return [4, this.call({
                to: resolverAddress,
                data: "0x691f3431" + hash_1.namehash(reverseName).substring(2)
              })];

            case 3:
              bytes = _a.apply(undefined, [_b.sent()]);

              if (bytes.length < 32 || !bignumber_1.BigNumber.from(bytes.slice(0, 32)).eq(32)) {
                return [2, null];
              }

              bytes = bytes.slice(32);

              if (bytes.length < 32) {
                return [2, null];
              }

              length = bignumber_1.BigNumber.from(bytes.slice(0, 32)).toNumber();
              bytes = bytes.slice(32);

              if (length > bytes.length) {
                return [2, null];
              }

              name = strings_1.toUtf8String(bytes.slice(0, length));
              return [4, this.resolveName(name)];

            case 4:
              addr = _b.sent();

              if (addr != address) {
                return [2, null];
              }

              return [2, name];
          }
        });
      });
    };

    BaseProvider.prototype.perform = function (method, params) {
      return logger.throwError(method + " not implemented", logger_1.Logger.errors.NOT_IMPLEMENTED, {
        operation: method
      });
    };

    BaseProvider.prototype._startEvent = function (event) {
      this.polling = this._events.filter(function (e) {
        return e.pollable();
      }).length > 0;
    };

    BaseProvider.prototype._stopEvent = function (event) {
      this.polling = this._events.filter(function (e) {
        return e.pollable();
      }).length > 0;
    };

    BaseProvider.prototype._addEventListener = function (eventName, listener, once) {
      var event = new Event(getEventTag(eventName), listener, once);

      this._events.push(event);

      this._startEvent(event);

      return this;
    };

    BaseProvider.prototype.on = function (eventName, listener) {
      return this._addEventListener(eventName, listener, false);
    };

    BaseProvider.prototype.once = function (eventName, listener) {
      return this._addEventListener(eventName, listener, true);
    };

    BaseProvider.prototype.emit = function (eventName) {
      var _this = this;

      var args = [];

      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }

      var result = false;
      var stopped = [];
      var eventTag = getEventTag(eventName);
      this._events = this._events.filter(function (event) {
        if (event.tag !== eventTag) {
          return true;
        }

        setTimeout(function () {
          event.listener.apply(_this, args);
        }, 0);
        result = true;

        if (event.once) {
          stopped.push(event);
          return false;
        }

        return true;
      });
      stopped.forEach(function (event) {
        _this._stopEvent(event);
      });
      return result;
    };

    BaseProvider.prototype.listenerCount = function (eventName) {
      if (!eventName) {
        return this._events.length;
      }

      var eventTag = getEventTag(eventName);
      return this._events.filter(function (event) {
        return event.tag === eventTag;
      }).length;
    };

    BaseProvider.prototype.listeners = function (eventName) {
      if (eventName == null) {
        return this._events.map(function (event) {
          return event.listener;
        });
      }

      var eventTag = getEventTag(eventName);
      return this._events.filter(function (event) {
        return event.tag === eventTag;
      }).map(function (event) {
        return event.listener;
      });
    };

    BaseProvider.prototype.off = function (eventName, listener) {
      var _this = this;

      if (listener == null) {
        return this.removeAllListeners(eventName);
      }

      var stopped = [];
      var found = false;
      var eventTag = getEventTag(eventName);
      this._events = this._events.filter(function (event) {
        if (event.tag !== eventTag || event.listener != listener) {
          return true;
        }

        if (found) {
          return true;
        }

        found = true;
        stopped.push(event);
        return false;
      });
      stopped.forEach(function (event) {
        _this._stopEvent(event);
      });
      return this;
    };

    BaseProvider.prototype.removeAllListeners = function (eventName) {
      var _this = this;

      var stopped = [];

      if (eventName == null) {
        stopped = this._events;
        this._events = [];
      } else {
        var eventTag_1 = getEventTag(eventName);
        this._events = this._events.filter(function (event) {
          if (event.tag !== eventTag_1) {
            return true;
          }

          stopped.push(event);
          return false;
        });
      }

      stopped.forEach(function (event) {
        _this._stopEvent(event);
      });
      return this;
    };

    return BaseProvider;
  }(abstract_provider_1.Provider);

  exports.BaseProvider = BaseProvider;
},163,[80,87,32,36,61,74,161,42,129,67,164,173,37,174,175]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var base64_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[2]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[3]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[4]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[5]);

  var logger = new logger_1.Logger(_version_1.version);

  var geturl_1 = _$$_REQUIRE(_dependencyMap[6]);

  function staller(duration) {
    return new Promise(function (resolve) {
      setTimeout(resolve, duration);
    });
  }

  function bodyify(value, type) {
    if (value == null) {
      return null;
    }

    if (typeof value === "string") {
      return value;
    }

    if (bytes_1.isBytesLike(value)) {
      if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
        try {
          return strings_1.toUtf8String(value);
        } catch (error) {}

        ;
      }

      return bytes_1.hexlify(value);
    }

    return value;
  }

  function _fetchData(connection, body, processFunc) {
    var attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
    logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
    var throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
    var throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
    logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
    var headers = {};
    var url = null;
    var options = {
      method: "GET"
    };
    var allow304 = false;
    var timeout = 120000;

    if (typeof connection === "string") {
      url = connection;
    } else if (typeof connection === "object") {
      if (connection == null || connection.url == null) {
        logger.throwArgumentError("missing URL", "connection.url", connection);
      }

      url = connection.url;

      if (typeof connection.timeout === "number" && connection.timeout > 0) {
        timeout = connection.timeout;
      }

      if (connection.headers) {
        for (var key in connection.headers) {
          headers[key.toLowerCase()] = {
            key: key,
            value: String(connection.headers[key])
          };

          if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
            allow304 = true;
          }
        }
      }

      options.allowGzip = !!connection.allowGzip;

      if (connection.user != null && connection.password != null) {
        if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
          logger.throwError("basic authentication requires a secure https url", logger_1.Logger.errors.INVALID_ARGUMENT, {
            argument: "url",
            url: url,
            user: connection.user,
            password: "[REDACTED]"
          });
        }

        var authorization = connection.user + ":" + connection.password;
        headers["authorization"] = {
          key: "Authorization",
          value: "Basic " + base64_1.encode(strings_1.toUtf8Bytes(authorization))
        };
      }
    }

    if (body) {
      options.method = "POST";
      options.body = body;

      if (headers["content-type"] == null) {
        headers["content-type"] = {
          key: "Content-Type",
          value: "application/octet-stream"
        };
      }

      if (headers["content-length"] == null) {
        headers["content-length"] = {
          key: "Content-Length",
          value: String(body.length)
        };
      }
    }

    var flatHeaders = {};
    Object.keys(headers).forEach(function (key) {
      var header = headers[key];
      flatHeaders[header.key] = header.value;
    });
    options.headers = flatHeaders;

    var runningTimeout = function () {
      var timer = null;
      var promise = new Promise(function (resolve, reject) {
        if (timeout) {
          timer = setTimeout(function () {
            if (timer == null) {
              return;
            }

            timer = null;
            reject(logger.makeError("timeout", logger_1.Logger.errors.TIMEOUT, {
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              timeout: timeout,
              url: url
            }));
          }, timeout);
        }
      });

      var cancel = function () {
        if (timer == null) {
          return;
        }

        clearTimeout(timer);
        timer = null;
      };

      return {
        promise: promise,
        cancel: cancel
      };
    }();

    var runningFetch = function () {
      return __awaiter(this, undefined, undefined, function () {
        var attempt, response, tryAgain, stall, retryAfter, error_1, body_1, result, error_2, tryAgain, timeout_1;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              attempt = 0;
              _a.label = 1;

            case 1:
              if (!(attempt < attemptLimit)) return [3, 19];
              response = null;
              _a.label = 2;

            case 2:
              _a.trys.push([2, 8,, 9]);

              return [4, geturl_1.getUrl(url, options)];

            case 3:
              response = _a.sent();
              if (!(response.statusCode === 429 && attempt < attemptLimit)) return [3, 7];
              tryAgain = true;
              if (!throttleCallback) return [3, 5];
              return [4, throttleCallback(attempt, url)];

            case 4:
              tryAgain = _a.sent();
              _a.label = 5;

            case 5:
              if (!tryAgain) return [3, 7];
              stall = 0;
              retryAfter = response.headers["retry-after"];

              if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                stall = parseInt(retryAfter) * 1000;
              } else {
                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
              }

              return [4, staller(stall)];

            case 6:
              _a.sent();

              return [3, 18];

            case 7:
              return [3, 9];

            case 8:
              error_1 = _a.sent();
              response = error_1.response;

              if (response == null) {
                runningTimeout.cancel();
                logger.throwError("missing response", logger_1.Logger.errors.SERVER_ERROR, {
                  requestBody: bodyify(options.body, flatHeaders["content-type"]),
                  requestMethod: options.method,
                  serverError: error_1,
                  url: url
                });
              }

              return [3, 9];

            case 9:
              body_1 = response.body;

              if (allow304 && response.statusCode === 304) {
                body_1 = null;
              } else if (response.statusCode < 200 || response.statusCode >= 300) {
                runningTimeout.cancel();
                logger.throwError("bad response", logger_1.Logger.errors.SERVER_ERROR, {
                  status: response.statusCode,
                  headers: response.headers,
                  body: bodyify(body_1, response.headers ? response.headers["content-type"] : null),
                  requestBody: bodyify(options.body, flatHeaders["content-type"]),
                  requestMethod: options.method,
                  url: url
                });
              }

              if (!processFunc) return [3, 17];
              _a.label = 10;

            case 10:
              _a.trys.push([10, 12,, 17]);

              return [4, processFunc(body_1, response)];

            case 11:
              result = _a.sent();
              runningTimeout.cancel();
              return [2, result];

            case 12:
              error_2 = _a.sent();
              if (!(error_2.throttleRetry && attempt < attemptLimit)) return [3, 16];
              tryAgain = true;
              if (!throttleCallback) return [3, 14];
              return [4, throttleCallback(attempt, url)];

            case 13:
              tryAgain = _a.sent();
              _a.label = 14;

            case 14:
              if (!tryAgain) return [3, 16];
              timeout_1 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
              return [4, staller(timeout_1)];

            case 15:
              _a.sent();

              return [3, 18];

            case 16:
              runningTimeout.cancel();
              logger.throwError("processing response error", logger_1.Logger.errors.SERVER_ERROR, {
                body: bodyify(body_1, response.headers ? response.headers["content-type"] : null),
                error: error_2,
                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                requestMethod: options.method,
                url: url
              });
              return [3, 17];

            case 17:
              runningTimeout.cancel();
              return [2, body_1];

            case 18:
              attempt++;
              return [3, 1];

            case 19:
              return [2, logger.throwError("failed response", logger_1.Logger.errors.SERVER_ERROR, {
                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                requestMethod: options.method,
                url: url
              })];
          }
        });
      });
    }();

    return Promise.race([runningTimeout.promise, runningFetch]);
  }

  exports._fetchData = _fetchData;

  function fetchJson(connection, json, processFunc) {
    var processJsonFunc = function (value, response) {
      var result = null;

      if (value != null) {
        try {
          result = JSON.parse(strings_1.toUtf8String(value));
        } catch (error) {
          logger.throwError("invalid JSON", logger_1.Logger.errors.SERVER_ERROR, {
            body: value,
            error: error
          });
        }
      }

      if (processFunc) {
        result = processFunc(result, response);
      }

      return result;
    };

    var body = null;

    if (json != null) {
      body = strings_1.toUtf8Bytes(json);
      var updated = typeof connection === "string" ? {
        url: connection
      } : properties_1.shallowCopy(connection);

      if (updated.headers) {
        var hasContentType = Object.keys(updated.headers).filter(function (k) {
          return k.toLowerCase() === "content-type";
        }).length !== 0;

        if (!hasContentType) {
          updated.headers = properties_1.shallowCopy(updated.headers);
          updated.headers["content-type"] = "application/json";
        }
      } else {
        updated.headers = {
          "content-type": "application/json"
        };
      }

      connection = updated;
    }

    return _fetchData(connection, body, processJsonFunc);
  }

  exports.fetchJson = fetchJson;

  function poll(func, options) {
    if (!options) {
      options = {};
    }

    options = properties_1.shallowCopy(options);

    if (options.floor == null) {
      options.floor = 0;
    }

    if (options.ceiling == null) {
      options.ceiling = 10000;
    }

    if (options.interval == null) {
      options.interval = 250;
    }

    return new Promise(function (resolve, reject) {
      var timer = null;
      var done = false;

      var cancel = function () {
        if (done) {
          return false;
        }

        done = true;

        if (timer) {
          clearTimeout(timer);
        }

        return true;
      };

      if (options.timeout) {
        timer = setTimeout(function () {
          if (cancel()) {
            reject(new Error("timeout"));
          }
        }, options.timeout);
      }

      var retryLimit = options.retryLimit;
      var attempt = 0;

      function check() {
        return func().then(function (result) {
          if (result !== undefined) {
            if (cancel()) {
              resolve(result);
            }
          } else if (options.oncePoll) {
            options.oncePoll.once("poll", check);
          } else if (options.onceBlock) {
            options.onceBlock.once("block", check);
          } else if (!done) {
            attempt++;

            if (attempt > retryLimit) {
              if (cancel()) {
                reject(new Error("retry limit reached"));
              }

              return;
            }

            var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));

            if (timeout < options.floor) {
              timeout = options.floor;
            }

            if (timeout > options.ceiling) {
              timeout = options.ceiling;
            }

            setTimeout(check, timeout);
          }

          return null;
        }, function (error) {
          if (cancel()) {
            reject(error);
          }
        });
      }

      check();
    });
  }

  exports.poll = poll;
},164,[165,36,42,67,37,167,168]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var base64_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.decode = base64_1.decode;
  exports.encode = base64_1.encode;
},165,[166]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  function decode(textData) {
    return bytes_1.arrayify(new Uint8Array(Buffer.from(textData, "base64")));
  }

  exports.decode = decode;
  ;

  function encode(data) {
    return Buffer.from(bytes_1.arrayify(data)).toString("base64");
  }

  exports.encode = encode;
},166,[36]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "web/5.0.10";
},167,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  var __importDefault = this && this.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var http_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0]));

  var https_1 = __importDefault(_$$_REQUIRE(_dependencyMap[1]));

  var zlib_1 = _$$_REQUIRE(_dependencyMap[2]);

  var url_1 = _$$_REQUIRE(_dependencyMap[3]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[4]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[5]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[6]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[7]);

  var logger = new logger_1.Logger(_version_1.version);

  function getResponse(request) {
    return new Promise(function (resolve, reject) {
      request.once("response", function (resp) {
        var response = {
          statusCode: resp.statusCode,
          statusMessage: resp.statusMessage,
          headers: Object.keys(resp.headers).reduce(function (accum, name) {
            var value = resp.headers[name];

            if (Array.isArray(value)) {
              value = value.join(", ");
            }

            accum[name] = value;
            return accum;
          }, {}),
          body: null
        };
        resp.on("data", function (chunk) {
          if (response.body == null) {
            response.body = new Uint8Array(0);
          }

          response.body = bytes_1.concat([response.body, chunk]);
        });
        resp.on("end", function () {
          if (response.headers["content-encoding"] === "gzip") {
            response.body = bytes_1.arrayify(zlib_1.gunzipSync(response.body));
          }

          resolve(response);
        });
        resp.on("error", function (error) {
          error.response = response;
          reject(error);
        });
      });
      request.on("error", function (error) {
        reject(error);
      });
    });
  }

  function nonnull(value) {
    if (value == null) {
      return "";
    }

    return value;
  }

  function getUrl(href, options) {
    return __awaiter(this, undefined, undefined, function () {
      var url, request, req, response;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (options == null) {
              options = {};
            }

            url = url_1.parse(href);
            request = {
              protocol: nonnull(url.protocol),
              hostname: nonnull(url.hostname),
              port: nonnull(url.port),
              path: nonnull(url.pathname) + nonnull(url.search),
              method: options.method || "GET",
              headers: properties_1.shallowCopy(options.headers || {})
            };

            if (options.allowGzip) {
              request.headers["accept-encoding"] = "gzip";
            }

            req = null;

            switch (nonnull(url.protocol)) {
              case "http:":
                req = http_1.default.request(request);
                break;

              case "https:":
                req = https_1.default.request(request);
                break;

              default:
                logger.throwError("unsupported protocol " + url.protocol, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                  protocol: url.protocol,
                  operation: "request"
                });
            }

            if (options.body) {
              req.write(Buffer.from(options.body));
            }

            req.end();
            return [4, getResponse(req)];

          case 1:
            response = _a.sent();
            return [2, response];
        }
      });
    });
  }

  exports.getUrl = getUrl;
},168,[169,170,171,172,36,42,37,167]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('http');
},169,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('https');
},170,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('zlib');
},171,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('url');
},172,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
  var ALPHABET_MAP = {};

  for (var z = 0; z < ALPHABET.length; z++) {
    var x = ALPHABET.charAt(z);
    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous');
    ALPHABET_MAP[x] = z;
  }

  function polymodStep(pre) {
    var b = pre >> 25;
    return (pre & 0x1FFFFFF) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;
  }

  function prefixChk(prefix) {
    var chk = 1;

    for (var i = 0; i < prefix.length; ++i) {
      var c = prefix.charCodeAt(i);
      if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')';
      chk = polymodStep(chk) ^ c >> 5;
    }

    chk = polymodStep(chk);

    for (i = 0; i < prefix.length; ++i) {
      var v = prefix.charCodeAt(i);
      chk = polymodStep(chk) ^ v & 0x1f;
    }

    return chk;
  }

  function encode(prefix, words, LIMIT) {
    LIMIT = LIMIT || 90;
    if (prefix.length + 7 + words.length > LIMIT) throw new TypeError('Exceeds length limit');
    prefix = prefix.toLowerCase();
    var chk = prefixChk(prefix);
    if (typeof chk === 'string') throw new Error(chk);
    var result = prefix + '1';

    for (var i = 0; i < words.length; ++i) {
      var x = words[i];
      if (x >> 5 !== 0) throw new Error('Non 5-bit word');
      chk = polymodStep(chk) ^ x;
      result += ALPHABET.charAt(x);
    }

    for (i = 0; i < 6; ++i) {
      chk = polymodStep(chk);
    }

    chk ^= 1;

    for (i = 0; i < 6; ++i) {
      var v = chk >> (5 - i) * 5 & 0x1f;
      result += ALPHABET.charAt(v);
    }

    return result;
  }

  function __decode(str, LIMIT) {
    LIMIT = LIMIT || 90;
    if (str.length < 8) return str + ' too short';
    if (str.length > LIMIT) return 'Exceeds length limit';
    var lowered = str.toLowerCase();
    var uppered = str.toUpperCase();
    if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str;
    str = lowered;
    var split = str.lastIndexOf('1');
    if (split === -1) return 'No separator character for ' + str;
    if (split === 0) return 'Missing prefix for ' + str;
    var prefix = str.slice(0, split);
    var wordChars = str.slice(split + 1);
    if (wordChars.length < 6) return 'Data too short';
    var chk = prefixChk(prefix);
    if (typeof chk === 'string') return chk;
    var words = [];

    for (var i = 0; i < wordChars.length; ++i) {
      var c = wordChars.charAt(i);
      var v = ALPHABET_MAP[c];
      if (v === undefined) return 'Unknown character ' + c;
      chk = polymodStep(chk) ^ v;
      if (i + 6 >= wordChars.length) continue;
      words.push(v);
    }

    if (chk !== 1) return 'Invalid checksum for ' + str;
    return {
      prefix: prefix,
      words: words
    };
  }

  function decodeUnsafe() {
    var res = __decode.apply(null, arguments);

    if (typeof res === 'object') return res;
  }

  function decode(str) {
    var res = __decode.apply(null, arguments);

    if (typeof res === 'object') return res;
    throw new Error(res);
  }

  function convert(data, inBits, outBits, pad) {
    var value = 0;
    var bits = 0;
    var maxV = (1 << outBits) - 1;
    var result = [];

    for (var i = 0; i < data.length; ++i) {
      value = value << inBits | data[i];
      bits += inBits;

      while (bits >= outBits) {
        bits -= outBits;
        result.push(value >> bits & maxV);
      }
    }

    if (pad) {
      if (bits > 0) {
        result.push(value << outBits - bits & maxV);
      }
    } else {
      if (bits >= inBits) return 'Excess padding';
      if (value << outBits - bits & maxV) return 'Non-zero padding';
    }

    return result;
  }

  function toWordsUnsafe(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res)) return res;
  }

  function toWords(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res)) return res;
    throw new Error(res);
  }

  function fromWordsUnsafe(words) {
    var res = convert(words, 5, 8, false);
    if (Array.isArray(res)) return res;
  }

  function fromWords(words) {
    var res = convert(words, 5, 8, false);
    if (Array.isArray(res)) return res;
    throw new Error(res);
  }

  module.exports = {
    decodeUnsafe: decodeUnsafe,
    decode: decode,
    encode: encode,
    toWordsUnsafe: toWordsUnsafe,
    toWords: toWords,
    fromWordsUnsafe: fromWordsUnsafe,
    fromWords: fromWords
  };
},173,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "providers/5.0.15";
},174,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var address_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[2]);

  var constants_1 = _$$_REQUIRE(_dependencyMap[3]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[4]);

  var transactions_1 = _$$_REQUIRE(_dependencyMap[5]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[6]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[7]);

  var logger = new logger_1.Logger(_version_1.version);

  var Formatter = function () {
    function Formatter() {
      var _newTarget = this.constructor;
      logger.checkNew(_newTarget, Formatter);
      this.formats = this.getDefaultFormats();
    }

    Formatter.prototype.getDefaultFormats = function () {
      var _this = this;

      var formats = {};
      var address = this.address.bind(this);
      var bigNumber = this.bigNumber.bind(this);
      var blockTag = this.blockTag.bind(this);
      var data = this.data.bind(this);
      var hash = this.hash.bind(this);
      var hex = this.hex.bind(this);
      var number = this.number.bind(this);

      var strictData = function (v) {
        return _this.data(v, true);
      };

      formats.transaction = {
        hash: hash,
        blockHash: Formatter.allowNull(hash, null),
        blockNumber: Formatter.allowNull(number, null),
        transactionIndex: Formatter.allowNull(number, null),
        confirmations: Formatter.allowNull(number, null),
        from: address,
        gasPrice: bigNumber,
        gasLimit: bigNumber,
        to: Formatter.allowNull(address, null),
        value: bigNumber,
        nonce: number,
        data: data,
        r: Formatter.allowNull(this.uint256),
        s: Formatter.allowNull(this.uint256),
        v: Formatter.allowNull(number),
        creates: Formatter.allowNull(address, null),
        raw: Formatter.allowNull(data)
      };
      formats.transactionRequest = {
        from: Formatter.allowNull(address),
        nonce: Formatter.allowNull(number),
        gasLimit: Formatter.allowNull(bigNumber),
        gasPrice: Formatter.allowNull(bigNumber),
        to: Formatter.allowNull(address),
        value: Formatter.allowNull(bigNumber),
        data: Formatter.allowNull(strictData)
      };
      formats.receiptLog = {
        transactionIndex: number,
        blockNumber: number,
        transactionHash: hash,
        address: address,
        topics: Formatter.arrayOf(hash),
        data: data,
        logIndex: number,
        blockHash: hash
      };
      formats.receipt = {
        to: Formatter.allowNull(this.address, null),
        from: Formatter.allowNull(this.address, null),
        contractAddress: Formatter.allowNull(address, null),
        transactionIndex: number,
        root: Formatter.allowNull(hash),
        gasUsed: bigNumber,
        logsBloom: Formatter.allowNull(data),
        blockHash: hash,
        transactionHash: hash,
        logs: Formatter.arrayOf(this.receiptLog.bind(this)),
        blockNumber: number,
        confirmations: Formatter.allowNull(number, null),
        cumulativeGasUsed: bigNumber,
        status: Formatter.allowNull(number)
      };
      formats.block = {
        hash: hash,
        parentHash: hash,
        number: number,
        timestamp: number,
        nonce: Formatter.allowNull(hex),
        difficulty: this.difficulty.bind(this),
        gasLimit: bigNumber,
        gasUsed: bigNumber,
        miner: address,
        extraData: data,
        transactions: Formatter.allowNull(Formatter.arrayOf(hash))
      };
      formats.blockWithTransactions = properties_1.shallowCopy(formats.block);
      formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
      formats.filter = {
        fromBlock: Formatter.allowNull(blockTag, undefined),
        toBlock: Formatter.allowNull(blockTag, undefined),
        blockHash: Formatter.allowNull(hash, undefined),
        address: Formatter.allowNull(address, undefined),
        topics: Formatter.allowNull(this.topics.bind(this), undefined)
      };
      formats.filterLog = {
        blockNumber: Formatter.allowNull(number),
        blockHash: Formatter.allowNull(hash),
        transactionIndex: number,
        removed: Formatter.allowNull(this.boolean.bind(this)),
        address: address,
        data: Formatter.allowFalsish(data, "0x"),
        topics: Formatter.arrayOf(hash),
        transactionHash: hash,
        logIndex: number
      };
      return formats;
    };

    Formatter.prototype.number = function (number) {
      if (number === "0x") {
        return 0;
      }

      return bignumber_1.BigNumber.from(number).toNumber();
    };

    Formatter.prototype.bigNumber = function (value) {
      return bignumber_1.BigNumber.from(value);
    };

    Formatter.prototype.boolean = function (value) {
      if (typeof value === "boolean") {
        return value;
      }

      if (typeof value === "string") {
        value = value.toLowerCase();

        if (value === "true") {
          return true;
        }

        if (value === "false") {
          return false;
        }
      }

      throw new Error("invalid boolean - " + value);
    };

    Formatter.prototype.hex = function (value, strict) {
      if (typeof value === "string") {
        if (!strict && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }

        if (bytes_1.isHexString(value)) {
          return value.toLowerCase();
        }
      }

      return logger.throwArgumentError("invalid hash", "value", value);
    };

    Formatter.prototype.data = function (value, strict) {
      var result = this.hex(value, strict);

      if (result.length % 2 !== 0) {
        throw new Error("invalid data; odd-length - " + value);
      }

      return result;
    };

    Formatter.prototype.address = function (value) {
      return address_1.getAddress(value);
    };

    Formatter.prototype.callAddress = function (value) {
      if (!bytes_1.isHexString(value, 32)) {
        return null;
      }

      var address = address_1.getAddress(bytes_1.hexDataSlice(value, 12));
      return address === constants_1.AddressZero ? null : address;
    };

    Formatter.prototype.contractAddress = function (value) {
      return address_1.getContractAddress(value);
    };

    Formatter.prototype.blockTag = function (blockTag) {
      if (blockTag == null) {
        return "st";
      }

      if (blockTag === "earliest") {
        return "0x0";
      }

      if (blockTag === "st" || blockTag === "pending") {
        return blockTag;
      }

      if (typeof blockTag === "number" || bytes_1.isHexString(blockTag)) {
        return bytes_1.hexValue(blockTag);
      }

      throw new Error("invalid blockTag");
    };

    Formatter.prototype.hash = function (value, strict) {
      var result = this.hex(value, strict);

      if (bytes_1.hexDataLength(result) !== 32) {
        return logger.throwArgumentError("invalid hash", "value", value);
      }

      return result;
    };

    Formatter.prototype.difficulty = function (value) {
      if (value == null) {
        return null;
      }

      var v = bignumber_1.BigNumber.from(value);

      try {
        return v.toNumber();
      } catch (error) {}

      return null;
    };

    Formatter.prototype.uint256 = function (value) {
      if (!bytes_1.isHexString(value)) {
        throw new Error("invalid uint256");
      }

      return bytes_1.hexZeroPad(value, 32);
    };

    Formatter.prototype._block = function (value, format) {
      if (value.author != null && value.miner == null) {
        value.miner = value.author;
      }

      return Formatter.check(format, value);
    };

    Formatter.prototype.block = function (value) {
      return this._block(value, this.formats.block);
    };

    Formatter.prototype.blockWithTransactions = function (value) {
      return this._block(value, this.formats.blockWithTransactions);
    };

    Formatter.prototype.transactionRequest = function (value) {
      return Formatter.check(this.formats.transactionRequest, value);
    };

    Formatter.prototype.transactionResponse = function (transaction) {
      if (transaction.gas != null && transaction.gasLimit == null) {
        transaction.gasLimit = transaction.gas;
      }

      if (transaction.to && bignumber_1.BigNumber.from(transaction.to).isZero()) {
        transaction.to = "0x0000000000000000000000000000000000000000";
      }

      if (transaction.input != null && transaction.data == null) {
        transaction.data = transaction.input;
      }

      if (transaction.to == null && transaction.creates == null) {
        transaction.creates = this.contractAddress(transaction);
      }

      var result = Formatter.check(this.formats.transaction, transaction);

      if (transaction.chainId != null) {
        var chainId = transaction.chainId;

        if (bytes_1.isHexString(chainId)) {
          chainId = bignumber_1.BigNumber.from(chainId).toNumber();
        }

        result.chainId = chainId;
      } else {
        var chainId = transaction.networkId;

        if (chainId == null && result.v == null) {
          chainId = transaction.chainId;
        }

        if (bytes_1.isHexString(chainId)) {
          chainId = bignumber_1.BigNumber.from(chainId).toNumber();
        }

        if (typeof chainId !== "number" && result.v != null) {
          chainId = (result.v - 35) / 2;

          if (chainId < 0) {
            chainId = 0;
          }

          chainId = parseInt(chainId);
        }

        if (typeof chainId !== "number") {
          chainId = 0;
        }

        result.chainId = chainId;
      }

      if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
        result.blockHash = null;
      }

      return result;
    };

    Formatter.prototype.transaction = function (value) {
      return transactions_1.parse(value);
    };

    Formatter.prototype.receiptLog = function (value) {
      return Formatter.check(this.formats.receiptLog, value);
    };

    Formatter.prototype.receipt = function (value) {
      var result = Formatter.check(this.formats.receipt, value);

      if (value.status != null) {
        result.byzantium = true;
      }

      return result;
    };

    Formatter.prototype.topics = function (value) {
      var _this = this;

      if (Array.isArray(value)) {
        return value.map(function (v) {
          return _this.topics(v);
        });
      } else if (value != null) {
        return this.hash(value, true);
      }

      return null;
    };

    Formatter.prototype.filter = function (value) {
      return Formatter.check(this.formats.filter, value);
    };

    Formatter.prototype.filterLog = function (value) {
      return Formatter.check(this.formats.filterLog, value);
    };

    Formatter.check = function (format, object) {
      var result = {};

      for (var key in format) {
        try {
          var value = format[key](object[key]);

          if (value !== undefined) {
            result[key] = value;
          }
        } catch (error) {
          error.checkKey = key;
          error.checkValue = object[key];
          throw error;
        }
      }

      return result;
    };

    Formatter.allowNull = function (format, nullValue) {
      return function (value) {
        if (value == null) {
          return nullValue;
        }

        return format(value);
      };
    };

    Formatter.allowFalsish = function (format, replaceValue) {
      return function (value) {
        if (!value) {
          return replaceValue;
        }

        return format(value);
      };
    };

    Formatter.arrayOf = function (format) {
      return function (array) {
        if (!Array.isArray(array)) {
          throw new Error("not an array");
        }

        var result = [];
        array.forEach(function (value) {
          result.push(format(value));
        });
        return result;
      };
    };

    return Formatter;
  }();

  exports.Formatter = Formatter;

  function isCommunityResourcable(value) {
    return value && typeof value.isCommunityResource === "function";
  }

  exports.isCommunityResourcable = isCommunityResourcable;

  function isCommunityResource(value) {
    return isCommunityResourcable(value) && value.isCommunityResource();
  }

  exports.isCommunityResource = isCommunityResource;
  var throttleMessage = false;

  function showThrottleMessage() {
    if (throttleMessage) {
      return;
    }

    throttleMessage = true;
    console.log("========= NOTICE =========");
    console.log("Request-Rate Exceeded  (this message will not be repeated)");
    console.log("");
    console.log("The default API keys for each service are provided as a highly-throttled,");
    console.log("community resource for low-traffic projects and early prototyping.");
    console.log("");
    console.log("While your application will continue to function, we highly recommended");
    console.log("signing up for your own API keys to improve performance, increase your");
    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
    console.log("");
    console.log("For more details: https:/\/docs.ethers.io/api-keys/");
    console.log("==========================");
  }

  exports.showThrottleMessage = showThrottleMessage;
},175,[48,32,36,61,42,133,37,174]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var properties_1 = _$$_REQUIRE(_dependencyMap[0]);

  var formatter_1 = _$$_REQUIRE(_dependencyMap[1]);

  var websocket_provider_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[3]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[4]);

  var logger = new logger_1.Logger(_version_1.version);

  var url_json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[5]);

  var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";

  var AlchemyWebSocketProvider = function (_super) {
    __extends(AlchemyWebSocketProvider, _super);

    function AlchemyWebSocketProvider(network, apiKey) {
      var _this = this;

      var provider = new AlchemyProvider(network, apiKey);
      var url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
      _this = _super.call(this, url, provider.network) || this;
      properties_1.defineReadOnly(_this, "apiKey", provider.apiKey);
      return _this;
    }

    AlchemyWebSocketProvider.prototype.isCommunityResource = function () {
      return this.apiKey === defaultApiKey;
    };

    return AlchemyWebSocketProvider;
  }(websocket_provider_1.WebSocketProvider);

  exports.AlchemyWebSocketProvider = AlchemyWebSocketProvider;

  var AlchemyProvider = function (_super) {
    __extends(AlchemyProvider, _super);

    function AlchemyProvider() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    AlchemyProvider.getWebSocketProvider = function (network, apiKey) {
      return new AlchemyWebSocketProvider(network, apiKey);
    };

    AlchemyProvider.getApiKey = function (apiKey) {
      if (apiKey == null) {
        return defaultApiKey;
      }

      if (apiKey && typeof apiKey !== "string") {
        logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
      }

      return apiKey;
    };

    AlchemyProvider.getUrl = function (network, apiKey) {
      var host = null;

      switch (network.name) {
        case "homestead":
          host = "eth-mainnet.alchemyapi.io/v2/";
          break;

        case "ropsten":
          host = "eth-ropsten.alchemyapi.io/v2/";
          break;

        case "rinkeby":
          host = "eth-rinkeby.alchemyapi.io/v2/";
          break;

        case "goerli":
          host = "eth-goerli.alchemyapi.io/v2/";
          break;

        case "kovan":
          host = "eth-kovan.alchemyapi.io/v2/";
          break;

        default:
          logger.throwArgumentError("unsupported network", "network", arguments[0]);
      }

      return {
        allowGzip: true,
        url: "https://" + host + apiKey,
        throttleCallback: function (attempt, url) {
          if (apiKey === defaultApiKey) {
            formatter_1.showThrottleMessage();
          }

          return Promise.resolve(true);
        }
      };
    };

    AlchemyProvider.prototype.isCommunityResource = function () {
      return this.apiKey === defaultApiKey;
    };

    return AlchemyProvider;
  }(url_json_rpc_provider_1.UrlJsonRpcProvider);

  exports.AlchemyProvider = AlchemyProvider;
},176,[42,175,177,37,174,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[0]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[1]);

  var json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[2]);

  var ws_1 = _$$_REQUIRE(_dependencyMap[3]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[4]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[5]);

  var logger = new logger_1.Logger(_version_1.version);
  var NextId = 1;

  var WebSocketProvider = function (_super) {
    __extends(WebSocketProvider, _super);

    function WebSocketProvider(url, network) {
      var _this = this;

      if (network === "any") {
        logger.throwError("WebSocketProvider does not support 'any' network yet", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "network:any"
        });
      }

      _this = _super.call(this, url, network) || this;
      _this._pollingInterval = -1;
      _this._wsReady = false;
      properties_1.defineReadOnly(_this, "_websocket", new ws_1.WebSocket(_this.connection.url));
      properties_1.defineReadOnly(_this, "_requests", {});
      properties_1.defineReadOnly(_this, "_subs", {});
      properties_1.defineReadOnly(_this, "_subIds", {});
      properties_1.defineReadOnly(_this, "_detectNetwork", _super.prototype.detectNetwork.call(_this));

      _this._websocket.onopen = function () {
        _this._wsReady = true;
        Object.keys(_this._requests).forEach(function (id) {
          _this._websocket.send(_this._requests[id].payload);
        });
      };

      _this._websocket.onmessage = function (messageEvent) {
        var data = messageEvent.data;
        var result = JSON.parse(data);

        if (result.id != null) {
          var id = String(result.id);
          var request = _this._requests[id];
          delete _this._requests[id];

          if (result.result !== undefined) {
            request.callback(null, result.result);

            _this.emit("debug", {
              action: "response",
              request: JSON.parse(request.payload),
              response: result.result,
              provider: _this
            });
          } else {
            var error = null;

            if (result.error) {
              error = new Error(result.error.message || "unknown error");
              properties_1.defineReadOnly(error, "code", result.error.code || null);
              properties_1.defineReadOnly(error, "response", data);
            } else {
              error = new Error("unknown error");
            }

            request.callback(error, undefined);

            _this.emit("debug", {
              action: "response",
              error: error,
              request: JSON.parse(request.payload),
              provider: _this
            });
          }
        } else if (result.method === "eth_subscription") {
          var sub = _this._subs[result.params.subscription];

          if (sub) {
            sub.processFunc(result.params.result);
          }
        } else {
          console.warn("this should not happen");
        }
      };

      var fauxPoll = setInterval(function () {
        _this.emit("poll");
      }, 1000);

      if (fauxPoll.unref) {
        fauxPoll.unref();
      }

      return _this;
    }

    WebSocketProvider.prototype.detectNetwork = function () {
      return this._detectNetwork;
    };

    Object.defineProperty(WebSocketProvider.prototype, "pollingInterval", {
      get: function () {
        return 0;
      },
      set: function (value) {
        logger.throwError("cannot set polling interval on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setPollingInterval"
        });
      },
      enumerable: true,
      configurable: true
    });

    WebSocketProvider.prototype.resetEventsBlock = function (blockNumber) {
      logger.throwError("cannot reset events block on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "resetEventBlock"
      });
    };

    WebSocketProvider.prototype.poll = function () {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          return [2, null];
        });
      });
    };

    Object.defineProperty(WebSocketProvider.prototype, "polling", {
      set: function (value) {
        if (!value) {
          return;
        }

        logger.throwError("cannot set polling on WebSocketProvider", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "setPolling"
        });
      },
      enumerable: true,
      configurable: true
    });

    WebSocketProvider.prototype.send = function (method, params) {
      var _this = this;

      var rid = NextId++;
      return new Promise(function (resolve, reject) {
        function callback(error, result) {
          if (error) {
            return reject(error);
          }

          return resolve(result);
        }

        var payload = JSON.stringify({
          method: method,
          params: params,
          id: rid,
          jsonrpc: "2.0"
        });

        _this.emit("debug", {
          action: "request",
          request: JSON.parse(payload),
          provider: _this
        });

        _this._requests[String(rid)] = {
          callback: callback,
          payload: payload
        };

        if (_this._wsReady) {
          _this._websocket.send(payload);
        }
      });
    };

    WebSocketProvider.defaultUrl = function () {
      return "ws:/\/localhost:8546";
    };

    WebSocketProvider.prototype._subscribe = function (tag, param, processFunc) {
      return __awaiter(this, undefined, undefined, function () {
        var subIdPromise, subId;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              subIdPromise = this._subIds[tag];

              if (subIdPromise == null) {
                subIdPromise = Promise.all(param).then(function (param) {
                  return _this.send("eth_subscribe", param);
                });
                this._subIds[tag] = subIdPromise;
              }

              return [4, subIdPromise];

            case 1:
              subId = _a.sent();
              this._subs[subId] = {
                tag: tag,
                processFunc: processFunc
              };
              return [2];
          }
        });
      });
    };

    WebSocketProvider.prototype._startEvent = function (event) {
      var _this = this;

      switch (event.type) {
        case "block":
          this._subscribe("block", ["newHeads"], function (result) {
            var blockNumber = bignumber_1.BigNumber.from(result.number).toNumber();
            _this._emitted.block = blockNumber;

            _this.emit("block", blockNumber);
          });

          break;

        case "pending":
          this._subscribe("pending", ["newPendingTransactions"], function (result) {
            _this.emit("pending", result);
          });

          break;

        case "filter":
          this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], function (result) {
            if (result.removed == null) {
              result.removed = false;
            }

            _this.emit(event.filter, _this.formatter.filterLog(result));
          });

          break;

        case "tx":
          {
            var emitReceipt_1 = function (event) {
              var hash = event.hash;

              _this.getTransactionReceipt(hash).then(function (receipt) {
                if (!receipt) {
                  return;
                }

                _this.emit(hash, receipt);
              });
            };

            emitReceipt_1(event);

            this._subscribe("tx", ["newHeads"], function (result) {
              _this._events.filter(function (e) {
                return e.type === "tx";
              }).forEach(emitReceipt_1);
            });

            break;
          }

        case "debug":
        case "poll":
        case "willPoll":
        case "didPoll":
        case "error":
          break;

        default:
          console.log("unhandled:", event);
          break;
      }
    };

    WebSocketProvider.prototype._stopEvent = function (event) {
      var _this = this;

      var tag = event.tag;

      if (event.type === "tx") {
        if (this._events.filter(function (e) {
          return e.type === "tx";
        }).length) {
          return;
        }

        tag = "tx";
      } else if (this.listenerCount(event.event)) {
        return;
      }

      var subId = this._subIds[tag];

      if (!subId) {
        return;
      }

      delete this._subIds[tag];
      subId.then(function (subId) {
        if (!_this._subs[subId]) {
          return;
        }

        delete _this._subs[subId];

        _this.send("eth_unsubscribe", [subId]);
      });
    };

    WebSocketProvider.prototype.destroy = function () {
      return __awaiter(this, undefined, undefined, function () {
        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(this._websocket.readyState === ws_1.WebSocket.CONNECTING)) return [3, 2];
              return [4, new Promise(function (resolve) {
                _this._websocket.onopen = function () {
                  resolve(true);
                };

                _this._websocket.onerror = function () {
                  resolve(false);
                };
              })];

            case 1:
              _a.sent();

              _a.label = 2;

            case 2:
              this._websocket.close(1000);

              return [2];
          }
        });
      });
    };

    return WebSocketProvider;
  }(json_rpc_provider_1.JsonRpcProvider);

  exports.WebSocketProvider = WebSocketProvider;
},177,[32,42,178,179,37,174]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abstract_signer_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[2]);

  var hash_1 = _$$_REQUIRE(_dependencyMap[3]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[4]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[5]);

  var web_1 = _$$_REQUIRE(_dependencyMap[6]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[7]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[8]);

  var logger = new logger_1.Logger(_version_1.version);

  var base_provider_1 = _$$_REQUIRE(_dependencyMap[9]);

  var errorGas = ["call", "estimateGas"];

  function checkError(method, error, params) {
    var message = error.message;

    if (error.code === logger_1.Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }

    message = (message || "").toLowerCase();
    var transaction = params.transaction || params.signedTransaction;

    if (message.match(/insufficient funds/)) {
      logger.throwError("insufficient funds for intrinsic transaction cost", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {
        error: error,
        method: method,
        transaction: transaction
      });
    }

    if (message.match(/nonce too low/)) {
      logger.throwError("nonce has already been used", logger_1.Logger.errors.NONCE_EXPIRED, {
        error: error,
        method: method,
        transaction: transaction
      });
    }

    if (message.match(/replacement transaction underpriced/)) {
      logger.throwError("replacement fee too low", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {
        error: error,
        method: method,
        transaction: transaction
      });
    }

    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
      logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
        error: error,
        method: method,
        transaction: transaction
      });
    }

    throw error;
  }

  function timer(timeout) {
    return new Promise(function (resolve) {
      setTimeout(resolve, timeout);
    });
  }

  function getResult(payload) {
    if (payload.error) {
      var error = new Error(payload.error.message);
      error.code = payload.error.code;
      error.data = payload.error.data;
      throw error;
    }

    return payload.result;
  }

  function getLowerCase(value) {
    if (value) {
      return value.toLowerCase();
    }

    return value;
  }

  var _constructorGuard = {};

  var JsonRpcSigner = function (_super) {
    __extends(JsonRpcSigner, _super);

    function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, JsonRpcSigner);
      _this = _super.call(this) || this;

      if (constructorGuard !== _constructorGuard) {
        throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
      }

      properties_1.defineReadOnly(_this, "provider", provider);

      if (addressOrIndex == null) {
        addressOrIndex = 0;
      }

      if (typeof addressOrIndex === "string") {
        properties_1.defineReadOnly(_this, "_address", _this.provider.formatter.address(addressOrIndex));
        properties_1.defineReadOnly(_this, "_index", null);
      } else if (typeof addressOrIndex === "number") {
        properties_1.defineReadOnly(_this, "_index", addressOrIndex);
        properties_1.defineReadOnly(_this, "_address", null);
      } else {
        logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
      }

      return _this;
    }

    JsonRpcSigner.prototype.connect = function (provider) {
      return logger.throwError("cannot alter JSON-RPC Signer connection", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "connect"
      });
    };

    JsonRpcSigner.prototype.connectUnchecked = function () {
      return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
    };

    JsonRpcSigner.prototype.getAddress = function () {
      var _this = this;

      if (this._address) {
        return Promise.resolve(this._address);
      }

      return this.provider.send("eth_accounts", []).then(function (accounts) {
        if (accounts.length <= _this._index) {
          logger.throwError("unknown account #" + _this._index, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "getAddress"
          });
        }

        return _this.provider.formatter.address(accounts[_this._index]);
      });
    };

    JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {
      var _this = this;

      transaction = properties_1.shallowCopy(transaction);
      var fromAddress = this.getAddress().then(function (address) {
        if (address) {
          address = address.toLowerCase();
        }

        return address;
      });

      if (transaction.gasLimit == null) {
        var estimate = properties_1.shallowCopy(transaction);
        estimate.from = fromAddress;
        transaction.gasLimit = this.provider.estimateGas(estimate);
      }

      return properties_1.resolveProperties({
        tx: properties_1.resolveProperties(transaction),
        sender: fromAddress
      }).then(function (_a) {
        var tx = _a.tx,
            sender = _a.sender;

        if (tx.from != null) {
          if (tx.from.toLowerCase() !== sender) {
            logger.throwArgumentError("from address mismatch", "transaction", transaction);
          }
        } else {
          tx.from = sender;
        }

        var hexTx = _this.provider.constructor.hexlifyTransaction(tx, {
          from: true
        });

        return _this.provider.send("eth_sendTransaction", [hexTx]).then(function (hash) {
          return hash;
        }, function (error) {
          return checkError("sendTransaction", error, hexTx);
        });
      });
    };

    JsonRpcSigner.prototype.signTransaction = function (transaction) {
      return logger.throwError("signing transactions is unsupported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "signTransaction"
      });
    };

    JsonRpcSigner.prototype.sendTransaction = function (transaction) {
      var _this = this;

      return this.sendUncheckedTransaction(transaction).then(function (hash) {
        return web_1.poll(function () {
          return _this.provider.getTransaction(hash).then(function (tx) {
            if (tx === null) {
              return undefined;
            }

            return _this.provider._wrapTransaction(tx, hash);
          });
        }, {
          onceBlock: _this.provider
        }).catch(function (error) {
          error.transactionHash = hash;
          throw error;
        });
      });
    };

    JsonRpcSigner.prototype.signMessage = function (message) {
      return __awaiter(this, undefined, undefined, function () {
        var data, address;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              data = typeof message === "string" ? strings_1.toUtf8Bytes(message) : message;
              return [4, this.getAddress()];

            case 1:
              address = _a.sent();
              return [4, this.provider.send("eth_sign", [address.toLowerCase(), bytes_1.hexlify(data)])];

            case 2:
              return [2, _a.sent()];
          }
        });
      });
    };

    JsonRpcSigner.prototype._signTypedData = function (domain, types, value) {
      return __awaiter(this, undefined, undefined, function () {
        var popud, address;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, hash_1._TypedDataEncoder.resolveNames(domain, types, value, function (name) {
                return _this.provider.resolveName(name);
              })];

            case 1:
              popud = _a.sent();
              return [4, this.getAddress()];

            case 2:
              address = _a.sent();
              return [4, this.provider.send("eth_signTypedData_v4", [address.toLowerCase(), JSON.stringify(hash_1._TypedDataEncoder.getPayload(popud.domain, types, popud.value))])];

            case 3:
              return [2, _a.sent()];
          }
        });
      });
    };

    JsonRpcSigner.prototype.unlock = function (password) {
      return __awaiter(this, undefined, undefined, function () {
        var provider, address;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              provider = this.provider;
              return [4, this.getAddress()];

            case 1:
              address = _a.sent();
              return [2, provider.send("personal_unlockAccount", [address.toLowerCase(), password, null])];
          }
        });
      });
    };

    return JsonRpcSigner;
  }(abstract_signer_1.Signer);

  exports.JsonRpcSigner = JsonRpcSigner;

  var UncheckedJsonRpcSigner = function (_super) {
    __extends(UncheckedJsonRpcSigner, _super);

    function UncheckedJsonRpcSigner() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    UncheckedJsonRpcSigner.prototype.sendTransaction = function (transaction) {
      var _this = this;

      return this.sendUncheckedTransaction(transaction).then(function (hash) {
        return {
          hash: hash,
          nonce: null,
          gasLimit: null,
          gasPrice: null,
          data: null,
          value: null,
          chainId: null,
          confirmations: 0,
          from: null,
          wait: function (confirmations) {
            return _this.provider.waitForTransaction(hash, confirmations);
          }
        };
      });
    };

    return UncheckedJsonRpcSigner;
  }(JsonRpcSigner);

  var allowedTransactionKeys = {
    chainId: true,
    data: true,
    gasLimit: true,
    gasPrice: true,
    nonce: true,
    to: true,
    value: true
  };

  var JsonRpcProvider = function (_super) {
    __extends(JsonRpcProvider, _super);

    function JsonRpcProvider(url, network) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, JsonRpcProvider);
      var networkOrReady = network;

      if (networkOrReady == null) {
        networkOrReady = new Promise(function (resolve, reject) {
          setTimeout(function () {
            _this.detectNetwork().then(function (network) {
              resolve(network);
            }, function (error) {
              reject(error);
            });
          }, 0);
        });
      }

      _this = _super.call(this, networkOrReady) || this;

      if (!url) {
        url = properties_1.getStatic(_this.constructor, "defaultUrl")();
      }

      if (typeof url === "string") {
        properties_1.defineReadOnly(_this, "connection", Object.freeze({
          url: url
        }));
      } else {
        properties_1.defineReadOnly(_this, "connection", Object.freeze(properties_1.shallowCopy(url)));
      }

      _this._nextId = 42;
      return _this;
    }

    JsonRpcProvider.defaultUrl = function () {
      return "http:/\/localhost:8545";
    };

    JsonRpcProvider.prototype.detectNetwork = function () {
      return __awaiter(this, undefined, undefined, function () {
        var chainId, error_1, error_2, getNetwork;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, timer(0)];

            case 1:
              _a.sent();

              chainId = null;
              _a.label = 2;

            case 2:
              _a.trys.push([2, 4,, 9]);

              return [4, this.send("eth_chainId", [])];

            case 3:
              chainId = _a.sent();
              return [3, 9];

            case 4:
              error_1 = _a.sent();
              _a.label = 5;

            case 5:
              _a.trys.push([5, 7,, 8]);

              return [4, this.send("net_version", [])];

            case 6:
              chainId = _a.sent();
              return [3, 8];

            case 7:
              error_2 = _a.sent();
              return [3, 8];

            case 8:
              return [3, 9];

            case 9:
              if (chainId != null) {
                getNetwork = properties_1.getStatic(this.constructor, "getNetwork");

                try {
                  return [2, getNetwork(bignumber_1.BigNumber.from(chainId).toNumber())];
                } catch (error) {
                  return [2, logger.throwError("could not detect network", logger_1.Logger.errors.NETWORK_ERROR, {
                    chainId: chainId,
                    event: "invalidNetwork",
                    serverError: error
                  })];
                }
              }

              return [2, logger.throwError("could not detect network", logger_1.Logger.errors.NETWORK_ERROR, {
                event: "noNetwork"
              })];
          }
        });
      });
    };

    JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {
      return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
    };

    JsonRpcProvider.prototype.getUncheckedSigner = function (addressOrIndex) {
      return this.getSigner(addressOrIndex).connectUnchecked();
    };

    JsonRpcProvider.prototype.listAccounts = function () {
      var _this = this;

      return this.send("eth_accounts", []).then(function (accounts) {
        return accounts.map(function (a) {
          return _this.formatter.address(a);
        });
      });
    };

    JsonRpcProvider.prototype.send = function (method, params) {
      var _this = this;

      var request = {
        method: method,
        params: params,
        id: this._nextId++,
        jsonrpc: "2.0"
      };
      this.emit("debug", {
        action: "request",
        request: properties_1.deepCopy(request),
        provider: this
      });
      return web_1.fetchJson(this.connection, JSON.stringify(request), getResult).then(function (result) {
        _this.emit("debug", {
          action: "response",
          request: request,
          response: result,
          provider: _this
        });

        return result;
      }, function (error) {
        _this.emit("debug", {
          action: "response",
          error: error,
          request: request,
          provider: _this
        });

        throw error;
      });
    };

    JsonRpcProvider.prototype.prepareRequest = function (method, params) {
      switch (method) {
        case "getBlockNumber":
          return ["eth_blockNumber", []];

        case "getGasPrice":
          return ["eth_gasPrice", []];

        case "getBalance":
          return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];

        case "getTransactionCount":
          return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];

        case "getCode":
          return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];

        case "getStorageAt":
          return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];

        case "sendTransaction":
          return ["eth_sendRawTransaction", [params.signedTransaction]];

        case "getBlock":
          if (params.blockTag) {
            return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
          } else if (params.blockHash) {
            return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
          }

          return null;

        case "getTransaction":
          return ["eth_getTransactionByHash", [params.transactionHash]];

        case "getTransactionReceipt":
          return ["eth_getTransactionReceipt", [params.transactionHash]];

        case "call":
          {
            var hexlifyTransaction = properties_1.getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_call", [hexlifyTransaction(params.transaction, {
              from: true
            }), params.blockTag]];
          }

        case "estimateGas":
          {
            var hexlifyTransaction = properties_1.getStatic(this.constructor, "hexlifyTransaction");
            return ["eth_estimateGas", [hexlifyTransaction(params.transaction, {
              from: true
            })]];
          }

        case "getLogs":
          if (params.filter && params.filter.address != null) {
            params.filter.address = getLowerCase(params.filter.address);
          }

          return ["eth_getLogs", [params.filter]];

        default:
          break;
      }

      return null;
    };

    JsonRpcProvider.prototype.perform = function (method, params) {
      return __awaiter(this, undefined, undefined, function () {
        var args, error_3;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              args = this.prepareRequest(method, params);

              if (args == null) {
                logger.throwError(method + " not implemented", logger_1.Logger.errors.NOT_IMPLEMENTED, {
                  operation: method
                });
              }

              _a.label = 1;

            case 1:
              _a.trys.push([1, 3,, 4]);

              return [4, this.send(args[0], args[1])];

            case 2:
              return [2, _a.sent()];

            case 3:
              error_3 = _a.sent();
              return [2, checkError(method, error_3, params)];

            case 4:
              return [2];
          }
        });
      });
    };

    JsonRpcProvider.prototype._startEvent = function (event) {
      if (event.tag === "pending") {
        this._startPending();
      }

      _super.prototype._startEvent.call(this, event);
    };

    JsonRpcProvider.prototype._startPending = function () {
      if (this._pendingFilter != null) {
        return;
      }

      var self = this;
      var pendingFilter = this.send("eth_newPendingTransactionFilter", []);
      this._pendingFilter = pendingFilter;
      pendingFilter.then(function (filterId) {
        function poll() {
          self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
            if (self._pendingFilter != pendingFilter) {
              return null;
            }

            var seq = Promise.resolve();
            hashes.forEach(function (hash) {
              self._emitted["t:" + hash.toLowerCase()] = "pending";
              seq = seq.then(function () {
                return self.getTransaction(hash).then(function (tx) {
                  self.emit("pending", tx);
                  return null;
                });
              });
            });
            return seq.then(function () {
              return timer(1000);
            });
          }).then(function () {
            if (self._pendingFilter != pendingFilter) {
              self.send("eth_uninstallFilter", [filterId]);
              return;
            }

            setTimeout(function () {
              poll();
            }, 0);
            return null;
          }).catch(function (error) {});
        }

        poll();
        return filterId;
      }).catch(function (error) {});
    };

    JsonRpcProvider.prototype._stopEvent = function (event) {
      if (event.tag === "pending" && this.listenerCount("pending") === 0) {
        this._pendingFilter = null;
      }

      _super.prototype._stopEvent.call(this, event);
    };

    JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {
      var allowed = properties_1.shallowCopy(allowedTransactionKeys);

      if (allowExtra) {
        for (var key in allowExtra) {
          if (allowExtra[key]) {
            allowed[key] = true;
          }
        }
      }

      properties_1.checkProperties(transaction, allowed);
      var result = {};
      ["gasLimit", "gasPrice", "nonce", "value"].forEach(function (key) {
        if (transaction[key] == null) {
          return;
        }

        var value = bytes_1.hexValue(transaction[key]);

        if (key === "gasLimit") {
          key = "gas";
        }

        result[key] = value;
      });
      ["from", "to", "data"].forEach(function (key) {
        if (transaction[key] == null) {
          return;
        }

        result[key] = bytes_1.hexlify(transaction[key]);
      });
      return result;
    };

    return JsonRpcProvider;
  }(base_provider_1.BaseProvider);

  exports.JsonRpcProvider = JsonRpcProvider;
},178,[82,32,36,74,42,67,164,37,174,163]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __importDefault = this && this.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var ws_1 = __importDefault(_$$_REQUIRE(_dependencyMap[0]));

  exports.WebSocket = ws_1.default;
},179,[180]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const WebSocket = _$$_REQUIRE(_dependencyMap[0]);

  WebSocket.createWebSocketStream = _$$_REQUIRE(_dependencyMap[1]);
  WebSocket.Server = _$$_REQUIRE(_dependencyMap[2]);
  WebSocket.Receiver = _$$_REQUIRE(_dependencyMap[3]);
  WebSocket.Sender = _$$_REQUIRE(_dependencyMap[4]);
  module.exports = WebSocket;
},180,[181,195,196,189,192]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const EventEmitter = _$$_REQUIRE(_dependencyMap[0]);

  const https = _$$_REQUIRE(_dependencyMap[1]);

  const http = _$$_REQUIRE(_dependencyMap[2]);

  const net = _$$_REQUIRE(_dependencyMap[3]);

  const tls = _$$_REQUIRE(_dependencyMap[4]);

  const {
    randomBytes,
    createHash
  } = _$$_REQUIRE(_dependencyMap[5]);

  const {
    URL
  } = _$$_REQUIRE(_dependencyMap[6]);

  const PerMessageDef = _$$_REQUIRE(_dependencyMap[7]);

  const Receiver = _$$_REQUIRE(_dependencyMap[8]);

  const Sender = _$$_REQUIRE(_dependencyMap[9]);

  const {
    BINARY_TYPES,
    EMPTY_BUFFER,
    GUID,
    kStatusCode,
    kWebSocket,
    NOOP
  } = _$$_REQUIRE(_dependencyMap[10]);

  const {
    addEventListener,
    removeEventListener
  } = _$$_REQUIRE(_dependencyMap[11]);

  const {
    format,
    parse
  } = _$$_REQUIRE(_dependencyMap[12]);

  const {
    toBuffer
  } = _$$_REQUIRE(_dependencyMap[13]);

  const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
  const protocolVersions = [8, 13];
  const closeTimeout = 30000;

  class WebSocket extends EventEmitter {
    constructor(address, protocols, options) {
      super();
      this.readyState = WebSocket.CONNECTING;
      this.protocol = '';
      this._binaryType = BINARY_TYPES[0];
      this._closeFrameReceived = false;
      this._closeFrameSent = false;
      this._closeMessage = '';
      this._closeTimer = null;
      this._closeCode = 1006;
      this._extensions = {};
      this._receiver = null;
      this._sender = null;
      this._socket = null;

      if (address !== null) {
        this._bufferedAmount = 0;
        this._isServer = false;
        this._redirects = 0;

        if (Array.isArray(protocols)) {
          protocols = protocols.join(', ');
        } else if (typeof protocols === 'object' && protocols !== null) {
          options = protocols;
          protocols = undefined;
        }

        initAsClient(this, address, protocols, options);
      } else {
        this._isServer = true;
      }
    }

    get CONNECTING() {
      return WebSocket.CONNECTING;
    }

    get CLOSING() {
      return WebSocket.CLOSING;
    }

    get CLOSED() {
      return WebSocket.CLOSED;
    }

    get OPEN() {
      return WebSocket.OPEN;
    }

    get binaryType() {
      return this._binaryType;
    }

    set binaryType(type) {
      if (!BINARY_TYPES.includes(type)) return;
      this._binaryType = type;
      if (this._receiver) this._receiver._binaryType = type;
    }

    get bufferedAmount() {
      if (!this._socket) return this._bufferedAmount;
      return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;
    }

    get extensions() {
      return Object.keys(this._extensions).join();
    }

    setSocket(socket, head, maxPayload) {
      const receiver = new Receiver(this._binaryType, this._extensions, this._isServer, maxPayload);
      this._sender = new Sender(socket, this._extensions);
      this._receiver = receiver;
      this._socket = socket;
      receiver[kWebSocket] = this;
      socket[kWebSocket] = this;
      receiver.on('conclude', receiverOnConclude);
      receiver.on('drain', receiverOnDrain);
      receiver.on('error', receiverOnError);
      receiver.on('message', receiverOnMessage);
      receiver.on('ping', receiverOnPing);
      receiver.on('pong', receiverOnPong);
      socket.setTimeout(0);
      socket.setNoDelay();
      if (head.length > 0) socket.unshift(head);
      socket.on('close', socketOnClose);
      socket.on('data', socketOnData);
      socket.on('end', socketOnEnd);
      socket.on('error', socketOnError);
      this.readyState = WebSocket.OPEN;
      this.emit('open');
    }

    emitClose() {
      if (!this._socket) {
        this.readyState = WebSocket.CLOSED;
        this.emit('close', this._closeCode, this._closeMessage);
        return;
      }

      if (this._extensions[PerMessageDef.extensionName]) {
        this._extensions[PerMessageDef.extensionName].cleanup();
      }

      this._receiver.removeAllListeners();

      this.readyState = WebSocket.CLOSED;
      this.emit('close', this._closeCode, this._closeMessage);
    }

    close(code, data) {
      if (this.readyState === WebSocket.CLOSED) return;

      if (this.readyState === WebSocket.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake(this, this._req, msg);
      }

      if (this.readyState === WebSocket.CLOSING) {
        if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();
        return;
      }

      this.readyState = WebSocket.CLOSING;

      this._sender.close(code, data, !this._isServer, err => {
        if (err) return;
        this._closeFrameSent = true;
        if (this._closeFrameReceived) this._socket.end();
      });

      this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);
    }

    ping(data, mask, cb) {
      if (this.readyState === WebSocket.CONNECTING) {
        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
      }

      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (typeof data === 'number') data = data.toString();

      if (this.readyState !== WebSocket.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }

      if (mask === undefined) mask = !this._isServer;

      this._sender.ping(data || EMPTY_BUFFER, mask, cb);
    }

    pong(data, mask, cb) {
      if (this.readyState === WebSocket.CONNECTING) {
        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
      }

      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (typeof data === 'number') data = data.toString();

      if (this.readyState !== WebSocket.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }

      if (mask === undefined) mask = !this._isServer;

      this._sender.pong(data || EMPTY_BUFFER, mask, cb);
    }

    send(data, options, cb) {
      if (this.readyState === WebSocket.CONNECTING) {
        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
      }

      if (typeof options === 'function') {
        cb = options;
        options = {};
      }

      if (typeof data === 'number') data = data.toString();

      if (this.readyState !== WebSocket.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }

      const opts = {
        binary: typeof data !== 'string',
        mask: !this._isServer,
        compress: true,
        fin: true,
        ...options
      };

      if (!this._extensions[PerMessageDef.extensionName]) {
        opts.compress = false;
      }

      this._sender.send(data || EMPTY_BUFFER, opts, cb);
    }

    terminate() {
      if (this.readyState === WebSocket.CLOSED) return;

      if (this.readyState === WebSocket.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake(this, this._req, msg);
      }

      if (this._socket) {
        this.readyState = WebSocket.CLOSING;

        this._socket.destroy();
      }
    }

  }

  readyStates.forEach((readyState, i) => {
    WebSocket[readyState] = i;
  });
  ['open', 'error', 'close', 'message'].forEach(method => {
    Object.defineProperty(WebSocket.prototype, `on${method}`, {
      get() {
        const listeners = this.listeners(method);

        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener) return listeners[i]._listener;
        }

        return undefined;
      },

      set(listener) {
        const listeners = this.listeners(method);

        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener) this.removeListener(method, listeners[i]);
        }

        this.addEventListener(method, listener);
      }

    });
  });
  WebSocket.prototype.addEventListener = addEventListener;
  WebSocket.prototype.removeEventListener = removeEventListener;
  module.exports = WebSocket;

  function initAsClient(websocket, address, protocols, options) {
    const opts = {
      protocolVersion: protocolVersions[1],
      maxPayload: 104857600,
      perMessageDef: true,
      followRedirects: false,
      maxRedirects: 10,
      ...options,
      createConnection: undefined,
      socketPath: undefined,
      hostname: undefined,
      protocol: undefined,
      timeout: undefined,
      method: undefined,
      auth: undefined,
      host: undefined,
      path: undefined,
      port: undefined
    };

    if (!protocolVersions.includes(opts.protocolVersion)) {
      throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(', ')})`);
    }

    let parsedUrl;

    if (address instanceof URL) {
      parsedUrl = address;
      websocket.url = address.href;
    } else {
      parsedUrl = new URL(address);
      websocket.url = address;
    }

    const isUnixSocket = parsedUrl.protocol === 'ws+unix:';

    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
      throw new Error(`Invalid URL: ${websocket.url}`);
    }

    const isSecure = parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
    const defaultPort = isSecure ? 443 : 80;
    const key = randomBytes(16).toString('base64');
    const get = isSecure ? https.get : http.get;
    let perMessageDef;
    opts.createConnection = isSecure ? tlsConnect : netConnect;
    opts.defaultPort = opts.defaultPort || defaultPort;
    opts.port = parsedUrl.port || defaultPort;
    opts.host = parsedUrl.hostname.startsWith('[') ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
    opts.headers = {
      'Sec-WebSocket-Version': opts.protocolVersion,
      'Sec-WebSocket-Key': key,
      Connection: 'Upgrade',
      Upgrade: 'websocket',
      ...opts.headers
    };
    opts.path = parsedUrl.pathname + parsedUrl.search;
    opts.timeout = opts.handshakeTimeout;

    if (opts.perMessageDef) {
      perMessageDef = new PerMessageDef(opts.perMessageDef !== true ? opts.perMessageDef : {}, false, opts.maxPayload);
      opts.headers['Sec-WebSocket-Extensions'] = format({
        [PerMessageDef.extensionName]: perMessageDef.offer()
      });
    }

    if (protocols) {
      opts.headers['Sec-WebSocket-Protocol'] = protocols;
    }

    if (opts.origin) {
      if (opts.protocolVersion < 13) {
        opts.headers['Sec-WebSocket-Origin'] = opts.origin;
      } else {
        opts.headers.Origin = opts.origin;
      }
    }

    if (parsedUrl.username || parsedUrl.password) {
      opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
    }

    if (isUnixSocket) {
      const parts = opts.path.split(':');
      opts.socketPath = parts[0];
      opts.path = parts[1];
    }

    let req = websocket._req = get(opts);

    if (opts.timeout) {
      req.on('timeout', () => {
        abortHandshake(websocket, req, 'Opening handshake has timed out');
      });
    }

    req.on('error', err => {
      if (websocket._req.aborted) return;
      req = websocket._req = null;
      websocket.readyState = WebSocket.CLOSING;
      websocket.emit('error', err);
      websocket.emitClose();
    });
    req.on('response', res => {
      const location = res.headers.location;
      const statusCode = res.statusCode;

      if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
        if (++websocket._redirects > opts.maxRedirects) {
          abortHandshake(websocket, req, 'Maximum redirects exceeded');
          return;
        }

        req.abort();
        const addr = new URL(location, address);
        initAsClient(websocket, addr, protocols, options);
      } else if (!websocket.emit('unexpected-response', req, res)) {
        abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);
      }
    });
    req.on('upgrade', (res, socket, head) => {
      websocket.emit('upgrade', res);
      if (websocket.readyState !== WebSocket.CONNECTING) return;
      req = websocket._req = null;
      const digest = createHash('sha1').update(key + GUID).digest('base64');

      if (res.headers['sec-websocket-accept'] !== digest) {
        abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
        return;
      }

      const serverProt = res.headers['sec-websocket-protocol'];
      const protList = (protocols || '').split(/, */);
      let protError;

      if (!protocols && serverProt) {
        protError = 'Server sent a subprotocol but none was requested';
      } else if (protocols && !serverProt) {
        protError = 'Server sent no subprotocol';
      } else if (serverProt && !protList.includes(serverProt)) {
        protError = 'Server sent an invalid subprotocol';
      }

      if (protError) {
        abortHandshake(websocket, socket, protError);
        return;
      }

      if (serverProt) websocket.protocol = serverProt;

      if (perMessageDef) {
        try {
          const extensions = parse(res.headers['sec-websocket-extensions']);

          if (extensions[PerMessageDef.extensionName]) {
            perMessageDef.accept(extensions[PerMessageDef.extensionName]);
            websocket._extensions[PerMessageDef.extensionName] = perMessageDef;
          }
        } catch (err) {
          abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Extensions header');
          return;
        }
      }

      websocket.setSocket(socket, head, opts.maxPayload);
    });
  }

  function netConnect(options) {
    options.path = options.socketPath;
    return net.connect(options);
  }

  function tlsConnect(options) {
    options.path = undefined;

    if (!options.servername && options.servername !== '') {
      options.servername = options.host;
    }

    return tls.connect(options);
  }

  function abortHandshake(websocket, stream, message) {
    websocket.readyState = WebSocket.CLOSING;
    const err = new Error(message);
    Error.captureStackTrace(err, abortHandshake);

    if (stream.setHeader) {
      stream.abort();
      stream.once('abort', websocket.emitClose.bind(websocket));
      websocket.emit('error', err);
    } else {
      stream.destroy(err);
      stream.once('error', websocket.emit.bind(websocket, 'error'));
      stream.once('close', websocket.emitClose.bind(websocket));
    }
  }

  function sendAfterClose(websocket, data, cb) {
    if (data) {
      const length = toBuffer(data).length;
      if (websocket._socket) websocket._sender._bufferedBytes += length;else websocket._bufferedAmount += length;
    }

    if (cb) {
      const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} ` + `(${readyStates[websocket.readyState]})`);
      cb(err);
    }
  }

  function receiverOnConclude(code, reason) {
    const websocket = this[kWebSocket];

    websocket._socket.removeListener('data', socketOnData);

    websocket._socket.resume();

    websocket._closeFrameReceived = true;
    websocket._closeMessage = reason;
    websocket._closeCode = code;
    if (code === 1005) websocket.close();else websocket.close(code, reason);
  }

  function receiverOnDrain() {
    this[kWebSocket]._socket.resume();
  }

  function receiverOnError(err) {
    const websocket = this[kWebSocket];

    websocket._socket.removeListener('data', socketOnData);

    websocket.readyState = WebSocket.CLOSING;
    websocket._closeCode = err[kStatusCode];
    websocket.emit('error', err);

    websocket._socket.destroy();
  }

  function receiverOnFinish() {
    this[kWebSocket].emitClose();
  }

  function receiverOnMessage(data) {
    this[kWebSocket].emit('message', data);
  }

  function receiverOnPing(data) {
    const websocket = this[kWebSocket];
    websocket.pong(data, !websocket._isServer, NOOP);
    websocket.emit('ping', data);
  }

  function receiverOnPong(data) {
    this[kWebSocket].emit('pong', data);
  }

  function socketOnClose() {
    const websocket = this[kWebSocket];
    this.removeListener('close', socketOnClose);
    this.removeListener('end', socketOnEnd);
    websocket.readyState = WebSocket.CLOSING;

    websocket._socket.read();

    websocket._receiver.end();

    this.removeListener('data', socketOnData);
    this[kWebSocket] = undefined;
    clearTimeout(websocket._closeTimer);

    if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
      websocket.emitClose();
    } else {
      websocket._receiver.on('error', receiverOnFinish);

      websocket._receiver.on('finish', receiverOnFinish);
    }
  }

  function socketOnData(chunk) {
    if (!this[kWebSocket]._receiver.write(chunk)) {
      this.pause();
    }
  }

  function socketOnEnd() {
    const websocket = this[kWebSocket];
    websocket.readyState = WebSocket.CLOSING;

    websocket._receiver.end();

    this.end();
  }

  function socketOnError() {
    const websocket = this[kWebSocket];
    this.removeListener('error', socketOnError);
    this.on('error', NOOP);

    if (websocket) {
      websocket.readyState = WebSocket.CLOSING;
      this.destroy();
    }
  }
},181,[2,170,169,182,183,90,172,184,189,192,186,193,194,185]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('net');
},182,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('tls');
},183,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const zlib = _$$_REQUIRE(_dependencyMap[0]);

  const bufferUtil = _$$_REQUIRE(_dependencyMap[1]);

  const Limiter = _$$_REQUIRE(_dependencyMap[2]);

  const {
    kStatusCode,
    NOOP
  } = _$$_REQUIRE(_dependencyMap[3]);

  const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
  const kPerMessageDef = Symbol('permessage-def');
  const kTotalLength = Symbol('total-length');
  const kCallback = Symbol('callback');
  const kBuffers = Symbol('buffers');
  const kError = Symbol('error');
  let zlibLimiter;

  class PerMessageDef {
    constructor(options, isServer, maxPayload) {
      this._maxPayload = maxPayload | 0;
      this._options = options || {};
      this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;
      this._isServer = !!isServer;
      this._def = null;
      this._inf = null;
      this.params = null;

      if (!zlibLimiter) {
        const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;
        zlibLimiter = new Limiter(concurrency);
      }
    }

    static get extensionName() {
      return 'permessage-def';
    }

    offer() {
      const params = {};

      if (this._options.serverNoContextTakeover) {
        params.server_no_context_takeover = true;
      }

      if (this._options.clientNoContextTakeover) {
        params.client_no_context_takeover = true;
      }

      if (this._options.serverMaxWindowBits) {
        params.server_max_window_bits = this._options.serverMaxWindowBits;
      }

      if (this._options.clientMaxWindowBits) {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      } else if (this._options.clientMaxWindowBits == null) {
        params.client_max_window_bits = true;
      }

      return params;
    }

    accept(configurations) {
      configurations = this.normalizeParams(configurations);
      this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
      return this.params;
    }

    cleanup() {
      if (this._inf) {
        this._inf.close();

        this._inf = null;
      }

      if (this._def) {
        const callback = this._def[kCallback];

        this._def.close();

        this._def = null;

        if (callback) {
          callback(new Error('The def stream was closed while data was being processed'));
        }
      }
    }

    acceptAsServer(offers) {
      const opts = this._options;
      const accepted = offers.find(params => {
        if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === 'number' && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {
          return false;
        }

        return true;
      });

      if (!accepted) {
        throw new Error('None of the extension offers can be accepted');
      }

      if (opts.serverNoContextTakeover) {
        accepted.server_no_context_takeover = true;
      }

      if (opts.clientNoContextTakeover) {
        accepted.client_no_context_takeover = true;
      }

      if (typeof opts.serverMaxWindowBits === 'number') {
        accepted.server_max_window_bits = opts.serverMaxWindowBits;
      }

      if (typeof opts.clientMaxWindowBits === 'number') {
        accepted.client_max_window_bits = opts.clientMaxWindowBits;
      } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
        delete accepted.client_max_window_bits;
      }

      return accepted;
    }

    acceptAsClient(response) {
      const params = response[0];

      if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
        throw new Error('Unexpected parameter "client_no_context_takeover"');
      }

      if (!params.client_max_window_bits) {
        if (typeof this._options.clientMaxWindowBits === 'number') {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        }
      } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === 'number' && params.client_max_window_bits > this._options.clientMaxWindowBits) {
        throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
      }

      return params;
    }

    normalizeParams(configurations) {
      configurations.forEach(params => {
        Object.keys(params).forEach(key => {
          let value = params[key];

          if (value.length > 1) {
            throw new Error(`Parameter "${key}" must have only a single value`);
          }

          value = value[0];

          if (key === 'client_max_window_bits') {
            if (value !== true) {
              const num = +value;

              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }

              value = num;
            } else if (!this._isServer) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
          } else if (key === 'server_max_window_bits') {
            const num = +value;

            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }

            value = num;
          } else if (key === 'client_no_context_takeover' || key === 'server_no_context_takeover') {
            if (value !== true) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
          } else {
            throw new Error(`Unknown parameter "${key}"`);
          }

          params[key] = value;
        });
      });
      return configurations;
    }

    decompress(data, fin, callback) {
      zlibLimiter.add(done => {
        this._decompress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    compress(data, fin, callback) {
      zlibLimiter.add(done => {
        this._compress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    _decompress(data, fin, callback) {
      const endpoint = this._isServer ? 'client' : 'server';

      if (!this._inf) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
        this._inf = zlib.createInfRaw({ ...this._options.zlibInfOptions,
          windowBits
        });
        this._inf[kPerMessageDef] = this;
        this._inf[kTotalLength] = 0;
        this._inf[kBuffers] = [];

        this._inf.on('error', infOnError);

        this._inf.on('data', infOnData);
      }

      this._inf[kCallback] = callback;

      this._inf.write(data);

      if (fin) this._inf.write(TRAILER);

      this._inf.flush(() => {
        const err = this._inf[kError];

        if (err) {
          this._inf.close();

          this._inf = null;
          callback(err);
          return;
        }

        const data = bufferUtil.concat(this._inf[kBuffers], this._inf[kTotalLength]);

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._inf.close();

          this._inf = null;
        } else {
          this._inf[kTotalLength] = 0;
          this._inf[kBuffers] = [];
        }

        callback(null, data);
      });
    }

    _compress(data, fin, callback) {
      const endpoint = this._isServer ? 'server' : 'client';

      if (!this._def) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
        this._def = zlib.createDefRaw({ ...this._options.zlibDefOptions,
          windowBits
        });
        this._def[kTotalLength] = 0;
        this._def[kBuffers] = [];

        this._def.on('error', NOOP);

        this._def.on('data', defOnData);
      }

      this._def[kCallback] = callback;

      this._def.write(data);

      this._def.flush(zlib.Z_SYNC_FLUSH, () => {
        if (!this._def) {
          return;
        }

        let data = bufferUtil.concat(this._def[kBuffers], this._def[kTotalLength]);
        if (fin) data = data.slice(0, data.length - 4);
        this._def[kCallback] = null;

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._def.close();

          this._def = null;
        } else {
          this._def[kTotalLength] = 0;
          this._def[kBuffers] = [];
        }

        callback(null, data);
      });
    }

  }

  module.exports = PerMessageDef;

  function defOnData(chunk) {
    this[kBuffers].push(chunk);
    this[kTotalLength] += chunk.length;
  }

  function infOnData(chunk) {
    this[kTotalLength] += chunk.length;

    if (this[kPerMessageDef]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDef]._maxPayload) {
      this[kBuffers].push(chunk);
      return;
    }

    this[kError] = new RangeError('Max payload size exceeded');
    this[kError][kStatusCode] = 1009;
    this.removeListener('data', infOnData);
    this.reset();
  }

  function infOnError(err) {
    this[kPerMessageDef]._inf = null;
    err[kStatusCode] = 1007;
    this[kCallback](err);
  }
},184,[171,185,188,186]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const {
    EMPTY_BUFFER
  } = _$$_REQUIRE(_dependencyMap[0]);

  function concat(list, totalLength) {
    if (list.length === 0) return EMPTY_BUFFER;
    if (list.length === 1) return list[0];
    const target = Buffer.allocUnsafe(totalLength);
    let offset = 0;

    for (let i = 0; i < list.length; i++) {
      const buf = list[i];
      target.set(buf, offset);
      offset += buf.length;
    }

    if (offset < totalLength) return target.slice(0, offset);
    return target;
  }

  function _mask(source, mask, output, offset, length) {
    for (let i = 0; i < length; i++) {
      output[offset + i] = source[i] ^ mask[i & 3];
    }
  }

  function _unmask(buffer, mask) {
    const length = buffer.length;

    for (let i = 0; i < length; i++) {
      buffer[i] ^= mask[i & 3];
    }
  }

  function toArrayBuffer(buf) {
    if (buf.byteLength === buf.buffer.byteLength) {
      return buf.buffer;
    }

    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  }

  function toBuffer(data) {
    toBuffer.readOnly = true;
    if (Buffer.isBuffer(data)) return data;
    let buf;

    if (data instanceof ArrayBuffer) {
      buf = Buffer.from(data);
    } else if (ArrayBuffer.isView(data)) {
      buf = viewToBuffer(data);
    } else {
      buf = Buffer.from(data);
      toBuffer.readOnly = false;
    }

    return buf;
  }

  function viewToBuffer(view) {
    const buf = Buffer.from(view.buffer);

    if (view.byteLength !== view.buffer.byteLength) {
      return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);
    }

    return buf;
  }

  try {
    const bufferUtil = _$$_REQUIRE(_dependencyMap[1]);

    const bu = bufferUtil.BufferUtil || bufferUtil;
    module.exports = {
      concat,

      mask(source, mask, output, offset, length) {
        if (length < 48) _mask(source, mask, output, offset, length);else bu.mask(source, mask, output, offset, length);
      },

      toArrayBuffer,
      toBuffer,

      unmask(buffer, mask) {
        if (buffer.length < 32) _unmask(buffer, mask);else bu.unmask(buffer, mask);
      }

    };
  } catch (e) {
    module.exports = {
      concat,
      mask: _mask,
      toArrayBuffer,
      toBuffer,
      unmask: _unmask
    };
  }
},185,[186,187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
    GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
    kStatusCode: Symbol('status-code'),
    kWebSocket: Symbol('websocket'),
    EMPTY_BUFFER: Buffer.alloc(0),
    NOOP: () => {}
  };
},186,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  throw new Error('Cannot resolve module');
},187,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const kDone = Symbol('kDone');
  const kRun = Symbol('kRun');

  class Limiter {
    constructor(concurrency) {
      this[kDone] = () => {
        this.pending--;
        this[kRun]();
      };

      this.concurrency = concurrency || Infinity;
      this.jobs = [];
      this.pending = 0;
    }

    add(job) {
      this.jobs.push(job);
      this[kRun]();
    }

    [kRun]() {
      if (this.pending === this.concurrency) return;

      if (this.jobs.length) {
        const job = this.jobs.shift();
        this.pending++;
        job(this[kDone]);
      }
    }

  }

  module.exports = Limiter;
},188,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const {
    Writable
  } = _$$_REQUIRE(_dependencyMap[0]);

  const PerMessageDef = _$$_REQUIRE(_dependencyMap[1]);

  const {
    BINARY_TYPES,
    EMPTY_BUFFER,
    kStatusCode,
    kWebSocket
  } = _$$_REQUIRE(_dependencyMap[2]);

  const {
    concat,
    toArrayBuffer,
    unmask
  } = _$$_REQUIRE(_dependencyMap[3]);

  const {
    isValidStatusCode,
    isValidUTF8
  } = _$$_REQUIRE(_dependencyMap[4]);

  const GET_INFO = 0;
  const GET_PAYLOAD_LENGTH_16 = 1;
  const GET_PAYLOAD_LENGTH_64 = 2;
  const GET_MASK = 3;
  const GET_DATA = 4;
  const INFLATING = 5;

  class Receiver extends Writable {
    constructor(binaryType, extensions, isServer, maxPayload) {
      super();
      this._binaryType = binaryType || BINARY_TYPES[0];
      this[kWebSocket] = undefined;
      this._extensions = extensions || {};
      this._isServer = !!isServer;
      this._maxPayload = maxPayload | 0;
      this._bufferedBytes = 0;
      this._buffers = [];
      this._compressed = false;
      this._payloadLength = 0;
      this._mask = undefined;
      this._fragmented = 0;
      this._masked = false;
      this._fin = false;
      this._opcode = 0;
      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragments = [];
      this._state = GET_INFO;
      this._loop = false;
    }

    _write(chunk, encoding, cb) {
      if (this._opcode === 0x08 && this._state == GET_INFO) return cb();
      this._bufferedBytes += chunk.length;

      this._buffers.push(chunk);

      this.startLoop(cb);
    }

    consume(n) {
      this._bufferedBytes -= n;
      if (n === this._buffers[0].length) return this._buffers.shift();

      if (n < this._buffers[0].length) {
        const buf = this._buffers[0];
        this._buffers[0] = buf.slice(n);
        return buf.slice(0, n);
      }

      const dst = Buffer.allocUnsafe(n);

      do {
        const buf = this._buffers[0];
        const offset = dst.length - n;

        if (n >= buf.length) {
          dst.set(this._buffers.shift(), offset);
        } else {
          dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
          this._buffers[0] = buf.slice(n);
        }

        n -= buf.length;
      } while (n > 0);

      return dst;
    }

    startLoop(cb) {
      let err;
      this._loop = true;

      do {
        switch (this._state) {
          case GET_INFO:
            err = this.getInfo();
            break;

          case GET_PAYLOAD_LENGTH_16:
            err = this.getPayloadLength16();
            break;

          case GET_PAYLOAD_LENGTH_64:
            err = this.getPayloadLength64();
            break;

          case GET_MASK:
            this.getMask();
            break;

          case GET_DATA:
            err = this.getData(cb);
            break;

          default:
            this._loop = false;
            return;
        }
      } while (this._loop);

      cb(err);
    }

    getInfo() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      const buf = this.consume(2);

      if ((buf[0] & 0x30) !== 0x00) {
        this._loop = false;
        return error(RangeError, 'RSV2 and RSV3 must be clear', true, 1002);
      }

      const compressed = (buf[0] & 0x40) === 0x40;

      if (compressed && !this._extensions[PerMessageDef.extensionName]) {
        this._loop = false;
        return error(RangeError, 'RSV1 must be clear', true, 1002);
      }

      this._fin = (buf[0] & 0x80) === 0x80;
      this._opcode = buf[0] & 0x0f;
      this._payloadLength = buf[1] & 0x7f;

      if (this._opcode === 0x00) {
        if (compressed) {
          this._loop = false;
          return error(RangeError, 'RSV1 must be clear', true, 1002);
        }

        if (!this._fragmented) {
          this._loop = false;
          return error(RangeError, 'invalid opcode 0', true, 1002);
        }

        this._opcode = this._fragmented;
      } else if (this._opcode === 0x01 || this._opcode === 0x02) {
        if (this._fragmented) {
          this._loop = false;
          return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
        }

        this._compressed = compressed;
      } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
        if (!this._fin) {
          this._loop = false;
          return error(RangeError, 'FIN must be set', true, 1002);
        }

        if (compressed) {
          this._loop = false;
          return error(RangeError, 'RSV1 must be clear', true, 1002);
        }

        if (this._payloadLength > 0x7d) {
          this._loop = false;
          return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002);
        }
      } else {
        this._loop = false;
        return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
      }

      if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
      this._masked = (buf[1] & 0x80) === 0x80;

      if (this._isServer) {
        if (!this._masked) {
          this._loop = false;
          return error(RangeError, 'MASK must be set', true, 1002);
        }
      } else if (this._masked) {
        this._loop = false;
        return error(RangeError, 'MASK must be clear', true, 1002);
      }

      if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;else return this.haveLength();
    }

    getPayloadLength16() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      this._payloadLength = this.consume(2).readUInt16BE(0);
      return this.haveLength();
    }

    getPayloadLength64() {
      if (this._bufferedBytes < 8) {
        this._loop = false;
        return;
      }

      const buf = this.consume(8);
      const num = buf.readUInt32BE(0);

      if (num > Math.pow(2, 21) - 1) {
        this._loop = false;
        return error(RangeError, 'Unsupported WebSocket frame: payload length > 2^53 - 1', false, 1009);
      }

      this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
      return this.haveLength();
    }

    haveLength() {
      if (this._payloadLength && this._opcode < 0x08) {
        this._totalPayloadLength += this._payloadLength;

        if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
          this._loop = false;
          return error(RangeError, 'Max payload size exceeded', false, 1009);
        }
      }

      if (this._masked) this._state = GET_MASK;else this._state = GET_DATA;
    }

    getMask() {
      if (this._bufferedBytes < 4) {
        this._loop = false;
        return;
      }

      this._mask = this.consume(4);
      this._state = GET_DATA;
    }

    getData(cb) {
      let data = EMPTY_BUFFER;

      if (this._payloadLength) {
        if (this._bufferedBytes < this._payloadLength) {
          this._loop = false;
          return;
        }

        data = this.consume(this._payloadLength);
        if (this._masked) unmask(data, this._mask);
      }

      if (this._opcode > 0x07) return this.controlMessage(data);

      if (this._compressed) {
        this._state = INFLATING;
        this.decompress(data, cb);
        return;
      }

      if (data.length) {
        this._messageLength = this._totalPayloadLength;

        this._fragments.push(data);
      }

      return this.dataMessage();
    }

    decompress(data, cb) {
      const perMessageDef = this._extensions[PerMessageDef.extensionName];
      perMessageDef.decompress(data, this._fin, (err, buf) => {
        if (err) return cb(err);

        if (buf.length) {
          this._messageLength += buf.length;

          if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
            return cb(error(RangeError, 'Max payload size exceeded', false, 1009));
          }

          this._fragments.push(buf);
        }

        const er = this.dataMessage();
        if (er) return cb(er);
        this.startLoop(cb);
      });
    }

    dataMessage() {
      if (this._fin) {
        const messageLength = this._messageLength;
        const fragments = this._fragments;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];

        if (this._opcode === 2) {
          let data;

          if (this._binaryType === 'nodebuffer') {
            data = concat(fragments, messageLength);
          } else if (this._binaryType === 'arraybuffer') {
            data = toArrayBuffer(concat(fragments, messageLength));
          } else {
            data = fragments;
          }

          this.emit('message', data);
        } else {
          const buf = concat(fragments, messageLength);

          if (!isValidUTF8(buf)) {
            this._loop = false;
            return error(Error, 'invalid UTF-8 sequence', true, 1007);
          }

          this.emit('message', buf.toString());
        }
      }

      this._state = GET_INFO;
    }

    controlMessage(data) {
      if (this._opcode === 0x08) {
        this._loop = false;

        if (data.length === 0) {
          this.emit('conclude', 1005, '');
          this.end();
        } else if (data.length === 1) {
          return error(RangeError, 'invalid payload length 1', true, 1002);
        } else {
          const code = data.readUInt16BE(0);

          if (!isValidStatusCode(code)) {
            return error(RangeError, `invalid status code ${code}`, true, 1002);
          }

          const buf = data.slice(2);

          if (!isValidUTF8(buf)) {
            return error(Error, 'invalid UTF-8 sequence', true, 1007);
          }

          this.emit('conclude', code, buf.toString());
          this.end();
        }
      } else if (this._opcode === 0x09) {
        this.emit('ping', data);
      } else {
        this.emit('pong', data);
      }

      this._state = GET_INFO;
    }

  }

  module.exports = Receiver;

  function error(ErrorCtor, message, prefix, statusCode) {
    const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);
    Error.captureStackTrace(err, error);
    err[kStatusCode] = statusCode;
    return err;
  }
},189,[190,184,186,185,191]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('stream');
},190,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  try {
    const isValidUTF8 = _$$_REQUIRE(_dependencyMap[0]);

    exports.isValidUTF8 = typeof isValidUTF8 === 'object' ? isValidUTF8.Validation.isValidUTF8 : isValidUTF8;
  } catch (e) {
    exports.isValidUTF8 = () => true;
  }

  exports.isValidStatusCode = code => {
    return code >= 1000 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;
  };
},191,[187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const {
    randomFillSync
  } = _$$_REQUIRE(_dependencyMap[0]);

  const PerMessageDef = _$$_REQUIRE(_dependencyMap[1]);

  const {
    EMPTY_BUFFER
  } = _$$_REQUIRE(_dependencyMap[2]);

  const {
    isValidStatusCode
  } = _$$_REQUIRE(_dependencyMap[3]);

  const {
    mask: applyMask,
    toBuffer
  } = _$$_REQUIRE(_dependencyMap[4]);

  const mask = Buffer.alloc(4);

  class Sender {
    constructor(socket, extensions) {
      this._extensions = extensions || {};
      this._socket = socket;
      this._firstFragment = true;
      this._compress = false;
      this._bufferedBytes = 0;
      this._deflating = false;
      this._queue = [];
    }

    static frame(data, options) {
      const merge = options.mask && options.readOnly;
      let offset = options.mask ? 6 : 2;
      let payloadLength = data.length;

      if (data.length >= 65536) {
        offset += 8;
        payloadLength = 127;
      } else if (data.length > 125) {
        offset += 2;
        payloadLength = 126;
      }

      const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);
      target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
      if (options.rsv1) target[0] |= 0x40;
      target[1] = payloadLength;

      if (payloadLength === 126) {
        target.writeUInt16BE(data.length, 2);
      } else if (payloadLength === 127) {
        target.writeUInt32BE(0, 2);
        target.writeUInt32BE(data.length, 6);
      }

      if (!options.mask) return [target, data];
      randomFillSync(mask, 0, 4);
      target[1] |= 0x80;
      target[offset - 4] = mask[0];
      target[offset - 3] = mask[1];
      target[offset - 2] = mask[2];
      target[offset - 1] = mask[3];

      if (merge) {
        applyMask(data, mask, target, offset, data.length);
        return [target];
      }

      applyMask(data, mask, data, 0, data.length);
      return [target, data];
    }

    close(code, data, mask, cb) {
      let buf;

      if (code === undefined) {
        buf = EMPTY_BUFFER;
      } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
        throw new TypeError('First argument must be a valid error code number');
      } else if (data === undefined || data === '') {
        buf = Buffer.allocUnsafe(2);
        buf.writeUInt16BE(code, 0);
      } else {
        const length = Buffer.byteLength(data);

        if (length > 123) {
          throw new RangeError('The message must not be greater than 123 bytes');
        }

        buf = Buffer.allocUnsafe(2 + length);
        buf.writeUInt16BE(code, 0);
        buf.write(data, 2);
      }

      if (this._deflating) {
        this.enqueue([this.doClose, buf, mask, cb]);
      } else {
        this.doClose(buf, mask, cb);
      }
    }

    doClose(data, mask, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 0x08,
        mask,
        readOnly: false
      }), cb);
    }

    ping(data, mask, cb) {
      const buf = toBuffer(data);

      if (buf.length > 125) {
        throw new RangeError('The data size must not be greater than 125 bytes');
      }

      if (this._deflating) {
        this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);
      } else {
        this.doPing(buf, mask, toBuffer.readOnly, cb);
      }
    }

    doPing(data, mask, readOnly, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 0x09,
        mask,
        readOnly
      }), cb);
    }

    pong(data, mask, cb) {
      const buf = toBuffer(data);

      if (buf.length > 125) {
        throw new RangeError('The data size must not be greater than 125 bytes');
      }

      if (this._deflating) {
        this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);
      } else {
        this.doPong(buf, mask, toBuffer.readOnly, cb);
      }
    }

    doPong(data, mask, readOnly, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 0x0a,
        mask,
        readOnly
      }), cb);
    }

    send(data, options, cb) {
      const buf = toBuffer(data);
      const perMessageDef = this._extensions[PerMessageDef.extensionName];
      let opcode = options.binary ? 2 : 1;
      let rsv1 = options.compress;

      if (this._firstFragment) {
        this._firstFragment = false;

        if (rsv1 && perMessageDef) {
          rsv1 = buf.length >= perMessageDef._threshold;
        }

        this._compress = rsv1;
      } else {
        rsv1 = false;
        opcode = 0;
      }

      if (options.fin) this._firstFragment = true;

      if (perMessageDef) {
        const opts = {
          fin: options.fin,
          rsv1,
          opcode,
          mask: options.mask,
          readOnly: toBuffer.readOnly
        };

        if (this._deflating) {
          this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
        } else {
          this.dispatch(buf, this._compress, opts, cb);
        }
      } else {
        this.sendFrame(Sender.frame(buf, {
          fin: options.fin,
          rsv1: false,
          opcode,
          mask: options.mask,
          readOnly: toBuffer.readOnly
        }), cb);
      }
    }

    dispatch(data, compress, options, cb) {
      if (!compress) {
        this.sendFrame(Sender.frame(data, options), cb);
        return;
      }

      const perMessageDef = this._extensions[PerMessageDef.extensionName];
      this._deflating = true;
      perMessageDef.compress(data, options.fin, (_, buf) => {
        if (this._socket.destroyed) {
          const err = new Error('The socket was closed while data was being compressed');
          if (typeof cb === 'function') cb(err);

          for (let i = 0; i < this._queue.length; i++) {
            const callback = this._queue[i][4];
            if (typeof callback === 'function') callback(err);
          }

          return;
        }

        this._deflating = false;
        options.readOnly = false;
        this.sendFrame(Sender.frame(buf, options), cb);
        this.dequeue();
      });
    }

    dequeue() {
      while (!this._deflating && this._queue.length) {
        const params = this._queue.shift();

        this._bufferedBytes -= params[1].length;
        Reflect.apply(params[0], this, params.slice(1));
      }
    }

    enqueue(params) {
      this._bufferedBytes += params[1].length;

      this._queue.push(params);
    }

    sendFrame(list, cb) {
      if (list.length === 2) {
        this._socket.cork();

        this._socket.write(list[0]);

        this._socket.write(list[1], cb);

        this._socket.uncork();
      } else {
        this._socket.write(list[0], cb);
      }
    }

  }

  module.exports = Sender;
},192,[90,184,186,191,185]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  class Event {
    constructor(type, target) {
      this.target = target;
      this.type = type;
    }

  }

  class MessageEvent extends Event {
    constructor(data, target) {
      super('message', target);
      this.data = data;
    }

  }

  class CloseEvent extends Event {
    constructor(code, reason, target) {
      super('close', target);
      this.wasClean = target._closeFrameReceived && target._closeFrameSent;
      this.reason = reason;
      this.code = code;
    }

  }

  class OpenEvent extends Event {
    constructor(target) {
      super('open', target);
    }

  }

  class ErrorEvent extends Event {
    constructor(error, target) {
      super('error', target);
      this.message = error.message;
      this.error = error;
    }

  }

  const EventTarget = {
    addEventListener(method, listener) {
      if (typeof listener !== 'function') return;

      function onMessage(data) {
        listener.call(this, new MessageEvent(data, this));
      }

      function onClose(code, message) {
        listener.call(this, new CloseEvent(code, message, this));
      }

      function onError(error) {
        listener.call(this, new ErrorEvent(error, this));
      }

      function onOpen() {
        listener.call(this, new OpenEvent(this));
      }

      if (method === 'message') {
        onMessage._listener = listener;
        this.on(method, onMessage);
      } else if (method === 'close') {
        onClose._listener = listener;
        this.on(method, onClose);
      } else if (method === 'error') {
        onError._listener = listener;
        this.on(method, onError);
      } else if (method === 'open') {
        onOpen._listener = listener;
        this.on(method, onOpen);
      } else {
        this.on(method, listener);
      }
    },

    removeEventListener(method, listener) {
      const listeners = this.listeners(method);

      for (let i = 0; i < listeners.length; i++) {
        if (listeners[i] === listener || listeners[i]._listener === listener) {
          this.removeListener(method, listeners[i]);
        }
      }
    }

  };
  module.exports = EventTarget;
},193,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const tokenChars = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0];

  function push(dest, name, elem) {
    if (dest[name] === undefined) dest[name] = [elem];else dest[name].push(elem);
  }

  function parse(header) {
    const offers = Object.create(null);
    if (header === undefined || header === '') return offers;
    let params = Object.create(null);
    let mustUnescape = false;
    let isEscaping = false;
    let inQuotes = false;
    let extensionName;
    let paramName;
    let start = -1;
    let end = -1;
    let i = 0;

    for (; i < header.length; i++) {
      const code = header.charCodeAt(i);

      if (extensionName === undefined) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 || code === 0x09) {
            if (end === -1 && start !== -1) end = i;
          } else if (code === 0x3b || code === 0x2c) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }

            if (end === -1) end = i;
            const name = header.slice(start, end);

            if (code === 0x2c) {
              push(offers, name, params);
              params = Object.create(null);
            } else {
              extensionName = name;
            }

            start = end = -1;
          } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (paramName === undefined) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 || code === 0x09) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          push(params, header.slice(start, end), true);

          if (code === 0x2c) {
            push(offers, extensionName, params);
            params = Object.create(null);
            extensionName = undefined;
          }

          start = end = -1;
        } else if (code === 0x3d && start !== -1 && end === -1) {
          paramName = header.slice(start, i);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else {
        if (isEscaping) {
          if (tokenChars[code] !== 1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (start === -1) start = i;else if (!mustUnescape) mustUnescape = true;
          isEscaping = false;
        } else if (inQuotes) {
          if (tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (code === 0x22 && start !== -1) {
            inQuotes = false;
            end = i;
          } else if (code === 0x5c) {
              isEscaping = true;
            } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
          inQuotes = true;
        } else if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
          if (end === -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          let value = header.slice(start, end);

          if (mustUnescape) {
            value = value.replace(/\\/g, '');
            mustUnescape = false;
          }

          push(params, paramName, value);

          if (code === 0x2c) {
            push(offers, extensionName, params);
            params = Object.create(null);
            extensionName = undefined;
          }

          paramName = undefined;
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
    }

    if (start === -1 || inQuotes) {
      throw new SyntaxError('Unexpected end of input');
    }

    if (end === -1) end = i;
    const token = header.slice(start, end);

    if (extensionName === undefined) {
      push(offers, token, params);
    } else {
      if (paramName === undefined) {
        push(params, token, true);
      } else if (mustUnescape) {
        push(params, paramName, token.replace(/\\/g, ''));
      } else {
        push(params, paramName, token);
      }

      push(offers, extensionName, params);
    }

    return offers;
  }

  function format(extensions) {
    return Object.keys(extensions).map(extension => {
      let configurations = extensions[extension];
      if (!Array.isArray(configurations)) configurations = [configurations];
      return configurations.map(params => {
        return [extension].concat(Object.keys(params).map(k => {
          let values = params[k];
          if (!Array.isArray(values)) values = [values];
          return values.map(v => v === true ? k : `${k}=${v}`).join('; ');
        })).join('; ');
      }).join(', ');
    }).join(', ');
  }

  module.exports = {
    format,
    parse
  };
},194,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const {
    Duplex
  } = _$$_REQUIRE(_dependencyMap[0]);

  function emitClose(stream) {
    stream.emit('close');
  }

  function duplexOnEnd() {
    if (!this.destroyed && this._writableState.finished) {
      this.destroy();
    }
  }

  function duplexOnError(err) {
    this.removeListener('error', duplexOnError);
    this.destroy();

    if (this.listenerCount('error') === 0) {
      this.emit('error', err);
    }
  }

  function createWebSocketStream(ws, options) {
    let resumeOnReceiverDrain = true;

    function receiverOnDrain() {
      if (resumeOnReceiverDrain) ws._socket.resume();
    }

    if (ws.readyState === ws.CONNECTING) {
      ws.once('open', function open() {
        ws._receiver.removeAllListeners('drain');

        ws._receiver.on('drain', receiverOnDrain);
      });
    } else {
      ws._receiver.removeAllListeners('drain');

      ws._receiver.on('drain', receiverOnDrain);
    }

    const duplex = new Duplex({ ...options,
      autoDestroy: false,
      emitClose: false,
      objectMode: false,
      writableObjectMode: false
    });
    ws.on('message', function message(msg) {
      if (!duplex.push(msg)) {
        resumeOnReceiverDrain = false;

        ws._socket.pause();
      }
    });
    ws.once('error', function error(err) {
      if (duplex.destroyed) return;
      duplex.destroy(err);
    });
    ws.once('close', function close() {
      if (duplex.destroyed) return;
      duplex.push(null);
    });

    duplex._destroy = function (err, callback) {
      if (ws.readyState === ws.CLOSED) {
        callback(err);
        process.nextTick(emitClose, duplex);
        return;
      }

      let called = false;
      ws.once('error', function error(err) {
        called = true;
        callback(err);
      });
      ws.once('close', function close() {
        if (!called) callback(err);
        process.nextTick(emitClose, duplex);
      });
      ws.terminate();
    };

    duplex._final = function (callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once('open', function open() {
          duplex._final(callback);
        });
        return;
      }

      if (ws._socket === null) return;

      if (ws._socket._writableState.finished) {
        if (duplex._readableState.endEmitted) duplex.destroy();
        callback();
      } else {
        ws._socket.once('finish', function finish() {
          callback();
        });

        ws.close();
      }
    };

    duplex._read = function () {
      if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
        resumeOnReceiverDrain = true;
        if (!ws._receiver._writableState.needDrain) ws._socket.resume();
      }
    };

    duplex._write = function (chunk, encoding, callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once('open', function open() {
          duplex._write(chunk, encoding, callback);
        });
        return;
      }

      ws.send(chunk, callback);
    };

    duplex.on('end', duplexOnEnd);
    duplex.on('error', duplexOnError);
    return duplex;
  }

  module.exports = createWebSocketStream;
},195,[190]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const EventEmitter = _$$_REQUIRE(_dependencyMap[0]);

  const {
    createHash
  } = _$$_REQUIRE(_dependencyMap[1]);

  const {
    createServer,
    STATUS_CODES
  } = _$$_REQUIRE(_dependencyMap[2]);

  const PerMessageDef = _$$_REQUIRE(_dependencyMap[3]);

  const WebSocket = _$$_REQUIRE(_dependencyMap[4]);

  const {
    format,
    parse
  } = _$$_REQUIRE(_dependencyMap[5]);

  const {
    GUID
  } = _$$_REQUIRE(_dependencyMap[6]);

  const keyRegex = /^[+/0-9A-Za-z]{22}==$/;
  const kUsedByWebSocketServer = Symbol('kUsedByWebSocketServer');

  class WebSocketServer extends EventEmitter {
    constructor(options, callback) {
      super();
      options = {
        maxPayload: 104857600,
        perMessageDef: false,
        handleProtocols: null,
        clientTracking: true,
        verifyClient: null,
        noServer: false,
        backlog: null,
        server: null,
        host: null,
        path: null,
        port: null,
        ...options
      };

      if (options.port == null && !options.server && !options.noServer) {
        throw new TypeError('One of the "port", "server", or "noServer" options must be specified');
      }

      if (options.port != null) {
        this._server = createServer((req, res) => {
          const body = STATUS_CODES[426];
          res.writeHead(426, {
            'Content-Length': body.length,
            'Content-Type': 'text/plain'
          });
          res.end(body);
        });

        this._server.listen(options.port, options.host, options.backlog, callback);
      } else if (options.server) {
        if (options.server[kUsedByWebSocketServer]) {
          throw new Error('The HTTP/S server is already being used by another WebSocket server');
        }

        options.server[kUsedByWebSocketServer] = true;
        this._server = options.server;
      }

      if (this._server) {
        this._removeListeners = addListeners(this._server, {
          listening: this.emit.bind(this, 'listening'),
          error: this.emit.bind(this, 'error'),
          upgrade: (req, socket, head) => {
            this.handleUpgrade(req, socket, head, ws => {
              this.emit('connection', ws, req);
            });
          }
        });
      }

      if (options.perMessageDef === true) options.perMessageDef = {};
      if (options.clientTracking) this.clients = new Set();
      this.options = options;
    }

    address() {
      if (this.options.noServer) {
        throw new Error('The server is operating in "noServer" mode');
      }

      if (!this._server) return null;
      return this._server.address();
    }

    close(cb) {
      if (cb) this.once('close', cb);

      if (this.clients) {
        for (const client of this.clients) client.terminate();
      }

      const server = this._server;

      if (server) {
        this._removeListeners();

        this._removeListeners = this._server = null;

        if (this.options.port != null) {
          server.close(() => this.emit('close'));
          return;
        }

        delete server[kUsedByWebSocketServer];
      }

      process.nextTick(emitClose, this);
    }

    shouldHandle(req) {
      if (this.options.path) {
        const index = req.url.indexOf('?');
        const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
        if (pathname !== this.options.path) return false;
      }

      return true;
    }

    handleUpgrade(req, socket, head, cb) {
      socket.on('error', socketOnError);
      const key = req.headers['sec-websocket-key'] !== undefined ? req.headers['sec-websocket-key'].trim() : false;
      const version = +req.headers['sec-websocket-version'];
      const extensions = {};

      if (req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {
        return abortHandshake(socket, 400);
      }

      if (this.options.perMessageDef) {
        const perMessageDef = new PerMessageDef(this.options.perMessageDef, true, this.options.maxPayload);

        try {
          const offers = parse(req.headers['sec-websocket-extensions']);

          if (offers[PerMessageDef.extensionName]) {
            perMessageDef.accept(offers[PerMessageDef.extensionName]);
            extensions[PerMessageDef.extensionName] = perMessageDef;
          }
        } catch (err) {
          return abortHandshake(socket, 400);
        }
      }

      if (this.options.verifyClient) {
        const info = {
          origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
          secure: !!(req.connection.authorized || req.connection.encrypted),
          req
        };

        if (this.options.verifyClient.length === 2) {
          this.options.verifyClient(info, (verified, code, message, headers) => {
            if (!verified) {
              return abortHandshake(socket, code || 401, message, headers);
            }

            this.completeUpgrade(key, extensions, req, socket, head, cb);
          });
          return;
        }

        if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
      }

      this.completeUpgrade(key, extensions, req, socket, head, cb);
    }

    completeUpgrade(key, extensions, req, socket, head, cb) {
      if (!socket.readable || !socket.writable) return socket.destroy();
      const digest = createHash('sha1').update(key + GUID).digest('base64');
      const headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', `Sec-WebSocket-Accept: ${digest}`];
      const ws = new WebSocket(null);
      let protocol = req.headers['sec-websocket-protocol'];

      if (protocol) {
        protocol = protocol.trim().split(/ *, */);

        if (this.options.handleProtocols) {
          protocol = this.options.handleProtocols(protocol, req);
        } else {
          protocol = protocol[0];
        }

        if (protocol) {
          headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
          ws.protocol = protocol;
        }
      }

      if (extensions[PerMessageDef.extensionName]) {
        const params = extensions[PerMessageDef.extensionName].params;
        const value = format({
          [PerMessageDef.extensionName]: [params]
        });
        headers.push(`Sec-WebSocket-Extensions: ${value}`);
        ws._extensions = extensions;
      }

      this.emit('headers', headers, req);
      socket.write(headers.concat('\r\n').join('\r\n'));
      socket.removeListener('error', socketOnError);
      ws.setSocket(socket, head, this.options.maxPayload);

      if (this.clients) {
        this.clients.add(ws);
        ws.on('close', () => this.clients.delete(ws));
      }

      cb(ws);
    }

  }

  module.exports = WebSocketServer;

  function addListeners(server, map) {
    for (const event of Object.keys(map)) server.on(event, map[event]);

    return function removeListeners() {
      for (const event of Object.keys(map)) {
        server.removeListener(event, map[event]);
      }
    };
  }

  function emitClose(server) {
    server.emit('close');
  }

  function socketOnError() {
    this.destroy();
  }

  function abortHandshake(socket, code, message, headers) {
    if (socket.writable) {
      message = message || STATUS_CODES[code];
      headers = {
        Connection: 'close',
        'Content-type': 'text/html',
        'Content-Length': Buffer.byteLength(message),
        ...headers
      };
      socket.write(`HTTP/1.1 ${code} ${STATUS_CODES[code]}\r\n` + Object.keys(headers).map(h => `${h}: ${headers[h]}`).join('\r\n') + '\r\n\r\n' + message);
    }

    socket.removeListener('error', socketOnError);
    socket.destroy();
  }
},196,[2,90,169,184,181,194,186]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var properties_1 = _$$_REQUIRE(_dependencyMap[0]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[1]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger = new logger_1.Logger(_version_1.version);

  var json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[3]);

  var StaticJsonRpcProvider = function (_super) {
    __extends(StaticJsonRpcProvider, _super);

    function StaticJsonRpcProvider() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    StaticJsonRpcProvider.prototype.detectNetwork = function () {
      return __awaiter(this, undefined, undefined, function () {
        var network;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              network = this.network;
              if (!(network == null)) return [3, 2];
              return [4, _super.prototype.detectNetwork.call(this)];

            case 1:
              network = _a.sent();

              if (!network) {
                logger.throwError("no network detected", logger_1.Logger.errors.UNKNOWN_ERROR, {});
              }

              if (this._network == null) {
                properties_1.defineReadOnly(this, "_network", network);
                this.emit("network", network, null);
              }

              _a.label = 2;

            case 2:
              return [2, network];
          }
        });
      });
    };

    return StaticJsonRpcProvider;
  }(json_rpc_provider_1.JsonRpcProvider);

  exports.StaticJsonRpcProvider = StaticJsonRpcProvider;

  var UrlJsonRpcProvider = function (_super) {
    __extends(UrlJsonRpcProvider, _super);

    function UrlJsonRpcProvider(network, apiKey) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkAbstract(_newTarget, UrlJsonRpcProvider);
      network = properties_1.getStatic(_newTarget, "getNetwork")(network);
      apiKey = properties_1.getStatic(_newTarget, "getApiKey")(apiKey);
      var connection = properties_1.getStatic(_newTarget, "getUrl")(network, apiKey);
      _this = _super.call(this, connection, network) || this;

      if (typeof apiKey === "string") {
        properties_1.defineReadOnly(_this, "apiKey", apiKey);
      } else if (apiKey != null) {
        Object.keys(apiKey).forEach(function (key) {
          properties_1.defineReadOnly(_this, key, apiKey[key]);
        });
      }

      return _this;
    }

    UrlJsonRpcProvider.prototype._startPending = function () {
      logger.warn("WARNING: API provider does not support pending filters");
    };

    UrlJsonRpcProvider.prototype.isCommunityResource = function () {
      return false;
    };

    UrlJsonRpcProvider.prototype.getSigner = function (address) {
      return logger.throwError("API provider does not support signing", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "getSigner"
      });
    };

    UrlJsonRpcProvider.prototype.listAccounts = function () {
      return Promise.resolve([]);
    };

    UrlJsonRpcProvider.getApiKey = function (apiKey) {
      return apiKey;
    };

    UrlJsonRpcProvider.getUrl = function (network, apiKey) {
      return logger.throwError("not implemented; sub-classes must override getUrl", logger_1.Logger.errors.NOT_IMPLEMENTED, {
        operation: "getUrl"
      });
    };

    return UrlJsonRpcProvider;
  }(StaticJsonRpcProvider);

  exports.UrlJsonRpcProvider = UrlJsonRpcProvider;
},197,[42,37,174,178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var url_json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[0]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[1]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger = new logger_1.Logger(_version_1.version);

  var CloudflareProvider = function (_super) {
    __extends(CloudflareProvider, _super);

    function CloudflareProvider() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    CloudflareProvider.getApiKey = function (apiKey) {
      if (apiKey != null) {
        logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
      }

      return null;
    };

    CloudflareProvider.getUrl = function (network, apiKey) {
      var host = null;

      switch (network.name) {
        case "homestead":
          host = "https://cloudflare-eth.com/";
          break;

        default:
          logger.throwArgumentError("unsupported network", "network", arguments[0]);
      }

      return host;
    };

    CloudflareProvider.prototype.perform = function (method, params) {
      return __awaiter(this, undefined, undefined, function () {
        var block;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(method === "getBlockNumber")) return [3, 2];
              return [4, _super.prototype.perform.call(this, "getBlock", {
                blockTag: "st"
              })];

            case 1:
              block = _a.sent();
              return [2, block.number];

            case 2:
              return [2, _super.prototype.perform.call(this, method, params)];
          }
        });
      });
    };

    return CloudflareProvider;
  }(url_json_rpc_provider_1.UrlJsonRpcProvider);

  exports.CloudflareProvider = CloudflareProvider;
},198,[197,37,174]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bytes_1 = _$$_REQUIRE(_dependencyMap[0]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[1]);

  var web_1 = _$$_REQUIRE(_dependencyMap[2]);

  var formatter_1 = _$$_REQUIRE(_dependencyMap[3]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[4]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[5]);

  var logger = new logger_1.Logger(_version_1.version);

  var base_provider_1 = _$$_REQUIRE(_dependencyMap[6]);

  function getTransactionPostData(transaction) {
    var result = {};

    for (var key in transaction) {
      if (transaction[key] == null) {
        continue;
      }

      var value = bytes_1.hexlify(transaction[key]);

      if ({
        gasLimit: true,
        gasPrice: true,
        nonce: true,
        value: true
      }[key]) {
        value = bytes_1.hexValue(value);
      }

      result[key] = value;
    }

    return result;
  }

  function getResult(result) {
    if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
      return result.result;
    }

    if (result.status != 1 || result.message != "OK") {
      var error = new Error("invalid response");
      error.result = JSON.stringify(result);

      if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
        error.throttleRetry = true;
      }

      throw error;
    }

    return result.result;
  }

  function getJsonResult(result) {
    if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      var error = new Error("throttled response");
      error.result = JSON.stringify(result);
      error.throttleRetry = true;
      throw error;
    }

    if (result.jsonrpc != "2.0") {
      var error = new Error("invalid response");
      error.result = JSON.stringify(result);
      throw error;
    }

    if (result.error) {
      var error = new Error(result.error.message || "unknown error");

      if (result.error.code) {
        error.code = result.error.code;
      }

      if (result.error.data) {
        error.data = result.error.data;
      }

      throw error;
    }

    return result.result;
  }

  function checkLogTag(blockTag) {
    if (blockTag === "pending") {
      throw new Error("pending not supported");
    }

    if (blockTag === "st") {
      return blockTag;
    }

    return parseInt(blockTag.substring(2), 16);
  }

  var defaultApiKey = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";

  function checkError(method, error, transaction) {
    var message = error.message;

    if (error.code === logger_1.Logger.errors.SERVER_ERROR) {
      if (error.error && typeof error.error.message === "string") {
        message = error.error.message;
      } else if (typeof error.body === "string") {
        message = error.body;
      } else if (typeof error.responseText === "string") {
        message = error.responseText;
      }
    }

    message = (message || "").toLowerCase();

    if (message.match(/insufficient funds/)) {
      logger.throwError("insufficient funds for intrinsic transaction cost", logger_1.Logger.errors.INSUFFICIENT_FUNDS, {
        error: error,
        method: method,
        transaction: transaction
      });
    }

    if (message.match(/same hash was already imported|transaction nonce is too low/)) {
      logger.throwError("nonce has already been used", logger_1.Logger.errors.NONCE_EXPIRED, {
        error: error,
        method: method,
        transaction: transaction
      });
    }

    if (message.match(/another transaction with same nonce/)) {
      logger.throwError("replacement fee too low", logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, {
        error: error,
        method: method,
        transaction: transaction
      });
    }

    if (message.match(/execution failed due to an exception/)) {
      logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
        error: error,
        method: method,
        transaction: transaction
      });
    }

    throw error;
  }

  var EtherscanProvider = function (_super) {
    __extends(EtherscanProvider, _super);

    function EtherscanProvider(network, apiKey) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, EtherscanProvider);
      _this = _super.call(this, network) || this;
      var name = "invalid";

      if (_this.network) {
        name = _this.network.name;
      }

      var baseUrl = null;

      switch (name) {
        case "homestead":
          baseUrl = "https://api.etherscan.io";
          break;

        case "ropsten":
          baseUrl = "https://api-ropsten.etherscan.io";
          break;

        case "rinkeby":
          baseUrl = "https://api-rinkeby.etherscan.io";
          break;

        case "kovan":
          baseUrl = "https://api-kovan.etherscan.io";
          break;

        case "goerli":
          baseUrl = "https://api-goerli.etherscan.io";
          break;

        default:
          throw new Error("unsupported network");
      }

      properties_1.defineReadOnly(_this, "baseUrl", baseUrl);
      properties_1.defineReadOnly(_this, "apiKey", apiKey || defaultApiKey);
      return _this;
    }

    EtherscanProvider.prototype.detectNetwork = function () {
      return __awaiter(this, undefined, undefined, function () {
        return __generator(this, function (_a) {
          return [2, this.network];
        });
      });
    };

    EtherscanProvider.prototype.perform = function (method, params) {
      return __awaiter(this, undefined, undefined, function () {
        var url, apiKey, get, _a, postData, error_1, postData, error_2, topic0, logs, blocks, i, log, block, _b;

        var _this = this;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              url = this.baseUrl + "/api";
              apiKey = "";

              if (this.apiKey) {
                apiKey += "&apikey=" + this.apiKey;
              }

              get = function (url, payload, procFunc) {
                return __awaiter(_this, undefined, undefined, function () {
                  var connection, payloadStr, result;

                  var _this = this;

                  return __generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        this.emit("debug", {
                          action: "request",
                          request: url,
                          provider: this
                        });
                        connection = {
                          url: url,
                          throttleSlotInterval: 1000,
                          throttleCallback: function (attempt, url) {
                            if (_this.isCommunityResource()) {
                              formatter_1.showThrottleMessage();
                            }

                            return Promise.resolve(true);
                          }
                        };
                        payloadStr = null;

                        if (payload) {
                          connection.headers = {
                            "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                          };
                          payloadStr = Object.keys(payload).map(function (key) {
                            return key + "=" + payload[key];
                          }).join("&");
                        }

                        return [4, web_1.fetchJson(connection, payloadStr, procFunc || getJsonResult)];

                      case 1:
                        result = _a.sent();
                        this.emit("debug", {
                          action: "response",
                          request: url,
                          response: properties_1.deepCopy(result),
                          provider: this
                        });
                        return [2, result];
                    }
                  });
                });
              };

              _a = method;

              switch (_a) {
                case "getBlockNumber":
                  return [3, 1];

                case "getGasPrice":
                  return [3, 2];

                case "getBalance":
                  return [3, 3];

                case "getTransactionCount":
                  return [3, 4];

                case "getCode":
                  return [3, 5];

                case "getStorageAt":
                  return [3, 6];

                case "sendTransaction":
                  return [3, 7];

                case "getBlock":
                  return [3, 8];

                case "getTransaction":
                  return [3, 9];

                case "getTransactionReceipt":
                  return [3, 10];

                case "call":
                  return [3, 11];

                case "estimateGas":
                  return [3, 15];

                case "getLogs":
                  return [3, 19];

                case "getEtherPrice":
                  return [3, 26];
              }

              return [3, 28];

            case 1:
              url += "?module=proxy&action=eth_blockNumber" + apiKey;
              return [2, get(url, null)];

            case 2:
              url += "?module=proxy&action=eth_gasPrice" + apiKey;
              return [2, get(url, null)];

            case 3:
              url += "?module=account&action=balance&address=" + params.address;
              url += "&tag=" + params.blockTag + apiKey;
              return [2, get(url, null, getResult)];

            case 4:
              url += "?module=proxy&action=eth_getTransactionCount&address=" + params.address;
              url += "&tag=" + params.blockTag + apiKey;
              return [2, get(url, null)];

            case 5:
              url += "?module=proxy&action=eth_getCode&address=" + params.address;
              url += "&tag=" + params.blockTag + apiKey;
              return [2, get(url, null)];

            case 6:
              url += "?module=proxy&action=eth_getStorageAt&address=" + params.address;
              url += "&position=" + params.position;
              url += "&tag=" + params.blockTag + apiKey;
              return [2, get(url, null)];

            case 7:
              return [2, get(url, {
                module: "proxy",
                action: "eth_sendRawTransaction",
                hex: params.signedTransaction,
                apikey: this.apiKey
              }).catch(function (error) {
                return checkError("sendTransaction", error, params.signedTransaction);
              })];

            case 8:
              if (params.blockTag) {
                url += "?module=proxy&action=eth_getBlockByNumber&tag=" + params.blockTag;

                if (params.includeTransactions) {
                  url += "&boolean=true";
                } else {
                  url += "&boolean=false";
                }

                url += apiKey;
                return [2, get(url, null)];
              }

              throw new Error("getBlock by blockHash not implemented");

            case 9:
              url += "?module=proxy&action=eth_getTransactionByHash&txhash=" + params.transactionHash;
              url += apiKey;
              return [2, get(url, null)];

            case 10:
              url += "?module=proxy&action=eth_getTransactionReceipt&txhash=" + params.transactionHash;
              url += apiKey;
              return [2, get(url, null)];

            case 11:
              if (params.blockTag !== "st") {
                throw new Error("EtherscanProvider does not support blockTag for call");
              }

              postData = getTransactionPostData(params.transaction);
              postData.module = "proxy";
              postData.action = "eth_call";
              postData.apikey = this.apiKey;
              _c.label = 12;

            case 12:
              _c.trys.push([12, 14,, 15]);

              return [4, get(url, postData)];

            case 13:
              return [2, _c.sent()];

            case 14:
              error_1 = _c.sent();
              return [2, checkError("call", error_1, params.transaction)];

            case 15:
              postData = getTransactionPostData(params.transaction);
              postData.module = "proxy";
              postData.action = "eth_estimateGas";
              postData.apikey = this.apiKey;
              _c.label = 16;

            case 16:
              _c.trys.push([16, 18,, 19]);

              return [4, get(url, postData)];

            case 17:
              return [2, _c.sent()];

            case 18:
              error_2 = _c.sent();
              return [2, checkError("estimateGas", error_2, params.transaction)];

            case 19:
              url += "?module=logs&action=getLogs";

              if (params.filter.fromBlock) {
                url += "&fromBlock=" + checkLogTag(params.filter.fromBlock);
              }

              if (params.filter.toBlock) {
                url += "&toBlock=" + checkLogTag(params.filter.toBlock);
              }

              if (params.filter.address) {
                url += "&address=" + params.filter.address;
              }

              if (params.filter.topics && params.filter.topics.length > 0) {
                if (params.filter.topics.length > 1) {
                  logger.throwError("unsupported topic count", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                    topics: params.filter.topics
                  });
                }

                if (params.filter.topics.length === 1) {
                  topic0 = params.filter.topics[0];

                  if (typeof topic0 !== "string" || topic0.length !== 66) {
                    logger.throwError("unsupported topic format", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
                      topic0: topic0
                    });
                  }

                  url += "&topic0=" + topic0;
                }
              }

              url += apiKey;
              return [4, get(url, null, getResult)];

            case 20:
              logs = _c.sent();
              blocks = {};
              i = 0;
              _c.label = 21;

            case 21:
              if (!(i < logs.length)) return [3, 25];
              log = logs[i];

              if (log.blockHash != null) {
                return [3, 24];
              }

              if (!(blocks[log.blockNumber] == null)) return [3, 23];
              return [4, this.getBlock(log.blockNumber)];

            case 22:
              block = _c.sent();

              if (block) {
                blocks[log.blockNumber] = block.hash;
              }

              _c.label = 23;

            case 23:
              log.blockHash = blocks[log.blockNumber];
              _c.label = 24;

            case 24:
              i++;
              return [3, 21];

            case 25:
              return [2, logs];

            case 26:
              if (this.network.name !== "homestead") {
                return [2, 0.0];
              }

              url += "?module=stats&action=ethprice";
              url += apiKey;
              _b = parseFloat;
              return [4, get(url, null, getResult)];

            case 27:
              return [2, _b.apply(undefined, [_c.sent().ethusd])];

            case 28:
              return [3, 29];

            case 29:
              return [2, _super.prototype.perform.call(this, method, params)];
          }
        });
      });
    };

    EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {
      var _this = this;

      var url = this.baseUrl;
      var apiKey = "";

      if (this.apiKey) {
        apiKey += "&apikey=" + this.apiKey;
      }

      if (startBlock == null) {
        startBlock = 0;
      }

      if (endBlock == null) {
        endBlock = 99999999;
      }

      return this.resolveName(addressOrName).then(function (address) {
        url += "/api?module=account&action=txlist&address=" + address;
        url += "&startblock=" + startBlock;
        url += "&endblock=" + endBlock;
        url += "&sort=asc" + apiKey;

        _this.emit("debug", {
          action: "request",
          request: url,
          provider: _this
        });

        var connection = {
          url: url,
          throttleSlotInterval: 1000,
          throttleCallback: function (attempt, url) {
            if (_this.apiKey === defaultApiKey) {
              formatter_1.showThrottleMessage();
            }

            return Promise.resolve(true);
          }
        };
        return web_1.fetchJson(connection, null, getResult).then(function (result) {
          _this.emit("debug", {
            action: "response",
            request: url,
            response: properties_1.deepCopy(result),
            provider: _this
          });

          var output = [];
          result.forEach(function (tx) {
            ["contractAddress", "to"].forEach(function (key) {
              if (tx[key] == "") {
                delete tx[key];
              }
            });

            if (tx.creates == null && tx.contractAddress != null) {
              tx.creates = tx.contractAddress;
            }

            var item = _this.formatter.transactionResponse(tx);

            if (tx.timeStamp) {
              item.timestamp = parseInt(tx.timeStamp);
            }

            output.push(item);
          });
          return output;
        });
      });
    };

    EtherscanProvider.prototype.isCommunityResource = function () {
      return this.apiKey === defaultApiKey;
    };

    return EtherscanProvider;
  }(base_provider_1.BaseProvider);

  exports.EtherscanProvider = EtherscanProvider;
},199,[36,42,164,175,37,174,163]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };

  var __generator = this && this.__generator || function (thisArg, body) {
    var _ = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : undefined,
        done: true
      };
    }
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abstract_provider_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[1]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[2]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[3]);

  var random_1 = _$$_REQUIRE(_dependencyMap[4]);

  var web_1 = _$$_REQUIRE(_dependencyMap[5]);

  var base_provider_1 = _$$_REQUIRE(_dependencyMap[6]);

  var formatter_1 = _$$_REQUIRE(_dependencyMap[7]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[8]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[9]);

  var logger = new logger_1.Logger(_version_1.version);

  function now() {
    return new Date().getTime();
  }

  function checkNetworks(networks) {
    var result = null;

    for (var i = 0; i < networks.length; i++) {
      var network = networks[i];

      if (network == null) {
        return null;
      }

      if (result) {
        if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
          logger.throwArgumentError("provider mismatch", "networks", networks);
        }
      } else {
        result = network;
      }
    }

    return result;
  }

  function median(values, maxDelta) {
    values = values.slice().sort();
    var middle = Math.floor(values.length / 2);

    if (values.length % 2) {
      return values[middle];
    }

    var a = values[middle - 1],
        b = values[middle];

    if (maxDelta != null && Math.abs(a - b) > maxDelta) {
      return null;
    }

    return (a + b) / 2;
  }

  function serialize(value) {
    if (value === null) {
      return "null";
    } else if (typeof value === "number" || typeof value === "boolean") {
      return JSON.stringify(value);
    } else if (typeof value === "string") {
      return value;
    } else if (bignumber_1.BigNumber.isBigNumber(value)) {
      return value.toString();
    } else if (Array.isArray(value)) {
      return JSON.stringify(value.map(function (i) {
        return serialize(i);
      }));
    } else if (typeof value === "object") {
      var keys = Object.keys(value);
      keys.sort();
      return "{" + keys.map(function (key) {
        var v = value[key];

        if (typeof v === "function") {
          v = "[function]";
        } else {
          v = serialize(v);
        }

        return JSON.stringify(key) + ":" + v;
      }).join(",") + "}";
    }

    throw new Error("unknown value type: " + typeof value);
  }

  var nextRid = 1;
  ;

  function stall(duration) {
    var cancel = null;
    var timer = null;
    var promise = new Promise(function (resolve) {
      cancel = function () {
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }

        resolve();
      };

      timer = setTimeout(cancel, duration);
    });

    var wait = function (func) {
      promise = promise.then(func);
      return promise;
    };

    function getPromise() {
      return promise;
    }

    return {
      cancel: cancel,
      getPromise: getPromise,
      wait: wait
    };
  }

  var ForwardErrors = [logger_1.Logger.errors.CALL_EXCEPTION, logger_1.Logger.errors.INSUFFICIENT_FUNDS, logger_1.Logger.errors.NONCE_EXPIRED, logger_1.Logger.errors.REPLACEMENT_UNDERPRICED, logger_1.Logger.errors.UNPREDICTABLE_GAS_LIMIT];
  var ForwardProperties = ["address", "args", "errorArgs", "errorSignature", "method", "transaction"];
  ;

  function exposeDebugConfig(config, now) {
    var result = {
      weight: config.weight
    };
    Object.defineProperty(result, "provider", {
      get: function () {
        return config.provider;
      }
    });

    if (config.start) {
      result.start = config.start;
    }

    if (now) {
      result.duration = now - config.start;
    }

    if (config.done) {
      if (config.error) {
        result.error = config.error;
      } else {
        result.result = config.result || null;
      }
    }

    return result;
  }

  function normalizedTally(normalize, quorum) {
    return function (configs) {
      var tally = {};
      configs.forEach(function (c) {
        var value = normalize(c.result);

        if (!tally[value]) {
          tally[value] = {
            count: 0,
            result: c.result
          };
        }

        tally[value].count++;
      });
      var keys = Object.keys(tally);

      for (var i = 0; i < keys.length; i++) {
        var check = tally[keys[i]];

        if (check.count >= quorum) {
          return check.result;
        }
      }

      return undefined;
    };
  }

  function getProcessFunc(provider, method, params) {
    var normalize = serialize;

    switch (method) {
      case "getBlockNumber":
        return function (configs) {
          var values = configs.map(function (c) {
            return c.result;
          });
          var blockNumber = median(configs.map(function (c) {
            return c.result;
          }), 2);

          if (blockNumber == null) {
            return undefined;
          }

          blockNumber = Math.ceil(blockNumber);

          if (values.indexOf(blockNumber + 1) >= 0) {
            blockNumber++;
          }

          if (blockNumber >= provider._highestBlockNumber) {
            provider._highestBlockNumber = blockNumber;
          }

          return provider._highestBlockNumber;
        };

      case "getGasPrice":
        return function (configs) {
          var values = configs.map(function (c) {
            return c.result;
          });
          values.sort();
          return values[Math.floor(values.length / 2)];
        };

      case "getEtherPrice":
        return function (configs) {
          return median(configs.map(function (c) {
            return c.result;
          }));
        };

      case "getBalance":
      case "getTransactionCount":
      case "getCode":
      case "getStorageAt":
      case "call":
      case "estimateGas":
      case "getLogs":
        break;

      case "getTransaction":
      case "getTransactionReceipt":
        normalize = function (tx) {
          if (tx == null) {
            return null;
          }

          tx = properties_1.shallowCopy(tx);
          tx.confirmations = -1;
          return serialize(tx);
        };

        break;

      case "getBlock":
        if (params.includeTransactions) {
          normalize = function (block) {
            if (block == null) {
              return null;
            }

            block = properties_1.shallowCopy(block);
            block.transactions = block.transactions.map(function (tx) {
              tx = properties_1.shallowCopy(tx);
              tx.confirmations = -1;
              return tx;
            });
            return serialize(block);
          };
        } else {
          normalize = function (block) {
            if (block == null) {
              return null;
            }

            return serialize(block);
          };
        }

        break;

      default:
        throw new Error("unknown method: " + method);
    }

    return normalizedTally(normalize, provider.quorum);
  }

  function waitForSync(config, blockNumber) {
    return __awaiter(this, undefined, undefined, function () {
      var provider;
      return __generator(this, function (_a) {
        provider = config.provider;

        if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
          return [2, provider];
        }

        return [2, web_1.poll(function () {
          return new Promise(function (resolve, reject) {
            setTimeout(function () {
              if (provider.blockNumber >= blockNumber) {
                return resolve(provider);
              }

              if (config.cancelled) {
                return resolve(null);
              }

              return resolve(undefined);
            }, 0);
          });
        }, {
          oncePoll: provider
        })];
      });
    });
  }

  function getRunner(config, currentBlockNumber, method, params) {
    return __awaiter(this, undefined, undefined, function () {
      var provider, _a, filter;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            provider = config.provider;
            _a = method;

            switch (_a) {
              case "getBlockNumber":
                return [3, 1];

              case "getGasPrice":
                return [3, 1];

              case "getEtherPrice":
                return [3, 2];

              case "getBalance":
                return [3, 3];

              case "getTransactionCount":
                return [3, 3];

              case "getCode":
                return [3, 3];

              case "getStorageAt":
                return [3, 6];

              case "getBlock":
                return [3, 9];

              case "call":
                return [3, 12];

              case "estimateGas":
                return [3, 12];

              case "getTransaction":
                return [3, 15];

              case "getTransactionReceipt":
                return [3, 15];

              case "getLogs":
                return [3, 16];
            }

            return [3, 19];

          case 1:
            return [2, provider[method]()];

          case 2:
            if (provider.getEtherPrice) {
              return [2, provider.getEtherPrice()];
            }

            return [3, 19];

          case 3:
            if (!(params.blockTag && bytes_1.isHexString(params.blockTag))) return [3, 5];
            return [4, waitForSync(config, currentBlockNumber)];

          case 4:
            provider = _b.sent();
            _b.label = 5;

          case 5:
            return [2, provider[method](params.address, params.blockTag || "st")];

          case 6:
            if (!(params.blockTag && bytes_1.isHexString(params.blockTag))) return [3, 8];
            return [4, waitForSync(config, currentBlockNumber)];

          case 7:
            provider = _b.sent();
            _b.label = 8;

          case 8:
            return [2, provider.getStorageAt(params.address, params.position, params.blockTag || "st")];

          case 9:
            if (!(params.blockTag && bytes_1.isHexString(params.blockTag))) return [3, 11];
            return [4, waitForSync(config, currentBlockNumber)];

          case 10:
            provider = _b.sent();
            _b.label = 11;

          case 11:
            return [2, provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash)];

          case 12:
            if (!(params.blockTag && bytes_1.isHexString(params.blockTag))) return [3, 14];
            return [4, waitForSync(config, currentBlockNumber)];

          case 13:
            provider = _b.sent();
            _b.label = 14;

          case 14:
            return [2, provider[method](params.transaction)];

          case 15:
            return [2, provider[method](params.transactionHash)];

          case 16:
            filter = params.filter;
            if (!(filter.fromBlock && bytes_1.isHexString(filter.fromBlock) || filter.toBlock && bytes_1.isHexString(filter.toBlock))) return [3, 18];
            return [4, waitForSync(config, currentBlockNumber)];

          case 17:
            provider = _b.sent();
            _b.label = 18;

          case 18:
            return [2, provider.getLogs(filter)];

          case 19:
            return [2, logger.throwError("unknown method error", logger_1.Logger.errors.UNKNOWN_ERROR, {
              method: method,
              params: params
            })];
        }
      });
    });
  }

  var FallbackProvider = function (_super) {
    __extends(FallbackProvider, _super);

    function FallbackProvider(providers, quorum) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, FallbackProvider);

      if (providers.length === 0) {
        logger.throwArgumentError("missing providers", "providers", providers);
      }

      var providerConfigs = providers.map(function (configOrProvider, index) {
        if (abstract_provider_1.Provider.isProvider(configOrProvider)) {
          var stallTimeout = formatter_1.isCommunityResource(configOrProvider) ? 2000 : 750;
          var priority = 1;
          return Object.freeze({
            provider: configOrProvider,
            weight: 1,
            stallTimeout: stallTimeout,
            priority: priority
          });
        }

        var config = properties_1.shallowCopy(configOrProvider);

        if (config.priority == null) {
          config.priority = 1;
        }

        if (config.stallTimeout == null) {
          config.stallTimeout = formatter_1.isCommunityResource(configOrProvider) ? 2000 : 750;
        }

        if (config.weight == null) {
          config.weight = 1;
        }

        var weight = config.weight;

        if (weight % 1 || weight > 512 || weight < 1) {
          logger.throwArgumentError("invalid weight; must be integer in [1, 512]", "providers[" + index + "].weight", weight);
        }

        return Object.freeze(config);
      });
      var total = providerConfigs.reduce(function (accum, c) {
        return accum + c.weight;
      }, 0);

      if (quorum == null) {
        quorum = total / 2;
      } else if (quorum > total) {
        logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
      }

      var networkOrReady = checkNetworks(providerConfigs.map(function (c) {
        return c.provider.network;
      }));

      if (networkOrReady == null) {
        networkOrReady = new Promise(function (resolve, reject) {
          setTimeout(function () {
            _this.detectNetwork().then(resolve, reject);
          }, 0);
        });
      }

      _this = _super.call(this, networkOrReady) || this;
      properties_1.defineReadOnly(_this, "providerConfigs", Object.freeze(providerConfigs));
      properties_1.defineReadOnly(_this, "quorum", quorum);
      _this._highestBlockNumber = -1;
      return _this;
    }

    FallbackProvider.prototype.detectNetwork = function () {
      return __awaiter(this, undefined, undefined, function () {
        var networks;
        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4, Promise.all(this.providerConfigs.map(function (c) {
                return c.provider.getNetwork();
              }))];

            case 1:
              networks = _a.sent();
              return [2, checkNetworks(networks)];
          }
        });
      });
    };

    FallbackProvider.prototype.perform = function (method, params) {
      return __awaiter(this, undefined, undefined, function () {
        var results, i_1, result, processFunc, configs, currentBlockNumber, i, first, _loop_1, this_1, state_1;

        var _this = this;

        return __generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(method === "sendTransaction")) return [3, 2];
              return [4, Promise.all(this.providerConfigs.map(function (c) {
                return c.provider.sendTransaction(params.signedTransaction).then(function (result) {
                  return result.hash;
                }, function (error) {
                  return error;
                });
              }))];

            case 1:
              results = _a.sent();

              for (i_1 = 0; i_1 < results.length; i_1++) {
                result = results[i_1];

                if (typeof result === "string") {
                  return [2, result];
                }
              }

              throw results[0];

            case 2:
              if (!(this._highestBlockNumber === -1 && method !== "getBlockNumber")) return [3, 4];
              return [4, this.getBlockNumber()];

            case 3:
              _a.sent();

              _a.label = 4;

            case 4:
              processFunc = getProcessFunc(this, method, params);
              configs = random_1.shuffled(this.providerConfigs.map(properties_1.shallowCopy));
              configs.sort(function (a, b) {
                return a.priority - b.priority;
              });
              currentBlockNumber = this._highestBlockNumber;
              i = 0;
              first = true;

              _loop_1 = function () {
                var t0, inflightWeight, _loop_2, waiting, results, result, errors;

                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      t0 = now();
                      inflightWeight = configs.filter(function (c) {
                        return c.runner && t0 - c.start < c.stallTimeout;
                      }).reduce(function (accum, c) {
                        return accum + c.weight;
                      }, 0);

                      _loop_2 = function () {
                        var config = configs[i++];
                        var rid = nextRid++;
                        config.start = now();
                        config.staller = stall(config.stallTimeout);
                        config.staller.wait(function () {
                          config.staller = null;
                        });
                        config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {
                          config.done = true;
                          config.result = result;

                          if (_this.listenerCount("debug")) {
                            _this.emit("debug", {
                              action: "request",
                              rid: rid,
                              backend: exposeDebugConfig(config, now()),
                              request: {
                                method: method,
                                params: properties_1.deepCopy(params)
                              },
                              provider: _this
                            });
                          }
                        }, function (error) {
                          config.done = true;
                          config.error = error;

                          if (_this.listenerCount("debug")) {
                            _this.emit("debug", {
                              action: "request",
                              rid: rid,
                              backend: exposeDebugConfig(config, now()),
                              request: {
                                method: method,
                                params: properties_1.deepCopy(params)
                              },
                              provider: _this
                            });
                          }
                        });

                        if (this_1.listenerCount("debug")) {
                          this_1.emit("debug", {
                            action: "request",
                            rid: rid,
                            backend: exposeDebugConfig(config, null),
                            request: {
                              method: method,
                              params: properties_1.deepCopy(params)
                            },
                            provider: this_1
                          });
                        }

                        inflightWeight += config.weight;
                      };

                      while (inflightWeight < this_1.quorum && i < configs.length) {
                        _loop_2();
                      }

                      waiting = [];
                      configs.forEach(function (c) {
                        if (c.done || !c.runner) {
                          return;
                        }

                        waiting.push(c.runner);

                        if (c.staller) {
                          waiting.push(c.staller.getPromise());
                        }
                      });
                      if (!waiting.length) return [3, 2];
                      return [4, Promise.race(waiting)];

                    case 1:
                      _a.sent();

                      _a.label = 2;

                    case 2:
                      results = configs.filter(function (c) {
                        return c.done && c.error == null;
                      });
                      if (!(results.length >= this_1.quorum)) return [3, 5];
                      result = processFunc(results);

                      if (result !== undefined) {
                        configs.forEach(function (c) {
                          if (c.staller) {
                            c.staller.cancel();
                          }

                          c.cancelled = true;
                        });
                        return [2, {
                          value: result
                        }];
                      }

                      if (!!first) return [3, 4];
                      return [4, stall(100).getPromise()];

                    case 3:
                      _a.sent();

                      _a.label = 4;

                    case 4:
                      first = false;
                      _a.label = 5;

                    case 5:
                      errors = configs.reduce(function (accum, c) {
                        if (!c.done || c.error == null) {
                          return accum;
                        }

                        var code = c.error.code;

                        if (ForwardErrors.indexOf(code) >= 0) {
                          if (!accum[code]) {
                            accum[code] = {
                              error: c.error,
                              weight: 0
                            };
                          }

                          accum[code].weight += c.weight;
                        }

                        return accum;
                      }, {});
                      Object.keys(errors).forEach(function (errorCode) {
                        var tally = errors[errorCode];

                        if (tally.weight < _this.quorum) {
                          return;
                        }

                        configs.forEach(function (c) {
                          if (c.staller) {
                            c.staller.cancel();
                          }

                          c.cancelled = true;
                        });
                        var e = tally.error;
                        var props = {};
                        ForwardProperties.forEach(function (name) {
                          if (e[name] == null) {
                            return;
                          }

                          props[name] = e[name];
                        });
                        logger.throwError(e.reason || e.message, errorCode, props);
                      });

                      if (configs.filter(function (c) {
                        return !c.done;
                      }).length === 0) {
                        return [2, "break"];
                      }

                      return [2];
                  }
                });
              };

              this_1 = this;
              _a.label = 5;

            case 5:
              return [5, _loop_1()];

            case 6:
              state_1 = _a.sent();
              if (typeof state_1 === "object") return [2, state_1.value];
              if (state_1 === "break") return [3, 7];
              return [3, 5];

            case 7:
              configs.forEach(function (c) {
                if (c.staller) {
                  c.staller.cancel();
                }

                c.cancelled = true;
              });
              return [2, logger.throwError("failed to meet quorum", logger_1.Logger.errors.SERVER_ERROR, {
                method: method,
                params: params,
                results: configs.map(function (c) {
                  return exposeDebugConfig(c);
                }),
                provider: this
              })];
          }
        });
      });
    };

    return FallbackProvider;
  }(base_provider_1.BaseProvider);

  exports.FallbackProvider = FallbackProvider;
},200,[80,32,36,42,148,164,163,175,37,174]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var net_1 = _$$_REQUIRE(_dependencyMap[0]);

  var properties_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[2]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[3]);

  var logger = new logger_1.Logger(_version_1.version);

  var json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[4]);

  var IpcProvider = function (_super) {
    __extends(IpcProvider, _super);

    function IpcProvider(path, network) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, IpcProvider);

      if (path == null) {
        logger.throwError("missing path", logger_1.Logger.errors.MISSING_ARGUMENT, {
          arg: "path"
        });
      }

      _this = _super.call(this, "ipc://" + path, network) || this;
      properties_1.defineReadOnly(_this, "path", path);
      return _this;
    }

    IpcProvider.prototype.send = function (method, params) {
      var _this = this;

      var payload = JSON.stringify({
        method: method,
        params: params,
        id: 42,
        jsonrpc: "2.0"
      });
      return new Promise(function (resolve, reject) {
        var response = Buffer.alloc(0);
        var stream = net_1.connect(_this.path);
        stream.on("data", function (data) {
          response = Buffer.concat([response, data]);
        });
        stream.on("end", function () {
          try {
            resolve(JSON.parse(response.toString()).result);
            stream.destroy();
          } catch (error) {
            reject(error);
            stream.destroy();
          }
        });
        stream.on("error", function (error) {
          reject(error);
          stream.destroy();
        });
        stream.write(payload);
        stream.end();
      });
    };

    return IpcProvider;
  }(json_rpc_provider_1.JsonRpcProvider);

  exports.IpcProvider = IpcProvider;
},201,[182,42,37,174,178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var properties_1 = _$$_REQUIRE(_dependencyMap[0]);

  var websocket_provider_1 = _$$_REQUIRE(_dependencyMap[1]);

  var formatter_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[3]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[4]);

  var logger = new logger_1.Logger(_version_1.version);

  var url_json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[5]);

  var defaultProjectId = "84842078b09946638c03157f83405213";

  var InfuraWebSocketProvider = function (_super) {
    __extends(InfuraWebSocketProvider, _super);

    function InfuraWebSocketProvider(network, apiKey) {
      var _this = this;

      var provider = new InfuraProvider(network, apiKey);
      var connection = provider.connection;

      if (connection.password) {
        logger.throwError("INFURA WebSocket project secrets unsupported", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "InfuraProvider.getWebSocketProvider()"
        });
      }

      var url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
      _this = _super.call(this, url, network) || this;
      properties_1.defineReadOnly(_this, "apiKey", provider.projectId);
      properties_1.defineReadOnly(_this, "projectId", provider.projectId);
      properties_1.defineReadOnly(_this, "projectSecret", provider.projectSecret);
      return _this;
    }

    InfuraWebSocketProvider.prototype.isCommunityResource = function () {
      return this.projectId === defaultProjectId;
    };

    return InfuraWebSocketProvider;
  }(websocket_provider_1.WebSocketProvider);

  exports.InfuraWebSocketProvider = InfuraWebSocketProvider;

  var InfuraProvider = function (_super) {
    __extends(InfuraProvider, _super);

    function InfuraProvider() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    InfuraProvider.getWebSocketProvider = function (network, apiKey) {
      return new InfuraWebSocketProvider(network, apiKey);
    };

    InfuraProvider.getApiKey = function (apiKey) {
      var apiKeyObj = {
        apiKey: defaultProjectId,
        projectId: defaultProjectId,
        projectSecret: null
      };

      if (apiKey == null) {
        return apiKeyObj;
      }

      if (typeof apiKey === "string") {
        apiKeyObj.projectId = apiKey;
      } else if (apiKey.projectSecret != null) {
        logger.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
        logger.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
        apiKeyObj.projectId = apiKey.projectId;
        apiKeyObj.projectSecret = apiKey.projectSecret;
      } else if (apiKey.projectId) {
        apiKeyObj.projectId = apiKey.projectId;
      }

      apiKeyObj.apiKey = apiKeyObj.projectId;
      return apiKeyObj;
    };

    InfuraProvider.getUrl = function (network, apiKey) {
      var host = null;

      switch (network ? network.name : "unknown") {
        case "homestead":
          host = "mainnet.infura.io";
          break;

        case "ropsten":
          host = "ropsten.infura.io";
          break;

        case "rinkeby":
          host = "rinkeby.infura.io";
          break;

        case "kovan":
          host = "kovan.infura.io";
          break;

        case "goerli":
          host = "goerli.infura.io";
          break;

        default:
          logger.throwError("unsupported network", logger_1.Logger.errors.INVALID_ARGUMENT, {
            argument: "network",
            value: network
          });
      }

      var connection = {
        allowGzip: true,
        url: "https://" + host + "/v3/" + apiKey.projectId,
        throttleCallback: function (attempt, url) {
          if (apiKey.projectId === defaultProjectId) {
            formatter_1.showThrottleMessage();
          }

          return Promise.resolve(true);
        }
      };

      if (apiKey.projectSecret != null) {
        connection.user = "";
        connection.password = apiKey.projectSecret;
      }

      return connection;
    };

    InfuraProvider.prototype.isCommunityResource = function () {
      return this.projectId === defaultProjectId;
    };

    return InfuraProvider;
  }(url_json_rpc_provider_1.UrlJsonRpcProvider);

  exports.InfuraProvider = InfuraProvider;
},202,[42,177,175,37,174,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var url_json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[0]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[1]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger = new logger_1.Logger(_version_1.version);
  var defaultApiKey = "ETHERS_JS_SHARED";

  var NodesmithProvider = function (_super) {
    __extends(NodesmithProvider, _super);

    function NodesmithProvider() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    NodesmithProvider.getApiKey = function (apiKey) {
      if (apiKey && typeof apiKey !== "string") {
        logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
      }

      return apiKey || defaultApiKey;
    };

    NodesmithProvider.getUrl = function (network, apiKey) {
      logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
      var host = null;

      switch (network.name) {
        case "homestead":
          host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
          break;

        case "ropsten":
          host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
          break;

        case "rinkeby":
          host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
          break;

        case "goerli":
          host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
          break;

        case "kovan":
          host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
          break;

        default:
          logger.throwArgumentError("unsupported network", "network", arguments[0]);
      }

      return host + "?apiKey=" + apiKey;
    };

    return NodesmithProvider;
  }(url_json_rpc_provider_1.UrlJsonRpcProvider);

  exports.NodesmithProvider = NodesmithProvider;
},203,[197,37,174]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var logger_1 = _$$_REQUIRE(_dependencyMap[0]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[1]);

  var logger = new logger_1.Logger(_version_1.version);

  var url_json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[2]);

  var defaultApplicationId = "5f7f8547b90218002e9ce9dd";

  var PocketProvider = function (_super) {
    __extends(PocketProvider, _super);

    function PocketProvider() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    PocketProvider.getApiKey = function (apiKey) {
      var apiKeyObj = {
        applicationId: defaultApplicationId,
        applicationSecretKey: null
      };

      if (apiKey == null) {
        return apiKeyObj;
      }

      if (typeof apiKey === "string") {
        apiKeyObj.applicationId = apiKey;
      } else if (apiKey.applicationSecretKey != null) {
        logger.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
        logger.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
        apiKeyObj.applicationId = apiKey.applicationId;
        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
      } else if (apiKey.applicationId) {
        apiKeyObj.applicationId = apiKey.applicationId;
      }

      return apiKeyObj;
    };

    PocketProvider.getUrl = function (network, apiKey) {
      var host = null;

      switch (network ? network.name : "unknown") {
        case "homestead":
          host = "eth-mainnet.gateway.pokt.network";
          break;

        default:
          logger.throwError("unsupported network", logger_1.Logger.errors.INVALID_ARGUMENT, {
            argument: "network",
            value: network
          });
      }

      var connection = {
        url: "https://" + host + "/v1/" + apiKey.applicationId
      };
      connection.headers = {};

      if (apiKey.applicationSecretKey != null) {
        connection.user = "";
        connection.password = apiKey.applicationSecretKey;
      }

      return connection;
    };

    PocketProvider.prototype.isCommunityResource = function () {
      return this.applicationId === defaultApplicationId;
    };

    return PocketProvider;
  }(url_json_rpc_provider_1.UrlJsonRpcProvider);

  exports.PocketProvider = PocketProvider;
},204,[37,174,197]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __extends = this && this.__extends || function () {
    var extendStatics = function (d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
      };

      return extendStatics(d, b);
    };

    return function (d, b) {
      extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var properties_1 = _$$_REQUIRE(_dependencyMap[0]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[1]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger = new logger_1.Logger(_version_1.version);

  var json_rpc_provider_1 = _$$_REQUIRE(_dependencyMap[3]);

  var _nextId = 1;

  function buildWeb3LegacyFetcher(provider, sendFunc) {
    return function (method, params) {
      if (method == "eth_sign" && provider.isMetaMask) {
        method = "personal_sign";
        params = [params[1], params[0]];
      }

      var request = {
        method: method,
        params: params,
        id: _nextId++,
        jsonrpc: "2.0"
      };
      return new Promise(function (resolve, reject) {
        sendFunc(request, function (error, result) {
          if (error) {
            return reject(error);
          }

          if (result.error) {
            var error_1 = new Error(result.error.message);
            error_1.code = result.error.code;
            error_1.data = result.error.data;
            return reject(error_1);
          }

          resolve(result.result);
        });
      });
    };
  }

  function buildEip1193Fetcher(provider) {
    return function (method, params) {
      if (params == null) {
        params = [];
      }

      if (method == "eth_sign" && provider.isMetaMask) {
        method = "personal_sign";
        params = [params[1], params[0]];
      }

      return provider.request({
        method: method,
        params: params
      });
    };
  }

  var Web3Provider = function (_super) {
    __extends(Web3Provider, _super);

    function Web3Provider(provider, network) {
      var _newTarget = this.constructor;

      var _this = this;

      logger.checkNew(_newTarget, Web3Provider);

      if (provider == null) {
        logger.throwArgumentError("missing provider", "provider", provider);
      }

      var path = null;
      var jsonRpcFetchFunc = null;
      var subprovider = null;

      if (typeof provider === "function") {
        path = "unknown:";
        jsonRpcFetchFunc = provider;
      } else {
        path = provider.host || provider.path || "";

        if (!path && provider.isMetaMask) {
          path = "metamask";
        }

        subprovider = provider;

        if (provider.request) {
          if (path === "") {
            path = "eip-1193:";
          }

          jsonRpcFetchFunc = buildEip1193Fetcher(provider);
        } else if (provider.sendAsync) {
          jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
        } else if (provider.send) {
          jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
        } else {
          logger.throwArgumentError("unsupported provider", "provider", provider);
        }

        if (!path) {
          path = "unknown:";
        }
      }

      _this = _super.call(this, path, network) || this;
      properties_1.defineReadOnly(_this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
      properties_1.defineReadOnly(_this, "provider", subprovider);
      return _this;
    }

    Web3Provider.prototype.send = function (method, params) {
      return this.jsonRpcFetchFunc(method, params);
    };

    return Web3Provider;
  }(json_rpc_provider_1.JsonRpcProvider);

  exports.Web3Provider = Web3Provider;
},205,[42,37,174,178]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var __importStar = this && this.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var abi_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.AbiCoder = abi_1.AbiCoder;
  exports.checkResultErrors = abi_1.checkResultErrors;
  exports.defaultAbiCoder = abi_1.defaultAbiCoder;
  exports.EventFragment = abi_1.EventFragment;
  exports.FormatTypes = abi_1.FormatTypes;
  exports.Fragment = abi_1.Fragment;
  exports.FunctionFragment = abi_1.FunctionFragment;
  exports.Indexed = abi_1.Indexed;
  exports.Interface = abi_1.Interface;
  exports.LogDescription = abi_1.LogDescription;
  exports.ParamType = abi_1.ParamType;
  exports.TransactionDescription = abi_1.TransactionDescription;

  var address_1 = _$$_REQUIRE(_dependencyMap[1]);

  exports.getAddress = address_1.getAddress;
  exports.getCreate2Address = address_1.getCreate2Address;
  exports.getContractAddress = address_1.getContractAddress;
  exports.getIcapAddress = address_1.getIcapAddress;
  exports.isAddress = address_1.isAddress;

  var base64 = __importStar(_$$_REQUIRE(_dependencyMap[2]));

  exports.base64 = base64;

  var basex_1 = _$$_REQUIRE(_dependencyMap[3]);

  exports.base58 = basex_1.Base58;

  var bytes_1 = _$$_REQUIRE(_dependencyMap[4]);

  exports.arrayify = bytes_1.arrayify;
  exports.concat = bytes_1.concat;
  exports.hexConcat = bytes_1.hexConcat;
  exports.hexDataSlice = bytes_1.hexDataSlice;
  exports.hexDataLength = bytes_1.hexDataLength;
  exports.hexlify = bytes_1.hexlify;
  exports.hexStripZeros = bytes_1.hexStripZeros;
  exports.hexValue = bytes_1.hexValue;
  exports.hexZeroPad = bytes_1.hexZeroPad;
  exports.isBytes = bytes_1.isBytes;
  exports.isBytesLike = bytes_1.isBytesLike;
  exports.isHexString = bytes_1.isHexString;
  exports.joinSignature = bytes_1.joinSignature;
  exports.zeroPad = bytes_1.zeroPad;
  exports.splitSignature = bytes_1.splitSignature;
  exports.stripZeros = bytes_1.stripZeros;

  var hash_1 = _$$_REQUIRE(_dependencyMap[5]);

  exports._TypedDataEncoder = hash_1._TypedDataEncoder;
  exports.hashMessage = hash_1.hashMessage;
  exports.id = hash_1.id;
  exports.isValidName = hash_1.isValidName;
  exports.namehash = hash_1.namehash;

  var hdnode_1 = _$$_REQUIRE(_dependencyMap[6]);

  exports.defaultPath = hdnode_1.defaultPath;
  exports.entropyToMnemonic = hdnode_1.entropyToMnemonic;
  exports.HDNode = hdnode_1.HDNode;
  exports.isValidMnemonic = hdnode_1.isValidMnemonic;
  exports.mnemonicToEntropy = hdnode_1.mnemonicToEntropy;
  exports.mnemonicToSeed = hdnode_1.mnemonicToSeed;

  var json_wallets_1 = _$$_REQUIRE(_dependencyMap[7]);

  exports.getJsonWalletAddress = json_wallets_1.getJsonWalletAddress;

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[8]);

  exports.keccak256 = keccak256_1.keccak256;

  var logger_1 = _$$_REQUIRE(_dependencyMap[9]);

  exports.Logger = logger_1.Logger;

  var sha2_1 = _$$_REQUIRE(_dependencyMap[10]);

  exports.computeHmac = sha2_1.computeHmac;
  exports.ripemd160 = sha2_1.ripemd160;
  exports.sha256 = sha2_1.sha256;
  exports.sha512 = sha2_1.sha512;

  var solidity_1 = _$$_REQUIRE(_dependencyMap[11]);

  exports.solidityKeccak256 = solidity_1.keccak256;
  exports.solidityPack = solidity_1.pack;
  exports.soliditySha256 = solidity_1.sha256;

  var random_1 = _$$_REQUIRE(_dependencyMap[12]);

  exports.randomBytes = random_1.randomBytes;
  exports.shuffled = random_1.shuffled;

  var properties_1 = _$$_REQUIRE(_dependencyMap[13]);

  exports.checkProperties = properties_1.checkProperties;
  exports.deepCopy = properties_1.deepCopy;
  exports.defineReadOnly = properties_1.defineReadOnly;
  exports.getStatic = properties_1.getStatic;
  exports.resolveProperties = properties_1.resolveProperties;
  exports.shallowCopy = properties_1.shallowCopy;

  var RLP = __importStar(_$$_REQUIRE(_dependencyMap[14]));

  exports.RLP = RLP;

  var signing_key_1 = _$$_REQUIRE(_dependencyMap[15]);

  exports.computePublicKey = signing_key_1.computePublicKey;
  exports.recoverPublicKey = signing_key_1.recoverPublicKey;
  exports.SigningKey = signing_key_1.SigningKey;

  var strings_1 = _$$_REQUIRE(_dependencyMap[16]);

  exports.formatBytes32String = strings_1.formatBytes32String;
  exports.nameprep = strings_1.nameprep;
  exports.parseBytes32String = strings_1.parseBytes32String;
  exports._toEscapedUtf8String = strings_1._toEscapedUtf8String;
  exports.toUtf8Bytes = strings_1.toUtf8Bytes;
  exports.toUtf8CodePoints = strings_1.toUtf8CodePoints;
  exports.toUtf8String = strings_1.toUtf8String;
  exports.Utf8ErrorFuncs = strings_1.Utf8ErrorFuncs;

  var transactions_1 = _$$_REQUIRE(_dependencyMap[17]);

  exports.computeAddress = transactions_1.computeAddress;
  exports.parseTransaction = transactions_1.parse;
  exports.recoverAddress = transactions_1.recoverAddress;
  exports.serializeTransaction = transactions_1.serialize;

  var units_1 = _$$_REQUIRE(_dependencyMap[18]);

  exports.commify = units_1.commify;
  exports.formatEther = units_1.formatEther;
  exports.parseEther = units_1.parseEther;
  exports.formatUnits = units_1.formatUnits;
  exports.parseUnits = units_1.parseUnits;

  var wallet_1 = _$$_REQUIRE(_dependencyMap[19]);

  exports.verifyMessage = wallet_1.verifyMessage;
  exports.verifyTypedData = wallet_1.verifyTypedData;

  var web_1 = _$$_REQUIRE(_dependencyMap[20]);

  exports._fetchData = web_1._fetchData;
  exports.fetchJson = web_1.fetchJson;
  exports.poll = web_1.poll;

  var sha2_2 = _$$_REQUIRE(_dependencyMap[10]);

  exports.SupportedAlgorithm = sha2_2.SupportedAlgorithm;

  var strings_2 = _$$_REQUIRE(_dependencyMap[16]);

  exports.UnicodeNormalizationForm = strings_2.UnicodeNormalizationForm;
  exports.Utf8ErrorReason = strings_2.Utf8ErrorReason;
},206,[30,48,165,87,36,74,86,151,49,37,129,207,148,42,51,91,67,133,208,85,164]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[0]);

  var bytes_1 = _$$_REQUIRE(_dependencyMap[1]);

  var keccak256_1 = _$$_REQUIRE(_dependencyMap[2]);

  var sha2_1 = _$$_REQUIRE(_dependencyMap[3]);

  var strings_1 = _$$_REQUIRE(_dependencyMap[4]);

  var regexBytes = new RegExp("^bytes([0-9]+)$");
  var regexNumber = new RegExp("^(u?int)([0-9]*)$");
  var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
  var Zeros = "0000000000000000000000000000000000000000000000000000000000000000";

  function _pack(type, value, isArray) {
    switch (type) {
      case "address":
        if (isArray) {
          return bytes_1.zeroPad(value, 32);
        }

        return bytes_1.arrayify(value);

      case "string":
        return strings_1.toUtf8Bytes(value);

      case "bytes":
        return bytes_1.arrayify(value);

      case "bool":
        value = value ? "0x01" : "0x00";

        if (isArray) {
          return bytes_1.zeroPad(value, 32);
        }

        return bytes_1.arrayify(value);
    }

    var match = type.match(regexNumber);

    if (match) {
      var size = parseInt(match[2] || "256");

      if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
        throw new Error("invalid number type - " + type);
      }

      if (isArray) {
        size = 256;
      }

      value = bignumber_1.BigNumber.from(value).toTwos(size);
      return bytes_1.zeroPad(value, size / 8);
    }

    match = type.match(regexBytes);

    if (match) {
      var size = parseInt(match[1]);

      if (String(size) !== match[1] || size === 0 || size > 32) {
        throw new Error("invalid bytes type - " + type);
      }

      if (bytes_1.arrayify(value).byteLength !== size) {
        throw new Error("invalid value for " + type);
      }

      if (isArray) {
        return bytes_1.arrayify((value + Zeros).substring(0, 66));
      }

      return value;
    }

    match = type.match(regexArray);

    if (match && Array.isArray(value)) {
      var baseType_1 = match[1];
      var count = parseInt(match[2] || String(value.length));

      if (count != value.length) {
        throw new Error("invalid value for " + type);
      }

      var result_1 = [];
      value.forEach(function (value) {
        result_1.push(_pack(baseType_1, value, true));
      });
      return bytes_1.concat(result_1);
    }

    throw new Error("invalid type - " + type);
  }

  function pack(types, values) {
    if (types.length != values.length) {
      throw new Error("type/value count mismatch");
    }

    var tight = [];
    types.forEach(function (type, index) {
      tight.push(_pack(type, values[index]));
    });
    return bytes_1.hexlify(bytes_1.concat(tight));
  }

  exports.pack = pack;

  function keccak256(types, values) {
    return keccak256_1.keccak256(pack(types, values));
  }

  exports.keccak256 = keccak256;

  function sha256(types, values) {
    return sha2_1.sha256(pack(types, values));
  }

  exports.sha256 = sha256;
},207,[32,36,49,129,67]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bignumber_1 = _$$_REQUIRE(_dependencyMap[0]);

  var logger_1 = _$$_REQUIRE(_dependencyMap[1]);

  var _version_1 = _$$_REQUIRE(_dependencyMap[2]);

  var logger = new logger_1.Logger(_version_1.version);
  var names = ["wei", "kwei", "mwei", "gwei", "szabo", "finney", "ether"];

  function commify(value) {
    var comps = String(value).split(".");

    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
      logger.throwArgumentError("invalid value", "value", value);
    }

    var whole = comps[0];
    var negative = "";

    if (whole.substring(0, 1) === "-") {
      negative = "-";
      whole = whole.substring(1);
    }

    while (whole.substring(0, 1) === "0") {
      whole = whole.substring(1);
    }

    if (whole === "") {
      whole = "0";
    }

    var suffix = "";

    if (comps.length === 2) {
      suffix = "." + (comps[1] || "0");
    }

    while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
      suffix = suffix.substring(0, suffix.length - 1);
    }

    var formatted = [];

    while (whole.length) {
      if (whole.length <= 3) {
        formatted.unshift(whole);
        break;
      } else {
        var index = whole.length - 3;
        formatted.unshift(whole.substring(index));
        whole = whole.substring(0, index);
      }
    }

    return negative + formatted.join(",") + suffix;
  }

  exports.commify = commify;

  function formatUnits(value, unitName) {
    if (typeof unitName === "string") {
      var index = names.indexOf(unitName);

      if (index !== -1) {
        unitName = 3 * index;
      }
    }

    return bignumber_1.formatFixed(value, unitName != null ? unitName : 18);
  }

  exports.formatUnits = formatUnits;

  function parseUnits(value, unitName) {
    if (typeof value !== "string") {
      logger.throwArgumentError("value must be a string", "value", value);
    }

    if (typeof unitName === "string") {
      var index = names.indexOf(unitName);

      if (index !== -1) {
        unitName = 3 * index;
      }
    }

    return bignumber_1.parseFixed(value, unitName != null ? unitName : 18);
  }

  exports.parseUnits = parseUnits;

  function formatEther(wei) {
    return formatUnits(wei, 18);
  }

  exports.formatEther = formatEther;

  function parseEther(ether) {
    return parseUnits(ether, 18);
  }

  exports.parseEther = parseEther;
},208,[32,37,209]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "units/5.0.7";
},209,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.version = "ethers/5.0.21";
},210,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports = module.exports = SemVer;
  var debug;

  if (typeof process === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
    debug = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      args.unshift('SEMVER');
      console.log.apply(console, args);
    };
  } else {
    debug = function () {};
  }

  exports.SEMVER_SPEC_VERSION = '2.0.0';
  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var MAX_SAFE_COMPONENT_LENGTH = 16;
  var re = exports.re = [];
  var src = exports.src = [];
  var R = 0;
  var NUMERICIDENTIFIER = R++;
  src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
  var NUMERICIDENTIFIERLOOSE = R++;
  src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';
  var NONNUMERICIDENTIFIER = R++;
  src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';
  var MAINVERSION = R++;
  src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')';
  var MAINVERSIONLOOSE = R++;
  src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')';
  var PRERELEASEIDENTIFIER = R++;
  src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] + '|' + src[NONNUMERICIDENTIFIER] + ')';
  var PRERELEASEIDENTIFIERLOOSE = R++;
  src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] + '|' + src[NONNUMERICIDENTIFIER] + ')';
  var PRERELEASE = R++;
  src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] + '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';
  var PRERELEASELOOSE = R++;
  src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';
  var BUILDIDENTIFIER = R++;
  src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';
  var BUILD = R++;
  src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] + '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';
  var FULL = R++;
  var FULLPLAIN = 'v?' + src[MAINVERSION] + src[PRERELEASE] + '?' + src[BUILD] + '?';
  src[FULL] = '^' + FULLPLAIN + '$';
  var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + '?' + src[BUILD] + '?';
  var LOOSE = R++;
  src[LOOSE] = '^' + LOOSEPLAIN + '$';
  var GTLT = R++;
  src[GTLT] = '((?:<|>)?=?)';
  var XRANGEIDENTIFIERLOOSE = R++;
  src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
  var XRANGEIDENTIFIER = R++;
  src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';
  var XRANGEPLAIN = R++;
  src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:' + src[PRERELEASE] + ')?' + src[BUILD] + '?' + ')?)?';
  var XRANGEPLAINLOOSE = R++;
  src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[PRERELEASELOOSE] + ')?' + src[BUILD] + '?' + ')?)?';
  var XRANGE = R++;
  src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
  var XRANGELOOSE = R++;
  src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';
  var COERCE = R++;
  src[COERCE] = "(?:^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])";
  var LONETILDE = R++;
  src[LONETILDE] = '(?:~>?)';
  var TILDETRIM = R++;
  src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
  re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
  var tildeTrimReplace = '$1~';
  var TILDE = R++;
  src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
  var TILDELOOSE = R++;
  src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';
  var LONECARET = R++;
  src[LONECARET] = '(?:\\^)';
  var CARETTRIM = R++;
  src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
  re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
  var caretTrimReplace = '$1^';
  var CARET = R++;
  src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
  var CARETLOOSE = R++;
  src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';
  var COMPARATORLOOSE = R++;
  src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
  var COMPARATOR = R++;
  src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';
  var COMPARATORTRIM = R++;
  src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] + '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';
  re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
  var comparatorTrimReplace = '$1$2$3';
  var HYPHENRANGE = R++;
  src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAIN] + ')' + '\\s*$';
  var HYPHENRANGELOOSE = R++;
  src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAINLOOSE] + ')' + '\\s*$';
  var STAR = R++;
  src[STAR] = '(<|>)?=?\\s*\\*';

  for (var i = 0; i < R; i++) {
    debug(i, src[i]);

    if (!re[i]) {
      re[i] = new RegExp(src[i]);
    }
  }

  exports.parse = parse;

  function parse(version, options) {
    if (!options || typeof options !== 'object') {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }

    if (version instanceof SemVer) {
      return version;
    }

    if (typeof version !== 'string') {
      return null;
    }

    if (version.length > MAX_LENGTH) {
      return null;
    }

    var r = options.loose ? re[LOOSE] : re[FULL];

    if (!r.test(version)) {
      return null;
    }

    try {
      return new SemVer(version, options);
    } catch (er) {
      return null;
    }
  }

  exports.valid = valid;

  function valid(version, options) {
    var v = parse(version, options);
    return v ? v.version : null;
  }

  exports.clean = clean;

  function clean(version, options) {
    var s = parse(version.trim().replace(/^[=v]+/, ''), options);
    return s ? s.version : null;
  }

  exports.SemVer = SemVer;

  function SemVer(version, options) {
    if (!options || typeof options !== 'object') {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }

    if (version instanceof SemVer) {
      if (version.loose === options.loose) {
        return version;
      } else {
        version = version.version;
      }
    } else if (typeof version !== 'string') {
      throw new TypeError('Invalid Version: ' + version);
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError("version is longer than 256 characters");
    }

    if (!(this instanceof SemVer)) {
      return new SemVer(version, options);
    }

    debug('SemVer', version, options);
    this.options = options;
    this.loose = !!options.loose;
    var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

    if (!m) {
      throw new TypeError('Invalid Version: ' + version);
    }

    this.raw = version;
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version');
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version');
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version');
    }

    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split('.').map(function (id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;

          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }

        return id;
      });
    }

    this.build = m[5] ? m[5].split('.') : [];
    this.format();
  }

  SemVer.prototype.format = function () {
    this.version = this.major + '.' + this.minor + '.' + this.patch;

    if (this.prerelease.length) {
      this.version += '-' + this.prerelease.join('.');
    }

    return this.version;
  };

  SemVer.prototype.toString = function () {
    return this.version;
  };

  SemVer.prototype.compare = function (other) {
    debug('SemVer.compare', this.version, this.options, other);

    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }

    return this.compareMain(other) || this.comparePre(other);
  };

  SemVer.prototype.compareMain = function (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }

    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
  };

  SemVer.prototype.comparePre = function (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }

    if (this.prerelease.length && !other.prerelease.length) {
      return -1;
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1;
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0;
    }

    var i = 0;

    do {
      var a = this.prerelease[i];
      var b = other.prerelease[i];
      debug('prerelease compare', i, a, b);

      if (a === undefined && b === undefined) {
        return 0;
      } else if (b === undefined) {
        return 1;
      } else if (a === undefined) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i);
  };

  SemVer.prototype.inc = function (release, identifier) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc('pre', identifier);
        break;

      case 'preminor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc('pre', identifier);
        break;

      case 'prepatch':
        this.prerelease.length = 0;
        this.inc('patch', identifier);
        this.inc('pre', identifier);
        break;

      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier);
        }

        this.inc('pre', identifier);
        break;

      case 'major':
        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
          this.major++;
        }

        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;

      case 'minor':
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++;
        }

        this.patch = 0;
        this.prerelease = [];
        break;

      case 'patch':
        if (this.prerelease.length === 0) {
          this.patch++;
        }

        this.prerelease = [];
        break;

      case 'pre':
        if (this.prerelease.length === 0) {
          this.prerelease = [0];
        } else {
          var i = this.prerelease.length;

          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++;
              i = -2;
            }
          }

          if (i === -1) {
            this.prerelease.push(0);
          }
        }

        if (identifier) {
          if (this.prerelease[0] === identifier) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = [identifier, 0];
            }
          } else {
            this.prerelease = [identifier, 0];
          }
        }

        break;

      default:
        throw new Error('invalid increment argument: ' + release);
    }

    this.format();
    this.raw = this.version;
    return this;
  };

  exports.inc = inc;

  function inc(version, release, loose, identifier) {
    if (typeof loose === 'string') {
      identifier = loose;
      loose = undefined;
    }

    try {
      return new SemVer(version, loose).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  }

  exports.diff = diff;

  function diff(version1, version2) {
    if (eq(version1, version2)) {
      return null;
    } else {
      var v1 = parse(version1);
      var v2 = parse(version2);
      var prefix = '';

      if (v1.prerelease.length || v2.prerelease.length) {
        prefix = 'pre';
        var defaultResult = 'prerelease';
      }

      for (var key in v1) {
        if (key === 'major' || key === 'minor' || key === 'patch') {
          if (v1[key] !== v2[key]) {
            return prefix + key;
          }
        }
      }

      return defaultResult;
    }
  }

  exports.compareIdentifiers = compareIdentifiers;
  var numeric = /^[0-9]+$/;

  function compareIdentifiers(a, b) {
    var anum = numeric.test(a);
    var bnum = numeric.test(b);

    if (anum && bnum) {
      a = +a;
      b = +b;
    }

    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  }

  exports.rcompareIdentifiers = rcompareIdentifiers;

  function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  }

  exports.major = major;

  function major(a, loose) {
    return new SemVer(a, loose).major;
  }

  exports.minor = minor;

  function minor(a, loose) {
    return new SemVer(a, loose).minor;
  }

  exports.patch = patch;

  function patch(a, loose) {
    return new SemVer(a, loose).patch;
  }

  exports.compare = compare;

  function compare(a, b, loose) {
    return new SemVer(a, loose).compare(new SemVer(b, loose));
  }

  exports.compareLoose = compareLoose;

  function compareLoose(a, b) {
    return compare(a, b, true);
  }

  exports.rcompare = rcompare;

  function rcompare(a, b, loose) {
    return compare(b, a, loose);
  }

  exports.sort = sort;

  function sort(list, loose) {
    return list.sort(function (a, b) {
      return exports.compare(a, b, loose);
    });
  }

  exports.rsort = rsort;

  function rsort(list, loose) {
    return list.sort(function (a, b) {
      return exports.rcompare(a, b, loose);
    });
  }

  exports.gt = gt;

  function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
  }

  exports.lt = lt;

  function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
  }

  exports.eq = eq;

  function eq(a, b, loose) {
    return compare(a, b, loose) === 0;
  }

  exports.neq = neq;

  function neq(a, b, loose) {
    return compare(a, b, loose) !== 0;
  }

  exports.gte = gte;

  function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
  }

  exports.lte = lte;

  function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
  }

  exports.cmp = cmp;

  function cmp(a, op, b, loose) {
    switch (op) {
      case '===':
        if (typeof a === 'object') a = a.version;
        if (typeof b === 'object') b = b.version;
        return a === b;

      case '!==':
        if (typeof a === 'object') a = a.version;
        if (typeof b === 'object') b = b.version;
        return a !== b;

      case '':
      case '=':
      case '==':
        return eq(a, b, loose);

      case '!=':
        return neq(a, b, loose);

      case '>':
        return gt(a, b, loose);

      case '>=':
        return gte(a, b, loose);

      case '<':
        return lt(a, b, loose);

      case '<=':
        return lte(a, b, loose);

      default:
        throw new TypeError('Invalid operator: ' + op);
    }
  }

  exports.Comparator = Comparator;

  function Comparator(comp, options) {
    if (!options || typeof options !== 'object') {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp;
      } else {
        comp = comp.value;
      }
    }

    if (!(this instanceof Comparator)) {
      return new Comparator(comp, options);
    }

    debug('comparator', comp, options);
    this.options = options;
    this.loose = !!options.loose;
    this.parse(comp);

    if (this.semver === ANY) {
      this.value = '';
    } else {
      this.value = this.operator + this.semver.version;
    }

    debug('comp', this);
  }

  var ANY = {};

  Comparator.prototype.parse = function (comp) {
    var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var m = comp.match(r);

    if (!m) {
      throw new TypeError('Invalid comparator: ' + comp);
    }

    this.operator = m[1];

    if (this.operator === '=') {
      this.operator = '';
    }

    if (!m[2]) {
      this.semver = ANY;
    } else {
      this.semver = new SemVer(m[2], this.options.loose);
    }
  };

  Comparator.prototype.toString = function () {
    return this.value;
  };

  Comparator.prototype.test = function (version) {
    debug('Comparator.test', version, this.options.loose);

    if (this.semver === ANY) {
      return true;
    }

    if (typeof version === 'string') {
      version = new SemVer(version, this.options);
    }

    return cmp(version, this.operator, this.semver, this.options);
  };

  Comparator.prototype.intersects = function (comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError('a Comparator is required');
    }

    if (!options || typeof options !== 'object') {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }

    var rangeTmp;

    if (this.operator === '') {
      rangeTmp = new Range(comp.value, options);
      return satisfies(this.value, rangeTmp, options);
    } else if (comp.operator === '') {
      rangeTmp = new Range(this.value, options);
      return satisfies(comp.semver, rangeTmp, options);
    }

    var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
    var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
    var sameSemVer = this.semver.version === comp.semver.version;
    var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
    var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
    var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
    return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
  };

  exports.Range = Range;

  function Range(range, options) {
    if (!options || typeof options !== 'object') {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }

    if (range instanceof Range) {
      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
        return range;
      } else {
        return new Range(range.raw, options);
      }
    }

    if (range instanceof Comparator) {
      return new Range(range.value, options);
    }

    if (!(this instanceof Range)) {
      return new Range(range, options);
    }

    this.options = options;
    this.loose = !!options.loose;
    this.includePrerelease = !!options.includePrerelease;
    this.raw = range;
    this.set = range.split(/\s*\|\|\s*/).map(function (range) {
      return this.parseRange(range.trim());
    }, this).filter(function (c) {
      return c.length;
    });

    if (!this.set.length) {
      throw new TypeError('Invalid SemVer Range: ' + range);
    }

    this.format();
  }

  Range.prototype.format = function () {
    this.range = this.set.map(function (comps) {
      return comps.join(' ').trim();
    }).join('||').trim();
    return this.range;
  };

  Range.prototype.toString = function () {
    return this.range;
  };

  Range.prototype.parseRange = function (range) {
    var loose = this.options.loose;
    range = range.trim();
    var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
    range = range.replace(hr, hyphenReplace);
    debug('hyphen replace', range);
    range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
    debug('comparator trim', range, re[COMPARATORTRIM]);
    range = range.replace(re[TILDETRIM], tildeTrimReplace);
    range = range.replace(re[CARETTRIM], caretTrimReplace);
    range = range.split(/\s+/).join(' ');
    var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var set = range.split(' ').map(function (comp) {
      return parseComparator(comp, this.options);
    }, this).join(' ').split(/\s+/);

    if (this.options.loose) {
      set = set.filter(function (comp) {
        return !!comp.match(compRe);
      });
    }

    set = set.map(function (comp) {
      return new Comparator(comp, this.options);
    }, this);
    return set;
  };

  Range.prototype.intersects = function (range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError('a Range is required');
    }

    return this.set.some(function (thisComparators) {
      return thisComparators.every(function (thisComparator) {
        return range.set.some(function (rangeComparators) {
          return rangeComparators.every(function (rangeComparator) {
            return thisComparator.intersects(rangeComparator, options);
          });
        });
      });
    });
  };

  exports.toComparators = toComparators;

  function toComparators(range, options) {
    return new Range(range, options).set.map(function (comp) {
      return comp.map(function (c) {
        return c.value;
      }).join(' ').trim().split(' ');
    });
  }

  function parseComparator(comp, options) {
    debug('comp', comp, options);
    comp = replaceCarets(comp, options);
    debug('caret', comp);
    comp = replaceTildes(comp, options);
    debug('tildes', comp);
    comp = replaceXRanges(comp, options);
    debug('xrange', comp);
    comp = replaceStars(comp, options);
    debug('stars', comp);
    return comp;
  }

  function isX(id) {
    return !id || id.toLowerCase() === 'x' || id === '*';
  }

  function replaceTildes(comp, options) {
    return comp.trim().split(/\s+/).map(function (comp) {
      return replaceTilde(comp, options);
    }).join(' ');
  }

  function replaceTilde(comp, options) {
    var r = options.loose ? re[TILDELOOSE] : re[TILDE];
    return comp.replace(r, function (_, M, m, p, pr) {
      debug('tilde', comp, _, M, m, p, pr);
      var ret;

      if (isX(M)) {
        ret = '';
      } else if (isX(m)) {
        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      } else if (isX(p)) {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      } else if (pr) {
        debug('replaceTilde pr', pr);
        ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
      } else {
        ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
      }

      debug('tilde return', ret);
      return ret;
    });
  }

  function replaceCarets(comp, options) {
    return comp.trim().split(/\s+/).map(function (comp) {
      return replaceCaret(comp, options);
    }).join(' ');
  }

  function replaceCaret(comp, options) {
    debug('caret', comp, options);
    var r = options.loose ? re[CARETLOOSE] : re[CARET];
    return comp.replace(r, function (_, M, m, p, pr) {
      debug('caret', comp, _, M, m, p, pr);
      var ret;

      if (isX(M)) {
        ret = '';
      } else if (isX(m)) {
        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      } else if (isX(p)) {
        if (M === '0') {
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        } else {
          ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
        }
      } else if (pr) {
        debug('replaceCaret pr', pr);

        if (M === '0') {
          if (m === '0') {
            ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);
          } else {
            ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
          }
        } else {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';
        }
      } else {
        debug('no pr');

        if (M === '0') {
          if (m === '0') {
            ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);
          } else {
            ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
          }
        } else {
          ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
        }
      }

      debug('caret return', ret);
      return ret;
    });
  }

  function replaceXRanges(comp, options) {
    debug('replaceXRanges', comp, options);
    return comp.split(/\s+/).map(function (comp) {
      return replaceXRange(comp, options);
    }).join(' ');
  }

  function replaceXRange(comp, options) {
    comp = comp.trim();
    var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
    return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
      debug('xRange', comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;

      if (gtlt === '=' && anyX) {
        gtlt = '';
      }

      if (xM) {
        if (gtlt === '>' || gtlt === '<') {
          ret = '<0.0.0';
        } else {
          ret = '*';
        }
      } else if (gtlt && anyX) {
        if (xm) {
          m = 0;
        }

        p = 0;

        if (gtlt === '>') {
          gtlt = '>=';

          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === '<=') {
          gtlt = '<';

          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }

        ret = gtlt + M + '.' + m + '.' + p;
      } else if (xm) {
        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      } else if (xp) {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      }

      debug('xRange return', ret);
      return ret;
    });
  }

  function replaceStars(comp, options) {
    debug('replaceStars', comp, options);
    return comp.trim().replace(re[STAR], '');
  }

  function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
    if (isX(fM)) {
      from = '';
    } else if (isX(fm)) {
      from = '>=' + fM + '.0.0';
    } else if (isX(fp)) {
      from = '>=' + fM + '.' + fm + '.0';
    } else {
      from = '>=' + from;
    }

    if (isX(tM)) {
      to = '';
    } else if (isX(tm)) {
      to = '<' + (+tM + 1) + '.0.0';
    } else if (isX(tp)) {
      to = '<' + tM + '.' + (+tm + 1) + '.0';
    } else if (tpr) {
      to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
    } else {
      to = '<=' + to;
    }

    return (from + ' ' + to).trim();
  }

  Range.prototype.test = function (version) {
    if (!version) {
      return false;
    }

    if (typeof version === 'string') {
      version = new SemVer(version, this.options);
    }

    for (var i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version, this.options)) {
        return true;
      }
    }

    return false;
  };

  function testSet(set, version, options) {
    for (var i = 0; i < set.length; i++) {
      if (!set[i].test(version)) {
        return false;
      }
    }

    if (version.prerelease.length && !options.includePrerelease) {
      for (i = 0; i < set.length; i++) {
        debug(set[i].semver);

        if (set[i].semver === ANY) {
          continue;
        }

        if (set[i].semver.prerelease.length > 0) {
          var allowed = set[i].semver;

          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
            return true;
          }
        }
      }

      return false;
    }

    return true;
  }

  exports.satisfies = satisfies;

  function satisfies(version, range, options) {
    try {
      range = new Range(range, options);
    } catch (er) {
      return false;
    }

    return range.test(version);
  }

  exports.maxSatisfying = maxSatisfying;

  function maxSatisfying(versions, range, options) {
    var max = null;
    var maxSV = null;

    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }

    versions.forEach(function (v) {
      if (rangeObj.test(v)) {
        if (!max || maxSV.compare(v) === -1) {
          max = v;
          maxSV = new SemVer(max, options);
        }
      }
    });
    return max;
  }

  exports.minSatisfying = minSatisfying;

  function minSatisfying(versions, range, options) {
    var min = null;
    var minSV = null;

    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }

    versions.forEach(function (v) {
      if (rangeObj.test(v)) {
        if (!min || minSV.compare(v) === 1) {
          min = v;
          minSV = new SemVer(min, options);
        }
      }
    });
    return min;
  }

  exports.minVersion = minVersion;

  function minVersion(range, loose) {
    range = new Range(range, loose);
    var minver = new SemVer('0.0.0');

    if (range.test(minver)) {
      return minver;
    }

    minver = new SemVer('0.0.0-0');

    if (range.test(minver)) {
      return minver;
    }

    minver = null;

    for (var i = 0; i < range.set.length; ++i) {
      var comparators = range.set[i];
      comparators.forEach(function (comparator) {
        var compver = new SemVer(comparator.semver.version);

        switch (comparator.operator) {
          case '>':
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }

            compver.raw = compver.format();

          case '':
          case '>=':
            if (!minver || gt(minver, compver)) {
              minver = compver;
            }

            break;

          case '<':
          case '<=':
            break;

          default:
            throw new Error('Unexpected operation: ' + comparator.operator);
        }
      });
    }

    if (minver && range.test(minver)) {
      return minver;
    }

    return null;
  }

  exports.validRange = validRange;

  function validRange(range, options) {
    try {
      return new Range(range, options).range || '*';
    } catch (er) {
      return null;
    }
  }

  exports.ltr = ltr;

  function ltr(version, range, options) {
    return outside(version, range, '<', options);
  }

  exports.gtr = gtr;

  function gtr(version, range, options) {
    return outside(version, range, '>', options);
  }

  exports.outside = outside;

  function outside(version, range, hilo, options) {
    version = new SemVer(version, options);
    range = new Range(range, options);
    var gtfn, ltefn, ltfn, comp, ecomp;

    switch (hilo) {
      case '>':
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = '>';
        ecomp = '>=';
        break;

      case '<':
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = '<';
        ecomp = '<=';
        break;

      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }

    if (satisfies(version, range, options)) {
      return false;
    }

    for (var i = 0; i < range.set.length; ++i) {
      var comparators = range.set[i];
      var high = null;
      var low = null;
      comparators.forEach(function (comparator) {
        if (comparator.semver === ANY) {
          comparator = new Comparator('>=0.0.0');
        }

        high = high || comparator;
        low = low || comparator;

        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator;
        }
      });

      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }

      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false;
      }
    }

    return true;
  }

  exports.prerelease = prerelease;

  function prerelease(version, options) {
    var parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  }

  exports.intersects = intersects;

  function intersects(r1, r2, options) {
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2);
  }

  exports.coerce = coerce;

  function coerce(version) {
    if (version instanceof SemVer) {
      return version;
    }

    if (typeof version !== 'string') {
      return null;
    }

    var match = version.match(re[COERCE]);

    if (match == null) {
      return null;
    }

    return parse(match[1] + '.' + (match[2] || '0') + '.' + (match[3] || '0'));
  }
},211,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _getPrototypeOf(o) {
    module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  module.exports = _getPrototypeOf;
},212,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var setPrototypeOf = _$$_REQUIRE(_dependencyMap[0]);

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) setPrototypeOf(subClass, superClass);
  }

  module.exports = _inherits;
},213,[214]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  function _setPrototypeOf(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  module.exports = _setPrototypeOf;
},214,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var _typeof = _$$_REQUIRE(_dependencyMap[0]);

  var assertThisInitialized = _$$_REQUIRE(_dependencyMap[1]);

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }

    return assertThisInitialized(self);
  }

  module.exports = _possibleConstructorReturn;
},215,[14,26]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
},216,[217]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var bind = _$$_REQUIRE(_dependencyMap[1]);

  var Axios = _$$_REQUIRE(_dependencyMap[2]);

  var mergeConfig = _$$_REQUIRE(_dependencyMap[3]);

  var defaults = _$$_REQUIRE(_dependencyMap[4]);

  function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    utils.extend(instance, Axios.prototype, context);
    utils.extend(instance, context);
    return instance;
  }

  var axios = createInstance(defaults);
  axios.Axios = Axios;

  axios.create = function create(instanceConfig) {
    return createInstance(mergeConfig(axios.defaults, instanceConfig));
  };

  axios.Cancel = _$$_REQUIRE(_dependencyMap[5]);
  axios.CancelToken = _$$_REQUIRE(_dependencyMap[6]);
  axios.isCancel = _$$_REQUIRE(_dependencyMap[7]);

  axios.all = function all(promises) {
    return Promise.all(promises);
  };

  axios.spread = _$$_REQUIRE(_dependencyMap[8]);
  module.exports = axios;
  module.exports.default = axios;
},217,[218,219,220,251,226,252,253,225,254]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var bind = _$$_REQUIRE(_dependencyMap[0]);

  var toString = Object.prototype.toString;

  function isArray(val) {
    return toString.call(val) === '[object Array]';
  }

  function isUndefined(val) {
    return typeof val === 'undefined';
  }

  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
  }

  function isArrayBuffer(val) {
    return toString.call(val) === '[object ArrayBuffer]';
  }

  function isFormData(val) {
    return typeof FormData !== 'undefined' && val instanceof FormData;
  }

  function isArrayBufferView(val) {
    var result;

    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && val.buffer instanceof ArrayBuffer;
    }

    return result;
  }

  function isString(val) {
    return typeof val === 'string';
  }

  function isNumber(val) {
    return typeof val === 'number';
  }

  function isObject(val) {
    return val !== null && typeof val === 'object';
  }

  function isDate(val) {
    return toString.call(val) === '[object Date]';
  }

  function isFile(val) {
    return toString.call(val) === '[object File]';
  }

  function isBlob(val) {
    return toString.call(val) === '[object Blob]';
  }

  function isFunction(val) {
    return toString.call(val) === '[object Function]';
  }

  function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
  }

  function isURLSearchParams(val) {
    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
  }

  function trim(str) {
    return str.replace(/^\s*/, '').replace(/\s*$/, '');
  }

  function isStandardBrowserEnv() {
    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
      return false;
    }

    return typeof window !== 'undefined' && typeof document !== 'undefined';
  }

  function forEach(obj, fn) {
    if (obj === null || typeof obj === 'undefined') {
      return;
    }

    if (typeof obj !== 'object') {
      obj = [obj];
    }

    if (isArray(obj)) {
      for (var i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn.call(null, obj[key], key, obj);
        }
      }
    }
  }

  function merge() {
    var result = {};

    function assignValue(val, key) {
      if (typeof result[key] === 'object' && typeof val === 'object') {
        result[key] = merge(result[key], val);
      } else {
        result[key] = val;
      }
    }

    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }

    return result;
  }

  function deepMerge() {
    var result = {};

    function assignValue(val, key) {
      if (typeof result[key] === 'object' && typeof val === 'object') {
        result[key] = deepMerge(result[key], val);
      } else if (typeof val === 'object') {
        result[key] = deepMerge({}, val);
      } else {
        result[key] = val;
      }
    }

    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }

    return result;
  }

  function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
      if (thisArg && typeof val === 'function') {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    });
    return a;
  }

  module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    deepMerge: deepMerge,
    extend: extend,
    trim: trim
  };
},218,[219]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function bind(fn, thisArg) {
    return function wrap() {
      var args = new Array(arguments.length);

      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      return fn.apply(thisArg, args);
    };
  };
},219,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var buildURL = _$$_REQUIRE(_dependencyMap[1]);

  var InterceptorManager = _$$_REQUIRE(_dependencyMap[2]);

  var dispatchRequest = _$$_REQUIRE(_dependencyMap[3]);

  var mergeConfig = _$$_REQUIRE(_dependencyMap[4]);

  function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }

  Axios.prototype.request = function request(config) {
    if (typeof config === 'string') {
      config = arguments[1] || {};
      config.url = arguments[0];
    } else {
      config = config || {};
    }

    config = mergeConfig(this.defaults, config);

    if (config.method) {
      config.method = config.method.toLowerCase();
    } else if (this.defaults.method) {
      config.method = this.defaults.method.toLowerCase();
    } else {
      config.method = 'get';
    }

    var chain = [dispatchRequest, undefined];
    var promise = Promise.resolve(config);
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      chain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      chain.push(interceptor.fulfilled, interceptor.rejected);
    });

    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  };

  Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
  };

  utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    Axios.prototype[method] = function (url, config) {
      return this.request(utils.merge(config || {}, {
        method: method,
        url: url
      }));
    };
  });
  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    Axios.prototype[method] = function (url, data, config) {
      return this.request(utils.merge(config || {}, {
        method: method,
        url: url,
        data: data
      }));
    };
  });
  module.exports = Axios;
},220,[218,221,222,223,251]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  function encode(val) {
    return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
  }

  module.exports = function buildURL(url, params, paramsSerializer) {
    if (!params) {
      return url;
    }

    var serializedParams;

    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];
      utils.forEach(params, function serialize(val, key) {
        if (val === null || typeof val === 'undefined') {
          return;
        }

        if (utils.isArray(val)) {
          key = key + '[]';
        } else {
          val = [val];
        }

        utils.forEach(val, function parseValue(v) {
          if (utils.isDate(v)) {
            v = v.toISOString();
          } else if (utils.isObject(v)) {
            v = JSON.stringify(v);
          }

          parts.push(encode(key) + '=' + encode(v));
        });
      });
      serializedParams = parts.join('&');
    }

    if (serializedParams) {
      var hashmarkIndex = url.indexOf('#');

      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }

      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  };
},221,[218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  function InterceptorManager() {
    this.handlers = [];
  }

  InterceptorManager.prototype.use = function use(fulfilled, rejected) {
    this.handlers.push({
      fulfilled: fulfilled,
      rejected: rejected
    });
    return this.handlers.length - 1;
  };

  InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };

  InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  };

  module.exports = InterceptorManager;
},222,[218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var transformData = _$$_REQUIRE(_dependencyMap[1]);

  var isCancel = _$$_REQUIRE(_dependencyMap[2]);

  var defaults = _$$_REQUIRE(_dependencyMap[3]);

  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
  }

  module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = config.headers || {};
    config.data = transformData(config.data, config.headers, config.transformRequest);
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
      delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData(response.data, response.headers, config.transformResponse);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);

        if (reason && reason.response) {
          reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
        }
      }

      return Promise.reject(reason);
    });
  };
},223,[218,224,225,226]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = function transformData(data, headers, fns) {
    utils.forEach(fns, function transform(fn) {
      data = fn(data, headers);
    });
    return data;
  };
},224,[218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
  };
},225,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var normalizeHeaderName = _$$_REQUIRE(_dependencyMap[1]);

  var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };

  function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
      headers['Content-Type'] = value;
    }
  }

  function getDefaultAdapter() {
    var adapter;

    if (typeof XMLHttpRequest !== 'undefined') {
      adapter = _$$_REQUIRE(_dependencyMap[2]);
    } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
      adapter = _$$_REQUIRE(_dependencyMap[3]);
    }

    return adapter;
  }

  var defaults = {
    adapter: getDefaultAdapter(),
    transformRequest: [function transformRequest(data, headers) {
      normalizeHeaderName(headers, 'Accept');
      normalizeHeaderName(headers, 'Content-Type');

      if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
        return data;
      }

      if (utils.isArrayBufferView(data)) {
        return data.buffer;
      }

      if (utils.isURLSearchParams(data)) {
        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
        return data.toString();
      }

      if (utils.isObject(data)) {
        setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
        return JSON.stringify(data);
      }

      return data;
    }],
    transformResponse: [function transformResponse(data) {
      if (typeof data === 'string') {
        try {
          data = JSON.parse(data);
        } catch (e) {}
      }

      return data;
    }],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    }
  };
  defaults.headers = {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  };
  utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
  });
  utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
  });
  module.exports = defaults;
},226,[218,227,228,238]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name];
      }
    });
  };
},227,[218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var settle = _$$_REQUIRE(_dependencyMap[1]);

  var buildURL = _$$_REQUIRE(_dependencyMap[2]);

  var buildFullPath = _$$_REQUIRE(_dependencyMap[3]);

  var parseHeaders = _$$_REQUIRE(_dependencyMap[4]);

  var isURLSameOrigin = _$$_REQUIRE(_dependencyMap[5]);

  var createError = _$$_REQUIRE(_dependencyMap[6]);

  module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;

      if (utils.isFormData(requestData)) {
        delete requestHeaders['Content-Type'];
      }

      var request = new XMLHttpRequest();

      if (config.auth) {
        var username = config.auth.username || '';
        var password = config.auth.password || '';
        requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
      }

      var fullPath = buildFullPath(config.baseURL, config.url);
      request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
      request.timeout = config.timeout;

      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }

        var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
        var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
        var response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config: config,
          request: request
        };
        settle(resolve, reject, response);
        request = null;
      };

      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }

        reject(createError('Request aborted', config, 'ECONNABORTED', request));
        request = null;
      };

      request.onerror = function handleError() {
        reject(createError('Network Error', config, null, request));
        request = null;
      };

      request.ontimeout = function handleTimeout() {
        var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';

        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }

        reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request));
        request = null;
      };

      if (utils.isStandardBrowserEnv()) {
        var cookies = _$$_REQUIRE(_dependencyMap[7]);

        var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      }

      if ('setRequestHeader' in request) {
        utils.forEach(requestHeaders, function setRequestHeader(val, key) {
          if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
            delete requestHeaders[key];
          } else {
            request.setRequestHeader(key, val);
          }
        });
      }

      if (!utils.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }

      if (config.responseType) {
        try {
          request.responseType = config.responseType;
        } catch (e) {
          if (config.responseType !== 'json') {
            throw e;
          }
        }
      }

      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener('progress', config.onDownloadProgress);
      }

      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener('progress', config.onUploadProgress);
      }

      if (config.cancelToken) {
        config.cancelToken.promise.then(function onCanceled(cancel) {
          if (!request) {
            return;
          }

          request.abort();
          reject(cancel);
          request = null;
        });
      }

      if (requestData === undefined) {
        requestData = null;
      }

      request.send(requestData);
    });
  };
},228,[218,229,221,232,235,236,230,237]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var createError = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;

    if (!validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
    }
  };
},229,[230]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var enhanceError = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
  };
},230,[231]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function enhanceError(error, config, code, request, response) {
    error.config = config;

    if (code) {
      error.code = code;
    }

    error.request = request;
    error.response = response;
    error.isAxiosError = true;

    error.toJSON = function () {
      return {
        message: this.message,
        name: this.name,
        description: this.description,
        number: this.number,
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        config: this.config,
        code: this.code
      };
    };

    return error;
  };
},231,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var isAbsoluteURL = _$$_REQUIRE(_dependencyMap[0]);

  var combineURLs = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }

    return requestedURL;
  };
},232,[233,234]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function isAbsoluteURL(url) {
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
  };
},233,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
  };
},234,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];

  module.exports = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;

    if (!headers) {
      return parsed;
    }

    utils.forEach(headers.split('\n'), function parser(line) {
      i = line.indexOf(':');
      key = utils.trim(line.substr(0, i)).toLowerCase();
      val = utils.trim(line.substr(i + 1));

      if (key) {
        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
          return;
        }

        if (key === 'set-cookie') {
          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
      }
    });
    return parsed;
  };
},235,[218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    function resolveURL(url) {
      var href = url;

      if (msie) {
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }() : function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  }();
},236,[218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },
      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  }() : function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() {
        return null;
      },
      remove: function remove() {}
    };
  }();
},237,[218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  var settle = _$$_REQUIRE(_dependencyMap[1]);

  var buildFullPath = _$$_REQUIRE(_dependencyMap[2]);

  var buildURL = _$$_REQUIRE(_dependencyMap[3]);

  var http = _$$_REQUIRE(_dependencyMap[4]);

  var https = _$$_REQUIRE(_dependencyMap[5]);

  var httpFollow = _$$_REQUIRE(_dependencyMap[6]).http;

  var httpsFollow = _$$_REQUIRE(_dependencyMap[6]).https;

  var url = _$$_REQUIRE(_dependencyMap[7]);

  var zlib = _$$_REQUIRE(_dependencyMap[8]);

  var pkg = _$$_REQUIRE(_dependencyMap[9]);

  var createError = _$$_REQUIRE(_dependencyMap[10]);

  var enhanceError = _$$_REQUIRE(_dependencyMap[11]);

  var isHttps = /https:?/;

  module.exports = function httpAdapter(config) {
    return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
      var resolve = function resolve(value) {
        resolvePromise(value);
      };

      var reject = function reject(value) {
        rejectPromise(value);
      };

      var data = config.data;
      var headers = config.headers;

      if (!headers['User-Agent'] && !headers['user-agent']) {
        headers['User-Agent'] = 'axios/' + pkg.version;
      }

      if (data && !utils.isStream(data)) {
        if (Buffer.isBuffer(data)) {} else if (utils.isArrayBuffer(data)) {
          data = Buffer.from(new Uint8Array(data));
        } else if (utils.isString(data)) {
          data = Buffer.from(data, 'utf-8');
        } else {
          return reject(createError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', config));
        }

        headers['Content-Length'] = data.length;
      }

      var auth = undefined;

      if (config.auth) {
        var username = config.auth.username || '';
        var password = config.auth.password || '';
        auth = username + ':' + password;
      }

      var fullPath = buildFullPath(config.baseURL, config.url);
      var parsed = url.parse(fullPath);
      var protocol = parsed.protocol || 'http:';

      if (!auth && parsed.auth) {
        var urlAuth = parsed.auth.split(':');
        var urlUsername = urlAuth[0] || '';
        var urlPassword = urlAuth[1] || '';
        auth = urlUsername + ':' + urlPassword;
      }

      if (auth) {
        delete headers.Authorization;
      }

      var isHttpsRequest = isHttps.test(protocol);
      var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
      var options = {
        path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
        method: config.method.toUpperCase(),
        headers: headers,
        agent: agent,
        agents: {
          http: config.httpAgent,
          https: config.httpsAgent
        },
        auth: auth
      };

      if (config.socketPath) {
        options.socketPath = config.socketPath;
      } else {
        options.hostname = parsed.hostname;
        options.port = parsed.port;
      }

      var proxy = config.proxy;

      if (!proxy && proxy !== false) {
        var proxyEnv = protocol.slice(0, -1) + '_proxy';
        var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];

        if (proxyUrl) {
          var parsedProxyUrl = url.parse(proxyUrl);
          var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
          var shouldProxy = true;

          if (noProxyEnv) {
            var noProxy = noProxyEnv.split(',').map(function trim(s) {
              return s.trim();
            });
            shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
              if (!proxyElement) {
                return false;
              }

              if (proxyElement === '*') {
                return true;
              }

              if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
                return true;
              }

              return parsed.hostname === proxyElement;
            });
          }

          if (shouldProxy) {
            proxy = {
              host: parsedProxyUrl.hostname,
              port: parsedProxyUrl.port
            };

            if (parsedProxyUrl.auth) {
              var proxyUrlAuth = parsedProxyUrl.auth.split(':');
              proxy.auth = {
                username: proxyUrlAuth[0],
                password: proxyUrlAuth[1]
              };
            }
          }
        }
      }

      if (proxy) {
        options.hostname = proxy.host;
        options.host = proxy.host;
        options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
        options.port = proxy.port;
        options.path = protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path;

        if (proxy.auth) {
          var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
          options.headers['Proxy-Authorization'] = 'Basic ' + base64;
        }
      }

      var transport;
      var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);

      if (config.transport) {
        transport = config.transport;
      } else if (config.maxRedirects === 0) {
        transport = isHttpsProxy ? https : http;
      } else {
        if (config.maxRedirects) {
          options.maxRedirects = config.maxRedirects;
        }

        transport = isHttpsProxy ? httpsFollow : httpFollow;
      }

      if (config.maxContentLength && config.maxContentLength > -1) {
        options.maxBodyLength = config.maxContentLength;
      }

      var req = transport.request(options, function handleResponse(res) {
        if (req.aborted) return;
        var stream = res;

        switch (res.headers['content-encoding']) {
          case 'gzip':
          case 'compress':
          case 'def':
            stream = res.statusCode === 204 ? stream : stream.pipe(zlib.createUnzip());
            delete res.headers['content-encoding'];
            break;
        }

        var lastRequest = res.req || req;
        var response = {
          status: res.statusCode,
          statusText: res.statusMessage,
          headers: res.headers,
          config: config,
          request: lastRequest
        };

        if (config.responseType === 'stream') {
          response.data = stream;
          settle(resolve, reject, response);
        } else {
          var responseBuffer = [];
          stream.on('data', function handleStreamData(chunk) {
            responseBuffer.push(chunk);

            if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {
              stream.destroy();
              reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded', config, null, lastRequest));
            }
          });
          stream.on('error', function handleStreamError(err) {
            if (req.aborted) return;
            reject(enhanceError(err, config, null, lastRequest));
          });
          stream.on('end', function handleStreamEnd() {
            var responseData = Buffer.concat(responseBuffer);

            if (config.responseType !== 'arraybuffer') {
              responseData = responseData.toString(config.responseEncoding);
            }

            response.data = responseData;
            settle(resolve, reject, response);
          });
        }
      });
      req.on('error', function handleRequestError(err) {
        if (req.aborted) return;
        reject(enhanceError(err, config, null, req));
      });

      if (config.timeout) {
        req.setTimeout(config.timeout, function handleRequestTimeout() {
          req.abort();
          reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', req));
        });
      }

      if (config.cancelToken) {
        config.cancelToken.promise.then(function onCanceled(cancel) {
          if (req.aborted) return;
          req.abort();
          reject(cancel);
        });
      }

      if (utils.isStream(data)) {
        data.on('error', function handleStreamError(err) {
          reject(enhanceError(err, config, null, req));
        }).pipe(req);
      } else {
        req.end(data);
      }
    });
  };
},238,[218,229,232,221,169,170,239,172,171,250,230,231]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var url = _$$_REQUIRE(_dependencyMap[0]);

  var http = _$$_REQUIRE(_dependencyMap[1]);

  var https = _$$_REQUIRE(_dependencyMap[2]);

  var assert = _$$_REQUIRE(_dependencyMap[3]);

  var Writable = _$$_REQUIRE(_dependencyMap[4]).Writable;

  var debug = _$$_REQUIRE(_dependencyMap[5])("follow-redirects");

  var SAFE_METHODS = {
    GET: true,
    HEAD: true,
    OPTIONS: true,
    TRACE: true
  };
  var eventHandlers = Object.create(null);
  ["abort", "aborted", "error", "socket", "timeout"].forEach(function (event) {
    eventHandlers[event] = function (arg) {
      this._redirectable.emit(event, arg);
    };
  });

  function RedirectableRequest(options, responseCallback) {
    Writable.call(this);
    options.headers = options.headers || {};
    this._options = options;
    this._redirectCount = 0;
    this._redirects = [];
    this._requestBodyLength = 0;
    this._requestBodyBuffers = [];

    if (options.host) {
      if (!options.hostname) {
        options.hostname = options.host;
      }

      delete options.host;
    }

    if (responseCallback) {
      this.on("response", responseCallback);
    }

    var self = this;

    this._onNativeResponse = function (response) {
      self._processResponse(response);
    };

    if (!options.pathname && options.path) {
      var searchPos = options.path.indexOf("?");

      if (searchPos < 0) {
        options.pathname = options.path;
      } else {
        options.pathname = options.path.substring(0, searchPos);
        options.search = options.path.substring(searchPos);
      }
    }

    this._performRequest();
  }

  RedirectableRequest.prototype = Object.create(Writable.prototype);

  RedirectableRequest.prototype.write = function (data, encoding, callback) {
    if (!(typeof data === "string" || typeof data === "object" && "length" in data)) {
      throw new Error("data should be a string, Buffer or Uint8Array");
    }

    if (typeof encoding === "function") {
      callback = encoding;
      encoding = null;
    }

    if (data.length === 0) {
      if (callback) {
        callback();
      }

      return;
    }

    if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
      this._requestBodyLength += data.length;

      this._requestBodyBuffers.push({
        data: data,
        encoding: encoding
      });

      this._currentRequest.write(data, encoding, callback);
    } else {
        this.emit("error", new Error("Request body larger than maxBodyLength limit"));
        this.abort();
      }
  };

  RedirectableRequest.prototype.end = function (data, encoding, callback) {
    if (typeof data === "function") {
      callback = data;
      data = encoding = null;
    } else if (typeof encoding === "function") {
      callback = encoding;
      encoding = null;
    }

    var currentRequest = this._currentRequest;
    this.write(data || "", encoding, function () {
      currentRequest.end(null, null, callback);
    });
  };

  RedirectableRequest.prototype.setHeader = function (name, value) {
    this._options.headers[name] = value;

    this._currentRequest.setHeader(name, value);
  };

  RedirectableRequest.prototype.removeHeader = function (name) {
    delete this._options.headers[name];

    this._currentRequest.removeHeader(name);
  };

  ["abort", "flushHeaders", "getHeader", "setNoDelay", "setSocketKeepAlive", "setTimeout"].forEach(function (method) {
    RedirectableRequest.prototype[method] = function (a, b) {
      return this._currentRequest[method](a, b);
    };
  });
  ["aborted", "connection", "socket"].forEach(function (property) {
    Object.defineProperty(RedirectableRequest.prototype, property, {
      get: function () {
        return this._currentRequest[property];
      }
    });
  });

  RedirectableRequest.prototype._performRequest = function () {
    var protocol = this._options.protocol;
    var nativeProtocol = this._options.nativeProtocols[protocol];

    if (!nativeProtocol) {
      this.emit("error", new Error("Unsupported protocol " + protocol));
      return;
    }

    if (this._options.agents) {
      var scheme = protocol.substr(0, protocol.length - 1);
      this._options.agent = this._options.agents[scheme];
    }

    var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
    this._currentUrl = url.format(this._options);
    request._redirectable = this;

    for (var event in eventHandlers) {
      if (event) {
        request.on(event, eventHandlers[event]);
      }
    }

    if (this._isRedirect) {
      var i = 0;
      var buffers = this._requestBodyBuffers;

      (function writeNext() {
        if (i < buffers.length) {
          var buffer = buffers[i++];
          request.write(buffer.data, buffer.encoding, writeNext);
        } else {
          request.end();
        }
      })();
    }
  };

  RedirectableRequest.prototype._processResponse = function (response) {
    if (this._options.trackRedirects) {
      this._redirects.push({
        url: this._currentUrl,
        headers: response.headers,
        statusCode: response.statusCode
      });
    }

    var location = response.headers.location;

    if (location && this._options.followRedirects !== false && response.statusCode >= 300 && response.statusCode < 400) {
      if (++this._redirectCount > this._options.maxRedirects) {
        this.emit("error", new Error("Max redirects exceeded."));
        return;
      }

      var header;
      var headers = this._options.headers;

      if (response.statusCode !== 307 && !(this._options.method in SAFE_METHODS)) {
        this._options.method = "GET";
        this._requestBodyBuffers = [];

        for (header in headers) {
          if (/^content-/i.test(header)) {
            delete headers[header];
          }
        }
      }

      if (!this._isRedirect) {
        for (header in headers) {
          if (/^host$/i.test(header)) {
            delete headers[header];
          }
        }
      }

      var redirectUrl = url.resolve(this._currentUrl, location);
      debug("redirecting to", redirectUrl);
      Object.assign(this._options, url.parse(redirectUrl));
      this._isRedirect = true;

      this._performRequest();

      response.destroy();
    } else {
      response.responseUrl = this._currentUrl;
      response.redirects = this._redirects;
      this.emit("response", response);
      this._requestBodyBuffers = [];
    }
  };

  function wrap(protocols) {
    var exports = {
      maxRedirects: 21,
      maxBodyLength: 10485760
    };
    var nativeProtocols = {};
    Object.keys(protocols).forEach(function (scheme) {
      var protocol = scheme + ":";
      var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
      var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

      wrappedProtocol.request = function (options, callback) {
        if (typeof options === "string") {
          options = url.parse(options);
          options.maxRedirects = exports.maxRedirects;
        } else {
          options = Object.assign({
            protocol: protocol,
            maxRedirects: exports.maxRedirects,
            maxBodyLength: exports.maxBodyLength
          }, options);
        }

        options.nativeProtocols = nativeProtocols;
        assert.equal(options.protocol, protocol, "protocol mismatch");
        debug("options", options);
        return new RedirectableRequest(options, callback);
      };

      wrappedProtocol.get = function (options, callback) {
        var request = wrappedProtocol.request(options, callback);
        request.end();
        return request;
      };
    });
    return exports;
  }

  module.exports = wrap({
    http: http,
    https: https
  });
  module.exports.wrap = wrap;
},239,[172,169,170,240,190,241]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('assert');
},240,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  if (typeof process === 'undefined' || process.type === 'renderer') {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1]);
  }
},241,[242,245]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports = module.exports = _$$_REQUIRE(_dependencyMap[0]);
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
  exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

  function useColors() {
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }

    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }

  exports.formatters.j = function (v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };

  function formatArgs(args) {
    var useColors = this.useColors;
    args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
    if (!useColors) return;
    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function (match) {
      if ('%%' === match) return;
      index++;

      if ('%c' === match) {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }

  function log() {
    return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
  }

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {}
  }

  function load() {
    var r;

    try {
      r = exports.storage.debug;
    } catch (e) {}

    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  exports.enable(load());

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
},242,[243]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = _$$_REQUIRE(_dependencyMap[0]);
  exports.instances = [];
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};

  function selectColor(namespace) {
    var hash = 0,
        i;

    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      if (!debug.enabled) return;
      var self = debug;
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);

      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        args.unshift('%O');
      }

      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];

        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);
          args.splice(index, 1);
          index--;
        }

        return match;
      });
      exports.formatArgs.call(self, args);
      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;

    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    exports.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = exports.instances.indexOf(this);

    if (index !== -1) {
      exports.instances.splice(index, 1);
      return true;
    } else {
      return false;
    }
  }

  function enable(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) continue;
      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < exports.instances.length; i++) {
      var instance = exports.instances[i];
      instance.enabled = exports.enabled(instance.namespace);
    }
  }

  function disable() {
    exports.enable('');
  }

  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i, len;

    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
},243,[244]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var s = 1000;
  var m = 60000;
  var h = 3600000;
  var d = 86400000;
  var y = 31557600000;

  module.exports = function (val, options) {
    options = options || {};
    var type = typeof val;

    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }

    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
  };

  function parse(str) {
    str = String(str);

    if (str.length > 100) {
      return;
    }

    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

    if (!match) {
      return;
    }

    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();

    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;

      case 'days':
      case 'day':
      case 'd':
        return n * d;

      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;

      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;

      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;

      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;

      default:
        return undefined;
    }
  }

  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + 'd';
    }

    if (ms >= h) {
      return Math.round(ms / h) + 'h';
    }

    if (ms >= m) {
      return Math.round(ms / m) + 'm';
    }

    if (ms >= s) {
      return Math.round(ms / s) + 's';
    }

    return ms + 'ms';
  }

  function fmtLong(ms) {
    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
  }

  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }

    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }

    return Math.ceil(ms / n) + ' ' + name + 's';
  }
},244,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var tty = _$$_REQUIRE(_dependencyMap[0]);

  var util = _$$_REQUIRE(_dependencyMap[1]);

  exports = module.exports = _$$_REQUIRE(_dependencyMap[2]);
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];

  try {
    var supportsColor = _$$_REQUIRE(_dependencyMap[3]);

    if (supportsColor && supportsColor.level >= 2) {
      exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
    }
  } catch (err) {}

  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;else if (/^(no|off|false|disabled)$/i.test(val)) val = false;else if (val === 'null') val = null;else val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});

  function useColors() {
    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }

  exports.formatters.o = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split('\n').map(function (str) {
      return str.trim();
    }).join(' ');
  };

  exports.formatters.O = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };

  function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var colorCode = '\u001b[3' + (c < 8 ? c : '8;5;' + c);
      var prefix = '  ' + colorCode + ';1m' + name + ' ' + '\u001b[0m';
      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
    } else {
      args[0] = getDate() + name + ' ' + args[0];
    }
  }

  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return '';
    } else {
      return new Date().toISOString() + ' ';
    }
  }

  function log() {
    return process.stderr.write(util.format.apply(util, arguments) + '\n');
  }

  function save(namespaces) {
    if (null == namespaces) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  function load() {
    return process.env.DEBUG;
  }

  function init(debug) {
    debug.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);

    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  exports.enable(load());
},245,[246,103,243,247]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('tty');
},246,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const os = _$$_REQUIRE(_dependencyMap[0]);

  const hasFlag = _$$_REQUIRE(_dependencyMap[1]);

  const env = process.env;
  let forceColor;

  if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
    forceColor = false;
  } else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
    forceColor = true;
  }

  if ('FORCE_COLOR' in env) {
    forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
  }

  function transLevel(level) {
    if (level === 0) {
      return false;
    }

    return {
      level,
      hasBasic: true,
      has256: level >= 2,
      has16m: level >= 3
    };
  }

  function supportsColor(stream) {
    if (forceColor === false) {
      return 0;
    }

    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
      return 3;
    }

    if (hasFlag('color=256')) {
      return 2;
    }

    if (stream && !stream.isTTY && forceColor !== true) {
      return 0;
    }

    const min = forceColor ? 1 : 0;

    if (process.platform === 'win32') {
      const osRelease = os.release().split('.');

      if (Number(process.versions.node.split('.')[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
        return Number(osRelease[2]) >= 14931 ? 3 : 2;
      }

      return 1;
    }

    if ('CI' in env) {
      if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
        return 1;
      }

      return min;
    }

    if ('TEAMCITY_VERSION' in env) {
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }

    if (env.COLORTERM === 'truecolor') {
      return 3;
    }

    if ('TERM_PROGRAM' in env) {
      const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

      switch (env.TERM_PROGRAM) {
        case 'iTerm.app':
          return version >= 3 ? 3 : 2;

        case 'Apple_Terminal':
          return 2;
      }
    }

    if (/-256(color)?$/i.test(env.TERM)) {
      return 2;
    }

    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
      return 1;
    }

    if ('COLORTERM' in env) {
      return 1;
    }

    if (env.TERM === 'dumb') {
      return min;
    }

    return min;
  }

  function getSupportLevel(stream) {
    const level = supportsColor(stream);
    return transLevel(level);
  }

  module.exports = {
    supportsColor: getSupportLevel,
    stdout: getSupportLevel(process.stdout),
    stderr: getSupportLevel(process.stderr)
  };
},247,[248,249]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('os');
},248,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = (flag, argv) => {
    argv = argv || process.argv;
    const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
    const pos = argv.indexOf(prefix + flag);
    const terminatorPos = argv.indexOf('--');
    return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
  };
},249,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = {
  "_from": "axios@^0.19.0",
  "_id": "axios@0.19.2",
  "_inBundle": false,
  "_integrity": "sha512-fjgm5MvRHLhx+osE2xoekY70AhARk3a6hkN+3Io1jc00jtquGvxYlKlsFUhmUET0V5te6CcZI7lcv2Ym61mjHA==",
  "_location": "/axios",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "axios@^0.19.0",
    "name": "axios",
    "escapedName": "axios",
    "rawSpec": "^0.19.0",
    "saveSpec": null,
    "fetchSpec": "^0.19.0"
  },
  "_requiredBy": [
    "/tronweb"
  ],
  "_resolved": "https://registry.npmjs.org/axios/-/axios-0.19.2.tgz",
  "_shasum": "3ea36c5d8818d0d5f8a8a97a6d36b86cdc00cb27",
  "_spec": "axios@^0.19.0",
  "_where": "C:\\btro_app\\android\\node_modules\\tronweb",
  "author": {
    "name": "Matt Zabriskie"
  },
  "browser": {
    "./lib/adapters/http.js": "./lib/adapters/xhr.js"
  },
  "bugs": {
    "url": "https://github.com/axios/axios/issues"
  },
  "bundleDependencies": false,
  "bundlesize": [
    {
      "path": "./dist/axios.min.js",
      "threshold": "5kB"
    }
  ],
  "dependencies": {
    "follow-redirects": "1.5.10"
  },
  "deprecated": false,
  "description": "Promise based HTTP client for the browser and node.js",
  "devDependencies": {
    "bundlesize": "^0.17.0",
    "coveralls": "^3.0.0",
    "es6-promise": "^4.2.4",
    "grunt": "^1.0.2",
    "grunt-banner": "^0.6.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-clean": "^1.1.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-eslint": "^20.1.0",
    "grunt-karma": "^2.0.0",
    "grunt-mocha-test": "^0.13.3",
    "grunt-ts": "^6.0.0-beta.19",
    "grunt-webpack": "^1.0.18",
    "istanbul-instrumenter-loader": "^1.0.0",
    "jasmine-core": "^2.4.1",
    "karma": "^1.3.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-coverage": "^1.1.1",
    "karma-firefox-launcher": "^1.1.0",
    "karma-jasmine": "^1.1.1",
    "karma-jasmine-ajax": "^0.1.13",
    "karma-opera-launcher": "^1.0.0",
    "karma-safari-launcher": "^1.0.0",
    "karma-sauce-launcher": "^1.2.0",
    "karma-sinon": "^1.0.5",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.7.0",
    "load-grunt-tasks": "^3.5.2",
    "minimist": "^1.2.0",
    "mocha": "^5.2.0",
    "sinon": "^4.5.0",
    "typescript": "^2.8.1",
    "url-search-params": "^0.10.0",
    "webpack": "^1.13.1",
    "webpack-dev-server": "^1.14.1"
  },
  "homepage": "https://github.com/axios/axios",
  "keywords": [
    "xhr",
    "http",
    "ajax",
    "promise",
    "node"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "axios",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/axios/axios.git"
  },
  "scripts": {
    "build": "NODE_ENV=production grunt build",
    "coveralls": "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "examples": "node ./examples/server.js",
    "fix": "eslint --fix lib/**/*.js",
    "postversion": "git push && git push --tags",
    "preversion": "npm test",
    "start": "node ./sandbox/server.js",
    "test": "grunt test && bundlesize",
    "version": "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json"
  },
  "typings": "./index.d.ts",
  "version": "0.19.2"
}
;
},250,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var utils = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = function mergeConfig(config1, config2) {
    config2 = config2 || {};
    var config = {};
    var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
    var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
    var defaultToConfig2Keys = ['baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath'];
    utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
      if (typeof config2[prop] !== 'undefined') {
        config[prop] = config2[prop];
      }
    });
    utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
      if (utils.isObject(config2[prop])) {
        config[prop] = utils.deepMerge(config1[prop], config2[prop]);
      } else if (typeof config2[prop] !== 'undefined') {
        config[prop] = config2[prop];
      } else if (utils.isObject(config1[prop])) {
        config[prop] = utils.deepMerge(config1[prop]);
      } else if (typeof config1[prop] !== 'undefined') {
        config[prop] = config1[prop];
      }
    });
    utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
      if (typeof config2[prop] !== 'undefined') {
        config[prop] = config2[prop];
      } else if (typeof config1[prop] !== 'undefined') {
        config[prop] = config1[prop];
      }
    });
    var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys);
    var otherKeys = Object.keys(config2).filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });
    utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
      if (typeof config2[prop] !== 'undefined') {
        config[prop] = config2[prop];
      } else if (typeof config1[prop] !== 'undefined') {
        config[prop] = config1[prop];
      }
    });
    return config;
  };
},251,[218]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function Cancel(message) {
    this.message = message;
  }

  Cancel.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
  };

  Cancel.prototype.__CANCEL__ = true;
  module.exports = Cancel;
},252,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var Cancel = _$$_REQUIRE(_dependencyMap[0]);

  function CancelToken(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    var token = this;
    executor(function cancel(message) {
      if (token.reason) {
        return;
      }

      token.reason = new Cancel(message);
      resolvePromise(token.reason);
    });
  }

  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };

  CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token: token,
      cancel: cancel
    };
  };

  module.exports = CancelToken;
},253,[252]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  };
},254,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _toDate = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _toFloat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _toInt = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _toBoolean = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _equals = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  var _contains = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5]));

  var _matches = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6]));

  var _isEmail = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7]));

  var _isURL = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8]));

  var _isMACAddress = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9]));

  var _isIP = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10]));

  var _isIPRange = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11]));

  var _isFQDN = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12]));

  var _isBoolean = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13]));

  var _isAlpha = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[14]));

  var _isAlphanumeric = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[15]));

  var _isNumeric = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16]));

  var _isPort = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17]));

  var _isLowercase = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18]));

  var _isUppercase = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19]));

  var _isAscii = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[20]));

  var _isFullWidth = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[21]));

  var _isHalfWidth = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[22]));

  var _isVariableWidth = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[23]));

  var _isMultibyte = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[24]));

  var _isSurrogatePair = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[25]));

  var _isInt = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[26]));

  var _isFloat = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[27]));

  var _isDecimal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[28]));

  var _isHexadecimal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[29]));

  var _isDivisibleBy = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[30]));

  var _isHexColor = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[31]));

  var _isISRC = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[32]));

  var _isMD = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[33]));

  var _isHash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[34]));

  var _isJWT = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[35]));

  var _isJSON = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[36]));

  var _isEmpty = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[37]));

  var _isLength = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[38]));

  var _isByteLength = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[39]));

  var _isUUID = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[40]));

  var _isMongoId = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[41]));

  var _isAfter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[42]));

  var _isBefore = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[43]));

  var _isIn = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[44]));

  var _isCreditCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[45]));

  var _isIdentityCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[46]));

  var _isISIN = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[47]));

  var _isISBN = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[48]));

  var _isISSN = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[49]));

  var _isMobilePhone = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[50]));

  var _isCurrency = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[51]));

  var _isISO = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[52]));

  var _isRFC = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[53]));

  var _isISO31661Alpha = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[54]));

  var _isISO31661Alpha2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[55]));

  var _isBase = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[56]));

  var _isDataURI = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[57]));

  var _isMagnetURI = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[58]));

  var _isMimeType = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[59]));

  var _isLatLong = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[60]));

  var _isPostalCode = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[61]));

  var _ltrim = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[62]));

  var _rtrim = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[63]));

  var _trim = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[64]));

  var _escape = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[65]));

  var _unescape = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[66]));

  var _stripLow = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[67]));

  var _whitelist = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[68]));

  var _blacklist = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[69]));

  var _isWhitelisted = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[70]));

  var _normalizeEmail = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[71]));

  var _toString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[72]));

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var version = '10.11.0';
  var validator = {
    version: version,
    toDate: _toDate.default,
    toFloat: _toFloat.default,
    toInt: _toInt.default,
    toBoolean: _toBoolean.default,
    equals: _equals.default,
    contains: _contains.default,
    matches: _matches.default,
    isEmail: _isEmail.default,
    isURL: _isURL.default,
    isMACAddress: _isMACAddress.default,
    isIP: _isIP.default,
    isIPRange: _isIPRange.default,
    isFQDN: _isFQDN.default,
    isBoolean: _isBoolean.default,
    isAlpha: _isAlpha.default,
    isAlphaLocales: _isAlpha.locales,
    isAlphanumeric: _isAlphanumeric.default,
    isAlphanumericLocales: _isAlphanumeric.locales,
    isNumeric: _isNumeric.default,
    isPort: _isPort.default,
    isLowercase: _isLowercase.default,
    isUppercase: _isUppercase.default,
    isAscii: _isAscii.default,
    isFullWidth: _isFullWidth.default,
    isHalfWidth: _isHalfWidth.default,
    isVariableWidth: _isVariableWidth.default,
    isMultibyte: _isMultibyte.default,
    isSurrogatePair: _isSurrogatePair.default,
    isInt: _isInt.default,
    isFloat: _isFloat.default,
    isFloatLocales: _isFloat.locales,
    isDecimal: _isDecimal.default,
    isHexadecimal: _isHexadecimal.default,
    isDivisibleBy: _isDivisibleBy.default,
    isHexColor: _isHexColor.default,
    isISRC: _isISRC.default,
    isMD5: _isMD.default,
    isHash: _isHash.default,
    isJWT: _isJWT.default,
    isJSON: _isJSON.default,
    isEmpty: _isEmpty.default,
    isLength: _isLength.default,
    isByteLength: _isByteLength.default,
    isUUID: _isUUID.default,
    isMongoId: _isMongoId.default,
    isAfter: _isAfter.default,
    isBefore: _isBefore.default,
    isIn: _isIn.default,
    isCreditCard: _isCreditCard.default,
    isIdentityCard: _isIdentityCard.default,
    isISIN: _isISIN.default,
    isISBN: _isISBN.default,
    isISSN: _isISSN.default,
    isMobilePhone: _isMobilePhone.default,
    isMobilePhoneLocales: _isMobilePhone.locales,
    isPostalCode: _isPostalCode.default,
    isPostalCodeLocales: _isPostalCode.locales,
    isCurrency: _isCurrency.default,
    isISO8601: _isISO.default,
    isRFC3339: _isRFC.default,
    isISO31661Alpha2: _isISO31661Alpha.default,
    isISO31661Alpha3: _isISO31661Alpha2.default,
    isBase64: _isBase.default,
    isDataURI: _isDataURI.default,
    isMagnetURI: _isMagnetURI.default,
    isMimeType: _isMimeType.default,
    isLatLong: _isLatLong.default,
    ltrim: _ltrim.default,
    rtrim: _rtrim.default,
    trim: _trim.default,
    escape: _escape.default,
    unescape: _unescape.default,
    stripLow: _stripLow.default,
    whitelist: _whitelist.default,
    blacklist: _blacklist.default,
    isWhitelisted: _isWhitelisted.default,
    normalizeEmail: _normalizeEmail.default,
    toString: _toString.default
  };
  var _default = validator;
  exports.default = _default;
  module.exports = exports.default;
  module.exports.default = exports.default;
},255,[256,258,259,260,261,262,264,265,270,271,269,272,268,273,274,276,277,278,280,281,282,283,284,285,286,287,279,288,289,291,292,293,294,295,296,297,298,299,300,267,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,330,329,331,332,263]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = toDate;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function toDate(date) {
    (0, _assertString.default)(date);
    date = Date.parse(date);
    return !isNaN(date) ? new Date(date) : null;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},256,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = assertString;

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function assertString(input) {
    var isString = typeof input === 'string' || input instanceof String;

    if (!isString) {
      var invalidType;

      if (input === null) {
        invalidType = 'null';
      } else {
        invalidType = _typeof(input);

        if (invalidType === 'object' && input.constructor && input.constructor.hasOwnProperty('name')) {
          invalidType = input.constructor.name;
        } else {
          invalidType = "a ".concat(invalidType);
        }
      }

      throw new TypeError("Expected string but received ".concat(invalidType, "."));
    }
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},257,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = toFloat;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function toFloat(str) {
    (0, _assertString.default)(str);
    return parseFloat(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},258,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = toInt;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function toInt(str, radix) {
    (0, _assertString.default)(str);
    return parseInt(str, radix || 10);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},259,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = toBoolean;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function toBoolean(str, strict) {
    (0, _assertString.default)(str);

    if (strict) {
      return str === '1' || str === 'true';
    }

    return str !== '0' && str !== 'false' && str !== '';
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},260,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = equals;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function equals(str, comparison) {
    (0, _assertString.default)(str);
    return str === comparison;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},261,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = contains;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _toString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function contains(str, elem) {
    (0, _assertString.default)(str);
    return str.indexOf((0, _toString.default)(elem)) >= 0;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},262,[257,263]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = toString;

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function toString(input) {
    if (_typeof(input) === 'object' && input !== null) {
      if (typeof input.toString === 'function') {
        input = input.toString();
      } else {
        input = '[object Object]';
      }
    } else if (input === null || typeof input === 'undefined' || isNaN(input) && !input.length) {
      input = '';
    }

    return String(input);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},263,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = matches;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function matches(str, pattern, modifiers) {
    (0, _assertString.default)(str);

    if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {
      pattern = new RegExp(pattern, modifiers);
    }

    return pattern.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},264,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isEmail;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _merge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _isByteLength = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _isFQDN = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  var _isIP = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var default_email_options = {
    allow_display_name: false,
    require_display_name: false,
    allow_utf8_local_part: true,
    require_tld: true
  };
  var displayName = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\,\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\s]*<(.+)>$/i;
  var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
  var gmailUserPart = /^[a-z\d]+$/;
  var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
  var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
  var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;

  function isEmail(str, options) {
    (0, _assertString.default)(str);
    options = (0, _merge.default)(options, default_email_options);

    if (options.require_display_name || options.allow_display_name) {
      var display_email = str.match(displayName);

      if (display_email) {
        str = display_email[1];
      } else if (options.require_display_name) {
        return false;
      }
    }

    var parts = str.split('@');
    var domain = parts.pop();
    var user = parts.join('@');
    var lower_domain = domain.toLowerCase();

    if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
      user = user.toLowerCase();
      var username = user.split('+')[0];

      if (!(0, _isByteLength.default)(username.replace('.', ''), {
        min: 6,
        max: 30
      })) {
        return false;
      }

      var _user_parts = username.split('.');

      for (var i = 0; i < _user_parts.length; i++) {
        if (!gmailUserPart.test(_user_parts[i])) {
          return false;
        }
      }
    }

    if (!(0, _isByteLength.default)(user, {
      max: 64
    }) || !(0, _isByteLength.default)(domain, {
      max: 254
    })) {
      return false;
    }

    if (!(0, _isFQDN.default)(domain, {
      require_tld: options.require_tld
    })) {
      if (!options.allow_ip_domain) {
        return false;
      }

      if (!(0, _isIP.default)(domain)) {
        if (!domain.startsWith('[') || !domain.endsWith(']')) {
          return false;
        }

        var noBracketdomain = domain.substr(1, domain.length - 2);

        if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {
          return false;
        }
      }
    }

    if (user[0] === '"') {
      user = user.slice(1, user.length - 1);
      return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
    }

    var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
    var user_parts = user.split('.');

    for (var _i = 0; _i < user_parts.length; _i++) {
      if (!pattern.test(user_parts[_i])) {
        return false;
      }
    }

    return true;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},265,[257,266,267,268,269]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = merge;

  function merge() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaults = arguments.length > 1 ? arguments[1] : undefined;

    for (var key in defaults) {
      if (typeof obj[key] === 'undefined') {
        obj[key] = defaults[key];
      }
    }

    return obj;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},266,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isByteLength;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function isByteLength(str, options) {
    (0, _assertString.default)(str);
    var min;
    var max;

    if (_typeof(options) === 'object') {
      min = options.min || 0;
      max = options.max;
    } else {
      min = arguments[1];
      max = arguments[2];
    }

    var len = encodeURI(str).split(/%..|./).length - 1;
    return len >= min && (typeof max === 'undefined' || len <= max);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},267,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isFQDN;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _merge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var default_fqdn_options = {
    require_tld: true,
    allow_underscores: false,
    allow_trailing_dot: false
  };

  function isFQDN(str, options) {
    (0, _assertString.default)(str);
    options = (0, _merge.default)(options, default_fqdn_options);

    if (options.allow_trailing_dot && str[str.length - 1] === '.') {
      str = str.substring(0, str.length - 1);
    }

    var parts = str.split('.');

    for (var i = 0; i < parts.length; i++) {
      if (parts[i].length > 63) {
        return false;
      }
    }

    if (options.require_tld) {
      var tld = parts.pop();

      if (!parts.length || !/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
        return false;
      }

      if (/[\s\u2002-\u200B\u202F\u205F\u3000\uFEFF\uDB40\uDC20]/.test(tld)) {
        return false;
      }
    }

    for (var part, _i = 0; _i < parts.length; _i++) {
      part = parts[_i];

      if (options.allow_underscores) {
        part = part.replace(/_/g, '');
      }

      if (!/^[a-z\u00a1-\uffff0-9-]+$/i.test(part)) {
        return false;
      }

      if (/[\uff01-\uff5e]/.test(part)) {
        return false;
      }

      if (part[0] === '-' || part[part.length - 1] === '-') {
        return false;
      }
    }

    return true;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},268,[257,266]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isIP;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var ipv4Maybe = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
  var ipv6Block = /^[0-9A-F]{1,4}$/i;

  function isIP(str) {
    var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    (0, _assertString.default)(str);
    version = String(version);

    if (!version) {
      return isIP(str, 4) || isIP(str, 6);
    } else if (version === '4') {
      if (!ipv4Maybe.test(str)) {
        return false;
      }

      var parts = str.split('.').sort(function (a, b) {
        return a - b;
      });
      return parts[3] <= 255;
    } else if (version === '6') {
      var blocks = str.split(':');
      var foundOmissionBlock = false;
      var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);
      var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;

      if (blocks.length > expectedNumberOfBlocks) {
        return false;
      }

      if (str === '::') {
        return true;
      } else if (str.substr(0, 2) === '::') {
        blocks.shift();
        blocks.shift();
        foundOmissionBlock = true;
      } else if (str.substr(str.length - 2) === '::') {
        blocks.pop();
        blocks.pop();
        foundOmissionBlock = true;
      }

      for (var i = 0; i < blocks.length; ++i) {
        if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {
          if (foundOmissionBlock) {
            return false;
          }

          foundOmissionBlock = true;
        } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {} else if (!ipv6Block.test(blocks[i])) {
          return false;
        }
      }

      if (foundOmissionBlock) {
        return blocks.length >= 1;
      }

      return blocks.length === expectedNumberOfBlocks;
    }

    return false;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},269,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isURL;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _isFQDN = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _isIP = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _merge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var default_url_options = {
    protocols: ['http', 'https', 'ftp'],
    require_tld: true,
    require_protocol: false,
    require_host: true,
    require_valid_protocol: true,
    allow_underscores: false,
    allow_trailing_dot: false,
    allow_protocol_relative_urls: false
  };
  var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

  function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
  }

  function checkHost(host, matches) {
    for (var i = 0; i < matches.length; i++) {
      var match = matches[i];

      if (host === match || isRegExp(match) && match.test(host)) {
        return true;
      }
    }

    return false;
  }

  function isURL(url, options) {
    (0, _assertString.default)(url);

    if (!url || url.length >= 2083 || /[\s<>]/.test(url)) {
      return false;
    }

    if (url.indexOf('mailto:') === 0) {
      return false;
    }

    options = (0, _merge.default)(options, default_url_options);
    var protocol, auth, host, hostname, port, port_str, split, ipv6;
    split = url.split('#');
    url = split.shift();
    split = url.split('?');
    url = split.shift();
    split = url.split('://');

    if (split.length > 1) {
      protocol = split.shift().toLowerCase();

      if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
        return false;
      }
    } else if (options.require_protocol) {
      return false;
    } else if (url.substr(0, 2) === '//') {
      if (!options.allow_protocol_relative_urls) {
        return false;
      }

      split[0] = url.substr(2);
    }

    url = split.join('://');

    if (url === '') {
      return false;
    }

    split = url.split('/');
    url = split.shift();

    if (url === '' && !options.require_host) {
      return true;
    }

    split = url.split('@');

    if (split.length > 1) {
      if (options.disallow_auth) {
        return false;
      }

      auth = split.shift();

      if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
        return false;
      }
    }

    hostname = split.join('@');
    port_str = null;
    ipv6 = null;
    var ipv6_match = hostname.match(wrapped_ipv6);

    if (ipv6_match) {
      host = '';
      ipv6 = ipv6_match[1];
      port_str = ipv6_match[2] || null;
    } else {
      split = hostname.split(':');
      host = split.shift();

      if (split.length) {
        port_str = split.join(':');
      }
    }

    if (port_str !== null) {
      port = parseInt(port_str, 10);

      if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
        return false;
      }
    }

    if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
      return false;
    }

    host = host || ipv6;

    if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {
      return false;
    }

    if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
      return false;
    }

    return true;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},270,[257,268,269,266]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isMACAddress;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var macAddress = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;
  var macAddressNoColons = /^([0-9a-fA-F]){12}$/;

  function isMACAddress(str, options) {
    (0, _assertString.default)(str);

    if (options && options.no_colons) {
      return macAddressNoColons.test(str);
    }

    return macAddress.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},271,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isIPRange;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _isIP = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var subnetMaybe = /^\d{1,2}$/;

  function isIPRange(str) {
    (0, _assertString.default)(str);
    var parts = str.split('/');

    if (parts.length !== 2) {
      return false;
    }

    if (!subnetMaybe.test(parts[1])) {
      return false;
    }

    if (parts[1].length > 1 && parts[1].startsWith('0')) {
      return false;
    }

    return (0, _isIP.default)(parts[0], 4) && parts[1] <= 32 && parts[1] >= 0;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},272,[257,269]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isBoolean;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isBoolean(str) {
    (0, _assertString.default)(str);
    return ['true', 'false', '1', '0'].indexOf(str) >= 0;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},273,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isAlpha;
  exports.locales = undefined;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _alpha = _$$_REQUIRE(_dependencyMap[1]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isAlpha(str) {
    var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
    (0, _assertString.default)(str);

    if (locale in _alpha.alpha) {
      return _alpha.alpha[locale].test(str);
    }

    throw new Error("Invalid locale '".concat(locale, "'"));
  }

  var locales = Object.keys(_alpha.alpha);
  exports.locales = locales;
},274,[257,275]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.commaDecimal = exports.dotDecimal = exports.arabicLocales = exports.englishLocales = exports.decimal = exports.alphanumeric = exports.alpha = undefined;
  var alpha = {
    'en-US': /^[A-Z]+$/i,
    'bg-BG': /^[А-Я]+$/i,
    'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
    'da-DK': /^[A-ZÆØÅ]+$/i,
    'de-DE': /^[A-ZÄÖÜß]+$/i,
    'el-GR': /^[Α-ω]+$/i,
    'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,
    'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
    'it-IT': /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,
    'nb-NO': /^[A-ZÆØÅ]+$/i,
    'nl-NL': /^[A-ZÁÉËÏÓÖÜÚ]+$/i,
    'nn-NO': /^[A-ZÆØÅ]+$/i,
    'hu-HU': /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
    'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
    'pt-PT': /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,
    'ru-RU': /^[А-ЯЁ]+$/i,
    'sl-SI': /^[A-ZČĆĐŠŽ]+$/i,
    'sk-SK': /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
    'sr-RS@latin': /^[A-ZČĆŽŠĐ]+$/i,
    'sr-RS': /^[А-ЯЂЈЉЊЋЏ]+$/i,
    'sv-SE': /^[A-ZÅÄÖ]+$/i,
    'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,
    'uk-UA': /^[А-ЩЬЮЯЄIЇҐі]+$/i,
    'ku-IQ': /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
    ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/
  };
  exports.alpha = alpha;
  var alphanumeric = {
    'en-US': /^[0-9A-Z]+$/i,
    'bg-BG': /^[0-9А-Я]+$/i,
    'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
    'da-DK': /^[0-9A-ZÆØÅ]+$/i,
    'de-DE': /^[0-9A-ZÄÖÜß]+$/i,
    'el-GR': /^[0-9Α-ω]+$/i,
    'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,
    'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
    'it-IT': /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,
    'hu-HU': /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
    'nb-NO': /^[0-9A-ZÆØÅ]+$/i,
    'nl-NL': /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,
    'nn-NO': /^[0-9A-ZÆØÅ]+$/i,
    'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
    'pt-PT': /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,
    'ru-RU': /^[0-9А-ЯЁ]+$/i,
    'sl-SI': /^[0-9A-ZČĆĐŠŽ]+$/i,
    'sk-SK': /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
    'sr-RS@latin': /^[0-9A-ZČĆŽŠĐ]+$/i,
    'sr-RS': /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,
    'sv-SE': /^[0-9A-ZÅÄÖ]+$/i,
    'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,
    'uk-UA': /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,
    'ku-IQ': /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
    ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/
  };
  exports.alphanumeric = alphanumeric;
  var decimal = {
    'en-US': '.',
    ar: '٫'
  };
  exports.decimal = decimal;
  var englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];
  exports.englishLocales = englishLocales;

  for (var locale, i = 0; i < englishLocales.length; i++) {
    locale = "en-".concat(englishLocales[i]);
    alpha[locale] = alpha['en-US'];
    alphanumeric[locale] = alphanumeric['en-US'];
    decimal[locale] = decimal['en-US'];
  }

  var arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];
  exports.arabicLocales = arabicLocales;

  for (var _locale, _i = 0; _i < arabicLocales.length; _i++) {
    _locale = "ar-".concat(arabicLocales[_i]);
    alpha[_locale] = alpha.ar;
    alphanumeric[_locale] = alphanumeric.ar;
    decimal[_locale] = decimal.ar;
  }

  var dotDecimal = [];
  exports.dotDecimal = dotDecimal;
  var commaDecimal = ['bg-BG', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'es-ES', 'fr-FR', 'it-IT', 'ku-IQ', 'hu-HU', 'nb-NO', 'nn-NO', 'nl-NL', 'pl-PL', 'pt-PT', 'ru-RU', 'sl-SI', 'sr-RS@latin', 'sr-RS', 'sv-SE', 'tr-TR', 'uk-UA'];
  exports.commaDecimal = commaDecimal;

  for (var _i2 = 0; _i2 < dotDecimal.length; _i2++) {
    decimal[dotDecimal[_i2]] = decimal['en-US'];
  }

  for (var _i3 = 0; _i3 < commaDecimal.length; _i3++) {
    decimal[commaDecimal[_i3]] = ',';
  }

  alpha['pt-BR'] = alpha['pt-PT'];
  alphanumeric['pt-BR'] = alphanumeric['pt-PT'];
  decimal['pt-BR'] = decimal['pt-PT'];
  alpha['pl-Pl'] = alpha['pl-PL'];
  alphanumeric['pl-Pl'] = alphanumeric['pl-PL'];
  decimal['pl-Pl'] = decimal['pl-PL'];
},275,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isAlphanumeric;
  exports.locales = undefined;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _alpha = _$$_REQUIRE(_dependencyMap[1]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isAlphanumeric(str) {
    var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
    (0, _assertString.default)(str);

    if (locale in _alpha.alphanumeric) {
      return _alpha.alphanumeric[locale].test(str);
    }

    throw new Error("Invalid locale '".concat(locale, "'"));
  }

  var locales = Object.keys(_alpha.alphanumeric);
  exports.locales = locales;
},276,[257,275]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isNumeric;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var numeric = /^[+-]?([0-9]*[.])?[0-9]+$/;
  var numericNoSymbols = /^[0-9]+$/;

  function isNumeric(str, options) {
    (0, _assertString.default)(str);

    if (options && options.no_symbols) {
      return numericNoSymbols.test(str);
    }

    return numeric.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},277,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isPort;

  var _isInt = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isPort(str) {
    return (0, _isInt.default)(str, {
      min: 0,
      max: 65535
    });
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},278,[279]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isInt;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
  var intLeadingZeroes = /^[-+]?[0-9]+$/;

  function isInt(str, options) {
    (0, _assertString.default)(str);
    options = options || {};
    var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes;
    var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;
    var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;
    var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;
    var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;
    return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},279,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isLowercase;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isLowercase(str) {
    (0, _assertString.default)(str);
    return str === str.toLowerCase();
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},280,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isUppercase;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isUppercase(str) {
    (0, _assertString.default)(str);
    return str === str.toUpperCase();
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},281,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isAscii;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var ascii = /^[\x00-\x7F]+$/;

  function isAscii(str) {
    (0, _assertString.default)(str);
    return ascii.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},282,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isFullWidth;
  exports.fullWidth = undefined;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
  exports.fullWidth = fullWidth;

  function isFullWidth(str) {
    (0, _assertString.default)(str);
    return fullWidth.test(str);
  }
},283,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isHalfWidth;
  exports.halfWidth = undefined;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
  exports.halfWidth = halfWidth;

  function isHalfWidth(str) {
    (0, _assertString.default)(str);
    return halfWidth.test(str);
  }
},284,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isVariableWidth;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _isFullWidth = _$$_REQUIRE(_dependencyMap[1]);

  var _isHalfWidth = _$$_REQUIRE(_dependencyMap[2]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isVariableWidth(str) {
    (0, _assertString.default)(str);
    return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},285,[257,283,284]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isMultibyte;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var multibyte = /[^\x00-\x7F]/;

  function isMultibyte(str) {
    (0, _assertString.default)(str);
    return multibyte.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},286,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isSurrogatePair;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;

  function isSurrogatePair(str) {
    (0, _assertString.default)(str);
    return surrogatePair.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},287,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isFloat;
  exports.locales = undefined;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _alpha = _$$_REQUIRE(_dependencyMap[1]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isFloat(str, options) {
    (0, _assertString.default)(str);
    options = options || {};
    var float = new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\".concat(options.locale ? _alpha.decimal[options.locale] : '.', "[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$"));

    if (str === '' || str === '.' || str === '-' || str === '+') {
      return false;
    }

    var value = parseFloat(str.replace(',', '.'));
    return float.test(str) && (!options.hasOwnProperty('min') || value >= options.min) && (!options.hasOwnProperty('max') || value <= options.max) && (!options.hasOwnProperty('lt') || value < options.lt) && (!options.hasOwnProperty('gt') || value > options.gt);
  }

  var locales = Object.keys(_alpha.decimal);
  exports.locales = locales;
},288,[257,275]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isDecimal;

  var _merge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  var _includes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2]));

  var _alpha = _$$_REQUIRE(_dependencyMap[3]);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function decimalRegExp(options) {
    var regExp = new RegExp("^[-+]?([0-9]+)?(\\".concat(_alpha.decimal[options.locale], "[0-9]{").concat(options.decimal_digits, "})").concat(options.force_decimal ? '' : '?', "$"));
    return regExp;
  }

  var default_decimal_options = {
    force_decimal: false,
    decimal_digits: '1,',
    locale: 'en-US'
  };
  var blacklist = ['', '-', '+'];

  function isDecimal(str, options) {
    (0, _assertString.default)(str);
    options = (0, _merge.default)(options, default_decimal_options);

    if (options.locale in _alpha.decimal) {
      return !(0, _includes.default)(blacklist, str.replace(/ /g, '')) && decimalRegExp(options).test(str);
    }

    throw new Error("Invalid locale '".concat(options.locale, "'"));
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},289,[266,257,290,275]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var includes = function includes(arr, val) {
    return arr.some(function (arrVal) {
      return val === arrVal;
    });
  };

  var _default = includes;
  exports.default = _default;
  module.exports = exports.default;
  module.exports.default = exports.default;
},290,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isHexadecimal;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var hexadecimal = /^[0-9A-F]+$/i;

  function isHexadecimal(str) {
    (0, _assertString.default)(str);
    return hexadecimal.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},291,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isDivisibleBy;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _toFloat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isDivisibleBy(str, num) {
    (0, _assertString.default)(str);
    return (0, _toFloat.default)(str) % parseInt(num, 10) === 0;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},292,[257,258]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isHexColor;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i;

  function isHexColor(str) {
    (0, _assertString.default)(str);
    return hexcolor.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},293,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isISRC;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var isrc = /^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;

  function isISRC(str) {
    (0, _assertString.default)(str);
    return isrc.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},294,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isMD5;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var md5 = /^[a-f0-9]{32}$/;

  function isMD5(str) {
    (0, _assertString.default)(str);
    return md5.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},295,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isHash;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var lengths = {
    md5: 32,
    md4: 32,
    sha1: 40,
    sha256: 64,
    sha384: 96,
    sha512: 128,
    ripemd128: 32,
    ripemd160: 40,
    tiger128: 32,
    tiger160: 40,
    tiger192: 48,
    crc32: 8,
    crc32b: 8
  };

  function isHash(str, algorithm) {
    (0, _assertString.default)(str);
    var hash = new RegExp("^[a-f0-9]{".concat(lengths[algorithm], "}$"));
    return hash.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},296,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isJWT;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var jwt = /^([A-Za-z0-9\-_~+\/]+[=]{0,2})\.([A-Za-z0-9\-_~+\/]+[=]{0,2})(?:\.([A-Za-z0-9\-_~+\/]+[=]{0,2}))?$/;

  function isJWT(str) {
    (0, _assertString.default)(str);
    return jwt.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},297,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isJSON;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function isJSON(str) {
    (0, _assertString.default)(str);

    try {
      var obj = JSON.parse(str);
      return !!obj && _typeof(obj) === 'object';
    } catch (e) {}

    return false;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},298,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isEmpty;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _merge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var default_is_empty_options = {
    ignore_whitespace: false
  };

  function isEmpty(str, options) {
    (0, _assertString.default)(str);
    options = (0, _merge.default)(options, default_is_empty_options);
    return (options.ignore_whitespace ? str.trim().length : str.length) === 0;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},299,[257,266]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isLength;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function isLength(str, options) {
    (0, _assertString.default)(str);
    var min;
    var max;

    if (_typeof(options) === 'object') {
      min = options.min || 0;
      max = options.max;
    } else {
      min = arguments[1];
      max = arguments[2];
    }

    var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
    var len = str.length - surrogatePairs.length;
    return len >= min && (typeof max === 'undefined' || len <= max);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},300,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isUUID;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var uuid = {
    3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
    4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
    5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
  };

  function isUUID(str) {
    var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
    (0, _assertString.default)(str);
    var pattern = uuid[version];
    return pattern && pattern.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},301,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isMongoId;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _isHexadecimal = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isMongoId(str) {
    (0, _assertString.default)(str);
    return (0, _isHexadecimal.default)(str) && str.length === 24;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},302,[257,291]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isAfter;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _toDate = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isAfter(str) {
    var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());
    (0, _assertString.default)(str);
    var comparison = (0, _toDate.default)(date);
    var original = (0, _toDate.default)(str);
    return !!(original && comparison && original > comparison);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},303,[257,256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isBefore;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _toDate = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isBefore(str) {
    var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());
    (0, _assertString.default)(str);
    var comparison = (0, _toDate.default)(date);
    var original = (0, _toDate.default)(str);
    return !!(original && comparison && original < comparison);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},304,[257,256]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isIn;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _toString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function isIn(str, options) {
    (0, _assertString.default)(str);
    var i;

    if (Object.prototype.toString.call(options) === '[object Array]') {
      var array = [];

      for (i in options) {
        if ({}.hasOwnProperty.call(options, i)) {
          array[i] = (0, _toString.default)(options[i]);
        }
      }

      return array.indexOf(str) >= 0;
    } else if (_typeof(options) === 'object') {
      return options.hasOwnProperty(str);
    } else if (options && typeof options.indexOf === 'function') {
      return options.indexOf(str) >= 0;
    }

    return false;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},305,[257,263]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isCreditCard;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|6[27][0-9]{14})$/;

  function isCreditCard(str) {
    (0, _assertString.default)(str);
    var sanitized = str.replace(/[- ]+/g, '');

    if (!creditCard.test(sanitized)) {
      return false;
    }

    var sum = 0;
    var digit;
    var tmpNum;
    var shouldDouble;

    for (var i = sanitized.length - 1; i >= 0; i--) {
      digit = sanitized.substring(i, i + 1);
      tmpNum = parseInt(digit, 10);

      if (shouldDouble) {
        tmpNum *= 2;

        if (tmpNum >= 10) {
          sum += tmpNum % 10 + 1;
        } else {
          sum += tmpNum;
        }
      } else {
        sum += tmpNum;
      }

      shouldDouble = !shouldDouble;
    }

    return !!(sum % 10 === 0 ? sanitized : false);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},306,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isIdentityCard;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var validators = {
    ES: function ES(str) {
      (0, _assertString.default)(str);
      var DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
      var charsValue = {
        X: 0,
        Y: 1,
        Z: 2
      };
      var controlDigits = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];
      var sanitized = str.trim().toUpperCase();

      if (!DNI.test(sanitized)) {
        return false;
      }

      var number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, function (char) {
        return charsValue[char];
      });
      return sanitized.endsWith(controlDigits[number % 23]);
    }
  };

  function isIdentityCard(str) {
    var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';
    (0, _assertString.default)(str);

    if (locale in validators) {
      return validators[locale](str);
    } else if (locale === 'any') {
      for (var key in validators) {
        if (validators.hasOwnProperty(key)) {
          var validator = validators[key];

          if (validator(str)) {
            return true;
          }
        }
      }

      return false;
    }

    throw new Error("Invalid locale '".concat(locale, "'"));
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},307,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isISIN;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;

  function isISIN(str) {
    (0, _assertString.default)(str);

    if (!isin.test(str)) {
      return false;
    }

    var checksumStr = str.replace(/[A-Z]/g, function (character) {
      return parseInt(character, 36);
    });
    var sum = 0;
    var digit;
    var tmpNum;
    var shouldDouble = true;

    for (var i = checksumStr.length - 2; i >= 0; i--) {
      digit = checksumStr.substring(i, i + 1);
      tmpNum = parseInt(digit, 10);

      if (shouldDouble) {
        tmpNum *= 2;

        if (tmpNum >= 10) {
          sum += tmpNum + 1;
        } else {
          sum += tmpNum;
        }
      } else {
        sum += tmpNum;
      }

      shouldDouble = !shouldDouble;
    }

    return parseInt(str.substr(str.length - 1), 10) === (10000 - sum) % 10;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},308,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isISBN;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;
  var isbn13Maybe = /^(?:[0-9]{13})$/;
  var factor = [1, 3];

  function isISBN(str) {
    var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    (0, _assertString.default)(str);
    version = String(version);

    if (!version) {
      return isISBN(str, 10) || isISBN(str, 13);
    }

    var sanitized = str.replace(/[\s-]+/g, '');
    var checksum = 0;
    var i;

    if (version === '10') {
      if (!isbn10Maybe.test(sanitized)) {
        return false;
      }

      for (i = 0; i < 9; i++) {
        checksum += (i + 1) * sanitized.charAt(i);
      }

      if (sanitized.charAt(9) === 'X') {
        checksum += 100;
      } else {
        checksum += 10 * sanitized.charAt(9);
      }

      if (checksum % 11 === 0) {
        return !!sanitized;
      }
    } else if (version === '13') {
      if (!isbn13Maybe.test(sanitized)) {
        return false;
      }

      for (i = 0; i < 12; i++) {
        checksum += factor[i % 2] * sanitized.charAt(i);
      }

      if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {
        return !!sanitized;
      }
    }

    return false;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},309,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isISSN;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var issn = '^\\d{4}-?\\d{3}[\\dX]$';

  function isISSN(str) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _assertString.default)(str);
    var testIssn = issn;
    testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;
    testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');

    if (!testIssn.test(str)) {
      return false;
    }

    var digits = str.replace('-', '').toUpperCase();
    var checksum = 0;

    for (var i = 0; i < digits.length; i++) {
      var digit = digits[i];
      checksum += (digit === 'X' ? 10 : +digit) * (8 - i);
    }

    return checksum % 11 === 0;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},310,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isMobilePhone;
  exports.locales = undefined;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var phones = {
    'ar-AE': /^((\+?971)|0)?5[024568]\d{7}$/,
    'ar-DZ': /^(\+?213|0)(5|6|7)\d{8}$/,
    'ar-EG': /^((\+?20)|0)?1[012]\d{8}$/,
    'ar-IQ': /^(\+?964|0)?7[0-9]\d{8}$/,
    'ar-JO': /^(\+?962|0)?7[789]\d{7}$/,
    'ar-KW': /^(\+?965)[569]\d{7}$/,
    'ar-SA': /^(!?(\+?966)|0)?5\d{8}$/,
    'ar-SY': /^(!?(\+?963)|0)?9\d{8}$/,
    'ar-TN': /^(\+?216)?[2459]\d{7}$/,
    'be-BY': /^(\+?375)?(24|25|29|33|44)\d{7}$/,
    'bg-BG': /^(\+?359|0)?8[789]\d{7}$/,
    'bn-BD': /\+?(88)?0?1[356789][0-9]{8}\b/,
    'cs-CZ': /^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
    'da-DK': /^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,
    'de-DE': /^(\+49)?0?1(5[0-25-9]\d|6([23]|0\d?)|7([0-57-9]|6\d))\d{7}$/,
    'el-GR': /^(\+?30|0)?(69\d{8})$/,
    'en-AU': /^(\+?61|0)4\d{8}$/,
    'en-GB': /^(\+?44|0)7\d{9}$/,
    'en-GH': /^(\+233|0)(20|50|24|54|27|57|26|56|23|28)\d{7}$/,
    'en-HK': /^(\+?852\-?)?[456789]\d{3}\-?\d{4}$/,
    'en-IE': /^(\+?353|0)8[356789]\d{7}$/,
    'en-IN': /^(\+?91|0)?[6789]\d{9}$/,
    'en-KE': /^(\+?254|0)?[7]\d{8}$/,
    'en-MU': /^(\+?230|0)?\d{8}$/,
    'en-NG': /^(\+?234|0)?[789]\d{9}$/,
    'en-NZ': /^(\+?64|0)[28]\d{7,9}$/,
    'en-PK': /^((\+92)|(0092))-{0,1}\d{3}-{0,1}\d{7}$|^\d{11}$|^\d{4}-\d{7}$/,
    'en-RW': /^(\+?250|0)?[7]\d{8}$/,
    'en-SG': /^(\+65)?[89]\d{7}$/,
    'en-TZ': /^(\+?255|0)?[67]\d{8}$/,
    'en-UG': /^(\+?256|0)?[7]\d{8}$/,
    'en-US': /^((\+1|1)?( |-)?)?(\([2-9][0-9]{2}\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,
    'en-ZA': /^(\+?27|0)\d{9}$/,
    'en-ZM': /^(\+?26)?09[567]\d{7}$/,
    'es-ES': /^(\+?34)?(6\d{1}|7[1234])\d{7}$/,
    'es-MX': /^(\+?52)?(1|01)?\d{10,11}$/,
    'es-UY': /^(\+598|0)9[1-9][\d]{6}$/,
    'et-EE': /^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,
    'fa-IR': /^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,
    'fi-FI': /^(\+?358|0)\s?(4(0|1|2|4|5|6)?|50)\s?(\d\s?){4,8}\d$/,
    'fo-FO': /^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
    'fr-FR': /^(\+?33|0)[67]\d{8}$/,
    'he-IL': /^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}$/,
    'hu-HU': /^(\+?36)(20|30|70)\d{7}$/,
    'id-ID': /^(\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\s?|\d]{5,11})$/,
    'it-IT': /^(\+?39)?\s?3\d{2} ?\d{6,7}$/,
    'ja-JP': /^(\+?81|0)[789]0[ \-]?[1-9]\d{2}[ \-]?\d{5}$/,
    'kk-KZ': /^(\+?7|8)?7\d{9}$/,
    'kl-GL': /^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
    'ko-KR': /^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,
    'lt-LT': /^(\+370|8)\d{8}$/,
    'ms-MY': /^(\+?6?01){1}(([0145]{1}(\-|\s)?\d{7,8})|([236789]{1}(\s|\-)?\d{7}))$/,
    'nb-NO': /^(\+?47)?[49]\d{7}$/,
    'nl-BE': /^(\+?32|0)4?\d{8}$/,
    'nn-NO': /^(\+?47)?[49]\d{7}$/,
    'pl-PL': /^(\+?48)? ?[5-8]\d ?\d{3} ?\d{2} ?\d{2}$/,
    'pt-BR': /(?=^(\+?5{2}\-?|0)[1-9]{2}\-?\d{4}\-?\d{4}$)(^(\+?5{2}\-?|0)[1-9]{2}\-?[6-9]{1}\d{3}\-?\d{4}$)|(^(\+?5{2}\-?|0)[1-9]{2}\-?9[6-9]{1}\d{3}\-?\d{4}$)/,
    'pt-PT': /^(\+?351)?9[1236]\d{7}$/,
    'ro-RO': /^(\+?4?0)\s?7\d{2}(\/|\s|\.|\-)?\d{3}(\s|\.|\-)?\d{3}$/,
    'ru-RU': /^(\+?7|8)?9\d{9}$/,
    'sl-SI': /^(\+386\s?|0)(\d{1}\s?\d{3}\s?\d{2}\s?\d{2}|\d{2}\s?\d{3}\s?\d{3})$/,
    'sk-SK': /^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
    'sr-RS': /^(\+3816|06)[- \d]{5,9}$/,
    'sv-SE': /^(\+?46|0)[\s\-]?7[\s\-]?[02369]([\s\-]?\d){7}$/,
    'th-TH': /^(\+66|66|0)\d{9}$/,
    'tr-TR': /^(\+?90|0)?5\d{9}$/,
    'uk-UA': /^(\+?38|8)?0\d{9}$/,
    'vi-VN': /^(\+?84|0)((3([2-9]))|(5([689]))|(7([0|6-9]))|(8([1-5]))|(9([0-9])))([0-9]{7})$/,
    'zh-CN': /^((\+|00)86)?1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]{8}$/,
    'zh-TW': /^(\+?886\-?|0)?9\d{8}$/
  };
  phones['en-CA'] = phones['en-US'];
  phones['fr-BE'] = phones['nl-BE'];
  phones['zh-HK'] = phones['en-HK'];

  function isMobilePhone(str, locale, options) {
    (0, _assertString.default)(str);

    if (options && options.strictMode && !str.startsWith('+')) {
      return false;
    }

    if (Array.isArray(locale)) {
      return locale.some(function (key) {
        if (phones.hasOwnProperty(key)) {
          var phone = phones[key];

          if (phone.test(str)) {
            return true;
          }
        }

        return false;
      });
    } else if (locale in phones) {
      return phones[locale].test(str);
    } else if (!locale || locale === 'any') {
      for (var key in phones) {
        if (phones.hasOwnProperty(key)) {
          var phone = phones[key];

          if (phone.test(str)) {
            return true;
          }
        }
      }

      return false;
    }

    throw new Error("Invalid locale '".concat(locale, "'"));
  }

  var locales = Object.keys(phones);
  exports.locales = locales;
},311,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isCurrency;

  var _merge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function currencyRegex(options) {
    var decimal_digits = "\\d{".concat(options.digits_after_decimal[0], "}");
    options.digits_after_decimal.forEach(function (digit, index) {
      if (index !== 0) decimal_digits = "".concat(decimal_digits, "|\\d{").concat(digit, "}");
    });
    var symbol = "(\\".concat(options.symbol.replace(/\./g, '\\.'), ")").concat(options.require_symbol ? '' : '?'),
        negative = '-?',
        whole_dollar_amount_without_sep = '[1-9]\\d*',
        whole_dollar_amount_with_sep = "[1-9]\\d{0,2}(\\".concat(options.thousands_separator, "\\d{3})*"),
        valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],
        whole_dollar_amount = "(".concat(valid_whole_dollar_amounts.join('|'), ")?"),
        decimal_amount = "(\\".concat(options.decimal_separator, "(").concat(decimal_digits, "))").concat(options.require_decimal ? '' : '?');
    var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : '');

    if (options.allow_negatives && !options.parens_for_negatives) {
      if (options.negative_sign_after_digits) {
        pattern += negative;
      } else if (options.negative_sign_before_digits) {
        pattern = negative + pattern;
      }
    }

    if (options.allow_negative_sign_placeholder) {
      pattern = "( (?!\\-))?".concat(pattern);
    } else if (options.allow_space_after_symbol) {
      pattern = " ?".concat(pattern);
    } else if (options.allow_space_after_digits) {
      pattern += '( (?!$))?';
    }

    if (options.symbol_after_digits) {
      pattern += symbol;
    } else {
      pattern = symbol + pattern;
    }

    if (options.allow_negatives) {
      if (options.parens_for_negatives) {
        pattern = "(\\(".concat(pattern, "\\)|").concat(pattern, ")");
      } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
        pattern = negative + pattern;
      }
    }

    return new RegExp("^(?!-? )(?=.*\\d)".concat(pattern, "$"));
  }

  var default_currency_options = {
    symbol: '$',
    require_symbol: false,
    allow_space_after_symbol: false,
    symbol_after_digits: false,
    allow_negatives: true,
    parens_for_negatives: false,
    negative_sign_before_digits: false,
    negative_sign_after_digits: false,
    allow_negative_sign_placeholder: false,
    thousands_separator: ',',
    decimal_separator: '.',
    allow_decimal: true,
    require_decimal: false,
    digits_after_decimal: [2],
    allow_space_after_digits: false
  };

  function isCurrency(str, options) {
    (0, _assertString.default)(str);
    options = (0, _merge.default)(options, default_currency_options);
    return currencyRegex(options).test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},312,[266,257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isISO8601;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;

  var isValidDate = function isValidDate(str) {
    var ordinalMatch = str.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);

    if (ordinalMatch) {
      var oYear = Number(ordinalMatch[1]);
      var oDay = Number(ordinalMatch[2]);
      if (oYear % 4 === 0 && oYear % 100 !== 0) return oDay <= 366;
      return oDay <= 365;
    }

    var match = str.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number);
    var year = match[1];
    var month = match[2];
    var day = match[3];
    var monthString = month ? "0".concat(month).slice(-2) : month;
    var dayString = day ? "0".concat(day).slice(-2) : day;
    var d = new Date("".concat(year, "-").concat(monthString || '01', "-").concat(dayString || '01'));
    if (isNaN(d.getUTCFullYear())) return false;

    if (month && day) {
      return d.getUTCFullYear() === year && d.getUTCMonth() + 1 === month && d.getUTCDate() === day;
    }

    return true;
  };

  function isISO8601(str, options) {
    (0, _assertString.default)(str);
    var check = iso8601.test(str);
    if (!options) return check;
    if (check && options.strict) return isValidDate(str);
    return check;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},313,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isRFC3339;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var dateFullYear = /[0-9]{4}/;
  var dateMonth = /(0[1-9]|1[0-2])/;
  var dateMDay = /([12]\d|0[1-9]|3[01])/;
  var timeHour = /([01][0-9]|2[0-3])/;
  var timeMinute = /[0-5][0-9]/;
  var timeSecond = /([0-5][0-9]|60)/;
  var timeSecFrac = /(\.[0-9]+)?/;
  var timeNumOffset = new RegExp("[-+]".concat(timeHour.source, ":").concat(timeMinute.source));
  var timeOffset = new RegExp("([zZ]|".concat(timeNumOffset.source, ")"));
  var partialTime = new RegExp("".concat(timeHour.source, ":").concat(timeMinute.source, ":").concat(timeSecond.source).concat(timeSecFrac.source));
  var fullDate = new RegExp("".concat(dateFullYear.source, "-").concat(dateMonth.source, "-").concat(dateMDay.source));
  var fullTime = new RegExp("".concat(partialTime.source).concat(timeOffset.source));
  var rfc3339 = new RegExp("".concat(fullDate.source, "[ tT]").concat(fullTime.source));

  function isRFC3339(str) {
    (0, _assertString.default)(str);
    return rfc3339.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},314,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isISO31661Alpha2;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _includes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var validISO31661Alpha2CountriesCodes = ['AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ', 'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ', 'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ', 'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ', 'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET', 'FI', 'FJ', 'FK', 'FM', 'FO', 'FR', 'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY', 'HK', 'HM', 'HN', 'HR', 'HT', 'HU', 'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT', 'JE', 'JM', 'JO', 'JP', 'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ', 'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY', 'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ', 'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ', 'OM', 'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY', 'QA', 'RE', 'RO', 'RS', 'RU', 'RW', 'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ', 'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ', 'UA', 'UG', 'UM', 'US', 'UY', 'UZ', 'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU', 'WF', 'WS', 'YE', 'YT', 'ZA', 'ZM', 'ZW'];

  function isISO31661Alpha2(str) {
    (0, _assertString.default)(str);
    return (0, _includes.default)(validISO31661Alpha2CountriesCodes, str.toUpperCase());
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},315,[257,290]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isISO31661Alpha3;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _includes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var validISO31661Alpha3CountriesCodes = ['AFG', 'ALA', 'ALB', 'DZA', 'ASM', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG', 'ARM', 'ABW', 'AUS', 'AUT', 'AZE', 'BHS', 'BHR', 'BGD', 'BRB', 'BLR', 'BEL', 'BLZ', 'BEN', 'BMU', 'BTN', 'BOL', 'BES', 'BIH', 'BWA', 'BVT', 'BRA', 'IOT', 'BRN', 'BGR', 'BFA', 'BDI', 'KHM', 'CMR', 'CAN', 'CPV', 'CYM', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'CCK', 'COL', 'COM', 'COG', 'COD', 'COK', 'CRI', 'CIV', 'HRV', 'CUB', 'CUW', 'CYP', 'CZE', 'DNK', 'DJI', 'DMA', 'DOM', 'ECU', 'EGY', 'SLV', 'GNQ', 'ERI', 'EST', 'ETH', 'FLK', 'FRO', 'FJI', 'FIN', 'FRA', 'GUF', 'PYF', 'ATF', 'GAB', 'GMB', 'GEO', 'DEU', 'GHA', 'GIB', 'GRC', 'GRL', 'GRD', 'GLP', 'GUM', 'GTM', 'GGY', 'GIN', 'GNB', 'GUY', 'HTI', 'HMD', 'VAT', 'HND', 'HKG', 'HUN', 'ISL', 'IND', 'IDN', 'IRN', 'IRQ', 'IRL', 'IMN', 'ISR', 'ITA', 'JAM', 'JPN', 'JEY', 'JOR', 'KAZ', 'KEN', 'KIR', 'PRK', 'KOR', 'KWT', 'KGZ', 'LAO', 'LVA', 'LBN', 'LSO', 'LBR', 'LBY', 'LIE', 'LTU', 'LUX', 'MAC', 'MKD', 'MDG', 'MWI', 'MYS', 'MDV', 'MLI', 'MLT', 'MHL', 'MTQ', 'MRT', 'MUS', 'MYT', 'MEX', 'FSM', 'MDA', 'MCO', 'MNG', 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'NAM', 'NRU', 'NPL', 'NLD', 'NCL', 'NZL', 'NIC', 'NER', 'NGA', 'NIU', 'NFK', 'MNP', 'NOR', 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG', 'PRY', 'PER', 'PHL', 'PCN', 'POL', 'PRT', 'PRI', 'QAT', 'REU', 'ROU', 'RUS', 'RWA', 'BLM', 'SHN', 'KNA', 'LCA', 'MAF', 'SPM', 'VCT', 'WSM', 'SMR', 'STP', 'SAU', 'SEN', 'SRB', 'SYC', 'SLE', 'SGP', 'SXM', 'SVK', 'SVN', 'SLB', 'SOM', 'ZAF', 'SGS', 'SSD', 'ESP', 'LKA', 'SDN', 'SUR', 'SJM', 'SWZ', 'SWE', 'CHE', 'SYR', 'TWN', 'TJK', 'TZA', 'THA', 'TLS', 'TGO', 'TKL', 'TON', 'TTO', 'TUN', 'TUR', 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR', 'USA', 'UMI', 'URY', 'UZB', 'VUT', 'VEN', 'VNM', 'VGB', 'VIR', 'WLF', 'ESH', 'YEM', 'ZMB', 'ZWE'];

  function isISO31661Alpha3(str) {
    (0, _assertString.default)(str);
    return (0, _includes.default)(validISO31661Alpha3CountriesCodes, str.toUpperCase());
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},316,[257,290]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isBase64;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var notBase64 = /[^A-Z0-9+\/=]/i;

  function isBase64(str) {
    (0, _assertString.default)(str);
    var len = str.length;

    if (!len || len % 4 !== 0 || notBase64.test(str)) {
      return false;
    }

    var firstPaddingChar = str.indexOf('=');
    return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},317,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isDataURI;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var validMediaType = /^[a-z]+\/[a-z0-9\-\+]+$/i;
  var validAttribute = /^[a-z\-]+=[a-z0-9\-]+$/i;
  var validData = /^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;

  function isDataURI(str) {
    (0, _assertString.default)(str);
    var data = str.split(',');

    if (data.length < 2) {
      return false;
    }

    var attributes = data.shift().trim().split(';');
    var schemeAndMediaType = attributes.shift();

    if (schemeAndMediaType.substr(0, 5) !== 'data:') {
      return false;
    }

    var mediaType = schemeAndMediaType.substr(5);

    if (mediaType !== '' && !validMediaType.test(mediaType)) {
      return false;
    }

    for (var i = 0; i < attributes.length; i++) {
      if (i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') {} else if (!validAttribute.test(attributes[i])) {
        return false;
      }
    }

    for (var _i = 0; _i < data.length; _i++) {
      if (!validData.test(data[_i])) {
        return false;
      }
    }

    return true;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},318,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isMagnetURI;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var magnetURI = /^magnet:\?xt=urn:[a-z0-9]+:[a-z0-9]{32,40}&dn=.+&tr=.+$/i;

  function isMagnetURI(url) {
    (0, _assertString.default)(url);
    return magnetURI.test(url.trim());
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},319,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isMimeType;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+]{1,100}$/i;
  var mimeTypeText = /^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i;
  var mimeTypeMultipart = /^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i;

  function isMimeType(str) {
    (0, _assertString.default)(str);
    return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},320,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var lat = /^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/;
  var long = /^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/;

  function _default(str) {
    (0, _assertString.default)(str);
    if (!str.includes(',')) return false;
    var pair = str.split(',');
    return lat.test(pair[0]) && long.test(pair[1]);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},321,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = _default;
  exports.locales = undefined;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var threeDigit = /^\d{3}$/;
  var fourDigit = /^\d{4}$/;
  var fiveDigit = /^\d{5}$/;
  var sixDigit = /^\d{6}$/;
  var patterns = {
    AD: /^AD\d{3}$/,
    AT: fourDigit,
    AU: fourDigit,
    BE: fourDigit,
    BG: fourDigit,
    CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
    CH: fourDigit,
    CZ: /^\d{3}\s?\d{2}$/,
    DE: fiveDigit,
    DK: fourDigit,
    DZ: fiveDigit,
    EE: fiveDigit,
    ES: fiveDigit,
    FI: fiveDigit,
    FR: /^\d{2}\s?\d{3}$/,
    GB: /^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,
    GR: /^\d{3}\s?\d{2}$/,
    HR: /^([1-5]\d{4}$)/,
    HU: fourDigit,
    IL: fiveDigit,
    IN: sixDigit,
    IS: threeDigit,
    IT: fiveDigit,
    JP: /^\d{3}\-\d{4}$/,
    KE: fiveDigit,
    LI: /^(948[5-9]|949[0-7])$/,
    LT: /^LT\-\d{5}$/,
    LU: fourDigit,
    LV: /^LV\-\d{4}$/,
    MX: fiveDigit,
    NL: /^\d{4}\s?[a-z]{2}$/i,
    NO: fourDigit,
    PL: /^\d{2}\-\d{3}$/,
    PT: /^\d{4}\-\d{3}?$/,
    RO: sixDigit,
    RU: sixDigit,
    SA: fiveDigit,
    SE: /^\d{3}\s?\d{2}$/,
    SI: fourDigit,
    SK: /^\d{3}\s?\d{2}$/,
    TN: fourDigit,
    TW: /^\d{3}(\d{2})?$/,
    UA: fiveDigit,
    US: /^\d{5}(-\d{4})?$/,
    ZA: fourDigit,
    ZM: fiveDigit
  };
  var locales = Object.keys(patterns);
  exports.locales = locales;

  function _default(str, locale) {
    (0, _assertString.default)(str);

    if (locale in patterns) {
      return patterns[locale].test(str);
    } else if (locale === 'any') {
      for (var key in patterns) {
        if (patterns.hasOwnProperty(key)) {
          var pattern = patterns[key];

          if (pattern.test(str)) {
            return true;
          }
        }
      }

      return false;
    }

    throw new Error("Invalid locale '".concat(locale, "'"));
  }
},322,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = ltrim;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function ltrim(str, chars) {
    (0, _assertString.default)(str);
    var pattern = chars ? new RegExp("^[".concat(chars, "]+"), 'g') : /^\s+/g;
    return str.replace(pattern, '');
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},323,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = rtrim;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function rtrim(str, chars) {
    (0, _assertString.default)(str);
    var pattern = chars ? new RegExp("[".concat(chars, "]")) : /\s/;
    var idx = str.length - 1;

    for (; idx >= 0 && pattern.test(str[idx]); idx--) {
      ;
    }

    return idx < str.length ? str.substr(0, idx + 1) : str;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},324,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = trim;

  var _rtrim = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _ltrim = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function trim(str, chars) {
    return (0, _rtrim.default)((0, _ltrim.default)(str, chars), chars);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},325,[324,323]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = escape;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function escape(str) {
    (0, _assertString.default)(str);
    return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\//g, '&#x2F;').replace(/\\/g, '&#x5C;').replace(/`/g, '&#96;');
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},326,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = unescape;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function unescape(str) {
    (0, _assertString.default)(str);
    return str.replace(/&amp;/g, '&').replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#x2F;/g, '/').replace(/&#x5C;/g, '\\').replace(/&#96;/g, '`');
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},327,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = stripLow;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  var _blacklist = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function stripLow(str, keep_new_lines) {
    (0, _assertString.default)(str);
    var chars = keep_new_lines ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';
    return (0, _blacklist.default)(str, chars);
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},328,[257,329]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = blacklist;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function blacklist(str, chars) {
    (0, _assertString.default)(str);
    return str.replace(new RegExp("[".concat(chars, "]+"), 'g'), '');
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},329,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = whitelist;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function whitelist(str, chars) {
    (0, _assertString.default)(str);
    return str.replace(new RegExp("[^".concat(chars, "]+"), 'g'), '');
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},330,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isWhitelisted;

  var _assertString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function isWhitelisted(str, chars) {
    (0, _assertString.default)(str);

    for (var i = str.length - 1; i >= 0; i--) {
      if (chars.indexOf(str[i]) === -1) {
        return false;
      }
    }

    return true;
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},331,[257]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = normalizeEmail;

  var _merge = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0]));

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var default_normalize_email_options = {
    all_lowercase: true,
    gmail_lowercase: true,
    gmail_remove_dots: true,
    gmail_remove_subaddress: true,
    gmail_convert_googlemaildotcom: true,
    outlookdotcom_lowercase: true,
    outlookdotcom_remove_subaddress: true,
    yahoo_lowercase: true,
    yahoo_remove_subaddress: true,
    yandex_lowercase: true,
    icloud_lowercase: true,
    icloud_remove_subaddress: true
  };
  var icloud_domains = ['icloud.com', 'me.com'];
  var outlookdotcom_domains = ['hotmail.at', 'hotmail.be', 'hotmail.ca', 'hotmail.cl', 'hotmail.co.il', 'hotmail.co.nz', 'hotmail.co.th', 'hotmail.co.uk', 'hotmail.com', 'hotmail.com.ar', 'hotmail.com.au', 'hotmail.com.br', 'hotmail.com.gr', 'hotmail.com.mx', 'hotmail.com.pe', 'hotmail.com.tr', 'hotmail.com.vn', 'hotmail.cz', 'hotmail.de', 'hotmail.dk', 'hotmail.es', 'hotmail.fr', 'hotmail.hu', 'hotmail.id', 'hotmail.ie', 'hotmail.in', 'hotmail.it', 'hotmail.jp', 'hotmail.kr', 'hotmail.lv', 'hotmail.my', 'hotmail.ph', 'hotmail.pt', 'hotmail.sa', 'hotmail.sg', 'hotmail.sk', 'live.be', 'live.co.uk', 'live.com', 'live.com.ar', 'live.com.mx', 'live.de', 'live.es', 'live.eu', 'live.fr', 'live.it', 'live.nl', 'msn.com', 'outlook.at', 'outlook.be', 'outlook.cl', 'outlook.co.il', 'outlook.co.nz', 'outlook.co.th', 'outlook.com', 'outlook.com.ar', 'outlook.com.au', 'outlook.com.br', 'outlook.com.gr', 'outlook.com.pe', 'outlook.com.tr', 'outlook.com.vn', 'outlook.cz', 'outlook.de', 'outlook.dk', 'outlook.es', 'outlook.fr', 'outlook.hu', 'outlook.id', 'outlook.ie', 'outlook.in', 'outlook.it', 'outlook.jp', 'outlook.kr', 'outlook.lv', 'outlook.my', 'outlook.ph', 'outlook.pt', 'outlook.sa', 'outlook.sg', 'outlook.sk', 'passport.com'];
  var yahoo_domains = ['rocketmail.com', 'yahoo.ca', 'yahoo.co.uk', 'yahoo.com', 'yahoo.de', 'yahoo.fr', 'yahoo.in', 'yahoo.it', 'ymail.com'];
  var yandex_domains = ['yandex.ru', 'yandex.ua', 'yandex.kz', 'yandex.com', 'yandex.by', 'ya.ru'];

  function dotsReplacer(match) {
    if (match.length > 1) {
      return match;
    }

    return '';
  }

  function normalizeEmail(email, options) {
    options = (0, _merge.default)(options, default_normalize_email_options);
    var raw_parts = email.split('@');
    var domain = raw_parts.pop();
    var user = raw_parts.join('@');
    var parts = [user, domain];
    parts[1] = parts[1].toLowerCase();

    if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {
      if (options.gmail_remove_subaddress) {
        parts[0] = parts[0].split('+')[0];
      }

      if (options.gmail_remove_dots) {
        parts[0] = parts[0].replace(/\.+/g, dotsReplacer);
      }

      if (!parts[0].length) {
        return false;
      }

      if (options.all_lowercase || options.gmail_lowercase) {
        parts[0] = parts[0].toLowerCase();
      }

      parts[1] = options.gmail_convert_googlemaildotcom ? 'gmail.com' : parts[1];
    } else if (icloud_domains.indexOf(parts[1]) >= 0) {
      if (options.icloud_remove_subaddress) {
        parts[0] = parts[0].split('+')[0];
      }

      if (!parts[0].length) {
        return false;
      }

      if (options.all_lowercase || options.icloud_lowercase) {
        parts[0] = parts[0].toLowerCase();
      }
    } else if (outlookdotcom_domains.indexOf(parts[1]) >= 0) {
      if (options.outlookdotcom_remove_subaddress) {
        parts[0] = parts[0].split('+')[0];
      }

      if (!parts[0].length) {
        return false;
      }

      if (options.all_lowercase || options.outlookdotcom_lowercase) {
        parts[0] = parts[0].toLowerCase();
      }
    } else if (yahoo_domains.indexOf(parts[1]) >= 0) {
      if (options.yahoo_remove_subaddress) {
        var components = parts[0].split('-');
        parts[0] = components.length > 1 ? components.slice(0, -1).join('-') : components[0];
      }

      if (!parts[0].length) {
        return false;
      }

      if (options.all_lowercase || options.yahoo_lowercase) {
        parts[0] = parts[0].toLowerCase();
      }
    } else if (yandex_domains.indexOf(parts[1]) >= 0) {
      if (options.all_lowercase || options.yandex_lowercase) {
        parts[0] = parts[0].toLowerCase();
      }

      parts[1] = 'yandex.ru';
    } else if (options.all_lowercase) {
      parts[0] = parts[0].toLowerCase();
    }

    return parts.join('@');
  }

  module.exports = exports.default;
  module.exports.default = exports.default;
},332,[266]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var has = Object.prototype.hasOwnProperty,
      prefix = '~';

  function Events() {}

  if (Object.create) {
    Events.prototype = Object.create(null);
    if (!new Events().__proto__) prefix = false;
  }

  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once),
        evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }

  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
  }

  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [],
        events,
        name;
    if (this._eventsCount === 0) return names;

    for (name in events = this._events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event,
        handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event,
        listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;

        case 2:
          return listeners.fn.call(listeners.context, a1), true;

        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;

          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;

    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      }

      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prefixed = prefix;
  EventEmitter.EventEmitter = EventEmitter;

  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }
},333,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('querystring');
},334,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const bip32 = _$$_REQUIRE(_dependencyMap[0]);

  const bip39 = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = {
    generateMnemonic: () => {
      return bip39.generateMnemonic(128);
    },
    getAccountAtIndex: (mnemonic, index = 0) => {
      const seed = bip39.mnemonicToSeedSync(mnemonic);
      const node = bip32.fromSeed(seed);
      const child = node.derivePath(`m/44'/195'/${index}'/0/0`);
      const privateKey = child.privateKey.toString('hex');
      return privateKey;
    },
    validateMnemonic: mnemonic => {
      return bip39.validateMnemonic(mnemonic);
    }
  };
},335,[336,357]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var bip32_1 = _$$_REQUIRE(_dependencyMap[0]);

  exports.fromSeed = bip32_1.fromSeed;
  exports.fromBase58 = bip32_1.fromBase58;
  exports.fromPublicKey = bip32_1.fromPublicKey;
  exports.fromPrivateKey = bip32_1.fromPrivateKey;
},336,[337]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  const crypto = _$$_REQUIRE(_dependencyMap[0]);

  const bs58check = _$$_REQUIRE(_dependencyMap[1]);

  const ecc = _$$_REQUIRE(_dependencyMap[2]);

  const typeforce = _$$_REQUIRE(_dependencyMap[3]);

  const wif = _$$_REQUIRE(_dependencyMap[4]);

  const UINT256_TYPE = typeforce.BufferN(32);
  const NETWORK_TYPE = typeforce.compile({
    wif: typeforce.UInt8,
    bip32: {
      public: typeforce.UInt32,
      private: typeforce.UInt32
    }
  });
  const BITCOIN = {
    messagePrefix: '\x18Bitcoin Signed Message:\n',
    bech32: 'bc',
    bip32: {
      public: 0x0488b21e,
      private: 0x0488ade4
    },
    pubKeyHash: 0x00,
    scriptHash: 0x05,
    wif: 0x80
  };
  const HIGHEST_BIT = 0x80000000;
  const UINT31_MAX = Math.pow(2, 31) - 1;

  function BIP32Path(value) {
    return typeforce.String(value) && value.match(/^(m\/)?(\d+'?\/)*\d+'?$/) !== null;
  }

  function UInt31(value) {
    return typeforce.UInt32(value) && value <= UINT31_MAX;
  }

  class BIP32 {
    constructor(__D, __Q, chainCode, network, __DEPTH = 0, __INDEX = 0, __PARENT_FINGERPRINT = 0x00000000) {
      this.__D = __D;
      this.__Q = __Q;
      this.chainCode = chainCode;
      this.network = network;
      this.__DEPTH = __DEPTH;
      this.__INDEX = __INDEX;
      this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;
      typeforce(NETWORK_TYPE, network);
      this.lowR = false;
    }

    get depth() {
      return this.__DEPTH;
    }

    get index() {
      return this.__INDEX;
    }

    get parentFingerprint() {
      return this.__PARENT_FINGERPRINT;
    }

    get publicKey() {
      if (this.__Q === undefined) this.__Q = ecc.pointFromScalar(this.__D, true);
      return this.__Q;
    }

    get privateKey() {
      return this.__D;
    }

    get identifier() {
      return crypto.hash160(this.publicKey);
    }

    get fingerprint() {
      return this.identifier.slice(0, 4);
    }

    get compressed() {
      return true;
    }

    isNeutered() {
      return this.__D === undefined;
    }

    neutered() {
      return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);
    }

    toBase58() {
      const network = this.network;
      const version = !this.isNeutered() ? network.bip32.private : network.bip32.public;
      const buffer = Buffer.allocUnsafe(78);
      buffer.writeUInt32BE(version, 0);
      buffer.writeUInt8(this.depth, 4);
      buffer.writeUInt32BE(this.parentFingerprint, 5);
      buffer.writeUInt32BE(this.index, 9);
      this.chainCode.copy(buffer, 13);

      if (!this.isNeutered()) {
        buffer.writeUInt8(0, 45);
        this.privateKey.copy(buffer, 46);
      } else {
        this.publicKey.copy(buffer, 45);
      }

      return bs58check.encode(buffer);
    }

    toWIF() {
      if (!this.privateKey) throw new TypeError('Missing private key');
      return wif.encode(this.network.wif, this.privateKey, true);
    }

    derive(index) {
      typeforce(typeforce.UInt32, index);
      const isHardened = index >= HIGHEST_BIT;
      const data = Buffer.allocUnsafe(37);

      if (isHardened) {
        if (this.isNeutered()) throw new TypeError('Missing private key for hardened child key');
        data[0] = 0x00;
        this.privateKey.copy(data, 1);
        data.writeUInt32BE(index, 33);
      } else {
        this.publicKey.copy(data, 0);
        data.writeUInt32BE(index, 33);
      }

      const I = crypto.hmacSHA512(this.chainCode, data);
      const IL = I.slice(0, 32);
      const IR = I.slice(32);
      if (!ecc.isPrivate(IL)) return this.derive(index + 1);
      let hd;

      if (!this.isNeutered()) {
        const ki = ecc.privateAdd(this.privateKey, IL);
        if (ki == null) return this.derive(index + 1);
        hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
      } else {
        const Ki = ecc.pointAddScalar(this.publicKey, IL, true);
        if (Ki === null) return this.derive(index + 1);
        hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
      }

      return hd;
    }

    deriveHardened(index) {
      typeforce(UInt31, index);
      return this.derive(index + HIGHEST_BIT);
    }

    derivePath(path) {
      typeforce(BIP32Path, path);
      let splitPath = path.split('/');

      if (splitPath[0] === 'm') {
        if (this.parentFingerprint) throw new TypeError('Expected master, got child');
        splitPath = splitPath.slice(1);
      }

      return splitPath.reduce((prevHd, indexStr) => {
        let index;

        if (indexStr.slice(-1) === `'`) {
          index = parseInt(indexStr.slice(0, -1), 10);
          return prevHd.deriveHardened(index);
        } else {
          index = parseInt(indexStr, 10);
          return prevHd.derive(index);
        }
      }, this);
    }

    sign(hash, lowR) {
      if (!this.privateKey) throw new Error('Missing private key');
      if (lowR === undefined) lowR = this.lowR;

      if (lowR === false) {
        return ecc.sign(hash, this.privateKey);
      } else {
        let sig = ecc.sign(hash, this.privateKey);
        const extraData = Buffer.alloc(32, 0);
        let counter = 0;

        while (sig[0] > 0x7f) {
          counter++;
          extraData.writeUIntLE(counter, 0, 6);
          sig = ecc.signWithEntropy(hash, this.privateKey, extraData);
        }

        return sig;
      }
    }

    verify(hash, signature) {
      return ecc.verify(hash, this.publicKey, signature);
    }

  }

  function fromBase58(inString, network) {
    const buffer = bs58check.decode(inString);
    if (buffer.length !== 78) throw new TypeError('Invalid buffer length');
    network = network || BITCOIN;
    const version = buffer.readUInt32BE(0);
    if (version !== network.bip32.private && version !== network.bip32.public) throw new TypeError('Invalid network version');
    const depth = buffer[4];
    const parentFingerprint = buffer.readUInt32BE(5);

    if (depth === 0) {
      if (parentFingerprint !== 0x00000000) throw new TypeError('Invalid parent fingerprint');
    }

    const index = buffer.readUInt32BE(9);
    if (depth === 0 && index !== 0) throw new TypeError('Invalid index');
    const chainCode = buffer.slice(13, 45);
    let hd;

    if (version === network.bip32.private) {
      if (buffer.readUInt8(45) !== 0x00) throw new TypeError('Invalid private key');
      const k = buffer.slice(46, 78);
      hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint);
    } else {
      const X = buffer.slice(45, 78);
      hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);
    }

    return hd;
  }

  exports.fromBase58 = fromBase58;

  function fromPrivateKey(privateKey, chainCode, network) {
    return fromPrivateKeyLocal(privateKey, chainCode, network);
  }

  exports.fromPrivateKey = fromPrivateKey;

  function fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {
    typeforce({
      privateKey: UINT256_TYPE,
      chainCode: UINT256_TYPE
    }, {
      privateKey,
      chainCode
    });
    network = network || BITCOIN;
    if (!ecc.isPrivate(privateKey)) throw new TypeError('Private key not in range [1, n)');
    return new BIP32(privateKey, undefined, chainCode, network, depth, index, parentFingerprint);
  }

  function fromPublicKey(publicKey, chainCode, network) {
    return fromPublicKeyLocal(publicKey, chainCode, network);
  }

  exports.fromPublicKey = fromPublicKey;

  function fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {
    typeforce({
      publicKey: typeforce.BufferN(33),
      chainCode: UINT256_TYPE
    }, {
      publicKey,
      chainCode
    });
    network = network || BITCOIN;
    if (!ecc.isPoint(publicKey)) throw new TypeError('Point is not on the curve');
    return new BIP32(undefined, publicKey, chainCode, network, depth, index, parentFingerprint);
  }

  function fromSeed(seed, network) {
    typeforce(typeforce.Buffer, seed);
    if (seed.length < 16) throw new TypeError('Seed should be at least 128 bits');
    if (seed.length > 64) throw new TypeError('Seed should be at most 512 bits');
    network = network || BITCOIN;
    const I = crypto.hmacSHA512(Buffer.from('Bitcoin seed', 'utf8'), seed);
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return fromPrivateKey(IL, IR, network);
  }

  exports.fromSeed = fromSeed;
},337,[338,341,346,352,356]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  const createHash = _$$_REQUIRE(_dependencyMap[0]);

  const createHmac = _$$_REQUIRE(_dependencyMap[1]);

  function hash160(buffer) {
    const sha256Hash = createHash('sha256').update(buffer).digest();

    try {
      return createHash('rmd160').update(sha256Hash).digest();
    } catch (err) {
      return createHash('ripemd160').update(sha256Hash).digest();
    }
  }

  exports.hash160 = hash160;

  function hmacSHA512(key, data) {
    return createHmac('sha512', key).update(data).digest();
  }

  exports.hmacSHA512 = hmacSHA512;
},338,[339,340]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _$$_REQUIRE(_dependencyMap[0]).createHash;
},339,[90]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _$$_REQUIRE(_dependencyMap[0]).createHmac;
},340,[90]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var createHash = _$$_REQUIRE(_dependencyMap[0]);

  var bs58checkBase = _$$_REQUIRE(_dependencyMap[1]);

  function sha256x2(buffer) {
    var tmp = createHash('sha256').update(buffer).digest();
    return createHash('sha256').update(tmp).digest();
  }

  module.exports = bs58checkBase(sha256x2);
},341,[339,342]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var base58 = _$$_REQUIRE(_dependencyMap[0]);

  var Buffer = _$$_REQUIRE(_dependencyMap[1]).Buffer;

  module.exports = function (checksumFn) {
    function encode(payload) {
      var checksum = checksumFn(payload);
      return base58.encode(Buffer.concat([payload, checksum], payload.length + 4));
    }

    function decodeRaw(buffer) {
      var payload = buffer.slice(0, -4);
      var checksum = buffer.slice(-4);
      var newChecksum = checksumFn(payload);
      if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;
      return payload;
    }

    function decodeUnsafe(string) {
      var buffer = base58.decodeUnsafe(string);
      if (!buffer) return;
      return decodeRaw(buffer);
    }

    function decode(string) {
      var buffer = base58.decode(string);
      var payload = decodeRaw(buffer, checksumFn);
      if (!payload) throw new Error('Invalid checksum');
      return payload;
    }

    return {
      encode: encode,
      decode: decode,
      decodeUnsafe: decodeUnsafe
    };
  };
},342,[343,345]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var basex = _$$_REQUIRE(_dependencyMap[0]);

  var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  module.exports = basex(ALPHABET);
},343,[344]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var _Buffer = _$$_REQUIRE(_dependencyMap[0]).Buffer;

  function base(ALPHABET) {
    if (ALPHABET.length >= 255) {
      throw new TypeError('Alphabet too long');
    }

    var BASE_MAP = new Uint8Array(256);

    for (var j = 0; j < BASE_MAP.length; j++) {
      BASE_MAP[j] = 255;
    }

    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);

      if (BASE_MAP[xc] !== 255) {
        throw new TypeError(x + ' is ambiguous');
      }

      BASE_MAP[xc] = i;
    }

    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);

    function encode(source) {
      if (Array.isArray(source) || source instanceof Uint8Array) {
        source = _Buffer.from(source);
      }

      if (!_Buffer.isBuffer(source)) {
        throw new TypeError('Expected Buffer');
      }

      if (source.length === 0) {
        return '';
      }

      var zeroes = 0;
      var length = 0;
      var pbegin = 0;
      var pend = source.length;

      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      }

      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size);

      while (pbegin !== pend) {
        var carry = source[pbegin];
        var i = 0;

        for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
          carry += 256 * b58[it1] >>> 0;
          b58[it1] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }

        if (carry !== 0) {
          throw new Error('Non-zero carry');
        }

        length = i;
        pbegin++;
      }

      var it2 = size - length;

      while (it2 !== size && b58[it2] === 0) {
        it2++;
      }

      var str = LEADER.repeat(zeroes);

      for (; it2 < size; ++it2) {
        str += ALPHABET.charAt(b58[it2]);
      }

      return str;
    }

    function decodeUnsafe(source) {
      if (typeof source !== 'string') {
        throw new TypeError('Expected String');
      }

      if (source.length === 0) {
        return _Buffer.alloc(0);
      }

      var psz = 0;

      if (source[psz] === ' ') {
        return;
      }

      var zeroes = 0;
      var length = 0;

      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      }

      var size = (source.length - psz) * FACTOR + 1 >>> 0;
      var b256 = new Uint8Array(size);

      while (source[psz]) {
        var carry = BASE_MAP[source.charCodeAt(psz)];

        if (carry === 255) {
          return;
        }

        var i = 0;

        for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
          carry += BASE * b256[it3] >>> 0;
          b256[it3] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }

        if (carry !== 0) {
          throw new Error('Non-zero carry');
        }

        length = i;
        psz++;
      }

      if (source[psz] === ' ') {
        return;
      }

      var it4 = size - length;

      while (it4 !== size && b256[it4] === 0) {
        it4++;
      }

      var vch = _Buffer.allocUnsafe(zeroes + (size - it4));

      vch.fill(0x00, 0, zeroes);
      var j = zeroes;

      while (it4 !== size) {
        vch[j++] = b256[it4++];
      }

      return vch;
    }

    function decode(string) {
      var buffer = decodeUnsafe(string);

      if (buffer) {
        return buffer;
      }

      throw new Error('Non-base' + BASE + ' character');
    }

    return {
      encode: encode,
      decodeUnsafe: decodeUnsafe,
      decode: decode
    };
  }

  module.exports = base;
},344,[345]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var buffer = _$$_REQUIRE(_dependencyMap[0]);

  var Buffer = buffer.Buffer;

  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }

  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
  }

  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number');
    }

    return Buffer(arg, encodingOrOffset, length);
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    var buf = Buffer(size);

    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }

    return buf;
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    return Buffer(size);
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    return buffer.SlowBuffer(size);
  };
},345,[35]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  try {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  } catch (err) {
    module.exports = _$$_REQUIRE(_dependencyMap[1]);
  }
},346,[347,350]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  let binding = _$$_REQUIRE(_dependencyMap[0])('secp256k1');

  delete binding.path;

  for (let key in binding) {
    if (key.indexOf('is') !== 0) continue;

    binding[key].toJSON = function () {
      return key;
    };
  }

  module.exports = binding;
},347,[348]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var fs = _$$_REQUIRE(_dependencyMap[0]),
      path = _$$_REQUIRE(_dependencyMap[1]),
      fileURLToPath = _$$_REQUIRE(_dependencyMap[2]),
      join = path.join,
      dirname = path.dirname,
      exists = fs.accessSync && function (path) {
    try {
      fs.accessSync(path);
    } catch (e) {
      return false;
    }

    return true;
  } || fs.existsSync || path.existsSync,
      defaults = {
    arrow: process.env.NODE_BINDINGS_ARROW || ' → ',
    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled',
    platform: process.platform,
    arch: process.arch,
    nodePreGyp: 'node-v' + process.versions.modules + '-' + process.platform + '-' + process.arch,
    version: process.versions.node,
    bindings: 'bindings.node',
    try: [['module_root', 'build', 'bindings'], ['module_root', 'build', 'Debug', 'bindings'], ['module_root', 'build', 'Release', 'bindings'], ['module_root', 'out', 'Debug', 'bindings'], ['module_root', 'Debug', 'bindings'], ['module_root', 'out', 'Release', 'bindings'], ['module_root', 'Release', 'bindings'], ['module_root', 'build', 'default', 'bindings'], ['module_root', 'compiled', 'version', 'platform', 'arch', 'bindings'], ['module_root', 'addon-build', 'release', 'install-root', 'bindings'], ['module_root', 'addon-build', 'debug', 'install-root', 'bindings'], ['module_root', 'addon-build', 'default', 'install-root', 'bindings'], ['module_root', 'lib', 'binding', 'nodePreGyp', 'bindings']]
  };

  function bindings(opts) {
    if (typeof opts == 'string') {
      opts = {
        bindings: opts
      };
    } else if (!opts) {
      opts = {};
    }

    Object.keys(defaults).map(function (i) {
      if (!(i in opts)) opts[i] = defaults[i];
    });

    if (!opts.module_root) {
      opts.module_root = exports.getRoot(exports.getFileName());
    }

    if (path.extname(opts.bindings) != '.node') {
      opts.bindings += '.node';
    }

    var requireFunc = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : _$$_REQUIRE;
    var tries = [],
        i = 0,
        l = opts.try.length,
        n,
        b,
        err;

    for (; i < l; i++) {
      n = join.apply(null, opts.try[i].map(function (p) {
        return opts[p] || p;
      }));
      tries.push(n);

      try {
        b = opts.path ? requireFunc.resolve(n) : requireFunc(n);

        if (!opts.path) {
          b.path = n;
        }

        return b;
      } catch (e) {
        if (e.code !== 'MODULE_NOT_FOUND' && e.code !== 'QUALIFIED_PATH_RESOLUTION_FAILED' && !/not find/i.test(e.message)) {
          throw e;
        }
      }
    }

    err = new Error('Could not locate the bindings file. Tried:\n' + tries.map(function (a) {
      return opts.arrow + a;
    }).join('\n'));
    err.tries = tries;
    throw err;
  }

  module.exports = exports = bindings;

  exports.getFileName = function getFileName(calling_file) {
    var origPST = Error.prepareStackTrace,
        origSTL = Error.stackTraceLimit,
        dummy = {},
        fileName;
    Error.stackTraceLimit = 10;

    Error.prepareStackTrace = function (e, st) {
      for (var i = 0, l = st.length; i < l; i++) {
        fileName = st[i].getFileName();

        if (fileName !== __filename) {
          if (calling_file) {
            if (fileName !== calling_file) {
              return;
            }
          } else {
            return;
          }
        }
      }
    };

    Error.captureStackTrace(dummy);
    dummy.stack;
    Error.prepareStackTrace = origPST;
    Error.stackTraceLimit = origSTL;
    var fileSchema = 'file://';

    if (fileName.indexOf(fileSchema) === 0) {
      fileName = fileURLToPath(fileName);
    }

    return fileName;
  };

  exports.getRoot = function getRoot(file) {
    var dir = dirname(file),
        prev;

    while (true) {
      if (dir === '.') {
        dir = process.cwd();
      }

      if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {
        return dir;
      }

      if (prev === dir) {
        throw new Error('Could not find module root given file: "' + file + '". Do you have a `package.json` file? ');
      }

      prev = dir;
      dir = join(dir, '..');
    }
  };
},348,[3,4,349]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var sep = _$$_REQUIRE(_dependencyMap[0]).sep || '/';
  module.exports = fileUriToPath;

  function fileUriToPath(uri) {
    if ('string' != typeof uri || uri.length <= 7 || 'file://' != uri.substring(0, 7)) {
      throw new TypeError('must pass in a file:// URI to convert to a file path');
    }

    var rest = decodeURI(uri.substring(7));
    var firstSlash = rest.indexOf('/');
    var host = rest.substring(0, firstSlash);
    var path = rest.substring(firstSlash + 1);
    if ('localhost' == host) host = '';

    if (host) {
      host = sep + sep + host;
    }

    path = path.replace(/^(.+)\|/, '$1:');

    if (sep == '\\') {
      path = path.replace(/\//g, '\\');
    }

    if (/^.+\:/.test(path)) {} else {
      path = sep + path;
    }

    return host + path;
  }
},349,[4]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const BN = _$$_REQUIRE(_dependencyMap[0]);

  const EC = _$$_REQUIRE(_dependencyMap[1]).ec;

  const secp256k1 = new EC('secp256k1');

  const deterministicGenerateK = _$$_REQUIRE(_dependencyMap[2]);

  const ZERO32 = Buffer.alloc(32, 0);
  const EC_GROUP_ORDER = Buffer.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 'hex');
  const EC_P = Buffer.from('fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f', 'hex');
  const n = secp256k1.curve.n;
  const nDiv2 = n.shrn(1);
  const G = secp256k1.curve.g;
  const THROW_BAD_PRIVATE = 'Expected Private';
  const THROW_BAD_POINT = 'Expected Point';
  const THROW_BAD_TWEAK = 'Expected Tweak';
  const THROW_BAD_HASH = 'Expected Hash';
  const THROW_BAD_SIGNATURE = 'Expected Signature';
  const THROW_BAD_EXTRA_DATA = 'Expected Extra Data (32 bytes)';

  function isScalar(x) {
    return Buffer.isBuffer(x) && x.length === 32;
  }

  function isOrderScalar(x) {
    if (!isScalar(x)) return false;
    return x.compare(EC_GROUP_ORDER) < 0;
  }

  function isPoint(p) {
    if (!Buffer.isBuffer(p)) return false;
    if (p.length < 33) return false;
    const t = p[0];
    const x = p.slice(1, 33);
    if (x.compare(ZERO32) === 0) return false;
    if (x.compare(EC_P) >= 0) return false;

    if ((t === 0x02 || t === 0x03) && p.length === 33) {
      try {
        decodeFrom(p);
      } catch (e) {
        return false;
      }

      return true;
    }

    const y = p.slice(33);
    if (y.compare(ZERO32) === 0) return false;
    if (y.compare(EC_P) >= 0) return false;
    if (t === 0x04 && p.length === 65) return true;
    return false;
  }

  function __isPointCompressed(p) {
    return p[0] !== 0x04;
  }

  function isPointCompressed(p) {
    if (!isPoint(p)) return false;
    return __isPointCompressed(p);
  }

  function isPrivate(x) {
    if (!isScalar(x)) return false;
    return x.compare(ZERO32) > 0 && x.compare(EC_GROUP_ORDER) < 0;
  }

  function isSignature(value) {
    const r = value.slice(0, 32);
    const s = value.slice(32, 64);
    return Buffer.isBuffer(value) && value.length === 64 && r.compare(EC_GROUP_ORDER) < 0 && s.compare(EC_GROUP_ORDER) < 0;
  }

  function assumeCompression(value, pubkey) {
    if (value === undefined && pubkey !== undefined) return __isPointCompressed(pubkey);
    if (value === undefined) return true;
    return value;
  }

  function fromBuffer(d) {
    return new BN(d);
  }

  function toBuffer(d) {
    return d.toArrayLike(Buffer, 'be', 32);
  }

  function decodeFrom(P) {
    return secp256k1.curve.decodePoint(P);
  }

  function getEncoded(P, compressed) {
    return Buffer.from(P._encode(compressed));
  }

  function pointAdd(pA, pB, __compressed) {
    if (!isPoint(pA)) throw new TypeError(THROW_BAD_POINT);
    if (!isPoint(pB)) throw new TypeError(THROW_BAD_POINT);
    const a = decodeFrom(pA);
    const b = decodeFrom(pB);
    const pp = a.add(b);
    if (pp.isInfinity()) return null;
    const compressed = assumeCompression(__compressed, pA);
    return getEncoded(pp, compressed);
  }

  function pointAddScalar(p, tweak, __compressed) {
    if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);
    if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);
    const compressed = assumeCompression(__compressed, p);
    const pp = decodeFrom(p);
    if (tweak.compare(ZERO32) === 0) return getEncoded(pp, compressed);
    const tt = fromBuffer(tweak);
    const qq = G.mul(tt);
    const uu = pp.add(qq);
    if (uu.isInfinity()) return null;
    return getEncoded(uu, compressed);
  }

  function pointCompress(p, __compressed) {
    if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);
    const pp = decodeFrom(p);
    if (pp.isInfinity()) throw new TypeError(THROW_BAD_POINT);
    const compressed = assumeCompression(__compressed, p);
    return getEncoded(pp, compressed);
  }

  function pointFromScalar(d, __compressed) {
    if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);
    const dd = fromBuffer(d);
    const pp = G.mul(dd);
    if (pp.isInfinity()) return null;
    const compressed = assumeCompression(__compressed);
    return getEncoded(pp, compressed);
  }

  function pointMultiply(p, tweak, __compressed) {
    if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);
    if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);
    const compressed = assumeCompression(__compressed, p);
    const pp = decodeFrom(p);
    const tt = fromBuffer(tweak);
    const qq = pp.mul(tt);
    if (qq.isInfinity()) return null;
    return getEncoded(qq, compressed);
  }

  function privateAdd(d, tweak) {
    if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);
    if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);
    const dd = fromBuffer(d);
    const tt = fromBuffer(tweak);
    const dt = toBuffer(dd.add(tt).umod(n));
    if (!isPrivate(dt)) return null;
    return dt;
  }

  function privateSub(d, tweak) {
    if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);
    if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);
    const dd = fromBuffer(d);
    const tt = fromBuffer(tweak);
    const dt = toBuffer(dd.sub(tt).umod(n));
    if (!isPrivate(dt)) return null;
    return dt;
  }

  function sign(hash, x) {
    return __sign(hash, x);
  }

  function signWithEntropy(hash, x, addData) {
    return __sign(hash, x, addData);
  }

  function __sign(hash, x, addData) {
    if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH);
    if (!isPrivate(x)) throw new TypeError(THROW_BAD_PRIVATE);
    if (addData !== undefined && !isScalar(addData)) throw new TypeError(THROW_BAD_EXTRA_DATA);
    const d = fromBuffer(x);
    const e = fromBuffer(hash);
    let r, s;

    const checkSig = function (k) {
      const kI = fromBuffer(k);
      const Q = G.mul(kI);
      if (Q.isInfinity()) return false;
      r = Q.x.umod(n);
      if (r.isZero() === 0) return false;
      s = kI.invm(n).mul(e.add(d.mul(r))).umod(n);
      if (s.isZero() === 0) return false;
      return true;
    };

    deterministicGenerateK(hash, x, checkSig, isPrivate, addData);

    if (s.cmp(nDiv2) > 0) {
      s = n.sub(s);
    }

    const buffer = Buffer.allocUnsafe(64);
    toBuffer(r).copy(buffer, 0);
    toBuffer(s).copy(buffer, 32);
    return buffer;
  }

  function verify(hash, q, signature, strict) {
    if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH);
    if (!isPoint(q)) throw new TypeError(THROW_BAD_POINT);
    if (!isSignature(signature)) throw new TypeError(THROW_BAD_SIGNATURE);
    const Q = decodeFrom(q);
    const r = fromBuffer(signature.slice(0, 32));
    const s = fromBuffer(signature.slice(32, 64));

    if (strict && s.cmp(nDiv2) > 0) {
      return false;
    }

    if (r.gtn(0) <= 0) return false;
    if (s.gtn(0) <= 0) return false;
    const e = fromBuffer(hash);
    const sInv = s.invm(n);
    const u1 = e.mul(sInv).umod(n);
    const u2 = r.mul(sInv).umod(n);
    const R = G.mulAdd(u1, Q, u2);
    if (R.isInfinity()) return false;
    const xR = R.x;
    const v = xR.umod(n);
    return v.eq(r);
  }

  module.exports = {
    isPoint,
    isPointCompressed,
    isPrivate,
    pointAdd,
    pointAddScalar,
    pointCompress,
    pointFromScalar,
    pointMultiply,
    privateAdd,
    privateSub,
    sign,
    signWithEntropy,
    verify
  };
},350,[34,93,351]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const createHmac = _$$_REQUIRE(_dependencyMap[0]);

  const ONE1 = Buffer.alloc(1, 1);
  const ZERO1 = Buffer.alloc(1, 0);

  function deterministicGenerateK(hash, x, checkSig, isPrivate, extraEntropy) {
    let k = Buffer.alloc(32, 0);
    let v = Buffer.alloc(32, 1);
    k = createHmac('sha256', k).update(v).update(ZERO1).update(x).update(hash).update(extraEntropy || '').digest();
    v = createHmac('sha256', k).update(v).digest();
    k = createHmac('sha256', k).update(v).update(ONE1).update(x).update(hash).update(extraEntropy || '').digest();
    v = createHmac('sha256', k).update(v).digest();
    v = createHmac('sha256', k).update(v).digest();
    let T = v;

    while (!isPrivate(T) || !checkSig(T)) {
      k = createHmac('sha256', k).update(v).update(ZERO1).digest();
      v = createHmac('sha256', k).update(v).digest();
      v = createHmac('sha256', k).update(v).digest();
      T = v;
    }

    return T;
  }

  module.exports = deterministicGenerateK;
},351,[340]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var ERRORS = _$$_REQUIRE(_dependencyMap[0]);

  var NATIVE = _$$_REQUIRE(_dependencyMap[1]);

  var tfJSON = ERRORS.tfJSON;
  var TfTypeError = ERRORS.TfTypeError;
  var TfPropertyTypeError = ERRORS.TfPropertyTypeError;
  var tfSubError = ERRORS.tfSubError;
  var getValueTypeName = ERRORS.getValueTypeName;
  var TYPES = {
    arrayOf: function arrayOf(type, options) {
      type = compile(type);
      options = options || {};

      function _arrayOf(array, strict) {
        if (!NATIVE.Array(array)) return false;
        if (NATIVE.Nil(array)) return false;
        if (options.minLength !== undefined && array.length < options.minLength) return false;
        if (options.maxLength !== undefined && array.length > options.maxLength) return false;
        if (options.length !== undefined && array.length !== options.length) return false;
        return array.every(function (value, i) {
          try {
            return typeforce(type, value, strict);
          } catch (e) {
            throw tfSubError(e, i);
          }
        });
      }

      _arrayOf.toJSON = function () {
        var str = '[' + tfJSON(type) + ']';

        if (options.length !== undefined) {
          str += '{' + options.length + '}';
        } else if (options.minLength !== undefined || options.maxLength !== undefined) {
          str += '{' + (options.minLength === undefined ? 0 : options.minLength) + ',' + (options.maxLength === undefined ? Infinity : options.maxLength) + '}';
        }

        return str;
      };

      return _arrayOf;
    },
    maybe: function maybe(type) {
      type = compile(type);

      function _maybe(value, strict) {
        return NATIVE.Nil(value) || type(value, strict, maybe);
      }

      _maybe.toJSON = function () {
        return '?' + tfJSON(type);
      };

      return _maybe;
    },
    map: function map(propertyType, propertyKeyType) {
      propertyType = compile(propertyType);
      if (propertyKeyType) propertyKeyType = compile(propertyKeyType);

      function _map(value, strict) {
        if (!NATIVE.Object(value)) return false;
        if (NATIVE.Nil(value)) return false;

        for (var propertyName in value) {
          try {
            if (propertyKeyType) {
              typeforce(propertyKeyType, propertyName, strict);
            }
          } catch (e) {
            throw tfSubError(e, propertyName, 'key');
          }

          try {
            var propertyValue = value[propertyName];
            typeforce(propertyType, propertyValue, strict);
          } catch (e) {
            throw tfSubError(e, propertyName);
          }
        }

        return true;
      }

      if (propertyKeyType) {
        _map.toJSON = function () {
          return '{' + tfJSON(propertyKeyType) + ': ' + tfJSON(propertyType) + '}';
        };
      } else {
        _map.toJSON = function () {
          return '{' + tfJSON(propertyType) + '}';
        };
      }

      return _map;
    },
    object: function object(uncompiled) {
      var type = {};

      for (var typePropertyName in uncompiled) {
        type[typePropertyName] = compile(uncompiled[typePropertyName]);
      }

      function _object(value, strict) {
        if (!NATIVE.Object(value)) return false;
        if (NATIVE.Nil(value)) return false;
        var propertyName;

        try {
          for (propertyName in type) {
            var propertyType = type[propertyName];
            var propertyValue = value[propertyName];
            typeforce(propertyType, propertyValue, strict);
          }
        } catch (e) {
          throw tfSubError(e, propertyName);
        }

        if (strict) {
          for (propertyName in value) {
            if (type[propertyName]) continue;
            throw new TfPropertyTypeError(undefined, propertyName);
          }
        }

        return true;
      }

      _object.toJSON = function () {
        return tfJSON(type);
      };

      return _object;
    },
    anyOf: function anyOf() {
      var types = [].slice.call(arguments).map(compile);

      function _anyOf(value, strict) {
        return types.some(function (type) {
          try {
            return typeforce(type, value, strict);
          } catch (e) {
            return false;
          }
        });
      }

      _anyOf.toJSON = function () {
        return types.map(tfJSON).join('|');
      };

      return _anyOf;
    },
    allOf: function allOf() {
      var types = [].slice.call(arguments).map(compile);

      function _allOf(value, strict) {
        return types.every(function (type) {
          try {
            return typeforce(type, value, strict);
          } catch (e) {
            return false;
          }
        });
      }

      _allOf.toJSON = function () {
        return types.map(tfJSON).join(' & ');
      };

      return _allOf;
    },
    quacksLike: function quacksLike(type) {
      function _quacksLike(value) {
        return type === getValueTypeName(value);
      }

      _quacksLike.toJSON = function () {
        return type;
      };

      return _quacksLike;
    },
    tuple: function tuple() {
      var types = [].slice.call(arguments).map(compile);

      function _tuple(values, strict) {
        if (NATIVE.Nil(values)) return false;
        if (NATIVE.Nil(values.length)) return false;
        if (strict && values.length !== types.length) return false;
        return types.every(function (type, i) {
          try {
            return typeforce(type, values[i], strict);
          } catch (e) {
            throw tfSubError(e, i);
          }
        });
      }

      _tuple.toJSON = function () {
        return '(' + types.map(tfJSON).join(', ') + ')';
      };

      return _tuple;
    },
    value: function value(expected) {
      function _value(actual) {
        return actual === expected;
      }

      _value.toJSON = function () {
        return expected;
      };

      return _value;
    }
  };
  TYPES.oneOf = TYPES.anyOf;

  function compile(type) {
    if (NATIVE.String(type)) {
      if (type[0] === '?') return TYPES.maybe(type.slice(1));
      return NATIVE[type] || TYPES.quacksLike(type);
    } else if (type && NATIVE.Object(type)) {
      if (NATIVE.Array(type)) {
        if (type.length !== 1) throw new TypeError('Expected compile() parameter of type Array of length 1');
        return TYPES.arrayOf(type[0]);
      }

      return TYPES.object(type);
    } else if (NATIVE.Function(type)) {
      return type;
    }

    return TYPES.value(type);
  }

  function typeforce(type, value, strict, surrogate) {
    if (NATIVE.Function(type)) {
      if (type(value, strict)) return true;
      throw new TfTypeError(surrogate || type, value);
    }

    return typeforce(compile(type), value, strict);
  }

  for (var typeName in NATIVE) {
    typeforce[typeName] = NATIVE[typeName];
  }

  for (typeName in TYPES) {
    typeforce[typeName] = TYPES[typeName];
  }

  var EXTRA = _$$_REQUIRE(_dependencyMap[2]);

  for (typeName in EXTRA) {
    typeforce[typeName] = EXTRA[typeName];
  }

  typeforce.compile = compile;
  typeforce.TfTypeError = TfTypeError;
  typeforce.TfPropertyTypeError = TfPropertyTypeError;
  module.exports = typeforce;
},352,[353,354,355]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var native = _$$_REQUIRE(_dependencyMap[0]);

  function getTypeName(fn) {
    return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1];
  }

  function getValueTypeName(value) {
    return native.Nil(value) ? '' : getTypeName(value.constructor);
  }

  function getValue(value) {
    if (native.Function(value)) return '';
    if (native.String(value)) return JSON.stringify(value);
    if (value && native.Object(value)) return '';
    return value;
  }

  function captureStackTrace(e, t) {
    if (Error.captureStackTrace) {
      Error.captureStackTrace(e, t);
    }
  }

  function tfJSON(type) {
    if (native.Function(type)) return type.toJSON ? type.toJSON() : getTypeName(type);
    if (native.Array(type)) return 'Array';
    if (type && native.Object(type)) return 'Object';
    return type !== undefined ? type : '';
  }

  function tfErrorString(type, value, valueTypeName) {
    var valueJson = getValue(value);
    return 'Expected ' + tfJSON(type) + ', got' + (valueTypeName !== '' ? ' ' + valueTypeName : '') + (valueJson !== '' ? ' ' + valueJson : '');
  }

  function TfTypeError(type, value, valueTypeName) {
    valueTypeName = valueTypeName || getValueTypeName(value);
    this.message = tfErrorString(type, value, valueTypeName);
    captureStackTrace(this, TfTypeError);
    this.__type = type;
    this.__value = value;
    this.__valueTypeName = valueTypeName;
  }

  TfTypeError.prototype = Object.create(Error.prototype);
  TfTypeError.prototype.constructor = TfTypeError;

  function tfPropertyErrorString(type, label, name, value, valueTypeName) {
    var description = '" of type ';
    if (label === 'key') description = '" with key type ';
    return tfErrorString('property "' + tfJSON(name) + description + tfJSON(type), value, valueTypeName);
  }

  function TfPropertyTypeError(type, property, label, value, valueTypeName) {
    if (type) {
      valueTypeName = valueTypeName || getValueTypeName(value);
      this.message = tfPropertyErrorString(type, label, property, value, valueTypeName);
    } else {
      this.message = 'Unexpected property "' + property + '"';
    }

    captureStackTrace(this, TfTypeError);
    this.__label = label;
    this.__property = property;
    this.__type = type;
    this.__value = value;
    this.__valueTypeName = valueTypeName;
  }

  TfPropertyTypeError.prototype = Object.create(Error.prototype);
  TfPropertyTypeError.prototype.constructor = TfTypeError;

  function tfCustomError(expected, actual) {
    return new TfTypeError(expected, {}, actual);
  }

  function tfSubError(e, property, label) {
    if (e instanceof TfPropertyTypeError) {
      property = property + '.' + e.__property;
      e = new TfPropertyTypeError(e.__type, property, e.__label, e.__value, e.__valueTypeName);
    } else if (e instanceof TfTypeError) {
      e = new TfPropertyTypeError(e.__type, property, label, e.__value, e.__valueTypeName);
    }

    captureStackTrace(e);
    return e;
  }

  module.exports = {
    TfTypeError: TfTypeError,
    TfPropertyTypeError: TfPropertyTypeError,
    tfCustomError: tfCustomError,
    tfSubError: tfSubError,
    tfJSON: tfJSON,
    getValueTypeName: getValueTypeName
  };
},353,[354]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var types = {
    Array: function (value) {
      return value !== null && value !== undefined && value.constructor === Array;
    },
    Boolean: function (value) {
      return typeof value === 'boolean';
    },
    Function: function (value) {
      return typeof value === 'function';
    },
    Nil: function (value) {
      return value === undefined || value === null;
    },
    Number: function (value) {
      return typeof value === 'number';
    },
    Object: function (value) {
      return typeof value === 'object';
    },
    String: function (value) {
      return typeof value === 'string';
    },
    '': function () {
      return true;
    }
  };
  types.Null = types.Nil;

  for (var typeName in types) {
    types[typeName].toJSON = function (t) {
      return t;
    }.bind(null, typeName);
  }

  module.exports = types;
},354,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var NATIVE = _$$_REQUIRE(_dependencyMap[0]);

  var ERRORS = _$$_REQUIRE(_dependencyMap[1]);

  function _Buffer(value) {
    return Buffer.isBuffer(value);
  }

  function Hex(value) {
    return typeof value === 'string' && /^([0-9a-f]{2})+$/i.test(value);
  }

  function _LengthN(type, length) {
    var name = type.toJSON();

    function Length(value) {
      if (!type(value)) return false;
      if (value.length === length) return true;
      throw ERRORS.tfCustomError(name + '(Length: ' + length + ')', name + '(Length: ' + value.length + ')');
    }

    Length.toJSON = function () {
      return name;
    };

    return Length;
  }

  var _ArrayN = _LengthN.bind(null, NATIVE.Array);

  var _BufferN = _LengthN.bind(null, _Buffer);

  var _HexN = _LengthN.bind(null, Hex);

  var _StringN = _LengthN.bind(null, NATIVE.String);

  function Range(a, b, f) {
    f = f || NATIVE.Number;

    function _range(value, strict) {
      return f(value, strict) && value > a && value < b;
    }

    _range.toJSON = function () {
      return `${f.toJSON()} between [${a}, ${b}]`;
    };

    return _range;
  }

  var INT53_MAX = Math.pow(2, 53) - 1;

  function Finite(value) {
    return typeof value === 'number' && isFinite(value);
  }

  function Int8(value) {
    return value << 24 >> 24 === value;
  }

  function Int16(value) {
    return value << 16 >> 16 === value;
  }

  function Int32(value) {
    return (value | 0) === value;
  }

  function Int53(value) {
    return typeof value === 'number' && value >= -9007199254740991 && value <= INT53_MAX && Math.floor(value) === value;
  }

  function UInt8(value) {
    return (value & 0xff) === value;
  }

  function UInt16(value) {
    return (value & 0xffff) === value;
  }

  function UInt32(value) {
    return value >>> 0 === value;
  }

  function UInt53(value) {
    return typeof value === 'number' && value >= 0 && value <= INT53_MAX && Math.floor(value) === value;
  }

  var types = {
    ArrayN: _ArrayN,
    Buffer: _Buffer,
    BufferN: _BufferN,
    Finite: Finite,
    Hex: Hex,
    HexN: _HexN,
    Int8: Int8,
    Int16: Int16,
    Int32: Int32,
    Int53: Int53,
    Range: Range,
    StringN: _StringN,
    UInt8: UInt8,
    UInt16: UInt16,
    UInt32: UInt32,
    UInt53: UInt53
  };

  for (var typeName in types) {
    types[typeName].toJSON = function (t) {
      return t;
    }.bind(null, typeName);
  }

  module.exports = types;
},355,[354,353]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var bs58check = _$$_REQUIRE(_dependencyMap[0]);

  function decodeRaw(buffer, version) {
    if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version');

    if (buffer.length === 33) {
      return {
        version: buffer[0],
        privateKey: buffer.slice(1, 33),
        compressed: false
      };
    }

    if (buffer.length !== 34) throw new Error('Invalid WIF length');
    if (buffer[33] !== 0x01) throw new Error('Invalid compression flag');
    return {
      version: buffer[0],
      privateKey: buffer.slice(1, 33),
      compressed: true
    };
  }

  function encodeRaw(version, privateKey, compressed) {
    var result = new Buffer(compressed ? 34 : 33);
    result.writeUInt8(version, 0);
    privateKey.copy(result, 1);

    if (compressed) {
      result[33] = 0x01;
    }

    return result;
  }

  function decode(string, version) {
    return decodeRaw(bs58check.decode(string), version);
  }

  function encode(version, privateKey, compressed) {
    if (typeof version === 'number') return bs58check.encode(encodeRaw(version, privateKey, compressed));
    return bs58check.encode(encodeRaw(version.version, version.privateKey, version.compressed));
  }

  module.exports = {
    decode: decode,
    decodeRaw: decodeRaw,
    encode: encode,
    encodeRaw: encodeRaw
  };
},356,[341]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  const createHash = _$$_REQUIRE(_dependencyMap[0]);

  const pbkdf2_1 = _$$_REQUIRE(_dependencyMap[1]);

  const randomBytes = _$$_REQUIRE(_dependencyMap[2]);

  const _wordlists_1 = _$$_REQUIRE(_dependencyMap[3]);

  let DEFAULT_WORDLIST = _wordlists_1._default;
  const INVALID_MNEMONIC = 'Invalid mnemonic';
  const INVALID_ENTROPY = 'Invalid entropy';
  const INVALID_CHECKSUM = 'Invalid mnemonic checksum';
  const WORDLIST_REQUIRED = "A wordlist is required but a default could not be found.\nPlease explicitly pass a 2048 word array explicitly.";

  function pbkdf2Promise(password, saltMixin, iterations, keylen, digest) {
    return Promise.resolve().then(() => new Promise((resolve, reject) => {
      const callback = (err, derivedKey) => {
        if (err) {
          return reject(err);
        } else {
          return resolve(derivedKey);
        }
      };

      pbkdf2_1.pbkdf2(password, saltMixin, iterations, keylen, digest, callback);
    }));
  }

  function normalize(str) {
    return (str || '').normalize('NFKD');
  }

  function lpad(str, padString, length) {
    while (str.length < length) {
      str = padString + str;
    }

    return str;
  }

  function binaryToByte(bin) {
    return parseInt(bin, 2);
  }

  function bytesToBinary(bytes) {
    return bytes.map(x => lpad(x.toString(2), '0', 8)).join('');
  }

  function deriveChecksumBits(entropyBuffer) {
    const ENT = entropyBuffer.length * 8;
    const CS = ENT / 32;
    const hash = createHash('sha256').update(entropyBuffer).digest();
    return bytesToBinary(Array.from(hash)).slice(0, CS);
  }

  function salt(password) {
    return 'mnemonic' + (password || '');
  }

  function mnemonicToSeedSync(mnemonic, password) {
    const mnemonicBuffer = Buffer.from(normalize(mnemonic), 'utf8');
    const saltBuffer = Buffer.from(salt(normalize(password)), 'utf8');
    return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');
  }

  exports.mnemonicToSeedSync = mnemonicToSeedSync;

  function mnemonicToSeed(mnemonic, password) {
    return Promise.resolve().then(() => {
      const mnemonicBuffer = Buffer.from(normalize(mnemonic), 'utf8');
      const saltBuffer = Buffer.from(salt(normalize(password)), 'utf8');
      return pbkdf2Promise(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');
    });
  }

  exports.mnemonicToSeed = mnemonicToSeed;

  function mnemonicToEntropy(mnemonic, wordlist) {
    wordlist = wordlist || DEFAULT_WORDLIST;

    if (!wordlist) {
      throw new Error(WORDLIST_REQUIRED);
    }

    const words = normalize(mnemonic).split(' ');

    if (words.length % 3 !== 0) {
      throw new Error(INVALID_MNEMONIC);
    }

    const bits = words.map(word => {
      const index = wordlist.indexOf(word);

      if (index === -1) {
        throw new Error(INVALID_MNEMONIC);
      }

      return lpad(index.toString(2), '0', 11);
    }).join('');
    const dividerIndex = Math.floor(bits.length / 33) * 32;
    const entropyBits = bits.slice(0, dividerIndex);
    const checksumBits = bits.slice(dividerIndex);
    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);

    if (entropyBytes.length < 16) {
      throw new Error(INVALID_ENTROPY);
    }

    if (entropyBytes.length > 32) {
      throw new Error(INVALID_ENTROPY);
    }

    if (entropyBytes.length % 4 !== 0) {
      throw new Error(INVALID_ENTROPY);
    }

    const entropy = Buffer.from(entropyBytes);
    const newChecksum = deriveChecksumBits(entropy);

    if (newChecksum !== checksumBits) {
      throw new Error(INVALID_CHECKSUM);
    }

    return entropy.toString('hex');
  }

  exports.mnemonicToEntropy = mnemonicToEntropy;

  function entropyToMnemonic(entropy, wordlist) {
    if (!Buffer.isBuffer(entropy)) {
      entropy = Buffer.from(entropy, 'hex');
    }

    wordlist = wordlist || DEFAULT_WORDLIST;

    if (!wordlist) {
      throw new Error(WORDLIST_REQUIRED);
    }

    if (entropy.length < 16) {
      throw new TypeError(INVALID_ENTROPY);
    }

    if (entropy.length > 32) {
      throw new TypeError(INVALID_ENTROPY);
    }

    if (entropy.length % 4 !== 0) {
      throw new TypeError(INVALID_ENTROPY);
    }

    const entropyBits = bytesToBinary(Array.from(entropy));
    const checksumBits = deriveChecksumBits(entropy);
    const bits = entropyBits + checksumBits;
    const chunks = bits.match(/(.{1,11})/g);
    const words = chunks.map(binary => {
      const index = binaryToByte(binary);
      return wordlist[index];
    });
    return wordlist[0] === '\u3042\u3044\u3053\u304f\u3057\u3093' ? words.join('\u3000') : words.join(' ');
  }

  exports.entropyToMnemonic = entropyToMnemonic;

  function generateMnemonic(strength, rng, wordlist) {
    strength = strength || 128;

    if (strength % 32 !== 0) {
      throw new TypeError(INVALID_ENTROPY);
    }

    rng = rng || randomBytes;
    return entropyToMnemonic(rng(strength / 8), wordlist);
  }

  exports.generateMnemonic = generateMnemonic;

  function validateMnemonic(mnemonic, wordlist) {
    try {
      mnemonicToEntropy(mnemonic, wordlist);
    } catch (e) {
      return false;
    }

    return true;
  }

  exports.validateMnemonic = validateMnemonic;

  function setDefaultWordlist(language) {
    const result = _wordlists_1.wordlists[language];

    if (result) {
      DEFAULT_WORDLIST = result;
    } else {
      throw new Error('Could not find wordlist for language "' + language + '"');
    }
  }

  exports.setDefaultWordlist = setDefaultWordlist;

  function getDefaultWordlist() {
    if (!DEFAULT_WORDLIST) {
      throw new Error('No Default Wordlist set');
    }

    return Object.keys(_wordlists_1.wordlists).filter(lang => {
      if (lang === 'JA' || lang === 'EN') {
        return false;
      }

      return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);
    })[0];
  }

  exports.getDefaultWordlist = getDefaultWordlist;

  var _wordlists_2 = _$$_REQUIRE(_dependencyMap[3]);

  exports.wordlists = _wordlists_2.wordlists;
},357,[339,358,364,365]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var native = _$$_REQUIRE(_dependencyMap[0]);

  var checkParameters = _$$_REQUIRE(_dependencyMap[1]);

  var defaultEncoding = _$$_REQUIRE(_dependencyMap[2]);

  var toBuffer = _$$_REQUIRE(_dependencyMap[3]);

  function nativePBKDF2(password, salt, iterations, keylen, digest, callback) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');

    if (typeof digest === 'function') {
      callback = digest;
      digest = 'sha1';
    }

    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    return native.pbkdf2(password, salt, iterations, keylen, digest, callback);
  }

  function nativePBKDF2Sync(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    digest = digest || 'sha1';
    return native.pbkdf2Sync(password, salt, iterations, keylen, digest);
  }

  if (!native.pbkdf2Sync || native.pbkdf2Sync.toString().indexOf('keylen, digest') === -1) {
    exports.pbkdf2Sync = _$$_REQUIRE(_dependencyMap[4]);
    exports.pbkdf2 = _$$_REQUIRE(_dependencyMap[5]);
  } else {
    exports.pbkdf2Sync = nativePBKDF2Sync;
    exports.pbkdf2 = nativePBKDF2;
  }
},358,[90,359,360,361,362,363]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var MAX_ALLOC = Math.pow(2, 30) - 1;

  module.exports = function (iterations, keylen) {
    if (typeof iterations !== 'number') {
      throw new TypeError('Iterations not a number');
    }

    if (iterations < 0) {
      throw new TypeError('Bad iterations');
    }

    if (typeof keylen !== 'number') {
      throw new TypeError('Key length not a number');
    }

    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
      throw new TypeError('Bad key length');
    }
  };
},359,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var defaultEncoding;

  if (process.browser) {
    defaultEncoding = 'utf-8';
  } else if (process.version) {
    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
  } else {
    defaultEncoding = 'utf-8';
  }

  module.exports = defaultEncoding;
},360,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var Buffer = _$$_REQUIRE(_dependencyMap[0]).Buffer;

  module.exports = function (thing, encoding, name) {
    if (Buffer.isBuffer(thing)) {
      return thing;
    } else if (typeof thing === 'string') {
      return Buffer.from(thing, encoding);
    } else if (ArrayBuffer.isView(thing)) {
      return Buffer.from(thing.buffer);
    } else {
      throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
    }
  };
},361,[345]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  };

  var createHmac = _$$_REQUIRE(_dependencyMap[0]);

  var Buffer = _$$_REQUIRE(_dependencyMap[1]).Buffer;

  var checkParameters = _$$_REQUIRE(_dependencyMap[2]);

  var defaultEncoding = _$$_REQUIRE(_dependencyMap[3]);

  var toBuffer = _$$_REQUIRE(_dependencyMap[4]);

  function pbkdf2(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    digest = digest || 'sha1';
    var DK = Buffer.allocUnsafe(keylen);
    var block1 = Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);

    for (var i = 1; i <= l; i++) {
      block1.writeUInt32BE(i, salt.length);
      var T = createHmac(digest, password).update(block1).digest();
      var U = T;

      for (var j = 1; j < iterations; j++) {
        U = createHmac(digest, password).update(U).digest();

        for (var k = 0; k < hLen; k++) T[k] ^= U[k];
      }

      T.copy(DK, destPos);
      destPos += hLen;
    }

    return DK;
  }

  module.exports = pbkdf2;
},362,[340,345,359,360,361]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var Buffer = _$$_REQUIRE(_dependencyMap[0]).Buffer;

  var checkParameters = _$$_REQUIRE(_dependencyMap[1]);

  var defaultEncoding = _$$_REQUIRE(_dependencyMap[2]);

  var sync = _$$_REQUIRE(_dependencyMap[3]);

  var toBuffer = _$$_REQUIRE(_dependencyMap[4]);

  var ZERO_BUF;
  var subtle = global.crypto && global.crypto.subtle;
  var toBrowser = {
    sha: 'SHA-1',
    'sha-1': 'SHA-1',
    sha1: 'SHA-1',
    sha256: 'SHA-256',
    'sha-256': 'SHA-256',
    sha384: 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    sha512: 'SHA-512'
  };
  var checks = [];

  function checkNative(algo) {
    if (global.process && !global.process.browser) {
      return Promise.resolve(false);
    }

    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
      return Promise.resolve(false);
    }

    if (checks[algo] !== undefined) {
      return checks[algo];
    }

    ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
      return true;
    }).catch(function () {
      return false;
    });
    checks[algo] = prom;
    return prom;
  }

  function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey('raw', password, {
      name: 'PBKDF2'
    }, false, ['deriveBits']).then(function (key) {
      return subtle.deriveBits({
        name: 'PBKDF2',
        salt: salt,
        iterations: iterations,
        hash: {
          name: algo
        }
      }, key, length << 3);
    }).then(function (res) {
      return Buffer.from(res);
    });
  }

  function resolvePromise(promise, callback) {
    promise.then(function (out) {
      process.nextTick(function () {
        callback(null, out);
      });
    }, function (e) {
      process.nextTick(function () {
        callback(e);
      });
    });
  }

  module.exports = function (password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
      callback = digest;
      digest = undefined;
    }

    digest = digest || 'sha1';
    var algo = toBrowser[digest.toLowerCase()];

    if (!algo || typeof global.Promise !== 'function') {
      return process.nextTick(function () {
        var out;

        try {
          out = sync(password, salt, iterations, keylen, digest);
        } catch (e) {
          return callback(e);
        }

        callback(null, out);
      });
    }

    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    resolvePromise(checkNative(algo).then(function (resp) {
      if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
      return sync(password, salt, iterations, keylen, digest);
    }), callback);
  };
},363,[345,359,360,362,361]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _$$_REQUIRE(_dependencyMap[0]).randomBytes;
},364,[90]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  const wordlists = {};
  exports.wordlists = wordlists;

  let _default;

  exports._default = _default;

  try {
    exports._default = _default = _$$_REQUIRE(_dependencyMap[0]);
    wordlists.czech = _default;
  } catch (err) {}

  try {
    exports._default = _default = _$$_REQUIRE(_dependencyMap[1]);
    wordlists.chinese_simplified = _default;
  } catch (err) {}

  try {
    exports._default = _default = _$$_REQUIRE(_dependencyMap[2]);
    wordlists.chinese_traditional = _default;
  } catch (err) {}

  try {
    exports._default = _default = _$$_REQUIRE(_dependencyMap[3]);
    wordlists.korean = _default;
  } catch (err) {}

  try {
    exports._default = _default = _$$_REQUIRE(_dependencyMap[4]);
    wordlists.french = _default;
  } catch (err) {}

  try {
    exports._default = _default = _$$_REQUIRE(_dependencyMap[5]);
    wordlists.italian = _default;
  } catch (err) {}

  try {
    exports._default = _default = _$$_REQUIRE(_dependencyMap[6]);
    wordlists.spanish = _default;
  } catch (err) {}

  try {
    exports._default = _default = _$$_REQUIRE(_dependencyMap[7]);
    wordlists.japanese = _default;
    wordlists.JA = _default;
  } catch (err) {}

  try {
    exports._default = _default = _$$_REQUIRE(_dependencyMap[8]);
    wordlists.english = _default;
    wordlists.EN = _default;
  } catch (err) {}
},365,[366,367,368,369,370,371,372,373,374]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = [
    "abdikace",
    "abeceda",
    "adresa",
    "agrese",
    "akce",
    "aktovka",
    "alej",
    "alkohol",
    "amputace",
    "ananas",
    "andulka",
    "anekdota",
    "anketa",
    "antika",
    "anulovat",
    "archa",
    "arogance",
    "asfalt",
    "asistent",
    "aspirace",
    "astma",
    "astronom",
    "atlas",
    "atletika",
    "atol",
    "autobus",
    "azyl",
    "babka",
    "bachor",
    "bacil",
    "baculka",
    "badatel",
    "bageta",
    "bagr",
    "bahno",
    "bakterie",
    "balada",
    "baletka",
    "balkon",
    "balonek",
    "balvan",
    "balza",
    "bambus",
    "bankomat",
    "barbar",
    "baret",
    "barman",
    "baroko",
    "barva",
    "baterka",
    "batoh",
    "bavlna",
    "bazalka",
    "bazilika",
    "bazuka",
    "bedna",
    "beran",
    "beseda",
    "bestie",
    "beton",
    "bezinka",
    "bezmoc",
    "beztak",
    "bicykl",
    "bidlo",
    "biftek",
    "bikiny",
    "bilance",
    "biograf",
    "biolog",
    "bitva",
    "bizon",
    "blahobyt",
    "blatouch",
    "blecha",
    "bledule",
    "blesk",
    "blikat",
    "blizna",
    "blokovat",
    "bloudit",
    "blud",
    "bobek",
    "bobr",
    "bodlina",
    "bodnout",
    "bohatost",
    "bojkot",
    "bojovat",
    "bokorys",
    "bolest",
    "borec",
    "borovice",
    "bota",
    "boubel",
    "bouchat",
    "bouda",
    "boule",
    "bourat",
    "boxer",
    "bradavka",
    "brambora",
    "branka",
    "bratr",
    "brepta",
    "briketa",
    "brko",
    "brloh",
    "bronz",
    "broskev",
    "brunetka",
    "brusinka",
    "brzda",
    "brzy",
    "bublina",
    "bubnovat",
    "buchta",
    "buditel",
    "budka",
    "budova",
    "bufet",
    "bujarost",
    "bukvice",
    "buldok",
    "bulva",
    "bunda",
    "bunkr",
    "burza",
    "butik",
    "buvol",
    "buzola",
    "bydlet",
    "bylina",
    "bytovka",
    "bzukot",
    "capart",
    "carevna",
    "cedr",
    "cedule",
    "cejch",
    "cejn",
    "cela",
    "celer",
    "celkem",
    "celnice",
    "cenina",
    "cennost",
    "cenovka",
    "centrum",
    "cenzor",
    "cestopis",
    "cetka",
    "chalupa",
    "chapadlo",
    "charita",
    "chata",
    "chechtat",
    "chemie",
    "chichot",
    "chirurg",
    "chlad",
    "chleba",
    "chlubit",
    "chmel",
    "chmura",
    "chobot",
    "chochol",
    "chodba",
    "cholera",
    "chomout",
    "chopit",
    "choroba",
    "chov",
    "chrapot",
    "chrlit",
    "chrt",
    "chrup",
    "chtivost",
    "chudina",
    "chutnat",
    "chvat",
    "chvilka",
    "chvost",
    "chyba",
    "chystat",
    "chytit",
    "cibule",
    "cigareta",
    "cihelna",
    "cihla",
    "cinkot",
    "cirkus",
    "cisterna",
    "citace",
    "citrus",
    "cizinec",
    "cizost",
    "clona",
    "cokoliv",
    "couvat",
    "ctitel",
    "ctnost",
    "cudnost",
    "cuketa",
    "cukr",
    "cupot",
    "cvaknout",
    "cval",
    "cvik",
    "cvrkot",
    "cyklista",
    "daleko",
    "dareba",
    "datel",
    "datum",
    "dcera",
    "debata",
    "dechovka",
    "decibel",
    "deficit",
    "deflace",
    "dekl",
    "dekret",
    "demokrat",
    "deprese",
    "derby",
    "deska",
    "detektiv",
    "dikobraz",
    "diktovat",
    "dioda",
    "diplom",
    "disk",
    "displej",
    "divadlo",
    "divoch",
    "dlaha",
    "dlouho",
    "dluhopis",
    "dnes",
    "dobro",
    "dobytek",
    "docent",
    "dochutit",
    "dodnes",
    "dohled",
    "dohoda",
    "dohra",
    "dojem",
    "dojnice",
    "doklad",
    "dokola",
    "doktor",
    "dokument",
    "dolar",
    "doleva",
    "dolina",
    "doma",
    "dominant",
    "domluvit",
    "domov",
    "donutit",
    "dopad",
    "dopis",
    "doplnit",
    "doposud",
    "doprovod",
    "dopustit",
    "dorazit",
    "dorost",
    "dort",
    "dosah",
    "doslov",
    "dostatek",
    "dosud",
    "dosyta",
    "dotaz",
    "dotek",
    "dotknout",
    "doufat",
    "doutnat",
    "dovozce",
    "dozadu",
    "doznat",
    "dozorce",
    "drahota",
    "drak",
    "dramatik",
    "dravec",
    "draze",
    "drdol",
    "drobnost",
    "drogerie",
    "drozd",
    "drsnost",
    "drtit",
    "drzost",
    "duben",
    "duchovno",
    "dudek",
    "duha",
    "duhovka",
    "dusit",
    "dusno",
    "dutost",
    "dvojice",
    "dvorec",
    "dynamit",
    "ekolog",
    "ekonomie",
    "elektron",
    "elipsa",
    "email",
    "emise",
    "emoce",
    "empatie",
    "epizoda",
    "epocha",
    "epopej",
    "epos",
    "esej",
    "esence",
    "eskorta",
    "eskymo",
    "etiketa",
    "euforie",
    "evoluce",
    "exekuce",
    "exkurze",
    "expedice",
    "exploze",
    "export",
    "extrakt",
    "facka",
    "fajfka",
    "fakulta",
    "fanatik",
    "fantazie",
    "farmacie",
    "favorit",
    "fazole",
    "federace",
    "fejeton",
    "fenka",
    "fialka",
    "figurant",
    "filozof",
    "filtr",
    "finance",
    "finta",
    "fixace",
    "fjord",
    "flanel",
    "flirt",
    "flotila",
    "fond",
    "fosfor",
    "fotbal",
    "fotka",
    "foton",
    "frakce",
    "freska",
    "fronta",
    "fukar",
    "funkce",
    "fyzika",
    "galeje",
    "garant",
    "genetika",
    "geolog",
    "gilotina",
    "glazura",
    "glejt",
    "golem",
    "golfista",
    "gotika",
    "graf",
    "gramofon",
    "granule",
    "grep",
    "gril",
    "grog",
    "groteska",
    "guma",
    "hadice",
    "hadr",
    "hala",
    "halenka",
    "hanba",
    "hanopis",
    "harfa",
    "harpuna",
    "havran",
    "hebkost",
    "hejkal",
    "hejno",
    "hejtman",
    "hektar",
    "helma",
    "hematom",
    "herec",
    "herna",
    "heslo",
    "hezky",
    "historik",
    "hladovka",
    "hlasivky",
    "hlava",
    "hledat",
    "hlen",
    "hlodavec",
    "hloh",
    "hloupost",
    "hltat",
    "hlubina",
    "hluchota",
    "hmat",
    "hmota",
    "hmyz",
    "hnis",
    "hnojivo",
    "hnout",
    "hoblina",
    "hoboj",
    "hoch",
    "hodiny",
    "hodlat",
    "hodnota",
    "hodovat",
    "hojnost",
    "hokej",
    "holinka",
    "holka",
    "holub",
    "homole",
    "honitba",
    "honorace",
    "horal",
    "horda",
    "horizont",
    "horko",
    "horlivec",
    "hormon",
    "hornina",
    "horoskop",
    "horstvo",
    "hospoda",
    "hostina",
    "hotovost",
    "houba",
    "houf",
    "houpat",
    "houska",
    "hovor",
    "hradba",
    "hranice",
    "hravost",
    "hrazda",
    "hrbolek",
    "hrdina",
    "hrdlo",
    "hrdost",
    "hrnek",
    "hrobka",
    "hromada",
    "hrot",
    "hrouda",
    "hrozen",
    "hrstka",
    "hrubost",
    "hryzat",
    "hubenost",
    "hubnout",
    "hudba",
    "hukot",
    "humr",
    "husita",
    "hustota",
    "hvozd",
    "hybnost",
    "hydrant",
    "hygiena",
    "hymna",
    "hysterik",
    "idylka",
    "ihned",
    "ikona",
    "iluze",
    "imunita",
    "infekce",
    "inflace",
    "inkaso",
    "inovace",
    "inspekce",
    "internet",
    "invalida",
    "investor",
    "inzerce",
    "ironie",
    "jablko",
    "jachta",
    "jahoda",
    "jakmile",
    "jakost",
    "jalovec",
    "jantar",
    "jarmark",
    "jaro",
    "jasan",
    "jasno",
    "jatka",
    "javor",
    "jazyk",
    "jedinec",
    "jedle",
    "jednatel",
    "jehlan",
    "jekot",
    "jelen",
    "jelito",
    "jemnost",
    "jenom",
    "jepice",
    "jeseter",
    "jevit",
    "jezdec",
    "jezero",
    "jinak",
    "jindy",
    "jinoch",
    "jiskra",
    "jistota",
    "jitrnice",
    "jizva",
    "jmenovat",
    "jogurt",
    "jurta",
    "kabaret",
    "kabel",
    "kabinet",
    "kachna",
    "kadet",
    "kadidlo",
    "kahan",
    "kajak",
    "kajuta",
    "kakao",
    "kaktus",
    "kalamita",
    "kalhoty",
    "kalibr",
    "kalnost",
    "kamera",
    "kamkoliv",
    "kamna",
    "kanibal",
    "kanoe",
    "kantor",
    "kapalina",
    "kapela",
    "kapitola",
    "kapka",
    "kaple",
    "kapota",
    "kapr",
    "kapusta",
    "kapybara",
    "karamel",
    "karotka",
    "karton",
    "kasa",
    "katalog",
    "katedra",
    "kauce",
    "kauza",
    "kavalec",
    "kazajka",
    "kazeta",
    "kazivost",
    "kdekoliv",
    "kdesi",
    "kedluben",
    "kemp",
    "keramika",
    "kino",
    "klacek",
    "kladivo",
    "klam",
    "klapot",
    "klasika",
    "klaun",
    "klec",
    "klenba",
    "klepat",
    "klesnout",
    "klid",
    "klima",
    "klisna",
    "klobouk",
    "klokan",
    "klopa",
    "kloub",
    "klubovna",
    "klusat",
    "kluzkost",
    "kmen",
    "kmitat",
    "kmotr",
    "kniha",
    "knot",
    "koalice",
    "koberec",
    "kobka",
    "kobliha",
    "kobyla",
    "kocour",
    "kohout",
    "kojenec",
    "kokos",
    "koktejl",
    "kolaps",
    "koleda",
    "kolize",
    "kolo",
    "komando",
    "kometa",
    "komik",
    "komnata",
    "komora",
    "kompas",
    "komunita",
    "konat",
    "koncept",
    "kondice",
    "konec",
    "konfese",
    "kongres",
    "konina",
    "konkurs",
    "kontakt",
    "konzerva",
    "kopanec",
    "kopie",
    "kopnout",
    "koprovka",
    "korbel",
    "korektor",
    "kormidlo",
    "koroptev",
    "korpus",
    "koruna",
    "koryto",
    "korzet",
    "kosatec",
    "kostka",
    "kotel",
    "kotleta",
    "kotoul",
    "koukat",
    "koupelna",
    "kousek",
    "kouzlo",
    "kovboj",
    "koza",
    "kozoroh",
    "krabice",
    "krach",
    "krajina",
    "kralovat",
    "krasopis",
    "kravata",
    "kredit",
    "krejcar",
    "kresba",
    "kreveta",
    "kriket",
    "kritik",
    "krize",
    "krkavec",
    "krmelec",
    "krmivo",
    "krocan",
    "krok",
    "kronika",
    "kropit",
    "kroupa",
    "krovka",
    "krtek",
    "kruhadlo",
    "krupice",
    "krutost",
    "krvinka",
    "krychle",
    "krypta",
    "krystal",
    "kryt",
    "kudlanka",
    "kufr",
    "kujnost",
    "kukla",
    "kulajda",
    "kulich",
    "kulka",
    "kulomet",
    "kultura",
    "kuna",
    "kupodivu",
    "kurt",
    "kurzor",
    "kutil",
    "kvalita",
    "kvasinka",
    "kvestor",
    "kynolog",
    "kyselina",
    "kytara",
    "kytice",
    "kytka",
    "kytovec",
    "kyvadlo",
    "labrador",
    "lachtan",
    "ladnost",
    "laik",
    "lakomec",
    "lamela",
    "lampa",
    "lanovka",
    "lasice",
    "laso",
    "lastura",
    "latinka",
    "lavina",
    "lebka",
    "leckdy",
    "leden",
    "lednice",
    "ledovka",
    "ledvina",
    "legenda",
    "legie",
    "legrace",
    "lehce",
    "lehkost",
    "lehnout",
    "lektvar",
    "lenochod",
    "lentilka",
    "lepenka",
    "lepidlo",
    "letadlo",
    "letec",
    "letmo",
    "letokruh",
    "levhart",
    "levitace",
    "levobok",
    "libra",
    "lichotka",
    "lidojed",
    "lidskost",
    "lihovina",
    "lijavec",
    "lilek",
    "limetka",
    "linie",
    "linka",
    "linoleum",
    "listopad",
    "litina",
    "litovat",
    "lobista",
    "lodivod",
    "logika",
    "logoped",
    "lokalita",
    "loket",
    "lomcovat",
    "lopata",
    "lopuch",
    "lord",
    "losos",
    "lotr",
    "loudal",
    "louh",
    "louka",
    "louskat",
    "lovec",
    "lstivost",
    "lucerna",
    "lucifer",
    "lump",
    "lusk",
    "lustrace",
    "lvice",
    "lyra",
    "lyrika",
    "lysina",
    "madam",
    "madlo",
    "magistr",
    "mahagon",
    "majetek",
    "majitel",
    "majorita",
    "makak",
    "makovice",
    "makrela",
    "malba",
    "malina",
    "malovat",
    "malvice",
    "maminka",
    "mandle",
    "manko",
    "marnost",
    "masakr",
    "maskot",
    "masopust",
    "matice",
    "matrika",
    "maturita",
    "mazanec",
    "mazivo",
    "mazlit",
    "mazurka",
    "mdloba",
    "mechanik",
    "meditace",
    "medovina",
    "melasa",
    "meloun",
    "mentolka",
    "metla",
    "metoda",
    "metr",
    "mezera",
    "migrace",
    "mihnout",
    "mihule",
    "mikina",
    "mikrofon",
    "milenec",
    "milimetr",
    "milost",
    "mimika",
    "mincovna",
    "minibar",
    "minomet",
    "minulost",
    "miska",
    "mistr",
    "mixovat",
    "mladost",
    "mlha",
    "mlhovina",
    "mlok",
    "mlsat",
    "mluvit",
    "mnich",
    "mnohem",
    "mobil",
    "mocnost",
    "modelka",
    "modlitba",
    "mohyla",
    "mokro",
    "molekula",
    "momentka",
    "monarcha",
    "monokl",
    "monstrum",
    "montovat",
    "monzun",
    "mosaz",
    "moskyt",
    "most",
    "motivace",
    "motorka",
    "motyka",
    "moucha",
    "moudrost",
    "mozaika",
    "mozek",
    "mozol",
    "mramor",
    "mravenec",
    "mrkev",
    "mrtvola",
    "mrzet",
    "mrzutost",
    "mstitel",
    "mudrc",
    "muflon",
    "mulat",
    "mumie",
    "munice",
    "muset",
    "mutace",
    "muzeum",
    "muzikant",
    "myslivec",
    "mzda",
    "nabourat",
    "nachytat",
    "nadace",
    "nadbytek",
    "nadhoz",
    "nadobro",
    "nadpis",
    "nahlas",
    "nahnat",
    "nahodile",
    "nahradit",
    "naivita",
    "najednou",
    "najisto",
    "najmout",
    "naklonit",
    "nakonec",
    "nakrmit",
    "nalevo",
    "namazat",
    "namluvit",
    "nanometr",
    "naoko",
    "naopak",
    "naostro",
    "napadat",
    "napevno",
    "naplnit",
    "napnout",
    "naposled",
    "naprosto",
    "narodit",
    "naruby",
    "narychlo",
    "nasadit",
    "nasekat",
    "naslepo",
    "nastat",
    "natolik",
    "navenek",
    "navrch",
    "navzdory",
    "nazvat",
    "nebe",
    "nechat",
    "necky",
    "nedaleko",
    "nedbat",
    "neduh",
    "negace",
    "nehet",
    "nehoda",
    "nejen",
    "nejprve",
    "neklid",
    "nelibost",
    "nemilost",
    "nemoc",
    "neochota",
    "neonka",
    "nepokoj",
    "nerost",
    "nerv",
    "nesmysl",
    "nesoulad",
    "netvor",
    "neuron",
    "nevina",
    "nezvykle",
    "nicota",
    "nijak",
    "nikam",
    "nikdy",
    "nikl",
    "nikterak",
    "nitro",
    "nocleh",
    "nohavice",
    "nominace",
    "nora",
    "norek",
    "nositel",
    "nosnost",
    "nouze",
    "noviny",
    "novota",
    "nozdra",
    "nuda",
    "nudle",
    "nuget",
    "nutit",
    "nutnost",
    "nutrie",
    "nymfa",
    "obal",
    "obarvit",
    "obava",
    "obdiv",
    "obec",
    "obehnat",
    "obejmout",
    "obezita",
    "obhajoba",
    "obilnice",
    "objasnit",
    "objekt",
    "obklopit",
    "oblast",
    "oblek",
    "obliba",
    "obloha",
    "obluda",
    "obnos",
    "obohatit",
    "obojek",
    "obout",
    "obrazec",
    "obrna",
    "obruba",
    "obrys",
    "obsah",
    "obsluha",
    "obstarat",
    "obuv",
    "obvaz",
    "obvinit",
    "obvod",
    "obvykle",
    "obyvatel",
    "obzor",
    "ocas",
    "ocel",
    "ocenit",
    "ochladit",
    "ochota",
    "ochrana",
    "ocitnout",
    "odboj",
    "odbyt",
    "odchod",
    "odcizit",
    "odebrat",
    "odeslat",
    "odevzdat",
    "odezva",
    "odhadce",
    "odhodit",
    "odjet",
    "odjinud",
    "odkaz",
    "odkoupit",
    "odliv",
    "odluka",
    "odmlka",
    "odolnost",
    "odpad",
    "odpis",
    "odplout",
    "odpor",
    "odpustit",
    "odpykat",
    "odrazka",
    "odsoudit",
    "odstup",
    "odsun",
    "odtok",
    "odtud",
    "odvaha",
    "odveta",
    "odvolat",
    "odvracet",
    "odznak",
    "ofina",
    "ofsajd",
    "ohlas",
    "ohnisko",
    "ohrada",
    "ohrozit",
    "ohryzek",
    "okap",
    "okenice",
    "oklika",
    "okno",
    "okouzlit",
    "okovy",
    "okrasa",
    "okres",
    "okrsek",
    "okruh",
    "okupant",
    "okurka",
    "okusit",
    "olejnina",
    "olizovat",
    "omak",
    "omeleta",
    "omezit",
    "omladina",
    "omlouvat",
    "omluva",
    "omyl",
    "onehdy",
    "opakovat",
    "opasek",
    "operace",
    "opice",
    "opilost",
    "opisovat",
    "opora",
    "opozice",
    "opravdu",
    "oproti",
    "orbital",
    "orchestr",
    "orgie",
    "orlice",
    "orloj",
    "ortel",
    "osada",
    "oschnout",
    "osika",
    "osivo",
    "oslava",
    "oslepit",
    "oslnit",
    "oslovit",
    "osnova",
    "osoba",
    "osolit",
    "ospalec",
    "osten",
    "ostraha",
    "ostuda",
    "ostych",
    "osvojit",
    "oteplit",
    "otisk",
    "otop",
    "otrhat",
    "otrlost",
    "otrok",
    "otruby",
    "otvor",
    "ovanout",
    "ovar",
    "oves",
    "ovlivnit",
    "ovoce",
    "oxid",
    "ozdoba",
    "pachatel",
    "pacient",
    "padouch",
    "pahorek",
    "pakt",
    "palanda",
    "palec",
    "palivo",
    "paluba",
    "pamflet",
    "pamlsek",
    "panenka",
    "panika",
    "panna",
    "panovat",
    "panstvo",
    "pantofle",
    "paprika",
    "parketa",
    "parodie",
    "parta",
    "paruka",
    "paryba",
    "paseka",
    "pasivita",
    "pastelka",
    "patent",
    "patrona",
    "pavouk",
    "pazneht",
    "pazourek",
    "pecka",
    "pedagog",
    "pejsek",
    "peklo",
    "peloton",
    "penalta",
    "pendrek",
    "penze",
    "periskop",
    "pero",
    "pestrost",
    "petarda",
    "petice",
    "petrolej",
    "pevnina",
    "pexeso",
    "pianista",
    "piha",
    "pijavice",
    "pikle",
    "piknik",
    "pilina",
    "pilnost",
    "pilulka",
    "pinzeta",
    "pipeta",
    "pisatel",
    "pistole",
    "pitevna",
    "pivnice",
    "pivovar",
    "placenta",
    "plakat",
    "plamen",
    "planeta",
    "plastika",
    "platit",
    "plavidlo",
    "plaz",
    "plech",
    "plemeno",
    "plenta",
    "ples",
    "pletivo",
    "plevel",
    "plivat",
    "plnit",
    "plno",
    "plocha",
    "plodina",
    "plomba",
    "plout",
    "pluk",
    "plyn",
    "pobavit",
    "pobyt",
    "pochod",
    "pocit",
    "poctivec",
    "podat",
    "podcenit",
    "podepsat",
    "podhled",
    "podivit",
    "podklad",
    "podmanit",
    "podnik",
    "podoba",
    "podpora",
    "podraz",
    "podstata",
    "podvod",
    "podzim",
    "poezie",
    "pohanka",
    "pohnutka",
    "pohovor",
    "pohroma",
    "pohyb",
    "pointa",
    "pojistka",
    "pojmout",
    "pokazit",
    "pokles",
    "pokoj",
    "pokrok",
    "pokuta",
    "pokyn",
    "poledne",
    "polibek",
    "polknout",
    "poloha",
    "polynom",
    "pomalu",
    "pominout",
    "pomlka",
    "pomoc",
    "pomsta",
    "pomyslet",
    "ponechat",
    "ponorka",
    "ponurost",
    "popadat",
    "popel",
    "popisek",
    "poplach",
    "poprosit",
    "popsat",
    "popud",
    "poradce",
    "porce",
    "porod",
    "porucha",
    "poryv",
    "posadit",
    "posed",
    "posila",
    "poskok",
    "poslanec",
    "posoudit",
    "pospolu",
    "postava",
    "posudek",
    "posyp",
    "potah",
    "potkan",
    "potlesk",
    "potomek",
    "potrava",
    "potupa",
    "potvora",
    "poukaz",
    "pouto",
    "pouzdro",
    "povaha",
    "povidla",
    "povlak",
    "povoz",
    "povrch",
    "povstat",
    "povyk",
    "povzdech",
    "pozdrav",
    "pozemek",
    "poznatek",
    "pozor",
    "pozvat",
    "pracovat",
    "prahory",
    "praktika",
    "prales",
    "praotec",
    "praporek",
    "prase",
    "pravda",
    "princip",
    "prkno",
    "probudit",
    "procento",
    "prodej",
    "profese",
    "prohra",
    "projekt",
    "prolomit",
    "promile",
    "pronikat",
    "propad",
    "prorok",
    "prosba",
    "proton",
    "proutek",
    "provaz",
    "prskavka",
    "prsten",
    "prudkost",
    "prut",
    "prvek",
    "prvohory",
    "psanec",
    "psovod",
    "pstruh",
    "ptactvo",
    "puberta",
    "puch",
    "pudl",
    "pukavec",
    "puklina",
    "pukrle",
    "pult",
    "pumpa",
    "punc",
    "pupen",
    "pusa",
    "pusinka",
    "pustina",
    "putovat",
    "putyka",
    "pyramida",
    "pysk",
    "pytel",
    "racek",
    "rachot",
    "radiace",
    "radnice",
    "radon",
    "raft",
    "ragby",
    "raketa",
    "rakovina",
    "rameno",
    "rampouch",
    "rande",
    "rarach",
    "rarita",
    "rasovna",
    "rastr",
    "ratolest",
    "razance",
    "razidlo",
    "reagovat",
    "reakce",
    "recept",
    "redaktor",
    "referent",
    "reflex",
    "rejnok",
    "reklama",
    "rekord",
    "rekrut",
    "rektor",
    "reputace",
    "revize",
    "revma",
    "revolver",
    "rezerva",
    "riskovat",
    "riziko",
    "robotika",
    "rodokmen",
    "rohovka",
    "rokle",
    "rokoko",
    "romaneto",
    "ropovod",
    "ropucha",
    "rorejs",
    "rosol",
    "rostlina",
    "rotmistr",
    "rotoped",
    "rotunda",
    "roubenka",
    "roucho",
    "roup",
    "roura",
    "rovina",
    "rovnice",
    "rozbor",
    "rozchod",
    "rozdat",
    "rozeznat",
    "rozhodce",
    "rozinka",
    "rozjezd",
    "rozkaz",
    "rozloha",
    "rozmar",
    "rozpad",
    "rozruch",
    "rozsah",
    "roztok",
    "rozum",
    "rozvod",
    "rubrika",
    "ruchadlo",
    "rukavice",
    "rukopis",
    "ryba",
    "rybolov",
    "rychlost",
    "rydlo",
    "rypadlo",
    "rytina",
    "ryzost",
    "sadista",
    "sahat",
    "sako",
    "samec",
    "samizdat",
    "samota",
    "sanitka",
    "sardinka",
    "sasanka",
    "satelit",
    "sazba",
    "sazenice",
    "sbor",
    "schovat",
    "sebranka",
    "secese",
    "sedadlo",
    "sediment",
    "sedlo",
    "sehnat",
    "sejmout",
    "sekera",
    "sekta",
    "sekunda",
    "sekvoje",
    "semeno",
    "seno",
    "servis",
    "sesadit",
    "seshora",
    "seskok",
    "seslat",
    "sestra",
    "sesuv",
    "sesypat",
    "setba",
    "setina",
    "setkat",
    "setnout",
    "setrvat",
    "sever",
    "seznam",
    "shoda",
    "shrnout",
    "sifon",
    "silnice",
    "sirka",
    "sirotek",
    "sirup",
    "situace",
    "skafandr",
    "skalisko",
    "skanzen",
    "skaut",
    "skeptik",
    "skica",
    "skladba",
    "sklenice",
    "sklo",
    "skluz",
    "skoba",
    "skokan",
    "skoro",
    "skripta",
    "skrz",
    "skupina",
    "skvost",
    "skvrna",
    "slabika",
    "sladidlo",
    "slanina",
    "slast",
    "slavnost",
    "sledovat",
    "slepec",
    "sleva",
    "slezina",
    "slib",
    "slina",
    "sliznice",
    "slon",
    "sloupek",
    "slovo",
    "sluch",
    "sluha",
    "slunce",
    "slupka",
    "slza",
    "smaragd",
    "smetana",
    "smilstvo",
    "smlouva",
    "smog",
    "smrad",
    "smrk",
    "smrtka",
    "smutek",
    "smysl",
    "snad",
    "snaha",
    "snob",
    "sobota",
    "socha",
    "sodovka",
    "sokol",
    "sopka",
    "sotva",
    "souboj",
    "soucit",
    "soudce",
    "souhlas",
    "soulad",
    "soumrak",
    "souprava",
    "soused",
    "soutok",
    "souviset",
    "spalovna",
    "spasitel",
    "spis",
    "splav",
    "spodek",
    "spojenec",
    "spolu",
    "sponzor",
    "spornost",
    "spousta",
    "sprcha",
    "spustit",
    "sranda",
    "sraz",
    "srdce",
    "srna",
    "srnec",
    "srovnat",
    "srpen",
    "srst",
    "srub",
    "stanice",
    "starosta",
    "statika",
    "stavba",
    "stehno",
    "stezka",
    "stodola",
    "stolek",
    "stopa",
    "storno",
    "stoupat",
    "strach",
    "stres",
    "strhnout",
    "strom",
    "struna",
    "studna",
    "stupnice",
    "stvol",
    "styk",
    "subjekt",
    "subtropy",
    "suchar",
    "sudost",
    "sukno",
    "sundat",
    "sunout",
    "surikata",
    "surovina",
    "svah",
    "svalstvo",
    "svetr",
    "svatba",
    "svazek",
    "svisle",
    "svitek",
    "svoboda",
    "svodidlo",
    "svorka",
    "svrab",
    "sykavka",
    "sykot",
    "synek",
    "synovec",
    "sypat",
    "sypkost",
    "syrovost",
    "sysel",
    "sytost",
    "tabletka",
    "tabule",
    "tahoun",
    "tajemno",
    "tajfun",
    "tajga",
    "tajit",
    "tajnost",
    "taktika",
    "tamhle",
    "tampon",
    "tancovat",
    "tanec",
    "tanker",
    "tapeta",
    "tavenina",
    "tazatel",
    "technika",
    "tehdy",
    "tekutina",
    "telefon",
    "temnota",
    "tendence",
    "tenista",
    "tenor",
    "teplota",
    "tepna",
    "teprve",
    "terapie",
    "termoska",
    "textil",
    "ticho",
    "tiskopis",
    "titulek",
    "tkadlec",
    "tkanina",
    "tlapka",
    "tleskat",
    "tlukot",
    "tlupa",
    "tmel",
    "toaleta",
    "topinka",
    "topol",
    "torzo",
    "touha",
    "toulec",
    "tradice",
    "traktor",
    "tramp",
    "trasa",
    "traverza",
    "trefit",
    "trest",
    "trezor",
    "trhavina",
    "trhlina",
    "trochu",
    "trojice",
    "troska",
    "trouba",
    "trpce",
    "trpitel",
    "trpkost",
    "trubec",
    "truchlit",
    "truhlice",
    "trus",
    "trvat",
    "tudy",
    "tuhnout",
    "tuhost",
    "tundra",
    "turista",
    "turnaj",
    "tuzemsko",
    "tvaroh",
    "tvorba",
    "tvrdost",
    "tvrz",
    "tygr",
    "tykev",
    "ubohost",
    "uboze",
    "ubrat",
    "ubrousek",
    "ubrus",
    "ubytovna",
    "ucho",
    "uctivost",
    "udivit",
    "uhradit",
    "ujednat",
    "ujistit",
    "ujmout",
    "ukazatel",
    "uklidnit",
    "uklonit",
    "ukotvit",
    "ukrojit",
    "ulice",
    "ulita",
    "ulovit",
    "umyvadlo",
    "unavit",
    "uniforma",
    "uniknout",
    "upadnout",
    "uplatnit",
    "uplynout",
    "upoutat",
    "upravit",
    "uran",
    "urazit",
    "usednout",
    "usilovat",
    "usmrtit",
    "usnadnit",
    "usnout",
    "usoudit",
    "ustlat",
    "ustrnout",
    "utahovat",
    "utkat",
    "utlumit",
    "utonout",
    "utopenec",
    "utrousit",
    "uvalit",
    "uvolnit",
    "uvozovka",
    "uzdravit",
    "uzel",
    "uzenina",
    "uzlina",
    "uznat",
    "vagon",
    "valcha",
    "valoun",
    "vana",
    "vandal",
    "vanilka",
    "varan",
    "varhany",
    "varovat",
    "vcelku",
    "vchod",
    "vdova",
    "vedro",
    "vegetace",
    "vejce",
    "velbloud",
    "veletrh",
    "velitel",
    "velmoc",
    "velryba",
    "venkov",
    "veranda",
    "verze",
    "veselka",
    "veskrze",
    "vesnice",
    "vespodu",
    "vesta",
    "veterina",
    "veverka",
    "vibrace",
    "vichr",
    "videohra",
    "vidina",
    "vidle",
    "vila",
    "vinice",
    "viset",
    "vitalita",
    "vize",
    "vizitka",
    "vjezd",
    "vklad",
    "vkus",
    "vlajka",
    "vlak",
    "vlasec",
    "vlevo",
    "vlhkost",
    "vliv",
    "vlnovka",
    "vloupat",
    "vnucovat",
    "vnuk",
    "voda",
    "vodivost",
    "vodoznak",
    "vodstvo",
    "vojensky",
    "vojna",
    "vojsko",
    "volant",
    "volba",
    "volit",
    "volno",
    "voskovka",
    "vozidlo",
    "vozovna",
    "vpravo",
    "vrabec",
    "vracet",
    "vrah",
    "vrata",
    "vrba",
    "vrcholek",
    "vrhat",
    "vrstva",
    "vrtule",
    "vsadit",
    "vstoupit",
    "vstup",
    "vtip",
    "vybavit",
    "vybrat",
    "vychovat",
    "vydat",
    "vydra",
    "vyfotit",
    "vyhledat",
    "vyhnout",
    "vyhodit",
    "vyhradit",
    "vyhubit",
    "vyjasnit",
    "vyjet",
    "vyjmout",
    "vyklopit",
    "vykonat",
    "vylekat",
    "vymazat",
    "vymezit",
    "vymizet",
    "vymyslet",
    "vynechat",
    "vynikat",
    "vynutit",
    "vypadat",
    "vyplatit",
    "vypravit",
    "vypustit",
    "vyrazit",
    "vyrovnat",
    "vyrvat",
    "vyslovit",
    "vysoko",
    "vystavit",
    "vysunout",
    "vysypat",
    "vytasit",
    "vytesat",
    "vytratit",
    "vyvinout",
    "vyvolat",
    "vyvrhel",
    "vyzdobit",
    "vyznat",
    "vzadu",
    "vzbudit",
    "vzchopit",
    "vzdor",
    "vzduch",
    "vzdychat",
    "vzestup",
    "vzhledem",
    "vzkaz",
    "vzlykat",
    "vznik",
    "vzorek",
    "vzpoura",
    "vztah",
    "vztek",
    "xylofon",
    "zabrat",
    "zabydlet",
    "zachovat",
    "zadarmo",
    "zadusit",
    "zafoukat",
    "zahltit",
    "zahodit",
    "zahrada",
    "zahynout",
    "zajatec",
    "zajet",
    "zajistit",
    "zaklepat",
    "zakoupit",
    "zalepit",
    "zamezit",
    "zamotat",
    "zamyslet",
    "zanechat",
    "zanikat",
    "zaplatit",
    "zapojit",
    "zapsat",
    "zarazit",
    "zastavit",
    "zasunout",
    "zatajit",
    "zatemnit",
    "zatknout",
    "zaujmout",
    "zavalit",
    "zavelet",
    "zavinit",
    "zavolat",
    "zavrtat",
    "zazvonit",
    "zbavit",
    "zbrusu",
    "zbudovat",
    "zbytek",
    "zdaleka",
    "zdarma",
    "zdatnost",
    "zdivo",
    "zdobit",
    "zdroj",
    "zdvih",
    "zdymadlo",
    "zelenina",
    "zeman",
    "zemina",
    "zeptat",
    "zezadu",
    "zezdola",
    "zhatit",
    "zhltnout",
    "zhluboka",
    "zhotovit",
    "zhruba",
    "zima",
    "zimnice",
    "zjemnit",
    "zklamat",
    "zkoumat",
    "zkratka",
    "zkumavka",
    "zlato",
    "zlehka",
    "zloba",
    "zlom",
    "zlost",
    "zlozvyk",
    "zmapovat",
    "zmar",
    "zmatek",
    "zmije",
    "zmizet",
    "zmocnit",
    "zmodrat",
    "zmrzlina",
    "zmutovat",
    "znak",
    "znalost",
    "znamenat",
    "znovu",
    "zobrazit",
    "zotavit",
    "zoubek",
    "zoufale",
    "zplodit",
    "zpomalit",
    "zprava",
    "zprostit",
    "zprudka",
    "zprvu",
    "zrada",
    "zranit",
    "zrcadlo",
    "zrnitost",
    "zrno",
    "zrovna",
    "zrychlit",
    "zrzavost",
    "zticha",
    "ztratit",
    "zubovina",
    "zubr",
    "zvednout",
    "zvenku",
    "zvesela",
    "zvon",
    "zvrat",
    "zvukovod",
    "zvyk"
]
;
},366,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = [
    "的",
    "一",
    "是",
    "在",
    "不",
    "了",
    "有",
    "和",
    "人",
    "这",
    "中",
    "大",
    "为",
    "上",
    "个",
    "国",
    "我",
    "以",
    "要",
    "他",
    "时",
    "来",
    "用",
    "们",
    "生",
    "到",
    "作",
    "地",
    "于",
    "出",
    "就",
    "分",
    "对",
    "成",
    "会",
    "可",
    "主",
    "发",
    "年",
    "动",
    "同",
    "工",
    "也",
    "能",
    "下",
    "过",
    "子",
    "说",
    "产",
    "种",
    "面",
    "而",
    "方",
    "后",
    "多",
    "定",
    "行",
    "学",
    "法",
    "所",
    "民",
    "得",
    "经",
    "十",
    "三",
    "之",
    "进",
    "着",
    "等",
    "部",
    "度",
    "家",
    "电",
    "力",
    "里",
    "如",
    "水",
    "化",
    "高",
    "自",
    "二",
    "理",
    "起",
    "小",
    "物",
    "现",
    "实",
    "加",
    "量",
    "都",
    "两",
    "体",
    "制",
    "机",
    "当",
    "使",
    "点",
    "从",
    "业",
    "本",
    "去",
    "把",
    "性",
    "好",
    "应",
    "开",
    "它",
    "合",
    "还",
    "因",
    "由",
    "其",
    "些",
    "然",
    "前",
    "外",
    "天",
    "政",
    "四",
    "日",
    "那",
    "社",
    "义",
    "事",
    "平",
    "形",
    "相",
    "全",
    "表",
    "间",
    "样",
    "与",
    "关",
    "各",
    "重",
    "新",
    "线",
    "内",
    "数",
    "正",
    "心",
    "反",
    "你",
    "明",
    "看",
    "原",
    "又",
    "么",
    "利",
    "比",
    "或",
    "但",
    "质",
    "气",
    "第",
    "向",
    "道",
    "命",
    "此",
    "变",
    "条",
    "只",
    "没",
    "结",
    "解",
    "问",
    "意",
    "建",
    "月",
    "公",
    "无",
    "系",
    "军",
    "很",
    "情",
    "者",
    "最",
    "立",
    "代",
    "想",
    "已",
    "通",
    "并",
    "提",
    "直",
    "题",
    "党",
    "程",
    "展",
    "五",
    "果",
    "料",
    "象",
    "员",
    "革",
    "位",
    "入",
    "常",
    "文",
    "总",
    "次",
    "品",
    "式",
    "活",
    "设",
    "及",
    "管",
    "特",
    "件",
    "长",
    "求",
    "老",
    "头",
    "基",
    "资",
    "边",
    "流",
    "路",
    "级",
    "少",
    "图",
    "山",
    "统",
    "接",
    "知",
    "较",
    "将",
    "组",
    "见",
    "计",
    "别",
    "她",
    "手",
    "角",
    "期",
    "根",
    "论",
    "运",
    "农",
    "指",
    "几",
    "九",
    "区",
    "强",
    "放",
    "决",
    "西",
    "被",
    "干",
    "做",
    "必",
    "战",
    "先",
    "回",
    "则",
    "任",
    "取",
    "据",
    "处",
    "队",
    "南",
    "给",
    "色",
    "光",
    "门",
    "即",
    "保",
    "治",
    "北",
    "造",
    "百",
    "规",
    "热",
    "领",
    "七",
    "海",
    "口",
    "东",
    "导",
    "器",
    "压",
    "志",
    "世",
    "金",
    "增",
    "争",
    "济",
    "阶",
    "油",
    "思",
    "术",
    "极",
    "交",
    "受",
    "联",
    "什",
    "认",
    "六",
    "共",
    "权",
    "收",
    "证",
    "改",
    "清",
    "美",
    "再",
    "采",
    "转",
    "更",
    "单",
    "风",
    "切",
    "打",
    "白",
    "教",
    "速",
    "花",
    "带",
    "安",
    "场",
    "身",
    "车",
    "例",
    "真",
    "务",
    "具",
    "万",
    "每",
    "目",
    "至",
    "达",
    "走",
    "积",
    "示",
    "议",
    "声",
    "报",
    "斗",
    "完",
    "类",
    "八",
    "离",
    "华",
    "名",
    "确",
    "才",
    "科",
    "张",
    "信",
    "马",
    "节",
    "话",
    "米",
    "整",
    "空",
    "元",
    "况",
    "今",
    "集",
    "温",
    "传",
    "土",
    "许",
    "步",
    "群",
    "广",
    "石",
    "记",
    "需",
    "段",
    "研",
    "界",
    "拉",
    "林",
    "律",
    "叫",
    "且",
    "究",
    "观",
    "越",
    "织",
    "装",
    "影",
    "算",
    "低",
    "持",
    "音",
    "众",
    "书",
    "布",
    "复",
    "容",
    "儿",
    "须",
    "际",
    "商",
    "非",
    "验",
    "连",
    "断",
    "深",
    "难",
    "近",
    "矿",
    "千",
    "周",
    "委",
    "素",
    "技",
    "备",
    "半",
    "办",
    "青",
    "省",
    "列",
    "习",
    "响",
    "约",
    "支",
    "般",
    "史",
    "感",
    "劳",
    "便",
    "团",
    "往",
    "酸",
    "历",
    "市",
    "克",
    "何",
    "除",
    "消",
    "构",
    "府",
    "称",
    "太",
    "准",
    "精",
    "值",
    "号",
    "率",
    "族",
    "维",
    "划",
    "选",
    "标",
    "写",
    "存",
    "候",
    "毛",
    "亲",
    "快",
    "效",
    "斯",
    "院",
    "查",
    "江",
    "型",
    "眼",
    "王",
    "按",
    "格",
    "养",
    "易",
    "置",
    "派",
    "层",
    "片",
    "始",
    "却",
    "专",
    "状",
    "育",
    "厂",
    "京",
    "识",
    "适",
    "属",
    "圆",
    "包",
    "火",
    "住",
    "调",
    "满",
    "县",
    "局",
    "照",
    "参",
    "红",
    "细",
    "引",
    "听",
    "该",
    "铁",
    "价",
    "严",
    "首",
    "底",
    "液",
    "官",
    "德",
    "随",
    "病",
    "苏",
    "失",
    "尔",
    "死",
    "讲",
    "配",
    "女",
    "黄",
    "推",
    "显",
    "谈",
    "罪",
    "神",
    "艺",
    "呢",
    "席",
    "含",
    "企",
    "望",
    "密",
    "批",
    "营",
    "项",
    "防",
    "举",
    "球",
    "英",
    "氧",
    "势",
    "告",
    "李",
    "台",
    "落",
    "木",
    "帮",
    "轮",
    "破",
    "亚",
    "师",
    "围",
    "注",
    "远",
    "字",
    "材",
    "排",
    "供",
    "河",
    "态",
    "封",
    "另",
    "施",
    "减",
    "树",
    "溶",
    "怎",
    "止",
    "案",
    "言",
    "士",
    "均",
    "武",
    "固",
    "叶",
    "鱼",
    "波",
    "视",
    "仅",
    "费",
    "紧",
    "爱",
    "左",
    "章",
    "早",
    "朝",
    "害",
    "续",
    "轻",
    "服",
    "试",
    "食",
    "充",
    "兵",
    "源",
    "判",
    "护",
    "司",
    "足",
    "某",
    "练",
    "差",
    "致",
    "板",
    "田",
    "降",
    "黑",
    "犯",
    "负",
    "击",
    "范",
    "继",
    "兴",
    "似",
    "余",
    "坚",
    "曲",
    "输",
    "修",
    "故",
    "城",
    "夫",
    "够",
    "送",
    "笔",
    "船",
    "占",
    "右",
    "财",
    "吃",
    "富",
    "春",
    "职",
    "觉",
    "汉",
    "画",
    "功",
    "巴",
    "跟",
    "虽",
    "杂",
    "飞",
    "检",
    "吸",
    "助",
    "升",
    "阳",
    "互",
    "初",
    "创",
    "抗",
    "考",
    "投",
    "坏",
    "策",
    "古",
    "径",
    "换",
    "未",
    "跑",
    "留",
    "钢",
    "曾",
    "端",
    "责",
    "站",
    "简",
    "述",
    "钱",
    "副",
    "尽",
    "帝",
    "射",
    "草",
    "冲",
    "承",
    "独",
    "令",
    "限",
    "阿",
    "宣",
    "环",
    "双",
    "请",
    "超",
    "微",
    "让",
    "控",
    "州",
    "良",
    "轴",
    "找",
    "否",
    "纪",
    "益",
    "依",
    "优",
    "顶",
    "础",
    "载",
    "倒",
    "房",
    "突",
    "坐",
    "粉",
    "敌",
    "略",
    "客",
    "袁",
    "冷",
    "胜",
    "绝",
    "析",
    "块",
    "剂",
    "测",
    "丝",
    "协",
    "诉",
    "念",
    "陈",
    "仍",
    "罗",
    "盐",
    "友",
    "洋",
    "错",
    "苦",
    "夜",
    "刑",
    "移",
    "频",
    "逐",
    "靠",
    "混",
    "母",
    "短",
    "皮",
    "终",
    "聚",
    "汽",
    "村",
    "云",
    "哪",
    "既",
    "距",
    "卫",
    "停",
    "烈",
    "央",
    "察",
    "烧",
    "迅",
    "境",
    "若",
    "印",
    "洲",
    "刻",
    "括",
    "激",
    "孔",
    "搞",
    "甚",
    "室",
    "待",
    "核",
    "校",
    "散",
    "侵",
    "吧",
    "甲",
    "游",
    "久",
    "菜",
    "味",
    "旧",
    "模",
    "湖",
    "货",
    "损",
    "预",
    "阻",
    "毫",
    "普",
    "稳",
    "乙",
    "妈",
    "植",
    "息",
    "扩",
    "银",
    "语",
    "挥",
    "酒",
    "守",
    "拿",
    "序",
    "纸",
    "医",
    "缺",
    "雨",
    "吗",
    "针",
    "刘",
    "啊",
    "急",
    "唱",
    "误",
    "训",
    "愿",
    "审",
    "附",
    "获",
    "茶",
    "鲜",
    "粮",
    "斤",
    "孩",
    "脱",
    "硫",
    "肥",
    "善",
    "龙",
    "演",
    "父",
    "渐",
    "血",
    "欢",
    "械",
    "掌",
    "歌",
    "沙",
    "刚",
    "攻",
    "谓",
    "盾",
    "讨",
    "晚",
    "粒",
    "乱",
    "燃",
    "矛",
    "乎",
    "杀",
    "药",
    "宁",
    "鲁",
    "贵",
    "钟",
    "煤",
    "读",
    "班",
    "伯",
    "香",
    "介",
    "迫",
    "句",
    "丰",
    "培",
    "握",
    "兰",
    "担",
    "弦",
    "蛋",
    "沉",
    "假",
    "穿",
    "执",
    "答",
    "乐",
    "谁",
    "顺",
    "烟",
    "缩",
    "征",
    "脸",
    "喜",
    "松",
    "脚",
    "困",
    "异",
    "免",
    "背",
    "星",
    "福",
    "买",
    "染",
    "井",
    "概",
    "慢",
    "怕",
    "磁",
    "倍",
    "祖",
    "皇",
    "促",
    "静",
    "补",
    "评",
    "翻",
    "肉",
    "践",
    "尼",
    "衣",
    "宽",
    "扬",
    "棉",
    "希",
    "伤",
    "操",
    "垂",
    "秋",
    "宜",
    "氢",
    "套",
    "督",
    "振",
    "架",
    "亮",
    "末",
    "宪",
    "庆",
    "编",
    "牛",
    "触",
    "映",
    "雷",
    "销",
    "诗",
    "座",
    "居",
    "抓",
    "裂",
    "胞",
    "呼",
    "娘",
    "景",
    "威",
    "绿",
    "晶",
    "厚",
    "盟",
    "衡",
    "鸡",
    "孙",
    "延",
    "危",
    "胶",
    "屋",
    "乡",
    "临",
    "陆",
    "顾",
    "掉",
    "呀",
    "灯",
    "岁",
    "措",
    "束",
    "耐",
    "剧",
    "玉",
    "赵",
    "跳",
    "哥",
    "季",
    "课",
    "凯",
    "胡",
    "额",
    "款",
    "绍",
    "卷",
    "齐",
    "伟",
    "蒸",
    "殖",
    "永",
    "宗",
    "苗",
    "川",
    "炉",
    "岩",
    "弱",
    "零",
    "杨",
    "奏",
    "沿",
    "露",
    "杆",
    "探",
    "滑",
    "镇",
    "饭",
    "浓",
    "航",
    "怀",
    "赶",
    "库",
    "夺",
    "伊",
    "灵",
    "税",
    "途",
    "灭",
    "赛",
    "归",
    "召",
    "鼓",
    "播",
    "盘",
    "裁",
    "险",
    "康",
    "唯",
    "录",
    "菌",
    "纯",
    "借",
    "糖",
    "盖",
    "横",
    "符",
    "私",
    "努",
    "堂",
    "域",
    "枪",
    "润",
    "幅",
    "哈",
    "竟",
    "熟",
    "虫",
    "泽",
    "脑",
    "壤",
    "碳",
    "欧",
    "遍",
    "侧",
    "寨",
    "敢",
    "彻",
    "虑",
    "斜",
    "薄",
    "庭",
    "纳",
    "弹",
    "饲",
    "伸",
    "折",
    "麦",
    "湿",
    "暗",
    "荷",
    "瓦",
    "塞",
    "床",
    "筑",
    "恶",
    "户",
    "访",
    "塔",
    "奇",
    "透",
    "梁",
    "刀",
    "旋",
    "迹",
    "卡",
    "氯",
    "遇",
    "份",
    "毒",
    "泥",
    "退",
    "洗",
    "摆",
    "灰",
    "彩",
    "卖",
    "耗",
    "夏",
    "择",
    "忙",
    "铜",
    "献",
    "硬",
    "予",
    "繁",
    "圈",
    "雪",
    "函",
    "亦",
    "抽",
    "篇",
    "阵",
    "阴",
    "丁",
    "尺",
    "追",
    "堆",
    "雄",
    "迎",
    "泛",
    "爸",
    "楼",
    "避",
    "谋",
    "吨",
    "野",
    "猪",
    "旗",
    "累",
    "偏",
    "典",
    "馆",
    "索",
    "秦",
    "脂",
    "潮",
    "爷",
    "豆",
    "忽",
    "托",
    "惊",
    "塑",
    "遗",
    "愈",
    "朱",
    "替",
    "纤",
    "粗",
    "倾",
    "尚",
    "痛",
    "楚",
    "谢",
    "奋",
    "购",
    "磨",
    "君",
    "池",
    "旁",
    "碎",
    "骨",
    "监",
    "捕",
    "弟",
    "暴",
    "割",
    "贯",
    "殊",
    "释",
    "词",
    "亡",
    "壁",
    "顿",
    "宝",
    "午",
    "尘",
    "闻",
    "揭",
    "炮",
    "残",
    "冬",
    "桥",
    "妇",
    "警",
    "综",
    "招",
    "吴",
    "付",
    "浮",
    "遭",
    "徐",
    "您",
    "摇",
    "谷",
    "赞",
    "箱",
    "隔",
    "订",
    "男",
    "吹",
    "园",
    "纷",
    "唐",
    "败",
    "宋",
    "玻",
    "巨",
    "耕",
    "坦",
    "荣",
    "闭",
    "湾",
    "键",
    "凡",
    "驻",
    "锅",
    "救",
    "恩",
    "剥",
    "凝",
    "碱",
    "齿",
    "截",
    "炼",
    "麻",
    "纺",
    "禁",
    "废",
    "盛",
    "版",
    "缓",
    "净",
    "睛",
    "昌",
    "婚",
    "涉",
    "筒",
    "嘴",
    "插",
    "岸",
    "朗",
    "庄",
    "街",
    "藏",
    "姑",
    "贸",
    "腐",
    "奴",
    "啦",
    "惯",
    "乘",
    "伙",
    "恢",
    "匀",
    "纱",
    "扎",
    "辩",
    "耳",
    "彪",
    "臣",
    "亿",
    "璃",
    "抵",
    "脉",
    "秀",
    "萨",
    "俄",
    "网",
    "舞",
    "店",
    "喷",
    "纵",
    "寸",
    "汗",
    "挂",
    "洪",
    "贺",
    "闪",
    "柬",
    "爆",
    "烯",
    "津",
    "稻",
    "墙",
    "软",
    "勇",
    "像",
    "滚",
    "厘",
    "蒙",
    "芳",
    "肯",
    "坡",
    "柱",
    "荡",
    "腿",
    "仪",
    "旅",
    "尾",
    "轧",
    "冰",
    "贡",
    "登",
    "黎",
    "削",
    "钻",
    "勒",
    "逃",
    "障",
    "氨",
    "郭",
    "峰",
    "币",
    "港",
    "伏",
    "轨",
    "亩",
    "毕",
    "擦",
    "莫",
    "刺",
    "浪",
    "秘",
    "援",
    "株",
    "健",
    "售",
    "股",
    "岛",
    "甘",
    "泡",
    "睡",
    "童",
    "铸",
    "汤",
    "阀",
    "休",
    "汇",
    "舍",
    "牧",
    "绕",
    "炸",
    "哲",
    "磷",
    "绩",
    "朋",
    "淡",
    "尖",
    "启",
    "陷",
    "柴",
    "呈",
    "徒",
    "颜",
    "泪",
    "稍",
    "忘",
    "泵",
    "蓝",
    "拖",
    "洞",
    "授",
    "镜",
    "辛",
    "壮",
    "锋",
    "贫",
    "虚",
    "弯",
    "摩",
    "泰",
    "幼",
    "廷",
    "尊",
    "窗",
    "纲",
    "弄",
    "隶",
    "疑",
    "氏",
    "宫",
    "姐",
    "震",
    "瑞",
    "怪",
    "尤",
    "琴",
    "循",
    "描",
    "膜",
    "违",
    "夹",
    "腰",
    "缘",
    "珠",
    "穷",
    "森",
    "枝",
    "竹",
    "沟",
    "催",
    "绳",
    "忆",
    "邦",
    "剩",
    "幸",
    "浆",
    "栏",
    "拥",
    "牙",
    "贮",
    "礼",
    "滤",
    "钠",
    "纹",
    "罢",
    "拍",
    "咱",
    "喊",
    "袖",
    "埃",
    "勤",
    "罚",
    "焦",
    "潜",
    "伍",
    "墨",
    "欲",
    "缝",
    "姓",
    "刊",
    "饱",
    "仿",
    "奖",
    "铝",
    "鬼",
    "丽",
    "跨",
    "默",
    "挖",
    "链",
    "扫",
    "喝",
    "袋",
    "炭",
    "污",
    "幕",
    "诸",
    "弧",
    "励",
    "梅",
    "奶",
    "洁",
    "灾",
    "舟",
    "鉴",
    "苯",
    "讼",
    "抱",
    "毁",
    "懂",
    "寒",
    "智",
    "埔",
    "寄",
    "届",
    "跃",
    "渡",
    "挑",
    "丹",
    "艰",
    "贝",
    "碰",
    "拔",
    "爹",
    "戴",
    "码",
    "梦",
    "芽",
    "熔",
    "赤",
    "渔",
    "哭",
    "敬",
    "颗",
    "奔",
    "铅",
    "仲",
    "虎",
    "稀",
    "妹",
    "乏",
    "珍",
    "申",
    "桌",
    "遵",
    "允",
    "隆",
    "螺",
    "仓",
    "魏",
    "锐",
    "晓",
    "氮",
    "兼",
    "隐",
    "碍",
    "赫",
    "拨",
    "忠",
    "肃",
    "缸",
    "牵",
    "抢",
    "博",
    "巧",
    "壳",
    "兄",
    "杜",
    "讯",
    "诚",
    "碧",
    "祥",
    "柯",
    "页",
    "巡",
    "矩",
    "悲",
    "灌",
    "龄",
    "伦",
    "票",
    "寻",
    "桂",
    "铺",
    "圣",
    "恐",
    "恰",
    "郑",
    "趣",
    "抬",
    "荒",
    "腾",
    "贴",
    "柔",
    "滴",
    "猛",
    "阔",
    "辆",
    "妻",
    "填",
    "撤",
    "储",
    "签",
    "闹",
    "扰",
    "紫",
    "砂",
    "递",
    "戏",
    "吊",
    "陶",
    "伐",
    "喂",
    "疗",
    "瓶",
    "婆",
    "抚",
    "臂",
    "摸",
    "忍",
    "虾",
    "蜡",
    "邻",
    "胸",
    "巩",
    "挤",
    "偶",
    "弃",
    "槽",
    "劲",
    "乳",
    "邓",
    "吉",
    "仁",
    "烂",
    "砖",
    "租",
    "乌",
    "舰",
    "伴",
    "瓜",
    "浅",
    "丙",
    "暂",
    "燥",
    "橡",
    "柳",
    "迷",
    "暖",
    "牌",
    "秧",
    "胆",
    "详",
    "簧",
    "踏",
    "瓷",
    "谱",
    "呆",
    "宾",
    "糊",
    "洛",
    "辉",
    "愤",
    "竞",
    "隙",
    "怒",
    "粘",
    "乃",
    "绪",
    "肩",
    "籍",
    "敏",
    "涂",
    "熙",
    "皆",
    "侦",
    "悬",
    "掘",
    "享",
    "纠",
    "醒",
    "狂",
    "锁",
    "淀",
    "恨",
    "牲",
    "霸",
    "爬",
    "赏",
    "逆",
    "玩",
    "陵",
    "祝",
    "秒",
    "浙",
    "貌",
    "役",
    "彼",
    "悉",
    "鸭",
    "趋",
    "凤",
    "晨",
    "畜",
    "辈",
    "秩",
    "卵",
    "署",
    "梯",
    "炎",
    "滩",
    "棋",
    "驱",
    "筛",
    "峡",
    "冒",
    "啥",
    "寿",
    "译",
    "浸",
    "泉",
    "帽",
    "迟",
    "硅",
    "疆",
    "贷",
    "漏",
    "稿",
    "冠",
    "嫩",
    "胁",
    "芯",
    "牢",
    "叛",
    "蚀",
    "奥",
    "鸣",
    "岭",
    "羊",
    "凭",
    "串",
    "塘",
    "绘",
    "酵",
    "融",
    "盆",
    "锡",
    "庙",
    "筹",
    "冻",
    "辅",
    "摄",
    "袭",
    "筋",
    "拒",
    "僚",
    "旱",
    "钾",
    "鸟",
    "漆",
    "沈",
    "眉",
    "疏",
    "添",
    "棒",
    "穗",
    "硝",
    "韩",
    "逼",
    "扭",
    "侨",
    "凉",
    "挺",
    "碗",
    "栽",
    "炒",
    "杯",
    "患",
    "馏",
    "劝",
    "豪",
    "辽",
    "勃",
    "鸿",
    "旦",
    "吏",
    "拜",
    "狗",
    "埋",
    "辊",
    "掩",
    "饮",
    "搬",
    "骂",
    "辞",
    "勾",
    "扣",
    "估",
    "蒋",
    "绒",
    "雾",
    "丈",
    "朵",
    "姆",
    "拟",
    "宇",
    "辑",
    "陕",
    "雕",
    "偿",
    "蓄",
    "崇",
    "剪",
    "倡",
    "厅",
    "咬",
    "驶",
    "薯",
    "刷",
    "斥",
    "番",
    "赋",
    "奉",
    "佛",
    "浇",
    "漫",
    "曼",
    "扇",
    "钙",
    "桃",
    "扶",
    "仔",
    "返",
    "俗",
    "亏",
    "腔",
    "鞋",
    "棱",
    "覆",
    "框",
    "悄",
    "叔",
    "撞",
    "骗",
    "勘",
    "旺",
    "沸",
    "孤",
    "吐",
    "孟",
    "渠",
    "屈",
    "疾",
    "妙",
    "惜",
    "仰",
    "狠",
    "胀",
    "谐",
    "抛",
    "霉",
    "桑",
    "岗",
    "嘛",
    "衰",
    "盗",
    "渗",
    "脏",
    "赖",
    "涌",
    "甜",
    "曹",
    "阅",
    "肌",
    "哩",
    "厉",
    "烃",
    "纬",
    "毅",
    "昨",
    "伪",
    "症",
    "煮",
    "叹",
    "钉",
    "搭",
    "茎",
    "笼",
    "酷",
    "偷",
    "弓",
    "锥",
    "恒",
    "杰",
    "坑",
    "鼻",
    "翼",
    "纶",
    "叙",
    "狱",
    "逮",
    "罐",
    "络",
    "棚",
    "抑",
    "膨",
    "蔬",
    "寺",
    "骤",
    "穆",
    "冶",
    "枯",
    "册",
    "尸",
    "凸",
    "绅",
    "坯",
    "牺",
    "焰",
    "轰",
    "欣",
    "晋",
    "瘦",
    "御",
    "锭",
    "锦",
    "丧",
    "旬",
    "锻",
    "垄",
    "搜",
    "扑",
    "邀",
    "亭",
    "酯",
    "迈",
    "舒",
    "脆",
    "酶",
    "闲",
    "忧",
    "酚",
    "顽",
    "羽",
    "涨",
    "卸",
    "仗",
    "陪",
    "辟",
    "惩",
    "杭",
    "姚",
    "肚",
    "捉",
    "飘",
    "漂",
    "昆",
    "欺",
    "吾",
    "郎",
    "烷",
    "汁",
    "呵",
    "饰",
    "萧",
    "雅",
    "邮",
    "迁",
    "燕",
    "撒",
    "姻",
    "赴",
    "宴",
    "烦",
    "债",
    "帐",
    "斑",
    "铃",
    "旨",
    "醇",
    "董",
    "饼",
    "雏",
    "姿",
    "拌",
    "傅",
    "腹",
    "妥",
    "揉",
    "贤",
    "拆",
    "歪",
    "葡",
    "胺",
    "丢",
    "浩",
    "徽",
    "昂",
    "垫",
    "挡",
    "览",
    "贪",
    "慰",
    "缴",
    "汪",
    "慌",
    "冯",
    "诺",
    "姜",
    "谊",
    "凶",
    "劣",
    "诬",
    "耀",
    "昏",
    "躺",
    "盈",
    "骑",
    "乔",
    "溪",
    "丛",
    "卢",
    "抹",
    "闷",
    "咨",
    "刮",
    "驾",
    "缆",
    "悟",
    "摘",
    "铒",
    "掷",
    "颇",
    "幻",
    "柄",
    "惠",
    "惨",
    "佳",
    "仇",
    "腊",
    "窝",
    "涤",
    "剑",
    "瞧",
    "堡",
    "泼",
    "葱",
    "罩",
    "霍",
    "捞",
    "胎",
    "苍",
    "滨",
    "俩",
    "捅",
    "湘",
    "砍",
    "霞",
    "邵",
    "萄",
    "疯",
    "淮",
    "遂",
    "熊",
    "粪",
    "烘",
    "宿",
    "档",
    "戈",
    "驳",
    "嫂",
    "裕",
    "徙",
    "箭",
    "捐",
    "肠",
    "撑",
    "晒",
    "辨",
    "殿",
    "莲",
    "摊",
    "搅",
    "酱",
    "屏",
    "疫",
    "哀",
    "蔡",
    "堵",
    "沫",
    "皱",
    "畅",
    "叠",
    "阁",
    "莱",
    "敲",
    "辖",
    "钩",
    "痕",
    "坝",
    "巷",
    "饿",
    "祸",
    "丘",
    "玄",
    "溜",
    "曰",
    "逻",
    "彭",
    "尝",
    "卿",
    "妨",
    "艇",
    "吞",
    "韦",
    "怨",
    "矮",
    "歇"
]
;
},367,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = [
    "的",
    "一",
    "是",
    "在",
    "不",
    "了",
    "有",
    "和",
    "人",
    "這",
    "中",
    "大",
    "為",
    "上",
    "個",
    "國",
    "我",
    "以",
    "要",
    "他",
    "時",
    "來",
    "用",
    "們",
    "生",
    "到",
    "作",
    "地",
    "於",
    "出",
    "就",
    "分",
    "對",
    "成",
    "會",
    "可",
    "主",
    "發",
    "年",
    "動",
    "同",
    "工",
    "也",
    "能",
    "下",
    "過",
    "子",
    "說",
    "產",
    "種",
    "面",
    "而",
    "方",
    "後",
    "多",
    "定",
    "行",
    "學",
    "法",
    "所",
    "民",
    "得",
    "經",
    "十",
    "三",
    "之",
    "進",
    "著",
    "等",
    "部",
    "度",
    "家",
    "電",
    "力",
    "裡",
    "如",
    "水",
    "化",
    "高",
    "自",
    "二",
    "理",
    "起",
    "小",
    "物",
    "現",
    "實",
    "加",
    "量",
    "都",
    "兩",
    "體",
    "制",
    "機",
    "當",
    "使",
    "點",
    "從",
    "業",
    "本",
    "去",
    "把",
    "性",
    "好",
    "應",
    "開",
    "它",
    "合",
    "還",
    "因",
    "由",
    "其",
    "些",
    "然",
    "前",
    "外",
    "天",
    "政",
    "四",
    "日",
    "那",
    "社",
    "義",
    "事",
    "平",
    "形",
    "相",
    "全",
    "表",
    "間",
    "樣",
    "與",
    "關",
    "各",
    "重",
    "新",
    "線",
    "內",
    "數",
    "正",
    "心",
    "反",
    "你",
    "明",
    "看",
    "原",
    "又",
    "麼",
    "利",
    "比",
    "或",
    "但",
    "質",
    "氣",
    "第",
    "向",
    "道",
    "命",
    "此",
    "變",
    "條",
    "只",
    "沒",
    "結",
    "解",
    "問",
    "意",
    "建",
    "月",
    "公",
    "無",
    "系",
    "軍",
    "很",
    "情",
    "者",
    "最",
    "立",
    "代",
    "想",
    "已",
    "通",
    "並",
    "提",
    "直",
    "題",
    "黨",
    "程",
    "展",
    "五",
    "果",
    "料",
    "象",
    "員",
    "革",
    "位",
    "入",
    "常",
    "文",
    "總",
    "次",
    "品",
    "式",
    "活",
    "設",
    "及",
    "管",
    "特",
    "件",
    "長",
    "求",
    "老",
    "頭",
    "基",
    "資",
    "邊",
    "流",
    "路",
    "級",
    "少",
    "圖",
    "山",
    "統",
    "接",
    "知",
    "較",
    "將",
    "組",
    "見",
    "計",
    "別",
    "她",
    "手",
    "角",
    "期",
    "根",
    "論",
    "運",
    "農",
    "指",
    "幾",
    "九",
    "區",
    "強",
    "放",
    "決",
    "西",
    "被",
    "幹",
    "做",
    "必",
    "戰",
    "先",
    "回",
    "則",
    "任",
    "取",
    "據",
    "處",
    "隊",
    "南",
    "給",
    "色",
    "光",
    "門",
    "即",
    "保",
    "治",
    "北",
    "造",
    "百",
    "規",
    "熱",
    "領",
    "七",
    "海",
    "口",
    "東",
    "導",
    "器",
    "壓",
    "志",
    "世",
    "金",
    "增",
    "爭",
    "濟",
    "階",
    "油",
    "思",
    "術",
    "極",
    "交",
    "受",
    "聯",
    "什",
    "認",
    "六",
    "共",
    "權",
    "收",
    "證",
    "改",
    "清",
    "美",
    "再",
    "採",
    "轉",
    "更",
    "單",
    "風",
    "切",
    "打",
    "白",
    "教",
    "速",
    "花",
    "帶",
    "安",
    "場",
    "身",
    "車",
    "例",
    "真",
    "務",
    "具",
    "萬",
    "每",
    "目",
    "至",
    "達",
    "走",
    "積",
    "示",
    "議",
    "聲",
    "報",
    "鬥",
    "完",
    "類",
    "八",
    "離",
    "華",
    "名",
    "確",
    "才",
    "科",
    "張",
    "信",
    "馬",
    "節",
    "話",
    "米",
    "整",
    "空",
    "元",
    "況",
    "今",
    "集",
    "溫",
    "傳",
    "土",
    "許",
    "步",
    "群",
    "廣",
    "石",
    "記",
    "需",
    "段",
    "研",
    "界",
    "拉",
    "林",
    "律",
    "叫",
    "且",
    "究",
    "觀",
    "越",
    "織",
    "裝",
    "影",
    "算",
    "低",
    "持",
    "音",
    "眾",
    "書",
    "布",
    "复",
    "容",
    "兒",
    "須",
    "際",
    "商",
    "非",
    "驗",
    "連",
    "斷",
    "深",
    "難",
    "近",
    "礦",
    "千",
    "週",
    "委",
    "素",
    "技",
    "備",
    "半",
    "辦",
    "青",
    "省",
    "列",
    "習",
    "響",
    "約",
    "支",
    "般",
    "史",
    "感",
    "勞",
    "便",
    "團",
    "往",
    "酸",
    "歷",
    "市",
    "克",
    "何",
    "除",
    "消",
    "構",
    "府",
    "稱",
    "太",
    "準",
    "精",
    "值",
    "號",
    "率",
    "族",
    "維",
    "劃",
    "選",
    "標",
    "寫",
    "存",
    "候",
    "毛",
    "親",
    "快",
    "效",
    "斯",
    "院",
    "查",
    "江",
    "型",
    "眼",
    "王",
    "按",
    "格",
    "養",
    "易",
    "置",
    "派",
    "層",
    "片",
    "始",
    "卻",
    "專",
    "狀",
    "育",
    "廠",
    "京",
    "識",
    "適",
    "屬",
    "圓",
    "包",
    "火",
    "住",
    "調",
    "滿",
    "縣",
    "局",
    "照",
    "參",
    "紅",
    "細",
    "引",
    "聽",
    "該",
    "鐵",
    "價",
    "嚴",
    "首",
    "底",
    "液",
    "官",
    "德",
    "隨",
    "病",
    "蘇",
    "失",
    "爾",
    "死",
    "講",
    "配",
    "女",
    "黃",
    "推",
    "顯",
    "談",
    "罪",
    "神",
    "藝",
    "呢",
    "席",
    "含",
    "企",
    "望",
    "密",
    "批",
    "營",
    "項",
    "防",
    "舉",
    "球",
    "英",
    "氧",
    "勢",
    "告",
    "李",
    "台",
    "落",
    "木",
    "幫",
    "輪",
    "破",
    "亞",
    "師",
    "圍",
    "注",
    "遠",
    "字",
    "材",
    "排",
    "供",
    "河",
    "態",
    "封",
    "另",
    "施",
    "減",
    "樹",
    "溶",
    "怎",
    "止",
    "案",
    "言",
    "士",
    "均",
    "武",
    "固",
    "葉",
    "魚",
    "波",
    "視",
    "僅",
    "費",
    "緊",
    "愛",
    "左",
    "章",
    "早",
    "朝",
    "害",
    "續",
    "輕",
    "服",
    "試",
    "食",
    "充",
    "兵",
    "源",
    "判",
    "護",
    "司",
    "足",
    "某",
    "練",
    "差",
    "致",
    "板",
    "田",
    "降",
    "黑",
    "犯",
    "負",
    "擊",
    "范",
    "繼",
    "興",
    "似",
    "餘",
    "堅",
    "曲",
    "輸",
    "修",
    "故",
    "城",
    "夫",
    "夠",
    "送",
    "筆",
    "船",
    "佔",
    "右",
    "財",
    "吃",
    "富",
    "春",
    "職",
    "覺",
    "漢",
    "畫",
    "功",
    "巴",
    "跟",
    "雖",
    "雜",
    "飛",
    "檢",
    "吸",
    "助",
    "昇",
    "陽",
    "互",
    "初",
    "創",
    "抗",
    "考",
    "投",
    "壞",
    "策",
    "古",
    "徑",
    "換",
    "未",
    "跑",
    "留",
    "鋼",
    "曾",
    "端",
    "責",
    "站",
    "簡",
    "述",
    "錢",
    "副",
    "盡",
    "帝",
    "射",
    "草",
    "衝",
    "承",
    "獨",
    "令",
    "限",
    "阿",
    "宣",
    "環",
    "雙",
    "請",
    "超",
    "微",
    "讓",
    "控",
    "州",
    "良",
    "軸",
    "找",
    "否",
    "紀",
    "益",
    "依",
    "優",
    "頂",
    "礎",
    "載",
    "倒",
    "房",
    "突",
    "坐",
    "粉",
    "敵",
    "略",
    "客",
    "袁",
    "冷",
    "勝",
    "絕",
    "析",
    "塊",
    "劑",
    "測",
    "絲",
    "協",
    "訴",
    "念",
    "陳",
    "仍",
    "羅",
    "鹽",
    "友",
    "洋",
    "錯",
    "苦",
    "夜",
    "刑",
    "移",
    "頻",
    "逐",
    "靠",
    "混",
    "母",
    "短",
    "皮",
    "終",
    "聚",
    "汽",
    "村",
    "雲",
    "哪",
    "既",
    "距",
    "衛",
    "停",
    "烈",
    "央",
    "察",
    "燒",
    "迅",
    "境",
    "若",
    "印",
    "洲",
    "刻",
    "括",
    "激",
    "孔",
    "搞",
    "甚",
    "室",
    "待",
    "核",
    "校",
    "散",
    "侵",
    "吧",
    "甲",
    "遊",
    "久",
    "菜",
    "味",
    "舊",
    "模",
    "湖",
    "貨",
    "損",
    "預",
    "阻",
    "毫",
    "普",
    "穩",
    "乙",
    "媽",
    "植",
    "息",
    "擴",
    "銀",
    "語",
    "揮",
    "酒",
    "守",
    "拿",
    "序",
    "紙",
    "醫",
    "缺",
    "雨",
    "嗎",
    "針",
    "劉",
    "啊",
    "急",
    "唱",
    "誤",
    "訓",
    "願",
    "審",
    "附",
    "獲",
    "茶",
    "鮮",
    "糧",
    "斤",
    "孩",
    "脫",
    "硫",
    "肥",
    "善",
    "龍",
    "演",
    "父",
    "漸",
    "血",
    "歡",
    "械",
    "掌",
    "歌",
    "沙",
    "剛",
    "攻",
    "謂",
    "盾",
    "討",
    "晚",
    "粒",
    "亂",
    "燃",
    "矛",
    "乎",
    "殺",
    "藥",
    "寧",
    "魯",
    "貴",
    "鐘",
    "煤",
    "讀",
    "班",
    "伯",
    "香",
    "介",
    "迫",
    "句",
    "豐",
    "培",
    "握",
    "蘭",
    "擔",
    "弦",
    "蛋",
    "沉",
    "假",
    "穿",
    "執",
    "答",
    "樂",
    "誰",
    "順",
    "煙",
    "縮",
    "徵",
    "臉",
    "喜",
    "松",
    "腳",
    "困",
    "異",
    "免",
    "背",
    "星",
    "福",
    "買",
    "染",
    "井",
    "概",
    "慢",
    "怕",
    "磁",
    "倍",
    "祖",
    "皇",
    "促",
    "靜",
    "補",
    "評",
    "翻",
    "肉",
    "踐",
    "尼",
    "衣",
    "寬",
    "揚",
    "棉",
    "希",
    "傷",
    "操",
    "垂",
    "秋",
    "宜",
    "氫",
    "套",
    "督",
    "振",
    "架",
    "亮",
    "末",
    "憲",
    "慶",
    "編",
    "牛",
    "觸",
    "映",
    "雷",
    "銷",
    "詩",
    "座",
    "居",
    "抓",
    "裂",
    "胞",
    "呼",
    "娘",
    "景",
    "威",
    "綠",
    "晶",
    "厚",
    "盟",
    "衡",
    "雞",
    "孫",
    "延",
    "危",
    "膠",
    "屋",
    "鄉",
    "臨",
    "陸",
    "顧",
    "掉",
    "呀",
    "燈",
    "歲",
    "措",
    "束",
    "耐",
    "劇",
    "玉",
    "趙",
    "跳",
    "哥",
    "季",
    "課",
    "凱",
    "胡",
    "額",
    "款",
    "紹",
    "卷",
    "齊",
    "偉",
    "蒸",
    "殖",
    "永",
    "宗",
    "苗",
    "川",
    "爐",
    "岩",
    "弱",
    "零",
    "楊",
    "奏",
    "沿",
    "露",
    "桿",
    "探",
    "滑",
    "鎮",
    "飯",
    "濃",
    "航",
    "懷",
    "趕",
    "庫",
    "奪",
    "伊",
    "靈",
    "稅",
    "途",
    "滅",
    "賽",
    "歸",
    "召",
    "鼓",
    "播",
    "盤",
    "裁",
    "險",
    "康",
    "唯",
    "錄",
    "菌",
    "純",
    "借",
    "糖",
    "蓋",
    "橫",
    "符",
    "私",
    "努",
    "堂",
    "域",
    "槍",
    "潤",
    "幅",
    "哈",
    "竟",
    "熟",
    "蟲",
    "澤",
    "腦",
    "壤",
    "碳",
    "歐",
    "遍",
    "側",
    "寨",
    "敢",
    "徹",
    "慮",
    "斜",
    "薄",
    "庭",
    "納",
    "彈",
    "飼",
    "伸",
    "折",
    "麥",
    "濕",
    "暗",
    "荷",
    "瓦",
    "塞",
    "床",
    "築",
    "惡",
    "戶",
    "訪",
    "塔",
    "奇",
    "透",
    "梁",
    "刀",
    "旋",
    "跡",
    "卡",
    "氯",
    "遇",
    "份",
    "毒",
    "泥",
    "退",
    "洗",
    "擺",
    "灰",
    "彩",
    "賣",
    "耗",
    "夏",
    "擇",
    "忙",
    "銅",
    "獻",
    "硬",
    "予",
    "繁",
    "圈",
    "雪",
    "函",
    "亦",
    "抽",
    "篇",
    "陣",
    "陰",
    "丁",
    "尺",
    "追",
    "堆",
    "雄",
    "迎",
    "泛",
    "爸",
    "樓",
    "避",
    "謀",
    "噸",
    "野",
    "豬",
    "旗",
    "累",
    "偏",
    "典",
    "館",
    "索",
    "秦",
    "脂",
    "潮",
    "爺",
    "豆",
    "忽",
    "托",
    "驚",
    "塑",
    "遺",
    "愈",
    "朱",
    "替",
    "纖",
    "粗",
    "傾",
    "尚",
    "痛",
    "楚",
    "謝",
    "奮",
    "購",
    "磨",
    "君",
    "池",
    "旁",
    "碎",
    "骨",
    "監",
    "捕",
    "弟",
    "暴",
    "割",
    "貫",
    "殊",
    "釋",
    "詞",
    "亡",
    "壁",
    "頓",
    "寶",
    "午",
    "塵",
    "聞",
    "揭",
    "炮",
    "殘",
    "冬",
    "橋",
    "婦",
    "警",
    "綜",
    "招",
    "吳",
    "付",
    "浮",
    "遭",
    "徐",
    "您",
    "搖",
    "谷",
    "贊",
    "箱",
    "隔",
    "訂",
    "男",
    "吹",
    "園",
    "紛",
    "唐",
    "敗",
    "宋",
    "玻",
    "巨",
    "耕",
    "坦",
    "榮",
    "閉",
    "灣",
    "鍵",
    "凡",
    "駐",
    "鍋",
    "救",
    "恩",
    "剝",
    "凝",
    "鹼",
    "齒",
    "截",
    "煉",
    "麻",
    "紡",
    "禁",
    "廢",
    "盛",
    "版",
    "緩",
    "淨",
    "睛",
    "昌",
    "婚",
    "涉",
    "筒",
    "嘴",
    "插",
    "岸",
    "朗",
    "莊",
    "街",
    "藏",
    "姑",
    "貿",
    "腐",
    "奴",
    "啦",
    "慣",
    "乘",
    "夥",
    "恢",
    "勻",
    "紗",
    "扎",
    "辯",
    "耳",
    "彪",
    "臣",
    "億",
    "璃",
    "抵",
    "脈",
    "秀",
    "薩",
    "俄",
    "網",
    "舞",
    "店",
    "噴",
    "縱",
    "寸",
    "汗",
    "掛",
    "洪",
    "賀",
    "閃",
    "柬",
    "爆",
    "烯",
    "津",
    "稻",
    "牆",
    "軟",
    "勇",
    "像",
    "滾",
    "厘",
    "蒙",
    "芳",
    "肯",
    "坡",
    "柱",
    "盪",
    "腿",
    "儀",
    "旅",
    "尾",
    "軋",
    "冰",
    "貢",
    "登",
    "黎",
    "削",
    "鑽",
    "勒",
    "逃",
    "障",
    "氨",
    "郭",
    "峰",
    "幣",
    "港",
    "伏",
    "軌",
    "畝",
    "畢",
    "擦",
    "莫",
    "刺",
    "浪",
    "秘",
    "援",
    "株",
    "健",
    "售",
    "股",
    "島",
    "甘",
    "泡",
    "睡",
    "童",
    "鑄",
    "湯",
    "閥",
    "休",
    "匯",
    "舍",
    "牧",
    "繞",
    "炸",
    "哲",
    "磷",
    "績",
    "朋",
    "淡",
    "尖",
    "啟",
    "陷",
    "柴",
    "呈",
    "徒",
    "顏",
    "淚",
    "稍",
    "忘",
    "泵",
    "藍",
    "拖",
    "洞",
    "授",
    "鏡",
    "辛",
    "壯",
    "鋒",
    "貧",
    "虛",
    "彎",
    "摩",
    "泰",
    "幼",
    "廷",
    "尊",
    "窗",
    "綱",
    "弄",
    "隸",
    "疑",
    "氏",
    "宮",
    "姐",
    "震",
    "瑞",
    "怪",
    "尤",
    "琴",
    "循",
    "描",
    "膜",
    "違",
    "夾",
    "腰",
    "緣",
    "珠",
    "窮",
    "森",
    "枝",
    "竹",
    "溝",
    "催",
    "繩",
    "憶",
    "邦",
    "剩",
    "幸",
    "漿",
    "欄",
    "擁",
    "牙",
    "貯",
    "禮",
    "濾",
    "鈉",
    "紋",
    "罷",
    "拍",
    "咱",
    "喊",
    "袖",
    "埃",
    "勤",
    "罰",
    "焦",
    "潛",
    "伍",
    "墨",
    "欲",
    "縫",
    "姓",
    "刊",
    "飽",
    "仿",
    "獎",
    "鋁",
    "鬼",
    "麗",
    "跨",
    "默",
    "挖",
    "鏈",
    "掃",
    "喝",
    "袋",
    "炭",
    "污",
    "幕",
    "諸",
    "弧",
    "勵",
    "梅",
    "奶",
    "潔",
    "災",
    "舟",
    "鑑",
    "苯",
    "訟",
    "抱",
    "毀",
    "懂",
    "寒",
    "智",
    "埔",
    "寄",
    "屆",
    "躍",
    "渡",
    "挑",
    "丹",
    "艱",
    "貝",
    "碰",
    "拔",
    "爹",
    "戴",
    "碼",
    "夢",
    "芽",
    "熔",
    "赤",
    "漁",
    "哭",
    "敬",
    "顆",
    "奔",
    "鉛",
    "仲",
    "虎",
    "稀",
    "妹",
    "乏",
    "珍",
    "申",
    "桌",
    "遵",
    "允",
    "隆",
    "螺",
    "倉",
    "魏",
    "銳",
    "曉",
    "氮",
    "兼",
    "隱",
    "礙",
    "赫",
    "撥",
    "忠",
    "肅",
    "缸",
    "牽",
    "搶",
    "博",
    "巧",
    "殼",
    "兄",
    "杜",
    "訊",
    "誠",
    "碧",
    "祥",
    "柯",
    "頁",
    "巡",
    "矩",
    "悲",
    "灌",
    "齡",
    "倫",
    "票",
    "尋",
    "桂",
    "鋪",
    "聖",
    "恐",
    "恰",
    "鄭",
    "趣",
    "抬",
    "荒",
    "騰",
    "貼",
    "柔",
    "滴",
    "猛",
    "闊",
    "輛",
    "妻",
    "填",
    "撤",
    "儲",
    "簽",
    "鬧",
    "擾",
    "紫",
    "砂",
    "遞",
    "戲",
    "吊",
    "陶",
    "伐",
    "餵",
    "療",
    "瓶",
    "婆",
    "撫",
    "臂",
    "摸",
    "忍",
    "蝦",
    "蠟",
    "鄰",
    "胸",
    "鞏",
    "擠",
    "偶",
    "棄",
    "槽",
    "勁",
    "乳",
    "鄧",
    "吉",
    "仁",
    "爛",
    "磚",
    "租",
    "烏",
    "艦",
    "伴",
    "瓜",
    "淺",
    "丙",
    "暫",
    "燥",
    "橡",
    "柳",
    "迷",
    "暖",
    "牌",
    "秧",
    "膽",
    "詳",
    "簧",
    "踏",
    "瓷",
    "譜",
    "呆",
    "賓",
    "糊",
    "洛",
    "輝",
    "憤",
    "競",
    "隙",
    "怒",
    "粘",
    "乃",
    "緒",
    "肩",
    "籍",
    "敏",
    "塗",
    "熙",
    "皆",
    "偵",
    "懸",
    "掘",
    "享",
    "糾",
    "醒",
    "狂",
    "鎖",
    "淀",
    "恨",
    "牲",
    "霸",
    "爬",
    "賞",
    "逆",
    "玩",
    "陵",
    "祝",
    "秒",
    "浙",
    "貌",
    "役",
    "彼",
    "悉",
    "鴨",
    "趨",
    "鳳",
    "晨",
    "畜",
    "輩",
    "秩",
    "卵",
    "署",
    "梯",
    "炎",
    "灘",
    "棋",
    "驅",
    "篩",
    "峽",
    "冒",
    "啥",
    "壽",
    "譯",
    "浸",
    "泉",
    "帽",
    "遲",
    "矽",
    "疆",
    "貸",
    "漏",
    "稿",
    "冠",
    "嫩",
    "脅",
    "芯",
    "牢",
    "叛",
    "蝕",
    "奧",
    "鳴",
    "嶺",
    "羊",
    "憑",
    "串",
    "塘",
    "繪",
    "酵",
    "融",
    "盆",
    "錫",
    "廟",
    "籌",
    "凍",
    "輔",
    "攝",
    "襲",
    "筋",
    "拒",
    "僚",
    "旱",
    "鉀",
    "鳥",
    "漆",
    "沈",
    "眉",
    "疏",
    "添",
    "棒",
    "穗",
    "硝",
    "韓",
    "逼",
    "扭",
    "僑",
    "涼",
    "挺",
    "碗",
    "栽",
    "炒",
    "杯",
    "患",
    "餾",
    "勸",
    "豪",
    "遼",
    "勃",
    "鴻",
    "旦",
    "吏",
    "拜",
    "狗",
    "埋",
    "輥",
    "掩",
    "飲",
    "搬",
    "罵",
    "辭",
    "勾",
    "扣",
    "估",
    "蔣",
    "絨",
    "霧",
    "丈",
    "朵",
    "姆",
    "擬",
    "宇",
    "輯",
    "陝",
    "雕",
    "償",
    "蓄",
    "崇",
    "剪",
    "倡",
    "廳",
    "咬",
    "駛",
    "薯",
    "刷",
    "斥",
    "番",
    "賦",
    "奉",
    "佛",
    "澆",
    "漫",
    "曼",
    "扇",
    "鈣",
    "桃",
    "扶",
    "仔",
    "返",
    "俗",
    "虧",
    "腔",
    "鞋",
    "棱",
    "覆",
    "框",
    "悄",
    "叔",
    "撞",
    "騙",
    "勘",
    "旺",
    "沸",
    "孤",
    "吐",
    "孟",
    "渠",
    "屈",
    "疾",
    "妙",
    "惜",
    "仰",
    "狠",
    "脹",
    "諧",
    "拋",
    "黴",
    "桑",
    "崗",
    "嘛",
    "衰",
    "盜",
    "滲",
    "臟",
    "賴",
    "湧",
    "甜",
    "曹",
    "閱",
    "肌",
    "哩",
    "厲",
    "烴",
    "緯",
    "毅",
    "昨",
    "偽",
    "症",
    "煮",
    "嘆",
    "釘",
    "搭",
    "莖",
    "籠",
    "酷",
    "偷",
    "弓",
    "錐",
    "恆",
    "傑",
    "坑",
    "鼻",
    "翼",
    "綸",
    "敘",
    "獄",
    "逮",
    "罐",
    "絡",
    "棚",
    "抑",
    "膨",
    "蔬",
    "寺",
    "驟",
    "穆",
    "冶",
    "枯",
    "冊",
    "屍",
    "凸",
    "紳",
    "坯",
    "犧",
    "焰",
    "轟",
    "欣",
    "晉",
    "瘦",
    "禦",
    "錠",
    "錦",
    "喪",
    "旬",
    "鍛",
    "壟",
    "搜",
    "撲",
    "邀",
    "亭",
    "酯",
    "邁",
    "舒",
    "脆",
    "酶",
    "閒",
    "憂",
    "酚",
    "頑",
    "羽",
    "漲",
    "卸",
    "仗",
    "陪",
    "闢",
    "懲",
    "杭",
    "姚",
    "肚",
    "捉",
    "飄",
    "漂",
    "昆",
    "欺",
    "吾",
    "郎",
    "烷",
    "汁",
    "呵",
    "飾",
    "蕭",
    "雅",
    "郵",
    "遷",
    "燕",
    "撒",
    "姻",
    "赴",
    "宴",
    "煩",
    "債",
    "帳",
    "斑",
    "鈴",
    "旨",
    "醇",
    "董",
    "餅",
    "雛",
    "姿",
    "拌",
    "傅",
    "腹",
    "妥",
    "揉",
    "賢",
    "拆",
    "歪",
    "葡",
    "胺",
    "丟",
    "浩",
    "徽",
    "昂",
    "墊",
    "擋",
    "覽",
    "貪",
    "慰",
    "繳",
    "汪",
    "慌",
    "馮",
    "諾",
    "姜",
    "誼",
    "兇",
    "劣",
    "誣",
    "耀",
    "昏",
    "躺",
    "盈",
    "騎",
    "喬",
    "溪",
    "叢",
    "盧",
    "抹",
    "悶",
    "諮",
    "刮",
    "駕",
    "纜",
    "悟",
    "摘",
    "鉺",
    "擲",
    "頗",
    "幻",
    "柄",
    "惠",
    "慘",
    "佳",
    "仇",
    "臘",
    "窩",
    "滌",
    "劍",
    "瞧",
    "堡",
    "潑",
    "蔥",
    "罩",
    "霍",
    "撈",
    "胎",
    "蒼",
    "濱",
    "倆",
    "捅",
    "湘",
    "砍",
    "霞",
    "邵",
    "萄",
    "瘋",
    "淮",
    "遂",
    "熊",
    "糞",
    "烘",
    "宿",
    "檔",
    "戈",
    "駁",
    "嫂",
    "裕",
    "徙",
    "箭",
    "捐",
    "腸",
    "撐",
    "曬",
    "辨",
    "殿",
    "蓮",
    "攤",
    "攪",
    "醬",
    "屏",
    "疫",
    "哀",
    "蔡",
    "堵",
    "沫",
    "皺",
    "暢",
    "疊",
    "閣",
    "萊",
    "敲",
    "轄",
    "鉤",
    "痕",
    "壩",
    "巷",
    "餓",
    "禍",
    "丘",
    "玄",
    "溜",
    "曰",
    "邏",
    "彭",
    "嘗",
    "卿",
    "妨",
    "艇",
    "吞",
    "韋",
    "怨",
    "矮",
    "歇"
]
;
},368,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = [
    "가격",
    "가끔",
    "가난",
    "가능",
    "가득",
    "가르침",
    "가뭄",
    "가방",
    "가상",
    "가슴",
    "가운데",
    "가을",
    "가이드",
    "가입",
    "가장",
    "가정",
    "가족",
    "가죽",
    "각오",
    "각자",
    "간격",
    "간부",
    "간섭",
    "간장",
    "간접",
    "간판",
    "갈등",
    "갈비",
    "갈색",
    "갈증",
    "감각",
    "감기",
    "감소",
    "감수성",
    "감자",
    "감정",
    "갑자기",
    "강남",
    "강당",
    "강도",
    "강력히",
    "강변",
    "강북",
    "강사",
    "강수량",
    "강아지",
    "강원도",
    "강의",
    "강제",
    "강조",
    "같이",
    "개구리",
    "개나리",
    "개방",
    "개별",
    "개선",
    "개성",
    "개인",
    "객관적",
    "거실",
    "거액",
    "거울",
    "거짓",
    "거품",
    "걱정",
    "건강",
    "건물",
    "건설",
    "건조",
    "건축",
    "걸음",
    "검사",
    "검토",
    "게시판",
    "게임",
    "겨울",
    "견해",
    "결과",
    "결국",
    "결론",
    "결석",
    "결승",
    "결심",
    "결정",
    "결혼",
    "경계",
    "경고",
    "경기",
    "경력",
    "경복궁",
    "경비",
    "경상도",
    "경영",
    "경우",
    "경쟁",
    "경제",
    "경주",
    "경찰",
    "경치",
    "경향",
    "경험",
    "계곡",
    "계단",
    "계란",
    "계산",
    "계속",
    "계약",
    "계절",
    "계층",
    "계획",
    "고객",
    "고구려",
    "고궁",
    "고급",
    "고등학생",
    "고무신",
    "고민",
    "고양이",
    "고장",
    "고전",
    "고집",
    "고춧가루",
    "고통",
    "고향",
    "곡식",
    "골목",
    "골짜기",
    "골프",
    "공간",
    "공개",
    "공격",
    "공군",
    "공급",
    "공기",
    "공동",
    "공무원",
    "공부",
    "공사",
    "공식",
    "공업",
    "공연",
    "공원",
    "공장",
    "공짜",
    "공책",
    "공통",
    "공포",
    "공항",
    "공휴일",
    "과목",
    "과일",
    "과장",
    "과정",
    "과학",
    "관객",
    "관계",
    "관광",
    "관념",
    "관람",
    "관련",
    "관리",
    "관습",
    "관심",
    "관점",
    "관찰",
    "광경",
    "광고",
    "광장",
    "광주",
    "괴로움",
    "굉장히",
    "교과서",
    "교문",
    "교복",
    "교실",
    "교양",
    "교육",
    "교장",
    "교직",
    "교통",
    "교환",
    "교훈",
    "구경",
    "구름",
    "구멍",
    "구별",
    "구분",
    "구석",
    "구성",
    "구속",
    "구역",
    "구입",
    "구청",
    "구체적",
    "국가",
    "국기",
    "국내",
    "국립",
    "국물",
    "국민",
    "국수",
    "국어",
    "국왕",
    "국적",
    "국제",
    "국회",
    "군대",
    "군사",
    "군인",
    "궁극적",
    "권리",
    "권위",
    "권투",
    "귀국",
    "귀신",
    "규정",
    "규칙",
    "균형",
    "그날",
    "그냥",
    "그늘",
    "그러나",
    "그룹",
    "그릇",
    "그림",
    "그제서야",
    "그토록",
    "극복",
    "극히",
    "근거",
    "근교",
    "근래",
    "근로",
    "근무",
    "근본",
    "근원",
    "근육",
    "근처",
    "글씨",
    "글자",
    "금강산",
    "금고",
    "금년",
    "금메달",
    "금액",
    "금연",
    "금요일",
    "금지",
    "긍정적",
    "기간",
    "기관",
    "기념",
    "기능",
    "기독교",
    "기둥",
    "기록",
    "기름",
    "기법",
    "기본",
    "기분",
    "기쁨",
    "기숙사",
    "기술",
    "기억",
    "기업",
    "기온",
    "기운",
    "기원",
    "기적",
    "기준",
    "기침",
    "기혼",
    "기획",
    "긴급",
    "긴장",
    "길이",
    "김밥",
    "김치",
    "김포공항",
    "깍두기",
    "깜빡",
    "깨달음",
    "깨소금",
    "껍질",
    "꼭대기",
    "꽃잎",
    "나들이",
    "나란히",
    "나머지",
    "나물",
    "나침반",
    "나흘",
    "낙엽",
    "난방",
    "날개",
    "날씨",
    "날짜",
    "남녀",
    "남대문",
    "남매",
    "남산",
    "남자",
    "남편",
    "남학생",
    "낭비",
    "낱말",
    "내년",
    "내용",
    "내일",
    "냄비",
    "냄새",
    "냇물",
    "냉동",
    "냉면",
    "냉방",
    "냉장고",
    "넥타이",
    "넷째",
    "노동",
    "노란색",
    "노력",
    "노인",
    "녹음",
    "녹차",
    "녹화",
    "논리",
    "논문",
    "논쟁",
    "놀이",
    "농구",
    "농담",
    "농민",
    "농부",
    "농업",
    "농장",
    "농촌",
    "높이",
    "눈동자",
    "눈물",
    "눈썹",
    "뉴욕",
    "느낌",
    "늑대",
    "능동적",
    "능력",
    "다방",
    "다양성",
    "다음",
    "다이어트",
    "다행",
    "단계",
    "단골",
    "단독",
    "단맛",
    "단순",
    "단어",
    "단위",
    "단점",
    "단체",
    "단추",
    "단편",
    "단풍",
    "달걀",
    "달러",
    "달력",
    "달리",
    "닭고기",
    "담당",
    "담배",
    "담요",
    "담임",
    "답변",
    "답장",
    "당근",
    "당분간",
    "당연히",
    "당장",
    "대규모",
    "대낮",
    "대단히",
    "대답",
    "대도시",
    "대략",
    "대량",
    "대륙",
    "대문",
    "대부분",
    "대신",
    "대응",
    "대장",
    "대전",
    "대접",
    "대중",
    "대책",
    "대출",
    "대충",
    "대통령",
    "대학",
    "대한민국",
    "대합실",
    "대형",
    "덩어리",
    "데이트",
    "도대체",
    "도덕",
    "도둑",
    "도망",
    "도서관",
    "도심",
    "도움",
    "도입",
    "도자기",
    "도저히",
    "도전",
    "도중",
    "도착",
    "독감",
    "독립",
    "독서",
    "독일",
    "독창적",
    "동화책",
    "뒷모습",
    "뒷산",
    "딸아이",
    "마누라",
    "마늘",
    "마당",
    "마라톤",
    "마련",
    "마무리",
    "마사지",
    "마약",
    "마요네즈",
    "마을",
    "마음",
    "마이크",
    "마중",
    "마지막",
    "마찬가지",
    "마찰",
    "마흔",
    "막걸리",
    "막내",
    "막상",
    "만남",
    "만두",
    "만세",
    "만약",
    "만일",
    "만점",
    "만족",
    "만화",
    "많이",
    "말기",
    "말씀",
    "말투",
    "맘대로",
    "망원경",
    "매년",
    "매달",
    "매력",
    "매번",
    "매스컴",
    "매일",
    "매장",
    "맥주",
    "먹이",
    "먼저",
    "먼지",
    "멀리",
    "메일",
    "며느리",
    "며칠",
    "면담",
    "멸치",
    "명단",
    "명령",
    "명예",
    "명의",
    "명절",
    "명칭",
    "명함",
    "모금",
    "모니터",
    "모델",
    "모든",
    "모범",
    "모습",
    "모양",
    "모임",
    "모조리",
    "모집",
    "모퉁이",
    "목걸이",
    "목록",
    "목사",
    "목소리",
    "목숨",
    "목적",
    "목표",
    "몰래",
    "몸매",
    "몸무게",
    "몸살",
    "몸속",
    "몸짓",
    "몸통",
    "몹시",
    "무관심",
    "무궁화",
    "무더위",
    "무덤",
    "무릎",
    "무슨",
    "무엇",
    "무역",
    "무용",
    "무조건",
    "무지개",
    "무척",
    "문구",
    "문득",
    "문법",
    "문서",
    "문제",
    "문학",
    "문화",
    "물가",
    "물건",
    "물결",
    "물고기",
    "물론",
    "물리학",
    "물음",
    "물질",
    "물체",
    "미국",
    "미디어",
    "미사일",
    "미술",
    "미역",
    "미용실",
    "미움",
    "미인",
    "미팅",
    "미혼",
    "민간",
    "민족",
    "민주",
    "믿음",
    "밀가루",
    "밀리미터",
    "밑바닥",
    "바가지",
    "바구니",
    "바나나",
    "바늘",
    "바닥",
    "바닷가",
    "바람",
    "바이러스",
    "바탕",
    "박물관",
    "박사",
    "박수",
    "반대",
    "반드시",
    "반말",
    "반발",
    "반성",
    "반응",
    "반장",
    "반죽",
    "반지",
    "반찬",
    "받침",
    "발가락",
    "발걸음",
    "발견",
    "발달",
    "발레",
    "발목",
    "발바닥",
    "발생",
    "발음",
    "발자국",
    "발전",
    "발톱",
    "발표",
    "밤하늘",
    "밥그릇",
    "밥맛",
    "밥상",
    "밥솥",
    "방금",
    "방면",
    "방문",
    "방바닥",
    "방법",
    "방송",
    "방식",
    "방안",
    "방울",
    "방지",
    "방학",
    "방해",
    "방향",
    "배경",
    "배꼽",
    "배달",
    "배드민턴",
    "백두산",
    "백색",
    "백성",
    "백인",
    "백제",
    "백화점",
    "버릇",
    "버섯",
    "버튼",
    "번개",
    "번역",
    "번지",
    "번호",
    "벌금",
    "벌레",
    "벌써",
    "범위",
    "범인",
    "범죄",
    "법률",
    "법원",
    "법적",
    "법칙",
    "베이징",
    "벨트",
    "변경",
    "변동",
    "변명",
    "변신",
    "변호사",
    "변화",
    "별도",
    "별명",
    "별일",
    "병실",
    "병아리",
    "병원",
    "보관",
    "보너스",
    "보라색",
    "보람",
    "보름",
    "보상",
    "보안",
    "보자기",
    "보장",
    "보전",
    "보존",
    "보통",
    "보편적",
    "보험",
    "복도",
    "복사",
    "복숭아",
    "복습",
    "볶음",
    "본격적",
    "본래",
    "본부",
    "본사",
    "본성",
    "본인",
    "본질",
    "볼펜",
    "봉사",
    "봉지",
    "봉투",
    "부근",
    "부끄러움",
    "부담",
    "부동산",
    "부문",
    "부분",
    "부산",
    "부상",
    "부엌",
    "부인",
    "부작용",
    "부장",
    "부정",
    "부족",
    "부지런히",
    "부친",
    "부탁",
    "부품",
    "부회장",
    "북부",
    "북한",
    "분노",
    "분량",
    "분리",
    "분명",
    "분석",
    "분야",
    "분위기",
    "분필",
    "분홍색",
    "불고기",
    "불과",
    "불교",
    "불꽃",
    "불만",
    "불법",
    "불빛",
    "불안",
    "불이익",
    "불행",
    "브랜드",
    "비극",
    "비난",
    "비닐",
    "비둘기",
    "비디오",
    "비로소",
    "비만",
    "비명",
    "비밀",
    "비바람",
    "비빔밥",
    "비상",
    "비용",
    "비율",
    "비중",
    "비타민",
    "비판",
    "빌딩",
    "빗물",
    "빗방울",
    "빗줄기",
    "빛깔",
    "빨간색",
    "빨래",
    "빨리",
    "사건",
    "사계절",
    "사나이",
    "사냥",
    "사람",
    "사랑",
    "사립",
    "사모님",
    "사물",
    "사방",
    "사상",
    "사생활",
    "사설",
    "사슴",
    "사실",
    "사업",
    "사용",
    "사월",
    "사장",
    "사전",
    "사진",
    "사촌",
    "사춘기",
    "사탕",
    "사투리",
    "사흘",
    "산길",
    "산부인과",
    "산업",
    "산책",
    "살림",
    "살인",
    "살짝",
    "삼계탕",
    "삼국",
    "삼십",
    "삼월",
    "삼촌",
    "상관",
    "상금",
    "상대",
    "상류",
    "상반기",
    "상상",
    "상식",
    "상업",
    "상인",
    "상자",
    "상점",
    "상처",
    "상추",
    "상태",
    "상표",
    "상품",
    "상황",
    "새벽",
    "색깔",
    "색연필",
    "생각",
    "생명",
    "생물",
    "생방송",
    "생산",
    "생선",
    "생신",
    "생일",
    "생활",
    "서랍",
    "서른",
    "서명",
    "서민",
    "서비스",
    "서양",
    "서울",
    "서적",
    "서점",
    "서쪽",
    "서클",
    "석사",
    "석유",
    "선거",
    "선물",
    "선배",
    "선생",
    "선수",
    "선원",
    "선장",
    "선전",
    "선택",
    "선풍기",
    "설거지",
    "설날",
    "설렁탕",
    "설명",
    "설문",
    "설사",
    "설악산",
    "설치",
    "설탕",
    "섭씨",
    "성공",
    "성당",
    "성명",
    "성별",
    "성인",
    "성장",
    "성적",
    "성질",
    "성함",
    "세금",
    "세미나",
    "세상",
    "세월",
    "세종대왕",
    "세탁",
    "센터",
    "센티미터",
    "셋째",
    "소규모",
    "소극적",
    "소금",
    "소나기",
    "소년",
    "소득",
    "소망",
    "소문",
    "소설",
    "소속",
    "소아과",
    "소용",
    "소원",
    "소음",
    "소중히",
    "소지품",
    "소질",
    "소풍",
    "소형",
    "속담",
    "속도",
    "속옷",
    "손가락",
    "손길",
    "손녀",
    "손님",
    "손등",
    "손목",
    "손뼉",
    "손실",
    "손질",
    "손톱",
    "손해",
    "솔직히",
    "솜씨",
    "송아지",
    "송이",
    "송편",
    "쇠고기",
    "쇼핑",
    "수건",
    "수년",
    "수단",
    "수돗물",
    "수동적",
    "수면",
    "수명",
    "수박",
    "수상",
    "수석",
    "수술",
    "수시로",
    "수업",
    "수염",
    "수영",
    "수입",
    "수준",
    "수집",
    "수출",
    "수컷",
    "수필",
    "수학",
    "수험생",
    "수화기",
    "숙녀",
    "숙소",
    "숙제",
    "순간",
    "순서",
    "순수",
    "순식간",
    "순위",
    "숟가락",
    "술병",
    "술집",
    "숫자",
    "스님",
    "스물",
    "스스로",
    "스승",
    "스웨터",
    "스위치",
    "스케이트",
    "스튜디오",
    "스트레스",
    "스포츠",
    "슬쩍",
    "슬픔",
    "습관",
    "습기",
    "승객",
    "승리",
    "승부",
    "승용차",
    "승진",
    "시각",
    "시간",
    "시골",
    "시금치",
    "시나리오",
    "시댁",
    "시리즈",
    "시멘트",
    "시민",
    "시부모",
    "시선",
    "시설",
    "시스템",
    "시아버지",
    "시어머니",
    "시월",
    "시인",
    "시일",
    "시작",
    "시장",
    "시절",
    "시점",
    "시중",
    "시즌",
    "시집",
    "시청",
    "시합",
    "시험",
    "식구",
    "식기",
    "식당",
    "식량",
    "식료품",
    "식물",
    "식빵",
    "식사",
    "식생활",
    "식초",
    "식탁",
    "식품",
    "신고",
    "신규",
    "신념",
    "신문",
    "신발",
    "신비",
    "신사",
    "신세",
    "신용",
    "신제품",
    "신청",
    "신체",
    "신화",
    "실감",
    "실내",
    "실력",
    "실례",
    "실망",
    "실수",
    "실습",
    "실시",
    "실장",
    "실정",
    "실질적",
    "실천",
    "실체",
    "실컷",
    "실태",
    "실패",
    "실험",
    "실현",
    "심리",
    "심부름",
    "심사",
    "심장",
    "심정",
    "심판",
    "쌍둥이",
    "씨름",
    "씨앗",
    "아가씨",
    "아나운서",
    "아드님",
    "아들",
    "아쉬움",
    "아스팔트",
    "아시아",
    "아울러",
    "아저씨",
    "아줌마",
    "아직",
    "아침",
    "아파트",
    "아프리카",
    "아픔",
    "아홉",
    "아흔",
    "악기",
    "악몽",
    "악수",
    "안개",
    "안경",
    "안과",
    "안내",
    "안녕",
    "안동",
    "안방",
    "안부",
    "안주",
    "알루미늄",
    "알코올",
    "암시",
    "암컷",
    "압력",
    "앞날",
    "앞문",
    "애인",
    "애정",
    "액수",
    "앨범",
    "야간",
    "야단",
    "야옹",
    "약간",
    "약국",
    "약속",
    "약수",
    "약점",
    "약품",
    "약혼녀",
    "양념",
    "양력",
    "양말",
    "양배추",
    "양주",
    "양파",
    "어둠",
    "어려움",
    "어른",
    "어젯밤",
    "어쨌든",
    "어쩌다가",
    "어쩐지",
    "언니",
    "언덕",
    "언론",
    "언어",
    "얼굴",
    "얼른",
    "얼음",
    "얼핏",
    "엄마",
    "업무",
    "업종",
    "업체",
    "엉덩이",
    "엉망",
    "엉터리",
    "엊그제",
    "에너지",
    "에어컨",
    "엔진",
    "여건",
    "여고생",
    "여관",
    "여군",
    "여권",
    "여대생",
    "여덟",
    "여동생",
    "여든",
    "여론",
    "여름",
    "여섯",
    "여성",
    "여왕",
    "여인",
    "여전히",
    "여직원",
    "여학생",
    "여행",
    "역사",
    "역시",
    "역할",
    "연결",
    "연구",
    "연극",
    "연기",
    "연락",
    "연설",
    "연세",
    "연속",
    "연습",
    "연애",
    "연예인",
    "연인",
    "연장",
    "연주",
    "연출",
    "연필",
    "연합",
    "연휴",
    "열기",
    "열매",
    "열쇠",
    "열심히",
    "열정",
    "열차",
    "열흘",
    "염려",
    "엽서",
    "영국",
    "영남",
    "영상",
    "영양",
    "영역",
    "영웅",
    "영원히",
    "영하",
    "영향",
    "영혼",
    "영화",
    "옆구리",
    "옆방",
    "옆집",
    "예감",
    "예금",
    "예방",
    "예산",
    "예상",
    "예선",
    "예술",
    "예습",
    "예식장",
    "예약",
    "예전",
    "예절",
    "예정",
    "예컨대",
    "옛날",
    "오늘",
    "오락",
    "오랫동안",
    "오렌지",
    "오로지",
    "오른발",
    "오븐",
    "오십",
    "오염",
    "오월",
    "오전",
    "오직",
    "오징어",
    "오페라",
    "오피스텔",
    "오히려",
    "옥상",
    "옥수수",
    "온갖",
    "온라인",
    "온몸",
    "온종일",
    "온통",
    "올가을",
    "올림픽",
    "올해",
    "옷차림",
    "와이셔츠",
    "와인",
    "완성",
    "완전",
    "왕비",
    "왕자",
    "왜냐하면",
    "왠지",
    "외갓집",
    "외국",
    "외로움",
    "외삼촌",
    "외출",
    "외침",
    "외할머니",
    "왼발",
    "왼손",
    "왼쪽",
    "요금",
    "요일",
    "요즘",
    "요청",
    "용기",
    "용서",
    "용어",
    "우산",
    "우선",
    "우승",
    "우연히",
    "우정",
    "우체국",
    "우편",
    "운동",
    "운명",
    "운반",
    "운전",
    "운행",
    "울산",
    "울음",
    "움직임",
    "웃어른",
    "웃음",
    "워낙",
    "원고",
    "원래",
    "원서",
    "원숭이",
    "원인",
    "원장",
    "원피스",
    "월급",
    "월드컵",
    "월세",
    "월요일",
    "웨이터",
    "위반",
    "위법",
    "위성",
    "위원",
    "위험",
    "위협",
    "윗사람",
    "유난히",
    "유럽",
    "유명",
    "유물",
    "유산",
    "유적",
    "유치원",
    "유학",
    "유행",
    "유형",
    "육군",
    "육상",
    "육십",
    "육체",
    "은행",
    "음력",
    "음료",
    "음반",
    "음성",
    "음식",
    "음악",
    "음주",
    "의견",
    "의논",
    "의문",
    "의복",
    "의식",
    "의심",
    "의외로",
    "의욕",
    "의원",
    "의학",
    "이것",
    "이곳",
    "이념",
    "이놈",
    "이달",
    "이대로",
    "이동",
    "이렇게",
    "이력서",
    "이론적",
    "이름",
    "이민",
    "이발소",
    "이별",
    "이불",
    "이빨",
    "이상",
    "이성",
    "이슬",
    "이야기",
    "이용",
    "이웃",
    "이월",
    "이윽고",
    "이익",
    "이전",
    "이중",
    "이튿날",
    "이틀",
    "이혼",
    "인간",
    "인격",
    "인공",
    "인구",
    "인근",
    "인기",
    "인도",
    "인류",
    "인물",
    "인생",
    "인쇄",
    "인연",
    "인원",
    "인재",
    "인종",
    "인천",
    "인체",
    "인터넷",
    "인하",
    "인형",
    "일곱",
    "일기",
    "일단",
    "일대",
    "일등",
    "일반",
    "일본",
    "일부",
    "일상",
    "일생",
    "일손",
    "일요일",
    "일월",
    "일정",
    "일종",
    "일주일",
    "일찍",
    "일체",
    "일치",
    "일행",
    "일회용",
    "임금",
    "임무",
    "입대",
    "입력",
    "입맛",
    "입사",
    "입술",
    "입시",
    "입원",
    "입장",
    "입학",
    "자가용",
    "자격",
    "자극",
    "자동",
    "자랑",
    "자부심",
    "자식",
    "자신",
    "자연",
    "자원",
    "자율",
    "자전거",
    "자정",
    "자존심",
    "자판",
    "작가",
    "작년",
    "작성",
    "작업",
    "작용",
    "작은딸",
    "작품",
    "잔디",
    "잔뜩",
    "잔치",
    "잘못",
    "잠깐",
    "잠수함",
    "잠시",
    "잠옷",
    "잠자리",
    "잡지",
    "장관",
    "장군",
    "장기간",
    "장래",
    "장례",
    "장르",
    "장마",
    "장면",
    "장모",
    "장미",
    "장비",
    "장사",
    "장소",
    "장식",
    "장애인",
    "장인",
    "장점",
    "장차",
    "장학금",
    "재능",
    "재빨리",
    "재산",
    "재생",
    "재작년",
    "재정",
    "재채기",
    "재판",
    "재학",
    "재활용",
    "저것",
    "저고리",
    "저곳",
    "저녁",
    "저런",
    "저렇게",
    "저번",
    "저울",
    "저절로",
    "저축",
    "적극",
    "적당히",
    "적성",
    "적용",
    "적응",
    "전개",
    "전공",
    "전기",
    "전달",
    "전라도",
    "전망",
    "전문",
    "전반",
    "전부",
    "전세",
    "전시",
    "전용",
    "전자",
    "전쟁",
    "전주",
    "전철",
    "전체",
    "전통",
    "전혀",
    "전후",
    "절대",
    "절망",
    "절반",
    "절약",
    "절차",
    "점검",
    "점수",
    "점심",
    "점원",
    "점점",
    "점차",
    "접근",
    "접시",
    "접촉",
    "젓가락",
    "정거장",
    "정도",
    "정류장",
    "정리",
    "정말",
    "정면",
    "정문",
    "정반대",
    "정보",
    "정부",
    "정비",
    "정상",
    "정성",
    "정오",
    "정원",
    "정장",
    "정지",
    "정치",
    "정확히",
    "제공",
    "제과점",
    "제대로",
    "제목",
    "제발",
    "제법",
    "제삿날",
    "제안",
    "제일",
    "제작",
    "제주도",
    "제출",
    "제품",
    "제한",
    "조각",
    "조건",
    "조금",
    "조깅",
    "조명",
    "조미료",
    "조상",
    "조선",
    "조용히",
    "조절",
    "조정",
    "조직",
    "존댓말",
    "존재",
    "졸업",
    "졸음",
    "종교",
    "종로",
    "종류",
    "종소리",
    "종업원",
    "종종",
    "종합",
    "좌석",
    "죄인",
    "주관적",
    "주름",
    "주말",
    "주머니",
    "주먹",
    "주문",
    "주민",
    "주방",
    "주변",
    "주식",
    "주인",
    "주일",
    "주장",
    "주전자",
    "주택",
    "준비",
    "줄거리",
    "줄기",
    "줄무늬",
    "중간",
    "중계방송",
    "중국",
    "중년",
    "중단",
    "중독",
    "중반",
    "중부",
    "중세",
    "중소기업",
    "중순",
    "중앙",
    "중요",
    "중학교",
    "즉석",
    "즉시",
    "즐거움",
    "증가",
    "증거",
    "증권",
    "증상",
    "증세",
    "지각",
    "지갑",
    "지경",
    "지극히",
    "지금",
    "지급",
    "지능",
    "지름길",
    "지리산",
    "지방",
    "지붕",
    "지식",
    "지역",
    "지우개",
    "지원",
    "지적",
    "지점",
    "지진",
    "지출",
    "직선",
    "직업",
    "직원",
    "직장",
    "진급",
    "진동",
    "진로",
    "진료",
    "진리",
    "진짜",
    "진찰",
    "진출",
    "진통",
    "진행",
    "질문",
    "질병",
    "질서",
    "짐작",
    "집단",
    "집안",
    "집중",
    "짜증",
    "찌꺼기",
    "차남",
    "차라리",
    "차량",
    "차림",
    "차별",
    "차선",
    "차츰",
    "착각",
    "찬물",
    "찬성",
    "참가",
    "참기름",
    "참새",
    "참석",
    "참여",
    "참외",
    "참조",
    "찻잔",
    "창가",
    "창고",
    "창구",
    "창문",
    "창밖",
    "창작",
    "창조",
    "채널",
    "채점",
    "책가방",
    "책방",
    "책상",
    "책임",
    "챔피언",
    "처벌",
    "처음",
    "천국",
    "천둥",
    "천장",
    "천재",
    "천천히",
    "철도",
    "철저히",
    "철학",
    "첫날",
    "첫째",
    "청년",
    "청바지",
    "청소",
    "청춘",
    "체계",
    "체력",
    "체온",
    "체육",
    "체중",
    "체험",
    "초등학생",
    "초반",
    "초밥",
    "초상화",
    "초순",
    "초여름",
    "초원",
    "초저녁",
    "초점",
    "초청",
    "초콜릿",
    "촛불",
    "총각",
    "총리",
    "총장",
    "촬영",
    "최근",
    "최상",
    "최선",
    "최신",
    "최악",
    "최종",
    "추석",
    "추억",
    "추진",
    "추천",
    "추측",
    "축구",
    "축소",
    "축제",
    "축하",
    "출근",
    "출발",
    "출산",
    "출신",
    "출연",
    "출입",
    "출장",
    "출판",
    "충격",
    "충고",
    "충돌",
    "충분히",
    "충청도",
    "취업",
    "취직",
    "취향",
    "치약",
    "친구",
    "친척",
    "칠십",
    "칠월",
    "칠판",
    "침대",
    "침묵",
    "침실",
    "칫솔",
    "칭찬",
    "카메라",
    "카운터",
    "칼국수",
    "캐릭터",
    "캠퍼스",
    "캠페인",
    "커튼",
    "컨디션",
    "컬러",
    "컴퓨터",
    "코끼리",
    "코미디",
    "콘서트",
    "콜라",
    "콤플렉스",
    "콩나물",
    "쾌감",
    "쿠데타",
    "크림",
    "큰길",
    "큰딸",
    "큰소리",
    "큰아들",
    "큰어머니",
    "큰일",
    "큰절",
    "클래식",
    "클럽",
    "킬로",
    "타입",
    "타자기",
    "탁구",
    "탁자",
    "탄생",
    "태권도",
    "태양",
    "태풍",
    "택시",
    "탤런트",
    "터널",
    "터미널",
    "테니스",
    "테스트",
    "테이블",
    "텔레비전",
    "토론",
    "토마토",
    "토요일",
    "통계",
    "통과",
    "통로",
    "통신",
    "통역",
    "통일",
    "통장",
    "통제",
    "통증",
    "통합",
    "통화",
    "퇴근",
    "퇴원",
    "퇴직금",
    "튀김",
    "트럭",
    "특급",
    "특별",
    "특성",
    "특수",
    "특징",
    "특히",
    "튼튼히",
    "티셔츠",
    "파란색",
    "파일",
    "파출소",
    "판결",
    "판단",
    "판매",
    "판사",
    "팔십",
    "팔월",
    "팝송",
    "패션",
    "팩스",
    "팩시밀리",
    "팬티",
    "퍼센트",
    "페인트",
    "편견",
    "편의",
    "편지",
    "편히",
    "평가",
    "평균",
    "평생",
    "평소",
    "평양",
    "평일",
    "평화",
    "포스터",
    "포인트",
    "포장",
    "포함",
    "표면",
    "표정",
    "표준",
    "표현",
    "품목",
    "품질",
    "풍경",
    "풍속",
    "풍습",
    "프랑스",
    "프린터",
    "플라스틱",
    "피곤",
    "피망",
    "피아노",
    "필름",
    "필수",
    "필요",
    "필자",
    "필통",
    "핑계",
    "하느님",
    "하늘",
    "하드웨어",
    "하룻밤",
    "하반기",
    "하숙집",
    "하순",
    "하여튼",
    "하지만",
    "하천",
    "하품",
    "하필",
    "학과",
    "학교",
    "학급",
    "학기",
    "학년",
    "학력",
    "학번",
    "학부모",
    "학비",
    "학생",
    "학술",
    "학습",
    "학용품",
    "학원",
    "학위",
    "학자",
    "학점",
    "한계",
    "한글",
    "한꺼번에",
    "한낮",
    "한눈",
    "한동안",
    "한때",
    "한라산",
    "한마디",
    "한문",
    "한번",
    "한복",
    "한식",
    "한여름",
    "한쪽",
    "할머니",
    "할아버지",
    "할인",
    "함께",
    "함부로",
    "합격",
    "합리적",
    "항공",
    "항구",
    "항상",
    "항의",
    "해결",
    "해군",
    "해답",
    "해당",
    "해물",
    "해석",
    "해설",
    "해수욕장",
    "해안",
    "핵심",
    "핸드백",
    "햄버거",
    "햇볕",
    "햇살",
    "행동",
    "행복",
    "행사",
    "행운",
    "행위",
    "향기",
    "향상",
    "향수",
    "허락",
    "허용",
    "헬기",
    "현관",
    "현금",
    "현대",
    "현상",
    "현실",
    "현장",
    "현재",
    "현지",
    "혈액",
    "협력",
    "형부",
    "형사",
    "형수",
    "형식",
    "형제",
    "형태",
    "형편",
    "혜택",
    "호기심",
    "호남",
    "호랑이",
    "호박",
    "호텔",
    "호흡",
    "혹시",
    "홀로",
    "홈페이지",
    "홍보",
    "홍수",
    "홍차",
    "화면",
    "화분",
    "화살",
    "화요일",
    "화장",
    "화학",
    "확보",
    "확인",
    "확장",
    "확정",
    "환갑",
    "환경",
    "환영",
    "환율",
    "환자",
    "활기",
    "활동",
    "활발히",
    "활용",
    "활짝",
    "회견",
    "회관",
    "회복",
    "회색",
    "회원",
    "회장",
    "회전",
    "횟수",
    "횡단보도",
    "효율적",
    "후반",
    "후춧가루",
    "훈련",
    "훨씬",
    "휴식",
    "휴일",
    "흉내",
    "흐름",
    "흑백",
    "흑인",
    "흔적",
    "흔히",
    "흥미",
    "흥분",
    "희곡",
    "희망",
    "희생",
    "흰색",
    "힘껏"
]
;
},369,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = [
    "abaisser",
    "abandon",
    "abdiquer",
    "abeille",
    "abolir",
    "aborder",
    "aboutir",
    "aboyer",
    "abrasif",
    "abreuver",
    "abriter",
    "abroger",
    "abrupt",
    "absence",
    "absolu",
    "absurde",
    "abusif",
    "abyssal",
    "académie",
    "acajou",
    "acarien",
    "accabler",
    "accepter",
    "acclamer",
    "accolade",
    "accroche",
    "accuser",
    "acerbe",
    "achat",
    "acheter",
    "aciduler",
    "acier",
    "acompte",
    "acquérir",
    "acronyme",
    "acteur",
    "actif",
    "actuel",
    "adepte",
    "adéquat",
    "adhésif",
    "adjectif",
    "adjuger",
    "admettre",
    "admirer",
    "adopter",
    "adorer",
    "adoucir",
    "adresse",
    "adroit",
    "adulte",
    "adverbe",
    "aérer",
    "aéronef",
    "affaire",
    "affecter",
    "affiche",
    "affreux",
    "affubler",
    "agacer",
    "agencer",
    "agile",
    "agiter",
    "agrafer",
    "agréable",
    "agrume",
    "aider",
    "aiguille",
    "ailier",
    "aimable",
    "aisance",
    "ajouter",
    "ajuster",
    "alarmer",
    "alchimie",
    "alerte",
    "algèbre",
    "algue",
    "aliéner",
    "aliment",
    "alléger",
    "alliage",
    "allouer",
    "allumer",
    "alourdir",
    "alpaga",
    "altesse",
    "alvéole",
    "amateur",
    "ambigu",
    "ambre",
    "aménager",
    "amertume",
    "amidon",
    "amiral",
    "amorcer",
    "amour",
    "amovible",
    "amphibie",
    "ampleur",
    "amusant",
    "analyse",
    "anaphore",
    "anarchie",
    "anatomie",
    "ancien",
    "anéantir",
    "angle",
    "angoisse",
    "anguleux",
    "animal",
    "annexer",
    "annonce",
    "annuel",
    "anodin",
    "anomalie",
    "anonyme",
    "anormal",
    "antenne",
    "antidote",
    "anxieux",
    "apaiser",
    "apéritif",
    "aplanir",
    "apologie",
    "appareil",
    "appeler",
    "apporter",
    "appuyer",
    "aquarium",
    "aqueduc",
    "arbitre",
    "arbuste",
    "ardeur",
    "ardoise",
    "argent",
    "arlequin",
    "armature",
    "armement",
    "armoire",
    "armure",
    "arpenter",
    "arracher",
    "arriver",
    "arroser",
    "arsenic",
    "artériel",
    "article",
    "aspect",
    "asphalte",
    "aspirer",
    "assaut",
    "asservir",
    "assiette",
    "associer",
    "assurer",
    "asticot",
    "astre",
    "astuce",
    "atelier",
    "atome",
    "atrium",
    "atroce",
    "attaque",
    "attentif",
    "attirer",
    "attraper",
    "aubaine",
    "auberge",
    "audace",
    "audible",
    "augurer",
    "aurore",
    "automne",
    "autruche",
    "avaler",
    "avancer",
    "avarice",
    "avenir",
    "averse",
    "aveugle",
    "aviateur",
    "avide",
    "avion",
    "aviser",
    "avoine",
    "avouer",
    "avril",
    "axial",
    "axiome",
    "badge",
    "bafouer",
    "bagage",
    "baguette",
    "baignade",
    "balancer",
    "balcon",
    "baleine",
    "balisage",
    "bambin",
    "bancaire",
    "bandage",
    "banlieue",
    "bannière",
    "banquier",
    "barbier",
    "baril",
    "baron",
    "barque",
    "barrage",
    "bassin",
    "bastion",
    "bataille",
    "bateau",
    "batterie",
    "baudrier",
    "bavarder",
    "belette",
    "bélier",
    "belote",
    "bénéfice",
    "berceau",
    "berger",
    "berline",
    "bermuda",
    "besace",
    "besogne",
    "bétail",
    "beurre",
    "biberon",
    "bicycle",
    "bidule",
    "bijou",
    "bilan",
    "bilingue",
    "billard",
    "binaire",
    "biologie",
    "biopsie",
    "biotype",
    "biscuit",
    "bison",
    "bistouri",
    "bitume",
    "bizarre",
    "blafard",
    "blague",
    "blanchir",
    "blessant",
    "blinder",
    "blond",
    "bloquer",
    "blouson",
    "bobard",
    "bobine",
    "boire",
    "boiser",
    "bolide",
    "bonbon",
    "bondir",
    "bonheur",
    "bonifier",
    "bonus",
    "bordure",
    "borne",
    "botte",
    "boucle",
    "boueux",
    "bougie",
    "boulon",
    "bouquin",
    "bourse",
    "boussole",
    "boutique",
    "boxeur",
    "branche",
    "brasier",
    "brave",
    "brebis",
    "brèche",
    "breuvage",
    "bricoler",
    "brigade",
    "brillant",
    "brioche",
    "brique",
    "brochure",
    "broder",
    "bronzer",
    "brousse",
    "broyeur",
    "brume",
    "brusque",
    "brutal",
    "bruyant",
    "buffle",
    "buisson",
    "bulletin",
    "bureau",
    "burin",
    "bustier",
    "butiner",
    "butoir",
    "buvable",
    "buvette",
    "cabanon",
    "cabine",
    "cachette",
    "cadeau",
    "cadre",
    "caféine",
    "caillou",
    "caisson",
    "calculer",
    "calepin",
    "calibre",
    "calmer",
    "calomnie",
    "calvaire",
    "camarade",
    "caméra",
    "camion",
    "campagne",
    "canal",
    "caneton",
    "canon",
    "cantine",
    "canular",
    "capable",
    "caporal",
    "caprice",
    "capsule",
    "capter",
    "capuche",
    "carabine",
    "carbone",
    "caresser",
    "caribou",
    "carnage",
    "carotte",
    "carreau",
    "carton",
    "cascade",
    "casier",
    "casque",
    "cassure",
    "causer",
    "caution",
    "cavalier",
    "caverne",
    "caviar",
    "cédille",
    "ceinture",
    "céleste",
    "cellule",
    "cendrier",
    "censurer",
    "central",
    "cercle",
    "cérébral",
    "cerise",
    "cerner",
    "cerveau",
    "cesser",
    "chagrin",
    "chaise",
    "chaleur",
    "chambre",
    "chance",
    "chapitre",
    "charbon",
    "chasseur",
    "chaton",
    "chausson",
    "chavirer",
    "chemise",
    "chenille",
    "chéquier",
    "chercher",
    "cheval",
    "chien",
    "chiffre",
    "chignon",
    "chimère",
    "chiot",
    "chlorure",
    "chocolat",
    "choisir",
    "chose",
    "chouette",
    "chrome",
    "chute",
    "cigare",
    "cigogne",
    "cimenter",
    "cinéma",
    "cintrer",
    "circuler",
    "cirer",
    "cirque",
    "citerne",
    "citoyen",
    "citron",
    "civil",
    "clairon",
    "clameur",
    "claquer",
    "classe",
    "clavier",
    "client",
    "cligner",
    "climat",
    "clivage",
    "cloche",
    "clonage",
    "cloporte",
    "cobalt",
    "cobra",
    "cocasse",
    "cocotier",
    "coder",
    "codifier",
    "coffre",
    "cogner",
    "cohésion",
    "coiffer",
    "coincer",
    "colère",
    "colibri",
    "colline",
    "colmater",
    "colonel",
    "combat",
    "comédie",
    "commande",
    "compact",
    "concert",
    "conduire",
    "confier",
    "congeler",
    "connoter",
    "consonne",
    "contact",
    "convexe",
    "copain",
    "copie",
    "corail",
    "corbeau",
    "cordage",
    "corniche",
    "corpus",
    "correct",
    "cortège",
    "cosmique",
    "costume",
    "coton",
    "coude",
    "coupure",
    "courage",
    "couteau",
    "couvrir",
    "coyote",
    "crabe",
    "crainte",
    "cravate",
    "crayon",
    "créature",
    "créditer",
    "crémeux",
    "creuser",
    "crevette",
    "cribler",
    "crier",
    "cristal",
    "critère",
    "croire",
    "croquer",
    "crotale",
    "crucial",
    "cruel",
    "crypter",
    "cubique",
    "cueillir",
    "cuillère",
    "cuisine",
    "cuivre",
    "culminer",
    "cultiver",
    "cumuler",
    "cupide",
    "curatif",
    "curseur",
    "cyanure",
    "cycle",
    "cylindre",
    "cynique",
    "daigner",
    "damier",
    "danger",
    "danseur",
    "dauphin",
    "débattre",
    "débiter",
    "déborder",
    "débrider",
    "débutant",
    "décaler",
    "décembre",
    "déchirer",
    "décider",
    "déclarer",
    "décorer",
    "décrire",
    "décupler",
    "dédale",
    "déductif",
    "déesse",
    "défensif",
    "défiler",
    "défrayer",
    "dégager",
    "dégivrer",
    "déglutir",
    "dégrafer",
    "déjeuner",
    "délice",
    "déloger",
    "demander",
    "demeurer",
    "démolir",
    "dénicher",
    "dénouer",
    "dentelle",
    "dénuder",
    "départ",
    "dépenser",
    "déphaser",
    "déplacer",
    "déposer",
    "déranger",
    "dérober",
    "désastre",
    "descente",
    "désert",
    "désigner",
    "désobéir",
    "dessiner",
    "destrier",
    "détacher",
    "détester",
    "détourer",
    "détresse",
    "devancer",
    "devenir",
    "deviner",
    "devoir",
    "diable",
    "dialogue",
    "diamant",
    "dicter",
    "différer",
    "digérer",
    "digital",
    "digne",
    "diluer",
    "dimanche",
    "diminuer",
    "dioxyde",
    "directif",
    "diriger",
    "discuter",
    "disposer",
    "dissiper",
    "distance",
    "divertir",
    "diviser",
    "docile",
    "docteur",
    "dogme",
    "doigt",
    "domaine",
    "domicile",
    "dompter",
    "donateur",
    "donjon",
    "donner",
    "dopamine",
    "dortoir",
    "dorure",
    "dosage",
    "doseur",
    "dossier",
    "dotation",
    "douanier",
    "double",
    "douceur",
    "douter",
    "doyen",
    "dragon",
    "draper",
    "dresser",
    "dribbler",
    "droiture",
    "duperie",
    "duplexe",
    "durable",
    "durcir",
    "dynastie",
    "éblouir",
    "écarter",
    "écharpe",
    "échelle",
    "éclairer",
    "éclipse",
    "éclore",
    "écluse",
    "école",
    "économie",
    "écorce",
    "écouter",
    "écraser",
    "écrémer",
    "écrivain",
    "écrou",
    "écume",
    "écureuil",
    "édifier",
    "éduquer",
    "effacer",
    "effectif",
    "effigie",
    "effort",
    "effrayer",
    "effusion",
    "égaliser",
    "égarer",
    "éjecter",
    "élaborer",
    "élargir",
    "électron",
    "élégant",
    "éléphant",
    "élève",
    "éligible",
    "élitisme",
    "éloge",
    "élucider",
    "éluder",
    "emballer",
    "embellir",
    "embryon",
    "émeraude",
    "émission",
    "emmener",
    "émotion",
    "émouvoir",
    "empereur",
    "employer",
    "emporter",
    "emprise",
    "émulsion",
    "encadrer",
    "enchère",
    "enclave",
    "encoche",
    "endiguer",
    "endosser",
    "endroit",
    "enduire",
    "énergie",
    "enfance",
    "enfermer",
    "enfouir",
    "engager",
    "engin",
    "englober",
    "énigme",
    "enjamber",
    "enjeu",
    "enlever",
    "ennemi",
    "ennuyeux",
    "enrichir",
    "enrobage",
    "enseigne",
    "entasser",
    "entendre",
    "entier",
    "entourer",
    "entraver",
    "énumérer",
    "envahir",
    "enviable",
    "envoyer",
    "enzyme",
    "éolien",
    "épaissir",
    "épargne",
    "épatant",
    "épaule",
    "épicerie",
    "épidémie",
    "épier",
    "épilogue",
    "épine",
    "épisode",
    "épitaphe",
    "époque",
    "épreuve",
    "éprouver",
    "épuisant",
    "équerre",
    "équipe",
    "ériger",
    "érosion",
    "erreur",
    "éruption",
    "escalier",
    "espadon",
    "espèce",
    "espiègle",
    "espoir",
    "esprit",
    "esquiver",
    "essayer",
    "essence",
    "essieu",
    "essorer",
    "estime",
    "estomac",
    "estrade",
    "étagère",
    "étaler",
    "étanche",
    "étatique",
    "éteindre",
    "étendoir",
    "éternel",
    "éthanol",
    "éthique",
    "ethnie",
    "étirer",
    "étoffer",
    "étoile",
    "étonnant",
    "étourdir",
    "étrange",
    "étroit",
    "étude",
    "euphorie",
    "évaluer",
    "évasion",
    "éventail",
    "évidence",
    "éviter",
    "évolutif",
    "évoquer",
    "exact",
    "exagérer",
    "exaucer",
    "exceller",
    "excitant",
    "exclusif",
    "excuse",
    "exécuter",
    "exemple",
    "exercer",
    "exhaler",
    "exhorter",
    "exigence",
    "exiler",
    "exister",
    "exotique",
    "expédier",
    "explorer",
    "exposer",
    "exprimer",
    "exquis",
    "extensif",
    "extraire",
    "exulter",
    "fable",
    "fabuleux",
    "facette",
    "facile",
    "facture",
    "faiblir",
    "falaise",
    "fameux",
    "famille",
    "farceur",
    "farfelu",
    "farine",
    "farouche",
    "fasciner",
    "fatal",
    "fatigue",
    "faucon",
    "fautif",
    "faveur",
    "favori",
    "fébrile",
    "féconder",
    "fédérer",
    "félin",
    "femme",
    "fémur",
    "fendoir",
    "féodal",
    "fermer",
    "féroce",
    "ferveur",
    "festival",
    "feuille",
    "feutre",
    "février",
    "fiasco",
    "ficeler",
    "fictif",
    "fidèle",
    "figure",
    "filature",
    "filetage",
    "filière",
    "filleul",
    "filmer",
    "filou",
    "filtrer",
    "financer",
    "finir",
    "fiole",
    "firme",
    "fissure",
    "fixer",
    "flairer",
    "flamme",
    "flasque",
    "flatteur",
    "fléau",
    "flèche",
    "fleur",
    "flexion",
    "flocon",
    "flore",
    "fluctuer",
    "fluide",
    "fluvial",
    "folie",
    "fonderie",
    "fongible",
    "fontaine",
    "forcer",
    "forgeron",
    "formuler",
    "fortune",
    "fossile",
    "foudre",
    "fougère",
    "fouiller",
    "foulure",
    "fourmi",
    "fragile",
    "fraise",
    "franchir",
    "frapper",
    "frayeur",
    "frégate",
    "freiner",
    "frelon",
    "frémir",
    "frénésie",
    "frère",
    "friable",
    "friction",
    "frisson",
    "frivole",
    "froid",
    "fromage",
    "frontal",
    "frotter",
    "fruit",
    "fugitif",
    "fuite",
    "fureur",
    "furieux",
    "furtif",
    "fusion",
    "futur",
    "gagner",
    "galaxie",
    "galerie",
    "gambader",
    "garantir",
    "gardien",
    "garnir",
    "garrigue",
    "gazelle",
    "gazon",
    "géant",
    "gélatine",
    "gélule",
    "gendarme",
    "général",
    "génie",
    "genou",
    "gentil",
    "géologie",
    "géomètre",
    "géranium",
    "germe",
    "gestuel",
    "geyser",
    "gibier",
    "gicler",
    "girafe",
    "givre",
    "glace",
    "glaive",
    "glisser",
    "globe",
    "gloire",
    "glorieux",
    "golfeur",
    "gomme",
    "gonfler",
    "gorge",
    "gorille",
    "goudron",
    "gouffre",
    "goulot",
    "goupille",
    "gourmand",
    "goutte",
    "graduel",
    "graffiti",
    "graine",
    "grand",
    "grappin",
    "gratuit",
    "gravir",
    "grenat",
    "griffure",
    "griller",
    "grimper",
    "grogner",
    "gronder",
    "grotte",
    "groupe",
    "gruger",
    "grutier",
    "gruyère",
    "guépard",
    "guerrier",
    "guide",
    "guimauve",
    "guitare",
    "gustatif",
    "gymnaste",
    "gyrostat",
    "habitude",
    "hachoir",
    "halte",
    "hameau",
    "hangar",
    "hanneton",
    "haricot",
    "harmonie",
    "harpon",
    "hasard",
    "hélium",
    "hématome",
    "herbe",
    "hérisson",
    "hermine",
    "héron",
    "hésiter",
    "heureux",
    "hiberner",
    "hibou",
    "hilarant",
    "histoire",
    "hiver",
    "homard",
    "hommage",
    "homogène",
    "honneur",
    "honorer",
    "honteux",
    "horde",
    "horizon",
    "horloge",
    "hormone",
    "horrible",
    "houleux",
    "housse",
    "hublot",
    "huileux",
    "humain",
    "humble",
    "humide",
    "humour",
    "hurler",
    "hydromel",
    "hygiène",
    "hymne",
    "hypnose",
    "idylle",
    "ignorer",
    "iguane",
    "illicite",
    "illusion",
    "image",
    "imbiber",
    "imiter",
    "immense",
    "immobile",
    "immuable",
    "impact",
    "impérial",
    "implorer",
    "imposer",
    "imprimer",
    "imputer",
    "incarner",
    "incendie",
    "incident",
    "incliner",
    "incolore",
    "indexer",
    "indice",
    "inductif",
    "inédit",
    "ineptie",
    "inexact",
    "infini",
    "infliger",
    "informer",
    "infusion",
    "ingérer",
    "inhaler",
    "inhiber",
    "injecter",
    "injure",
    "innocent",
    "inoculer",
    "inonder",
    "inscrire",
    "insecte",
    "insigne",
    "insolite",
    "inspirer",
    "instinct",
    "insulter",
    "intact",
    "intense",
    "intime",
    "intrigue",
    "intuitif",
    "inutile",
    "invasion",
    "inventer",
    "inviter",
    "invoquer",
    "ironique",
    "irradier",
    "irréel",
    "irriter",
    "isoler",
    "ivoire",
    "ivresse",
    "jaguar",
    "jaillir",
    "jambe",
    "janvier",
    "jardin",
    "jauger",
    "jaune",
    "javelot",
    "jetable",
    "jeton",
    "jeudi",
    "jeunesse",
    "joindre",
    "joncher",
    "jongler",
    "joueur",
    "jouissif",
    "journal",
    "jovial",
    "joyau",
    "joyeux",
    "jubiler",
    "jugement",
    "junior",
    "jupon",
    "juriste",
    "justice",
    "juteux",
    "juvénile",
    "kayak",
    "kimono",
    "kiosque",
    "label",
    "labial",
    "labourer",
    "lacérer",
    "lactose",
    "lagune",
    "laine",
    "laisser",
    "laitier",
    "lambeau",
    "lamelle",
    "lampe",
    "lanceur",
    "langage",
    "lanterne",
    "lapin",
    "largeur",
    "larme",
    "laurier",
    "lavabo",
    "lavoir",
    "lecture",
    "légal",
    "léger",
    "légume",
    "lessive",
    "lettre",
    "levier",
    "lexique",
    "lézard",
    "liasse",
    "libérer",
    "libre",
    "licence",
    "licorne",
    "liège",
    "lièvre",
    "ligature",
    "ligoter",
    "ligue",
    "limer",
    "limite",
    "limonade",
    "limpide",
    "linéaire",
    "lingot",
    "lionceau",
    "liquide",
    "lisière",
    "lister",
    "lithium",
    "litige",
    "littoral",
    "livreur",
    "logique",
    "lointain",
    "loisir",
    "lombric",
    "loterie",
    "louer",
    "lourd",
    "loutre",
    "louve",
    "loyal",
    "lubie",
    "lucide",
    "lucratif",
    "lueur",
    "lugubre",
    "luisant",
    "lumière",
    "lunaire",
    "lundi",
    "luron",
    "lutter",
    "luxueux",
    "machine",
    "magasin",
    "magenta",
    "magique",
    "maigre",
    "maillon",
    "maintien",
    "mairie",
    "maison",
    "majorer",
    "malaxer",
    "maléfice",
    "malheur",
    "malice",
    "mallette",
    "mammouth",
    "mandater",
    "maniable",
    "manquant",
    "manteau",
    "manuel",
    "marathon",
    "marbre",
    "marchand",
    "mardi",
    "maritime",
    "marqueur",
    "marron",
    "marteler",
    "mascotte",
    "massif",
    "matériel",
    "matière",
    "matraque",
    "maudire",
    "maussade",
    "mauve",
    "maximal",
    "méchant",
    "méconnu",
    "médaille",
    "médecin",
    "méditer",
    "méduse",
    "meilleur",
    "mélange",
    "mélodie",
    "membre",
    "mémoire",
    "menacer",
    "mener",
    "menhir",
    "mensonge",
    "mentor",
    "mercredi",
    "mérite",
    "merle",
    "messager",
    "mesure",
    "métal",
    "météore",
    "méthode",
    "métier",
    "meuble",
    "miauler",
    "microbe",
    "miette",
    "mignon",
    "migrer",
    "milieu",
    "million",
    "mimique",
    "mince",
    "minéral",
    "minimal",
    "minorer",
    "minute",
    "miracle",
    "miroiter",
    "missile",
    "mixte",
    "mobile",
    "moderne",
    "moelleux",
    "mondial",
    "moniteur",
    "monnaie",
    "monotone",
    "monstre",
    "montagne",
    "monument",
    "moqueur",
    "morceau",
    "morsure",
    "mortier",
    "moteur",
    "motif",
    "mouche",
    "moufle",
    "moulin",
    "mousson",
    "mouton",
    "mouvant",
    "multiple",
    "munition",
    "muraille",
    "murène",
    "murmure",
    "muscle",
    "muséum",
    "musicien",
    "mutation",
    "muter",
    "mutuel",
    "myriade",
    "myrtille",
    "mystère",
    "mythique",
    "nageur",
    "nappe",
    "narquois",
    "narrer",
    "natation",
    "nation",
    "nature",
    "naufrage",
    "nautique",
    "navire",
    "nébuleux",
    "nectar",
    "néfaste",
    "négation",
    "négliger",
    "négocier",
    "neige",
    "nerveux",
    "nettoyer",
    "neurone",
    "neutron",
    "neveu",
    "niche",
    "nickel",
    "nitrate",
    "niveau",
    "noble",
    "nocif",
    "nocturne",
    "noirceur",
    "noisette",
    "nomade",
    "nombreux",
    "nommer",
    "normatif",
    "notable",
    "notifier",
    "notoire",
    "nourrir",
    "nouveau",
    "novateur",
    "novembre",
    "novice",
    "nuage",
    "nuancer",
    "nuire",
    "nuisible",
    "numéro",
    "nuptial",
    "nuque",
    "nutritif",
    "obéir",
    "objectif",
    "obliger",
    "obscur",
    "observer",
    "obstacle",
    "obtenir",
    "obturer",
    "occasion",
    "occuper",
    "océan",
    "octobre",
    "octroyer",
    "octupler",
    "oculaire",
    "odeur",
    "odorant",
    "offenser",
    "officier",
    "offrir",
    "ogive",
    "oiseau",
    "oisillon",
    "olfactif",
    "olivier",
    "ombrage",
    "omettre",
    "onctueux",
    "onduler",
    "onéreux",
    "onirique",
    "opale",
    "opaque",
    "opérer",
    "opinion",
    "opportun",
    "opprimer",
    "opter",
    "optique",
    "orageux",
    "orange",
    "orbite",
    "ordonner",
    "oreille",
    "organe",
    "orgueil",
    "orifice",
    "ornement",
    "orque",
    "ortie",
    "osciller",
    "osmose",
    "ossature",
    "otarie",
    "ouragan",
    "ourson",
    "outil",
    "outrager",
    "ouvrage",
    "ovation",
    "oxyde",
    "oxygène",
    "ozone",
    "paisible",
    "palace",
    "palmarès",
    "palourde",
    "palper",
    "panache",
    "panda",
    "pangolin",
    "paniquer",
    "panneau",
    "panorama",
    "pantalon",
    "papaye",
    "papier",
    "papoter",
    "papyrus",
    "paradoxe",
    "parcelle",
    "paresse",
    "parfumer",
    "parler",
    "parole",
    "parrain",
    "parsemer",
    "partager",
    "parure",
    "parvenir",
    "passion",
    "pastèque",
    "paternel",
    "patience",
    "patron",
    "pavillon",
    "pavoiser",
    "payer",
    "paysage",
    "peigne",
    "peintre",
    "pelage",
    "pélican",
    "pelle",
    "pelouse",
    "peluche",
    "pendule",
    "pénétrer",
    "pénible",
    "pensif",
    "pénurie",
    "pépite",
    "péplum",
    "perdrix",
    "perforer",
    "période",
    "permuter",
    "perplexe",
    "persil",
    "perte",
    "peser",
    "pétale",
    "petit",
    "pétrir",
    "peuple",
    "pharaon",
    "phobie",
    "phoque",
    "photon",
    "phrase",
    "physique",
    "piano",
    "pictural",
    "pièce",
    "pierre",
    "pieuvre",
    "pilote",
    "pinceau",
    "pipette",
    "piquer",
    "pirogue",
    "piscine",
    "piston",
    "pivoter",
    "pixel",
    "pizza",
    "placard",
    "plafond",
    "plaisir",
    "planer",
    "plaque",
    "plastron",
    "pau",
    "pleurer",
    "plexus",
    "pliage",
    "plomb",
    "plonger",
    "pluie",
    "plumage",
    "pochette",
    "poésie",
    "poète",
    "pointe",
    "poirier",
    "poisson",
    "poivre",
    "polaire",
    "policier",
    "pollen",
    "polygone",
    "pommade",
    "pompier",
    "ponctuel",
    "pondérer",
    "poney",
    "portique",
    "position",
    "posséder",
    "posture",
    "potager",
    "poteau",
    "potion",
    "pouce",
    "poulain",
    "poumon",
    "pourpre",
    "poussin",
    "pouvoir",
    "prairie",
    "pratique",
    "précieux",
    "prédire",
    "préfixe",
    "prélude",
    "prénom",
    "présence",
    "prétexte",
    "prévoir",
    "primitif",
    "prince",
    "prison",
    "priver",
    "problème",
    "procéder",
    "prodige",
    "profond",
    "progrès",
    "proie",
    "projeter",
    "prologue",
    "promener",
    "propre",
    "prospère",
    "protéger",
    "prouesse",
    "proverbe",
    "prudence",
    "pruneau",
    "psychose",
    "public",
    "puceron",
    "puiser",
    "pulpe",
    "pulsar",
    "punaise",
    "punitif",
    "pupitre",
    "purifier",
    "puzzle",
    "pyramide",
    "quasar",
    "querelle",
    "question",
    "quiétude",
    "quitter",
    "quotient",
    "racine",
    "raconter",
    "radieux",
    "ragondin",
    "raideur",
    "raisin",
    "ralentir",
    "rallonge",
    "ramasser",
    "rapide",
    "rasage",
    "ratisser",
    "ravager",
    "ravin",
    "rayonner",
    "réactif",
    "réagir",
    "réaliser",
    "réanimer",
    "recevoir",
    "réciter",
    "réclamer",
    "récolter",
    "recruter",
    "reculer",
    "recycler",
    "rédiger",
    "redouter",
    "refaire",
    "réflexe",
    "réformer",
    "refrain",
    "refuge",
    "régalien",
    "région",
    "réglage",
    "régulier",
    "réitérer",
    "rejeter",
    "rejouer",
    "relatif",
    "relever",
    "relief",
    "remarque",
    "remède",
    "remise",
    "remonter",
    "remplir",
    "remuer",
    "renard",
    "renfort",
    "renifler",
    "renoncer",
    "rentrer",
    "renvoi",
    "replier",
    "reporter",
    "reprise",
    "reptile",
    "requin",
    "réserve",
    "résineux",
    "résoudre",
    "respect",
    "rester",
    "résultat",
    "rétablir",
    "retenir",
    "réticule",
    "retomber",
    "retracer",
    "réunion",
    "réussir",
    "revanche",
    "revivre",
    "révolte",
    "révulsif",
    "richesse",
    "rideau",
    "rieur",
    "rigide",
    "rigoler",
    "rincer",
    "riposter",
    "risible",
    "risque",
    "rituel",
    "rival",
    "rivière",
    "rocheux",
    "romance",
    "rompre",
    "ronce",
    "rondin",
    "roseau",
    "rosier",
    "rotatif",
    "rotor",
    "rotule",
    "rouge",
    "rouille",
    "rouleau",
    "routine",
    "royaume",
    "ruban",
    "rubis",
    "ruche",
    "ruelle",
    "rugueux",
    "ruiner",
    "ruisseau",
    "ruser",
    "rustique",
    "rythme",
    "sabler",
    "saboter",
    "sabre",
    "sacoche",
    "safari",
    "sagesse",
    "saisir",
    "salade",
    "salive",
    "salon",
    "saluer",
    "samedi",
    "sanction",
    "sanglier",
    "sarcasme",
    "sardine",
    "saturer",
    "saugrenu",
    "saumon",
    "sauter",
    "sauvage",
    "savant",
    "savonner",
    "scalpel",
    "scandale",
    "scélérat",
    "scénario",
    "sceptre",
    "schéma",
    "science",
    "scinder",
    "score",
    "scrutin",
    "sculpter",
    "séance",
    "sécable",
    "sécher",
    "secouer",
    "sécréter",
    "sédatif",
    "séduire",
    "seigneur",
    "séjour",
    "sélectif",
    "semaine",
    "sembler",
    "semence",
    "séminal",
    "sénateur",
    "sensible",
    "sentence",
    "séparer",
    "séquence",
    "serein",
    "sergent",
    "sérieux",
    "serrure",
    "sérum",
    "service",
    "sésame",
    "sévir",
    "sevrage",
    "sextuple",
    "sidéral",
    "siècle",
    "siéger",
    "siffler",
    "sigle",
    "signal",
    "silence",
    "silicium",
    "simple",
    "sincère",
    "sinistre",
    "siphon",
    "sirop",
    "sismique",
    "situer",
    "skier",
    "social",
    "socle",
    "sodium",
    "soigneux",
    "soldat",
    "soleil",
    "solitude",
    "soluble",
    "sombre",
    "sommeil",
    "somnoler",
    "sonde",
    "songeur",
    "sonnette",
    "sonore",
    "sorcier",
    "sortir",
    "sosie",
    "sottise",
    "soucieux",
    "soudure",
    "souffle",
    "soulever",
    "soupape",
    "source",
    "soutirer",
    "souvenir",
    "spacieux",
    "spatial",
    "spécial",
    "sphère",
    "spiral",
    "stable",
    "station",
    "sternum",
    "stimulus",
    "stipuler",
    "strict",
    "studieux",
    "stupeur",
    "styliste",
    "sublime",
    "substrat",
    "subtil",
    "subvenir",
    "succès",
    "sucre",
    "suffixe",
    "suggérer",
    "suiveur",
    "sulfate",
    "superbe",
    "supplier",
    "surface",
    "suricate",
    "surmener",
    "surprise",
    "sursaut",
    "survie",
    "suspect",
    "syllabe",
    "symbole",
    "symétrie",
    "synapse",
    "syntaxe",
    "système",
    "tabac",
    "tablier",
    "tactile",
    "tailler",
    "talent",
    "talisman",
    "talonner",
    "tambour",
    "tamiser",
    "tangible",
    "tapis",
    "taquiner",
    "tarder",
    "tarif",
    "tartine",
    "tasse",
    "tatami",
    "tatouage",
    "taupe",
    "taureau",
    "taxer",
    "témoin",
    "temporel",
    "tenaille",
    "tendre",
    "teneur",
    "tenir",
    "tension",
    "terminer",
    "terne",
    "terrible",
    "tétine",
    "texte",
    "thème",
    "théorie",
    "thérapie",
    "thorax",
    "tibia",
    "tiède",
    "timide",
    "tirelire",
    "tiroir",
    "tissu",
    "titane",
    "titre",
    "tituber",
    "toboggan",
    "tolérant",
    "tomate",
    "tonique",
    "tonneau",
    "toponyme",
    "torche",
    "tordre",
    "tornade",
    "torpille",
    "torrent",
    "torse",
    "tortue",
    "totem",
    "toucher",
    "tournage",
    "tousser",
    "toxine",
    "traction",
    "trafic",
    "tragique",
    "trahir",
    "train",
    "trancher",
    "travail",
    "trèfle",
    "tremper",
    "trésor",
    "treuil",
    "triage",
    "tribunal",
    "tricoter",
    "trilogie",
    "triomphe",
    "tripler",
    "triturer",
    "trivial",
    "trombone",
    "tronc",
    "tropical",
    "troupeau",
    "tuile",
    "tulipe",
    "tumulte",
    "tunnel",
    "turbine",
    "tuteur",
    "tutoyer",
    "tuyau",
    "tympan",
    "typhon",
    "typique",
    "tyran",
    "ubuesque",
    "ultime",
    "ultrason",
    "unanime",
    "unifier",
    "union",
    "unique",
    "unitaire",
    "univers",
    "uranium",
    "urbain",
    "urticant",
    "usage",
    "usine",
    "usuel",
    "usure",
    "utile",
    "utopie",
    "vacarme",
    "vaccin",
    "vagabond",
    "vague",
    "vaillant",
    "vaincre",
    "vaisseau",
    "valable",
    "valise",
    "vallon",
    "valve",
    "vampire",
    "vanille",
    "vapeur",
    "varier",
    "vaseux",
    "vassal",
    "vaste",
    "vecteur",
    "vedette",
    "végétal",
    "véhicule",
    "veinard",
    "véloce",
    "vendredi",
    "vénérer",
    "venger",
    "venimeux",
    "ventouse",
    "verdure",
    "vérin",
    "vernir",
    "verrou",
    "verser",
    "vertu",
    "veston",
    "vétéran",
    "vétuste",
    "vexant",
    "vexer",
    "viaduc",
    "viande",
    "victoire",
    "vidange",
    "vidéo",
    "vignette",
    "vigueur",
    "vilain",
    "village",
    "vinaigre",
    "violon",
    "vipère",
    "virement",
    "virtuose",
    "virus",
    "visage",
    "viseur",
    "vision",
    "visqueux",
    "visuel",
    "vital",
    "vitesse",
    "viticole",
    "vitrine",
    "vivace",
    "vivipare",
    "vocation",
    "voguer",
    "voile",
    "voisin",
    "voiture",
    "volaille",
    "volcan",
    "voltiger",
    "volume",
    "vorace",
    "vortex",
    "voter",
    "vouloir",
    "voyage",
    "voyelle",
    "wagon",
    "xénon",
    "yacht",
    "zèbre",
    "zénith",
    "zeste",
    "zoologie"
]
;
},370,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = [
    "abaco",
    "abbaglio",
    "abbinato",
    "abete",
    "abisso",
    "abolire",
    "abrasivo",
    "abrogato",
    "accadere",
    "accenno",
    "accusato",
    "acetone",
    "achille",
    "acido",
    "acqua",
    "acre",
    "acrilico",
    "acrobata",
    "acuto",
    "adagio",
    "addebito",
    "addome",
    "adeguato",
    "aderire",
    "adipe",
    "adottare",
    "adulare",
    "affabile",
    "affetto",
    "affisso",
    "affranto",
    "aforisma",
    "afoso",
    "africano",
    "agave",
    "agente",
    "agevole",
    "aggancio",
    "agire",
    "agitare",
    "agonismo",
    "agricolo",
    "agrumeto",
    "aguzzo",
    "alabarda",
    "alato",
    "albatro",
    "alberato",
    "albo",
    "albume",
    "alce",
    "alcolico",
    "alettone",
    "alfa",
    "algebra",
    "aliante",
    "alibi",
    "alimento",
    "allagato",
    "allegro",
    "allievo",
    "allodola",
    "allusivo",
    "almeno",
    "alogeno",
    "alpaca",
    "alpestre",
    "altalena",
    "alterno",
    "alticcio",
    "altrove",
    "alunno",
    "alveolo",
    "alzare",
    "amalgama",
    "amanita",
    "amarena",
    "ambito",
    "ambrato",
    "ameba",
    "america",
    "ametista",
    "amico",
    "ammasso",
    "ammenda",
    "ammirare",
    "ammonito",
    "amore",
    "ampio",
    "ampliare",
    "amuleto",
    "anacardo",
    "anagrafe",
    "analista",
    "anarchia",
    "anatra",
    "anca",
    "ancella",
    "ancora",
    "andare",
    "andrea",
    "anello",
    "angelo",
    "angolare",
    "angusto",
    "anima",
    "annegare",
    "annidato",
    "anno",
    "annuncio",
    "anonimo",
    "anticipo",
    "anzi",
    "apatico",
    "apertura",
    "apode",
    "apparire",
    "appetito",
    "appoggio",
    "approdo",
    "appunto",
    "aprile",
    "arabica",
    "arachide",
    "aragosta",
    "araldica",
    "arancio",
    "aratura",
    "arazzo",
    "arbitro",
    "archivio",
    "ardito",
    "arenile",
    "argento",
    "argine",
    "arguto",
    "aria",
    "armonia",
    "arnese",
    "arredato",
    "arringa",
    "arrosto",
    "arsenico",
    "arso",
    "artefice",
    "arzillo",
    "asciutto",
    "ascolto",
    "asepsi",
    "asettico",
    "asfalto",
    "asino",
    "asola",
    "aspirato",
    "aspro",
    "assaggio",
    "asse",
    "assoluto",
    "assurdo",
    "asta",
    "astenuto",
    "astice",
    "astratto",
    "atavico",
    "ateismo",
    "atomico",
    "atono",
    "attesa",
    "attivare",
    "attorno",
    "attrito",
    "attuale",
    "ausilio",
    "austria",
    "autista",
    "autonomo",
    "autunno",
    "avanzato",
    "avere",
    "avvenire",
    "avviso",
    "avvolgere",
    "azione",
    "azoto",
    "azzimo",
    "azzurro",
    "babele",
    "baccano",
    "bacino",
    "baco",
    "badessa",
    "badilata",
    "bagnato",
    "baita",
    "balcone",
    "baldo",
    "balena",
    "ballata",
    "balzano",
    "bambino",
    "bandire",
    "baraonda",
    "barbaro",
    "barca",
    "baritono",
    "barlume",
    "barocco",
    "basilico",
    "basso",
    "batosta",
    "battuto",
    "baule",
    "bava",
    "bavosa",
    "becco",
    "beffa",
    "belgio",
    "belva",
    "benda",
    "benevole",
    "benigno",
    "benzina",
    "bere",
    "berlina",
    "beta",
    "bibita",
    "bici",
    "bidone",
    "bifido",
    "biga",
    "bilancia",
    "bimbo",
    "binocolo",
    "biologo",
    "bipede",
    "bipolare",
    "birbante",
    "birra",
    "biscotto",
    "bisesto",
    "bisnonno",
    "bisonte",
    "bisturi",
    "bizzarro",
    "blando",
    "blatta",
    "bollito",
    "bonifico",
    "bordo",
    "bosco",
    "botanico",
    "bottino",
    "bozzolo",
    "braccio",
    "bradipo",
    "brama",
    "branca",
    "bravura",
    "bretella",
    "brevetto",
    "brezza",
    "briglia",
    "brillante",
    "brindare",
    "broccolo",
    "brodo",
    "bronzina",
    "brullo",
    "bruno",
    "bubbone",
    "buca",
    "budino",
    "buffone",
    "buio",
    "bulbo",
    "buono",
    "burlone",
    "burrasca",
    "bussola",
    "busta",
    "cadetto",
    "caduco",
    "calamaro",
    "calcolo",
    "calesse",
    "calibro",
    "calmo",
    "caloria",
    "cambusa",
    "camerata",
    "camicia",
    "cammino",
    "camola",
    "campale",
    "canapa",
    "candela",
    "cane",
    "canino",
    "canotto",
    "cantina",
    "capace",
    "capello",
    "capitolo",
    "capogiro",
    "cappero",
    "capra",
    "capsula",
    "carapace",
    "carcassa",
    "cardo",
    "carisma",
    "carovana",
    "carretto",
    "cartolina",
    "casaccio",
    "cascata",
    "caserma",
    "caso",
    "cassone",
    "castello",
    "casuale",
    "catasta",
    "catena",
    "catrame",
    "cauto",
    "cavillo",
    "cedibile",
    "cedrata",
    "cefalo",
    "celebre",
    "cellulare",
    "cena",
    "cenone",
    "centesimo",
    "ceramica",
    "cercare",
    "certo",
    "cerume",
    "cervello",
    "cesoia",
    "cespo",
    "ceto",
    "chela",
    "chiaro",
    "chicca",
    "chiedere",
    "chimera",
    "china",
    "chirurgo",
    "chitarra",
    "ciao",
    "ciclismo",
    "cifrare",
    "cigno",
    "cilindro",
    "ciottolo",
    "circa",
    "cirrosi",
    "citrico",
    "cittadino",
    "ciuffo",
    "civetta",
    "civile",
    "classico",
    "clinica",
    "cloro",
    "cocco",
    "codardo",
    "codice",
    "coerente",
    "cognome",
    "collare",
    "colmato",
    "colore",
    "colposo",
    "coltivato",
    "colza",
    "coma",
    "cometa",
    "commando",
    "comodo",
    "computer",
    "comune",
    "conciso",
    "condurre",
    "conferma",
    "congelare",
    "coniuge",
    "connesso",
    "conoscere",
    "consumo",
    "continuo",
    "convegno",
    "coperto",
    "copione",
    "coppia",
    "copricapo",
    "corazza",
    "cordata",
    "coricato",
    "cornice",
    "corolla",
    "corpo",
    "corredo",
    "corsia",
    "cortese",
    "cosmico",
    "costante",
    "cottura",
    "covato",
    "cratere",
    "cravatta",
    "creato",
    "credere",
    "cremoso",
    "crescita",
    "creta",
    "criceto",
    "crinale",
    "crisi",
    "critico",
    "croce",
    "cronaca",
    "crostata",
    "cruciale",
    "crusca",
    "cucire",
    "cuculo",
    "cugino",
    "cullato",
    "cupola",
    "curatore",
    "cursore",
    "curvo",
    "cuscino",
    "custode",
    "dado",
    "daino",
    "dalmata",
    "damerino",
    "daniela",
    "dannoso",
    "danzare",
    "datato",
    "davanti",
    "davvero",
    "debutto",
    "decennio",
    "deciso",
    "declino",
    "decollo",
    "decreto",
    "dedicato",
    "definito",
    "deforme",
    "degno",
    "delegare",
    "delfino",
    "delirio",
    "delta",
    "demenza",
    "denotato",
    "dentro",
    "deposito",
    "derapata",
    "derivare",
    "deroga",
    "descritto",
    "deserto",
    "desiderio",
    "desumere",
    "detersivo",
    "devoto",
    "diametro",
    "dicembre",
    "diedro",
    "difeso",
    "diffuso",
    "digerire",
    "digitale",
    "diluvio",
    "dinamico",
    "dinnanzi",
    "dipinto",
    "diploma",
    "dipolo",
    "diradare",
    "dire",
    "dirotto",
    "dirupo",
    "disagio",
    "discreto",
    "disfare",
    "disgelo",
    "disposto",
    "distanza",
    "disumano",
    "dito",
    "divano",
    "divelto",
    "dividere",
    "divorato",
    "doblone",
    "docente",
    "doganale",
    "dogma",
    "dolce",
    "domato",
    "domenica",
    "dominare",
    "dondolo",
    "dono",
    "dormire",
    "dote",
    "dottore",
    "dovuto",
    "dozzina",
    "drago",
    "druido",
    "dubbio",
    "dubitare",
    "ducale",
    "duna",
    "duomo",
    "duplice",
    "duraturo",
    "ebano",
    "eccesso",
    "ecco",
    "eclissi",
    "economia",
    "edera",
    "edicola",
    "edile",
    "editoria",
    "educare",
    "egemonia",
    "egli",
    "egoismo",
    "egregio",
    "elaborato",
    "elargire",
    "elegante",
    "elencato",
    "eletto",
    "elevare",
    "elfico",
    "elica",
    "elmo",
    "elsa",
    "eluso",
    "emanato",
    "emblema",
    "emesso",
    "emiro",
    "emotivo",
    "emozione",
    "empirico",
    "emulo",
    "endemico",
    "enduro",
    "energia",
    "enfasi",
    "enoteca",
    "entrare",
    "enzima",
    "epatite",
    "epilogo",
    "episodio",
    "epocale",
    "eppure",
    "equatore",
    "erario",
    "erba",
    "erboso",
    "erede",
    "eremita",
    "erigere",
    "ermetico",
    "eroe",
    "erosivo",
    "errante",
    "esagono",
    "esame",
    "esanime",
    "esaudire",
    "esca",
    "esempio",
    "esercito",
    "esibito",
    "esigente",
    "esistere",
    "esito",
    "esofago",
    "esortato",
    "esoso",
    "espanso",
    "espresso",
    "essenza",
    "esso",
    "esteso",
    "estimare",
    "estonia",
    "estroso",
    "esultare",
    "etilico",
    "etnico",
    "etrusco",
    "etto",
    "euclideo",
    "europa",
    "evaso",
    "evidenza",
    "evitato",
    "evoluto",
    "evviva",
    "fabbrica",
    "faccenda",
    "fachiro",
    "falco",
    "famiglia",
    "fanale",
    "fanfara",
    "fango",
    "fantasma",
    "fare",
    "farfalla",
    "farinoso",
    "farmaco",
    "fascia",
    "fastoso",
    "fasullo",
    "faticare",
    "fato",
    "favoloso",
    "febbre",
    "fecola",
    "fede",
    "fegato",
    "felpa",
    "feltro",
    "femmina",
    "fendere",
    "fenomeno",
    "fermento",
    "ferro",
    "fertile",
    "fessura",
    "festivo",
    "fetta",
    "feudo",
    "fiaba",
    "fiducia",
    "fifa",
    "figurato",
    "filo",
    "finanza",
    "finestra",
    "finire",
    "fiore",
    "fiscale",
    "fisico",
    "fiume",
    "flacone",
    "flamenco",
    "flebo",
    "flemma",
    "florido",
    "fluente",
    "fluoro",
    "fobico",
    "focaccia",
    "focoso",
    "foderato",
    "foglio",
    "folata",
    "folclore",
    "folgore",
    "fondente",
    "fonetico",
    "fonia",
    "fontana",
    "forbito",
    "forchetta",
    "foresta",
    "formica",
    "fornaio",
    "foro",
    "fortezza",
    "forzare",
    "fosfato",
    "fosso",
    "fracasso",
    "frana",
    "frassino",
    "fratello",
    "freccetta",
    "frenata",
    "fresco",
    "frigo",
    "frollino",
    "fronde",
    "frugale",
    "frutta",
    "fucilata",
    "fucsia",
    "fuggente",
    "fulmine",
    "fulvo",
    "fumante",
    "fumetto",
    "fumoso",
    "fune",
    "funzione",
    "fuoco",
    "furbo",
    "furgone",
    "furore",
    "fuso",
    "futile",
    "gabbiano",
    "gaffe",
    "gao",
    "gallina",
    "galoppo",
    "gambero",
    "gamma",
    "garanzia",
    "garbo",
    "garofano",
    "garzone",
    "gasdotto",
    "gasolio",
    "gastrico",
    "gatto",
    "gaudio",
    "gazebo",
    "gazzella",
    "geco",
    "gelatina",
    "gelso",
    "gemello",
    "gemmato",
    "gene",
    "genitore",
    "gennaio",
    "genotipo",
    "gergo",
    "ghepardo",
    "ghiaccio",
    "ghisa",
    "giallo",
    "gilda",
    "ginepro",
    "giocare",
    "gioiello",
    "giorno",
    "giove",
    "girato",
    "girone",
    "gittata",
    "giudizio",
    "giurato",
    "giusto",
    "globulo",
    "glutine",
    "gnomo",
    "gobba",
    "golf",
    "gomito",
    "gommone",
    "gonfio",
    "gonna",
    "governo",
    "gracile",
    "grado",
    "grafico",
    "grammo",
    "grande",
    "grattare",
    "gravoso",
    "grazia",
    "greca",
    "gregge",
    "grifone",
    "grigio",
    "grinza",
    "grotta",
    "gruppo",
    "guadagno",
    "guaio",
    "guanto",
    "guardare",
    "gufo",
    "guidare",
    "ibernato",
    "icona",
    "identico",
    "idillio",
    "idolo",
    "idra",
    "idrico",
    "idrogeno",
    "igiene",
    "ignaro",
    "ignorato",
    "ilare",
    "illeso",
    "illogico",
    "illudere",
    "imballo",
    "imbevuto",
    "imbocco",
    "imbuto",
    "immane",
    "immerso",
    "immolato",
    "impacco",
    "impeto",
    "impiego",
    "importo",
    "impronta",
    "inalare",
    "inarcare",
    "inattivo",
    "incanto",
    "incendio",
    "inchino",
    "incisivo",
    "incluso",
    "incontro",
    "incrocio",
    "incubo",
    "indagine",
    "india",
    "indole",
    "inedito",
    "infatti",
    "infilare",
    "inflitto",
    "ingaggio",
    "ingegno",
    "inglese",
    "ingordo",
    "ingrosso",
    "innesco",
    "inodore",
    "inoltrare",
    "inondato",
    "insano",
    "insetto",
    "insieme",
    "insonnia",
    "insulina",
    "intasato",
    "intero",
    "intonaco",
    "intuito",
    "inumidire",
    "invalido",
    "invece",
    "invito",
    "iperbole",
    "ipnotico",
    "ipotesi",
    "ippica",
    "iride",
    "irlanda",
    "ironico",
    "irrigato",
    "irrorare",
    "isolato",
    "isotopo",
    "isterico",
    "istituto",
    "istrice",
    "italia",
    "iterare",
    "labbro",
    "labirinto",
    "lacca",
    "lacerato",
    "lacrima",
    "lacuna",
    "laddove",
    "lago",
    "lampo",
    "lancetta",
    "lanterna",
    "lardoso",
    "larga",
    "laringe",
    "lastra",
    "nza",
    "latino",
    "lattuga",
    "lavagna",
    "lavoro",
    "legale",
    "leggero",
    "lembo",
    "lentezza",
    "lenza",
    "leone",
    "lepre",
    "lesivo",
    "lessato",
    "lesto",
    "letterale",
    "leva",
    "levigato",
    "libero",
    "lido",
    "lievito",
    "lilla",
    "limatura",
    "limitare",
    "limpido",
    "lineare",
    "lingua",
    "liquido",
    "lira",
    "lirica",
    "lisca",
    "lite",
    "litigio",
    "livrea",
    "locanda",
    "lode",
    "logica",
    "lombare",
    "londra",
    "longevo",
    "loquace",
    "lorenzo",
    "loto",
    "lotteria",
    "luce",
    "lucidato",
    "lumaca",
    "luminoso",
    "lungo",
    "lupo",
    "luppolo",
    "lusinga",
    "lusso",
    "lutto",
    "macabro",
    "macchina",
    "macero",
    "macinato",
    "madama",
    "magico",
    "maglia",
    "magnete",
    "magro",
    "maiolica",
    "malafede",
    "malgrado",
    "malinteso",
    "malsano",
    "malto",
    "malumore",
    "mana",
    "mancia",
    "mandorla",
    "mangiare",
    "manifesto",
    "mannaro",
    "manovra",
    "mansarda",
    "mantide",
    "manubrio",
    "mappa",
    "maratona",
    "marcire",
    "maretta",
    "marmo",
    "marsupio",
    "maschera",
    "massaia",
    "mastino",
    "materasso",
    "matricola",
    "mattone",
    "maturo",
    "mazurca",
    "meandro",
    "meccanico",
    "mecenate",
    "medesimo",
    "meditare",
    "mega",
    "melassa",
    "melis",
    "melodia",
    "meninge",
    "meno",
    "mensola",
    "mercurio",
    "merenda",
    "merlo",
    "meschino",
    "mese",
    "messere",
    "mestolo",
    "metallo",
    "metodo",
    "mettere",
    "miagolare",
    "mica",
    "micelio",
    "michele",
    "microbo",
    "midollo",
    "miele",
    "migliore",
    "milano",
    "milite",
    "mimosa",
    "minerale",
    "mini",
    "minore",
    "mirino",
    "mirtillo",
    "miscela",
    "missiva",
    "misto",
    "misurare",
    "mitezza",
    "mitigare",
    "mitra",
    "mittente",
    "mnemonico",
    "modello",
    "modifica",
    "modulo",
    "mogano",
    "mogio",
    "mole",
    "molosso",
    "monastero",
    "monco",
    "mondina",
    "monetario",
    "monile",
    "monotono",
    "monsone",
    "montato",
    "monviso",
    "mora",
    "mordere",
    "morsicato",
    "mostro",
    "motivato",
    "motosega",
    "motto",
    "movenza",
    "movimento",
    "mozzo",
    "mucca",
    "mucosa",
    "muffa",
    "mughetto",
    "mugnaio",
    "mulatto",
    "mulinello",
    "multiplo",
    "mummia",
    "munto",
    "muovere",
    "murale",
    "musa",
    "muscolo",
    "musica",
    "mutevole",
    "muto",
    "nababbo",
    "nafta",
    "nanometro",
    "narciso",
    "narice",
    "narrato",
    "nascere",
    "nastrare",
    "naturale",
    "nautica",
    "naviglio",
    "nebulosa",
    "necrosi",
    "negativo",
    "negozio",
    "nemmeno",
    "neofita",
    "neretto",
    "nervo",
    "nessuno",
    "nettuno",
    "neutrale",
    "neve",
    "nevrotico",
    "nicchia",
    "ninfa",
    "nitido",
    "nobile",
    "nocivo",
    "nodo",
    "nome",
    "nomina",
    "nordico",
    "normale",
    "norvegese",
    "nostrano",
    "notare",
    "notizia",
    "notturno",
    "novella",
    "nucleo",
    "nulla",
    "numero",
    "nuovo",
    "nutrire",
    "nuvola",
    "nuziale",
    "oasi",
    "obbedire",
    "obbligo",
    "obelisco",
    "oblio",
    "obolo",
    "obsoleto",
    "occasione",
    "occhio",
    "occidente",
    "occorrere",
    "occultare",
    "ocra",
    "oculato",
    "odierno",
    "odorare",
    "offerta",
    "offrire",
    "offuscato",
    "oggetto",
    "oggi",
    "ognuno",
    "olandese",
    "olfatto",
    "oliato",
    "oliva",
    "ologramma",
    "oltre",
    "omaggio",
    "ombelico",
    "ombra",
    "omega",
    "omissione",
    "ondoso",
    "onere",
    "onice",
    "onnivoro",
    "onorevole",
    "onta",
    "operato",
    "opinione",
    "opposto",
    "oracolo",
    "orafo",
    "ordine",
    "orecchino",
    "orefice",
    "orfano",
    "organico",
    "origine",
    "orizzonte",
    "orma",
    "ormeggio",
    "ornativo",
    "orologio",
    "orrendo",
    "orribile",
    "ortensia",
    "ortica",
    "orzata",
    "orzo",
    "osare",
    "oscurare",
    "osmosi",
    "ospedale",
    "ospite",
    "ossa",
    "ossidare",
    "ostacolo",
    "oste",
    "otite",
    "otre",
    "ottagono",
    "ottimo",
    "ottobre",
    "ovale",
    "ovest",
    "ovino",
    "oviparo",
    "ovocito",
    "ovunque",
    "ovviare",
    "ozio",
    "pacchetto",
    "pace",
    "pacifico",
    "padella",
    "padrone",
    "paese",
    "paga",
    "pagina",
    "palazzina",
    "palesare",
    "pallido",
    "palo",
    "palude",
    "pandoro",
    "pannello",
    "paolo",
    "paonazzo",
    "paprica",
    "parabola",
    "parcella",
    "parere",
    "pargolo",
    "pari",
    "parlato",
    "parola",
    "partire",
    "parvenza",
    "parziale",
    "passivo",
    "pasticca",
    "patacca",
    "patologia",
    "pattume",
    "pavone",
    "peccato",
    "pedalare",
    "pedonale",
    "peggio",
    "peloso",
    "penare",
    "pendice",
    "penisola",
    "pennuto",
    "penombra",
    "pensare",
    "pentola",
    "pepe",
    "pepita",
    "perbene",
    "percorso",
    "perdonato",
    "perforare",
    "pergamena",
    "periodo",
    "permesso",
    "perno",
    "perplesso",
    "persuaso",
    "pertugio",
    "pervaso",
    "pesatore",
    "pesista",
    "peso",
    "pestifero",
    "petalo",
    "pettine",
    "petulante",
    "pezzo",
    "piacere",
    "pianta",
    "piattino",
    "piccino",
    "picozza",
    "piega",
    "pietra",
    "piffero",
    "pigiama",
    "pigolio",
    "pigro",
    "pila",
    "pilifero",
    "pillola",
    "pilota",
    "pimpante",
    "pineta",
    "pinna",
    "pinolo",
    "pioggia",
    "piombo",
    "piramide",
    "piretico",
    "pirite",
    "pirolisi",
    "pitone",
    "pizzico",
    "placebo",
    "planare",
    "plasma",
    "platano",
    "plenario",
    "pochezza",
    "poderoso",
    "podismo",
    "poesia",
    "poggiare",
    "polenta",
    "poligono",
    "pollice",
    "polmonite",
    "polpetta",
    "polso",
    "poltrona",
    "polvere",
    "pomice",
    "pomodoro",
    "ponte",
    "popoloso",
    "porfido",
    "poroso",
    "porpora",
    "porre",
    "portata",
    "posa",
    "positivo",
    "possesso",
    "postulato",
    "potassio",
    "potere",
    "pranzo",
    "prassi",
    "pratica",
    "precluso",
    "predica",
    "prefisso",
    "pregiato",
    "prelievo",
    "premere",
    "prenotare",
    "preparato",
    "presenza",
    "pretesto",
    "prevalso",
    "prima",
    "principe",
    "privato",
    "problema",
    "procura",
    "produrre",
    "profumo",
    "progetto",
    "prolunga",
    "promessa",
    "pronome",
    "proposta",
    "proroga",
    "proteso",
    "prova",
    "prudente",
    "prugna",
    "prurito",
    "psiche",
    "pubblico",
    "pudica",
    "pugilato",
    "pugno",
    "pulce",
    "pulito",
    "pulsante",
    "puntare",
    "pupazzo",
    "pupilla",
    "puro",
    "quadro",
    "qualcosa",
    "quasi",
    "querela",
    "quota",
    "raccolto",
    "raddoppio",
    "radicale",
    "radunato",
    "raffica",
    "ragazzo",
    "ragione",
    "ragno",
    "ramarro",
    "ramingo",
    "ramo",
    "randagio",
    "rantolare",
    "rapato",
    "rapina",
    "rappreso",
    "rasatura",
    "raschiato",
    "rasente",
    "rassegna",
    "rastrello",
    "rata",
    "ravveduto",
    "reale",
    "recepire",
    "recinto",
    "recluta",
    "recondito",
    "recupero",
    "reddito",
    "redimere",
    "regalato",
    "registro",
    "regola",
    "regresso",
    "relazione",
    "remare",
    "remoto",
    "renna",
    "replica",
    "reprimere",
    "reputare",
    "resa",
    "residente",
    "responso",
    "restauro",
    "rete",
    "retina",
    "retorica",
    "rettifica",
    "revocato",
    "riassunto",
    "ribadire",
    "ribelle",
    "ribrezzo",
    "ricarica",
    "ricco",
    "ricevere",
    "riciclato",
    "ricordo",
    "ricreduto",
    "ridicolo",
    "ridurre",
    "rifasare",
    "riflesso",
    "riforma",
    "rifugio",
    "rigare",
    "rigettato",
    "righello",
    "rilassato",
    "rilevato",
    "rimanere",
    "rimbalzo",
    "rimedio",
    "rimorchio",
    "rinascita",
    "rincaro",
    "rinforzo",
    "rinnovo",
    "rinomato",
    "rinsavito",
    "rintocco",
    "rinuncia",
    "rinvenire",
    "riparato",
    "ripetuto",
    "ripieno",
    "riportare",
    "ripresa",
    "ripulire",
    "risata",
    "rischio",
    "riserva",
    "risibile",
    "riso",
    "rispetto",
    "ristoro",
    "risultato",
    "risvolto",
    "ritardo",
    "ritegno",
    "ritmico",
    "ritrovo",
    "riunione",
    "riva",
    "riverso",
    "rivincita",
    "rivolto",
    "rizoma",
    "roba",
    "robotico",
    "robusto",
    "roccia",
    "roco",
    "rodaggio",
    "rodere",
    "roditore",
    "rogito",
    "rollio",
    "romantico",
    "rompere",
    "ronzio",
    "rosolare",
    "rospo",
    "rotante",
    "rotondo",
    "rotula",
    "rovescio",
    "rubizzo",
    "rubrica",
    "ruga",
    "rullino",
    "rumine",
    "rumoroso",
    "ruolo",
    "rupe",
    "russare",
    "rustico",
    "sabato",
    "sabbiare",
    "sabotato",
    "sagoma",
    "salasso",
    "saldatura",
    "salgemma",
    "salivare",
    "salmone",
    "salone",
    "saltare",
    "saluto",
    "salvo",
    "sapere",
    "sapido",
    "saporito",
    "saraceno",
    "sarcasmo",
    "sarto",
    "sassoso",
    "satellite",
    "satira",
    "satollo",
    "saturno",
    "savana",
    "savio",
    "saziato",
    "sbadiglio",
    "sbalzo",
    "sbancato",
    "sbarra",
    "sbattere",
    "sbavare",
    "sbendare",
    "sbirciare",
    "sbloccato",
    "sbocciato",
    "sbrinare",
    "sbruffone",
    "sbuffare",
    "scabroso",
    "scadenza",
    "scala",
    "scambiare",
    "scandalo",
    "scapola",
    "scarso",
    "scatenare",
    "scavato",
    "scelto",
    "scenico",
    "scettro",
    "scheda",
    "schiena",
    "sciarpa",
    "scienza",
    "scindere",
    "scippo",
    "sciroppo",
    "scivolo",
    "sclerare",
    "scodella",
    "scolpito",
    "scomparto",
    "sconforto",
    "scoprire",
    "scorta",
    "scossone",
    "scozzese",
    "scriba",
    "scrollare",
    "scrutinio",
    "scuderia",
    "scultore",
    "scuola",
    "scuro",
    "scusare",
    "sdebitare",
    "sdoganare",
    "seccatura",
    "secondo",
    "sedano",
    "seggiola",
    "segnalato",
    "segregato",
    "seguito",
    "selciato",
    "selettivo",
    "sella",
    "selvaggio",
    "semaforo",
    "sembrare",
    "seme",
    "seminato",
    "sempre",
    "senso",
    "sentire",
    "sepolto",
    "sequenza",
    "serata",
    "serbato",
    "sereno",
    "serio",
    "serpente",
    "serraglio",
    "servire",
    "sestina",
    "setola",
    "settimana",
    "sfacelo",
    "sfaldare",
    "sfamato",
    "sfarzoso",
    "sfaticato",
    "sfera",
    "sfida",
    "sfilato",
    "sfinge",
    "sfocato",
    "sfoderare",
    "sfogo",
    "sfoltire",
    "sforzato",
    "sfratto",
    "sfruttato",
    "sfuggito",
    "sfumare",
    "sfuso",
    "sgabello",
    "sgarbato",
    "sgonfiare",
    "sgorbio",
    "sgrassato",
    "sguardo",
    "sibilo",
    "siccome",
    "sierra",
    "sigla",
    "signore",
    "silenzio",
    "sillaba",
    "simbolo",
    "simpatico",
    "simulato",
    "sinfonia",
    "singolo",
    "sinistro",
    "sino",
    "sintesi",
    "sinusoide",
    "sipario",
    "sisma",
    "sistole",
    "situato",
    "slitta",
    "slogatura",
    "sloveno",
    "smarrito",
    "smemorato",
    "smentito",
    "smeraldo",
    "smilzo",
    "smontare",
    "smottato",
    "smussato",
    "snellire",
    "snervato",
    "snodo",
    "sobbalzo",
    "sobrio",
    "soccorso",
    "sociale",
    "sodale",
    "soffitto",
    "sogno",
    "soldato",
    "solenne",
    "solido",
    "sollazzo",
    "solo",
    "solubile",
    "solvente",
    "somatico",
    "somma",
    "sonda",
    "sonetto",
    "sonnifero",
    "sopire",
    "soppeso",
    "sopra",
    "sorgere",
    "sorpasso",
    "sorriso",
    "sorso",
    "sorteggio",
    "sorvolato",
    "sospiro",
    "sosta",
    "sottile",
    "spada",
    "spalla",
    "spargere",
    "spatola",
    "spavento",
    "spazzola",
    "specie",
    "spedire",
    "spegnere",
    "spelatura",
    "speranza",
    "spessore",
    "spettrale",
    "spezzato",
    "spia",
    "spigoloso",
    "spillato",
    "spinoso",
    "spirale",
    "splendido",
    "sportivo",
    "sposo",
    "spranga",
    "sprecare",
    "spronato",
    "spruzzo",
    "spuntino",
    "squillo",
    "sradicare",
    "srotolato",
    "stabile",
    "stacco",
    "staffa",
    "stagnare",
    "stampato",
    "stantio",
    "starnuto",
    "stasera",
    "statuto",
    "stelo",
    "steppa",
    "sterzo",
    "stiletto",
    "stima",
    "stirpe",
    "stivale",
    "stizzoso",
    "stonato",
    "storico",
    "strappo",
    "stregato",
    "stridulo",
    "strozzare",
    "strutto",
    "stuccare",
    "stufo",
    "stupendo",
    "subentro",
    "succoso",
    "sudore",
    "suggerito",
    "sugo",
    "sultano",
    "suonare",
    "superbo",
    "supporto",
    "surgelato",
    "surrogato",
    "sussurro",
    "sutura",
    "svagare",
    "svedese",
    "sveglio",
    "svelare",
    "svenuto",
    "svezia",
    "sviluppo",
    "svista",
    "svizzera",
    "svolta",
    "svuotare",
    "tabacco",
    "tabulato",
    "tacciare",
    "taciturno",
    "tale",
    "talismano",
    "tampone",
    "tannino",
    "tara",
    "tardivo",
    "targato",
    "tariffa",
    "tarpare",
    "tartaruga",
    "tasto",
    "tattico",
    "taverna",
    "tavolata",
    "tazza",
    "teca",
    "tecnico",
    "telefono",
    "temerario",
    "tempo",
    "temuto",
    "tendone",
    "tenero",
    "tensione",
    "tentacolo",
    "teorema",
    "terme",
    "terrazzo",
    "terzetto",
    "tesi",
    "tesserato",
    "testato",
    "tetro",
    "tettoia",
    "tifare",
    "tigella",
    "timbro",
    "tinto",
    "tipico",
    "tipografo",
    "tiraggio",
    "tiro",
    "titanio",
    "titolo",
    "titubante",
    "tizio",
    "tizzone",
    "toccare",
    "tollerare",
    "tolto",
    "tombola",
    "tomo",
    "tonfo",
    "tonsilla",
    "topazio",
    "topologia",
    "toppa",
    "torba",
    "tornare",
    "torrone",
    "tortora",
    "toscano",
    "tossire",
    "tostatura",
    "totano",
    "trabocco",
    "trachea",
    "trafila",
    "tragedia",
    "tralcio",
    "tramonto",
    "transito",
    "trapano",
    "trarre",
    "trasloco",
    "trattato",
    "trave",
    "treccia",
    "tremolio",
    "trespolo",
    "tributo",
    "tricheco",
    "trifoglio",
    "trillo",
    "trincea",
    "trio",
    "tristezza",
    "triturato",
    "trivella",
    "tromba",
    "trono",
    "troppo",
    "trottola",
    "trovare",
    "truccato",
    "tubatura",
    "tuffato",
    "tulipano",
    "tumulto",
    "tunisia",
    "turbare",
    "turchino",
    "tuta",
    "tutela",
    "ubicato",
    "uccello",
    "uccisore",
    "udire",
    "uditivo",
    "uffa",
    "ufficio",
    "uguale",
    "ulisse",
    "ultimato",
    "umano",
    "umile",
    "umorismo",
    "uncinetto",
    "ungere",
    "ungherese",
    "unicorno",
    "unificato",
    "unisono",
    "unitario",
    "unte",
    "uovo",
    "upupa",
    "uragano",
    "urgenza",
    "urlo",
    "usanza",
    "usato",
    "uscito",
    "usignolo",
    "usuraio",
    "utensile",
    "utilizzo",
    "utopia",
    "vacante",
    "vaccinato",
    "vagabondo",
    "vagliato",
    "valanga",
    "valgo",
    "valico",
    "valletta",
    "valoroso",
    "valutare",
    "valvola",
    "vampata",
    "vangare",
    "vanitoso",
    "vano",
    "vantaggio",
    "vanvera",
    "vapore",
    "varano",
    "varcato",
    "variante",
    "vasca",
    "vedetta",
    "vedova",
    "veduto",
    "vegetale",
    "veicolo",
    "velcro",
    "velina",
    "velluto",
    "veloce",
    "venato",
    "vendemmia",
    "vento",
    "verace",
    "verbale",
    "vergogna",
    "verifica",
    "vero",
    "verruca",
    "verticale",
    "vescica",
    "vessillo",
    "vestale",
    "veterano",
    "vetrina",
    "vetusto",
    "viandante",
    "vibrante",
    "vicenda",
    "vichingo",
    "vicinanza",
    "vidimare",
    "vigilia",
    "vigneto",
    "vigore",
    "vile",
    "villano",
    "vimini",
    "vincitore",
    "viola",
    "vipera",
    "virgola",
    "virologo",
    "virulento",
    "viscoso",
    "visione",
    "vispo",
    "vissuto",
    "visura",
    "vita",
    "vitello",
    "vittima",
    "vivanda",
    "vivido",
    "viziare",
    "voce",
    "voga",
    "volatile",
    "volere",
    "volpe",
    "voragine",
    "vulcano",
    "zampogna",
    "zanna",
    "zappato",
    "zattera",
    "zavorra",
    "zefiro",
    "zelante",
    "zelo",
    "zenzero",
    "zerbino",
    "zibetto",
    "zinco",
    "zircone",
    "zitto",
    "zolla",
    "zotico",
    "zucchero",
    "zufolo",
    "zulu",
    "zuppa"
]
;
},371,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = [
    "ábaco",
    "abdomen",
    "abeja",
    "abierto",
    "abogado",
    "abono",
    "aborto",
    "abrazo",
    "abrir",
    "abuelo",
    "abuso",
    "acabar",
    "academia",
    "acceso",
    "acción",
    "aceite",
    "acelga",
    "acento",
    "aceptar",
    "ácido",
    "aclarar",
    "acné",
    "acoger",
    "acoso",
    "activo",
    "acto",
    "actriz",
    "actuar",
    "acudir",
    "acuerdo",
    "acusar",
    "adicto",
    "admitir",
    "adoptar",
    "adorno",
    "aduana",
    "adulto",
    "aéreo",
    "afectar",
    "afición",
    "afinar",
    "afirmar",
    "ágil",
    "agitar",
    "agonía",
    "agosto",
    "agotar",
    "agregar",
    "agrio",
    "agua",
    "agudo",
    "águila",
    "aguja",
    "ahogo",
    "ahorro",
    "aire",
    "aislar",
    "ajedrez",
    "ajeno",
    "ajuste",
    "alacrán",
    "alambre",
    "alarma",
    "alba",
    "álbum",
    "alcalde",
    "aldea",
    "alegre",
    "alejar",
    "alerta",
    "aleta",
    "alfiler",
    "alga",
    "algodón",
    "aliado",
    "aliento",
    "alivio",
    "alma",
    "almeja",
    "almíbar",
    "altar",
    "alteza",
    "altivo",
    "alto",
    "altura",
    "alumno",
    "alzar",
    "amable",
    "amante",
    "amapola",
    "amargo",
    "amasar",
    "ámbar",
    "ámbito",
    "ameno",
    "amigo",
    "amistad",
    "amor",
    "amparo",
    "amplio",
    "ancho",
    "anciano",
    "ancla",
    "andar",
    "andén",
    "anemia",
    "ángulo",
    "anillo",
    "ánimo",
    "anís",
    "anotar",
    "antena",
    "antiguo",
    "antojo",
    "anual",
    "anular",
    "anuncio",
    "añadir",
    "añejo",
    "año",
    "apagar",
    "aparato",
    "apetito",
    "apio",
    "aplicar",
    "apodo",
    "aporte",
    "apoyo",
    "aprender",
    "aprobar",
    "apuesta",
    "apuro",
    "arado",
    "araña",
    "arar",
    "árbitro",
    "árbol",
    "arbusto",
    "archivo",
    "arco",
    "arder",
    "ardilla",
    "arduo",
    "área",
    "árido",
    "aries",
    "armonía",
    "arnés",
    "aroma",
    "arpa",
    "arpón",
    "arreglo",
    "arroz",
    "arruga",
    "arte",
    "artista",
    "asa",
    "asado",
    "asalto",
    "ascenso",
    "asegurar",
    "aseo",
    "asesor",
    "asiento",
    "asilo",
    "asistir",
    "asno",
    "asombro",
    "áspero",
    "astilla",
    "astro",
    "astuto",
    "asumir",
    "asunto",
    "atajo",
    "ataque",
    "atar",
    "atento",
    "ateo",
    "ático",
    "atleta",
    "átomo",
    "atraer",
    "atroz",
    "atún",
    "audaz",
    "audio",
    "auge",
    "aula",
    "aumento",
    "ausente",
    "autor",
    "aval",
    "avance",
    "avaro",
    "ave",
    "avellana",
    "avena",
    "avestruz",
    "avión",
    "aviso",
    "ayer",
    "ayuda",
    "ayuno",
    "azafrán",
    "azar",
    "azote",
    "azúcar",
    "azufre",
    "azul",
    "baba",
    "babor",
    "bache",
    "bahía",
    "baile",
    "bajar",
    "balanza",
    "balcón",
    "balde",
    "bambú",
    "banco",
    "banda",
    "baño",
    "barba",
    "barco",
    "barniz",
    "barro",
    "báscula",
    "bastón",
    "basura",
    "batalla",
    "batería",
    "batir",
    "batuta",
    "baúl",
    "bazar",
    "bebé",
    "bebida",
    "bello",
    "besar",
    "beso",
    "bestia",
    "bicho",
    "bien",
    "bingo",
    "blanco",
    "bloque",
    "blusa",
    "boa",
    "bobina",
    "bobo",
    "boca",
    "bocina",
    "boda",
    "bodega",
    "boina",
    "bola",
    "bolero",
    "bolsa",
    "bomba",
    "bondad",
    "bonito",
    "bono",
    "bonsái",
    "borde",
    "borrar",
    "bosque",
    "bote",
    "botín",
    "bóveda",
    "bozal",
    "bravo",
    "brazo",
    "brecha",
    "breve",
    "brillo",
    "brinco",
    "brisa",
    "broca",
    "broma",
    "bronce",
    "brote",
    "bruja",
    "brusco",
    "bruto",
    "buceo",
    "bucle",
    "bueno",
    "buey",
    "bufanda",
    "bufón",
    "búho",
    "buitre",
    "bulto",
    "burbuja",
    "burla",
    "burro",
    "buscar",
    "butaca",
    "buzón",
    "caballo",
    "cabeza",
    "cabina",
    "cabra",
    "cacao",
    "cadáver",
    "cadena",
    "caer",
    "café",
    "caída",
    "caimán",
    "caja",
    "cajón",
    "cal",
    "calamar",
    "calcio",
    "caldo",
    "calidad",
    "calle",
    "calma",
    "calor",
    "calvo",
    "cama",
    "cambio",
    "camello",
    "camino",
    "campo",
    "cáncer",
    "candil",
    "canela",
    "canguro",
    "canica",
    "canto",
    "caña",
    "cañón",
    "caoba",
    "caos",
    "capaz",
    "capitán",
    "capote",
    "captar",
    "capucha",
    "cara",
    "carbón",
    "cárcel",
    "careta",
    "carga",
    "cariño",
    "carne",
    "carpeta",
    "carro",
    "carta",
    "casa",
    "casco",
    "casero",
    "caspa",
    "castor",
    "catorce",
    "catre",
    "caudal",
    "causa",
    "cazo",
    "cebolla",
    "ceder",
    "cedro",
    "celda",
    "célebre",
    "celoso",
    "célula",
    "cemento",
    "ceniza",
    "centro",
    "cerca",
    "cerdo",
    "cereza",
    "cero",
    "cerrar",
    "certeza",
    "césped",
    "cetro",
    "chacal",
    "chaleco",
    "champú",
    "chancla",
    "chapa",
    "charla",
    "chico",
    "chiste",
    "chivo",
    "choque",
    "choza",
    "chuleta",
    "chupar",
    "ciclón",
    "ciego",
    "cielo",
    "cien",
    "cierto",
    "cifra",
    "cigarro",
    "cima",
    "cinco",
    "cine",
    "cinta",
    "ciprés",
    "circo",
    "ciruela",
    "cisne",
    "cita",
    "ciudad",
    "clamor",
    "clan",
    "claro",
    "clase",
    "clave",
    "cliente",
    "clima",
    "clínica",
    "cobre",
    "cocción",
    "cochino",
    "cocina",
    "coco",
    "código",
    "codo",
    "cofre",
    "coger",
    "cohete",
    "cojín",
    "cojo",
    "cola",
    "colcha",
    "colegio",
    "colgar",
    "colina",
    "collar",
    "colmo",
    "columna",
    "combate",
    "comer",
    "comida",
    "cómodo",
    "compra",
    "conde",
    "conejo",
    "conga",
    "conocer",
    "consejo",
    "contar",
    "copa",
    "copia",
    "corazón",
    "corbata",
    "corcho",
    "cordón",
    "corona",
    "correr",
    "coser",
    "cosmos",
    "costa",
    "cráneo",
    "cráter",
    "crear",
    "crecer",
    "creído",
    "crema",
    "cría",
    "crimen",
    "cripta",
    "crisis",
    "cromo",
    "crónica",
    "croqueta",
    "crudo",
    "cruz",
    "cuadro",
    "cuarto",
    "cuatro",
    "cubo",
    "cubrir",
    "cuchara",
    "cuello",
    "cuento",
    "cuerda",
    "cuesta",
    "cueva",
    "cuidar",
    "culebra",
    "culpa",
    "culto",
    "cumbre",
    "cumplir",
    "cuna",
    "cuneta",
    "cuota",
    "cupón",
    "cúpula",
    "curar",
    "curioso",
    "curso",
    "curva",
    "cutis",
    "dama",
    "danza",
    "dar",
    "dardo",
    "dátil",
    "deber",
    "débil",
    "década",
    "decir",
    "dedo",
    "defensa",
    "definir",
    "dejar",
    "delfín",
    "delgado",
    "delito",
    "demora",
    "denso",
    "dental",
    "deporte",
    "derecho",
    "derrota",
    "desayuno",
    "deseo",
    "desfile",
    "desnudo",
    "destino",
    "desvío",
    "detalle",
    "detener",
    "deuda",
    "día",
    "diablo",
    "diadema",
    "diamante",
    "diana",
    "diario",
    "dibujo",
    "dictar",
    "diente",
    "dieta",
    "diez",
    "difícil",
    "digno",
    "dilema",
    "diluir",
    "dinero",
    "directo",
    "dirigir",
    "disco",
    "diseño",
    "disfraz",
    "diva",
    "divino",
    "doble",
    "doce",
    "dolor",
    "domingo",
    "don",
    "donar",
    "dorado",
    "dormir",
    "dorso",
    "dos",
    "dosis",
    "dragón",
    "droga",
    "ducha",
    "duda",
    "duelo",
    "dueño",
    "dulce",
    "dúo",
    "duque",
    "durar",
    "dureza",
    "duro",
    "ébano",
    "ebrio",
    "echar",
    "eco",
    "ecuador",
    "edad",
    "edición",
    "edificio",
    "editor",
    "educar",
    "efecto",
    "eficaz",
    "eje",
    "ejemplo",
    "elefante",
    "elegir",
    "elemento",
    "elevar",
    "elipse",
    "élite",
    "elixir",
    "elogio",
    "eludir",
    "embudo",
    "emitir",
    "emoción",
    "empate",
    "empeño",
    "empleo",
    "empresa",
    "enano",
    "encargo",
    "enchufe",
    "encía",
    "enemigo",
    "enero",
    "enfado",
    "enfermo",
    "engaño",
    "enigma",
    "enlace",
    "enorme",
    "enredo",
    "ensayo",
    "enseñar",
    "entero",
    "entrar",
    "envase",
    "envío",
    "época",
    "equipo",
    "erizo",
    "escala",
    "escena",
    "escolar",
    "escribir",
    "escudo",
    "esencia",
    "esfera",
    "esfuerzo",
    "espada",
    "espejo",
    "espía",
    "esposa",
    "espuma",
    "esquí",
    "estar",
    "este",
    "estilo",
    "estufa",
    "etapa",
    "eterno",
    "ética",
    "etnia",
    "evadir",
    "evaluar",
    "evento",
    "evitar",
    "exacto",
    "examen",
    "exceso",
    "excusa",
    "exento",
    "exigir",
    "exilio",
    "existir",
    "éxito",
    "experto",
    "explicar",
    "exponer",
    "extremo",
    "fábrica",
    "fábula",
    "fachada",
    "fácil",
    "factor",
    "faena",
    "faja",
    "falda",
    "fallo",
    "falso",
    "faltar",
    "fama",
    "familia",
    "famoso",
    "faraón",
    "farmacia",
    "farol",
    "farsa",
    "fase",
    "fatiga",
    "fauna",
    "favor",
    "fax",
    "febrero",
    "fecha",
    "feliz",
    "feo",
    "feria",
    "feroz",
    "fértil",
    "fervor",
    "festín",
    "fiable",
    "fianza",
    "fiar",
    "fibra",
    "ficción",
    "ficha",
    "fideo",
    "fiebre",
    "fiel",
    "fiera",
    "fiesta",
    "figura",
    "fijar",
    "fijo",
    "fila",
    "filete",
    "filial",
    "filtro",
    "fin",
    "finca",
    "fingir",
    "finito",
    "firma",
    "flaco",
    "flauta",
    "flecha",
    "flor",
    "flota",
    "fluir",
    "flujo",
    "flúor",
    "fobia",
    "foca",
    "fogata",
    "fogón",
    "folio",
    "folleto",
    "fondo",
    "forma",
    "forro",
    "fortuna",
    "forzar",
    "fosa",
    "foto",
    "fracaso",
    "frágil",
    "franja",
    "frase",
    "fraude",
    "freír",
    "freno",
    "fresa",
    "frío",
    "frito",
    "fruta",
    "fuego",
    "fuente",
    "fuerza",
    "fuga",
    "fumar",
    "función",
    "funda",
    "furgón",
    "furia",
    "fusil",
    "fútbol",
    "futuro",
    "gacela",
    "gafas",
    "gaita",
    "gajo",
    "gala",
    "galería",
    "gallo",
    "gamba",
    "ganar",
    "gancho",
    "ganga",
    "ganso",
    "garaje",
    "garza",
    "gasolina",
    "gastar",
    "gato",
    "gavilán",
    "gemelo",
    "gemir",
    "gen",
    "género",
    "genio",
    "gente",
    "geranio",
    "gerente",
    "germen",
    "gesto",
    "gigante",
    "gimnasio",
    "girar",
    "giro",
    "glaciar",
    "globo",
    "gloria",
    "gol",
    "golfo",
    "goloso",
    "golpe",
    "goma",
    "gordo",
    "gorila",
    "gorra",
    "gota",
    "goteo",
    "gozar",
    "grada",
    "gráfico",
    "grano",
    "grasa",
    "gratis",
    "grave",
    "grieta",
    "grillo",
    "gripe",
    "gris",
    "grito",
    "grosor",
    "grúa",
    "grueso",
    "grumo",
    "grupo",
    "guante",
    "guapo",
    "guardia",
    "guerra",
    "guía",
    "guiño",
    "guion",
    "guiso",
    "guitarra",
    "gusano",
    "gustar",
    "haber",
    "hábil",
    "hablar",
    "hacer",
    "hacha",
    "hada",
    "hallar",
    "hamaca",
    "harina",
    "haz",
    "hazaña",
    "hebilla",
    "hebra",
    "hecho",
    "helado",
    "helio",
    "hembra",
    "herir",
    "hermano",
    "héroe",
    "hervir",
    "hielo",
    "hierro",
    "hígado",
    "higiene",
    "hijo",
    "himno",
    "historia",
    "hocico",
    "hogar",
    "hoguera",
    "hoja",
    "hombre",
    "hongo",
    "honor",
    "honra",
    "hora",
    "hormiga",
    "horno",
    "hostil",
    "hoyo",
    "hueco",
    "huelga",
    "huerta",
    "hueso",
    "huevo",
    "huida",
    "huir",
    "humano",
    "húmedo",
    "humilde",
    "humo",
    "hundir",
    "huracán",
    "hurto",
    "icono",
    "ideal",
    "idioma",
    "ídolo",
    "iglesia",
    "iglú",
    "igual",
    "ilegal",
    "ilusión",
    "imagen",
    "imán",
    "imitar",
    "impar",
    "imperio",
    "imponer",
    "impulso",
    "incapaz",
    "índice",
    "inerte",
    "infiel",
    "informe",
    "ingenio",
    "inicio",
    "inmenso",
    "inmune",
    "innato",
    "insecto",
    "instante",
    "interés",
    "íntimo",
    "intuir",
    "inútil",
    "invierno",
    "ira",
    "iris",
    "ironía",
    "isla",
    "islote",
    "jabalí",
    "jabón",
    "jamón",
    "jarabe",
    "jardín",
    "jarra",
    "jaula",
    "jazmín",
    "jefe",
    "jeringa",
    "jinete",
    "jornada",
    "joroba",
    "joven",
    "joya",
    "juerga",
    "jueves",
    "juez",
    "jugador",
    "jugo",
    "juguete",
    "juicio",
    "junco",
    "jungla",
    "junio",
    "juntar",
    "júpiter",
    "jurar",
    "justo",
    "juvenil",
    "juzgar",
    "kilo",
    "koala",
    "labio",
    "lacio",
    "lacra",
    "lado",
    "ladrón",
    "lagarto",
    "lágrima",
    "laguna",
    "laico",
    "lamer",
    "lámina",
    "lámpara",
    "lana",
    "lancha",
    "langosta",
    "lanza",
    "lápiz",
    "largo",
    "larva",
    "lástima",
    "lata",
    "látex",
    "latir",
    "laurel",
    "lavar",
    "lazo",
    "leal",
    "lección",
    "leche",
    "lector",
    "leer",
    "legión",
    "legumbre",
    "lejano",
    "lengua",
    "lento",
    "leña",
    "león",
    "leopardo",
    "lesión",
    "letal",
    "letra",
    "leve",
    "leyenda",
    "libertad",
    "libro",
    "licor",
    "líder",
    "lidiar",
    "lienzo",
    "liga",
    "ligero",
    "lima",
    "límite",
    "limón",
    "limpio",
    "lince",
    "lindo",
    "línea",
    "lingote",
    "lino",
    "linterna",
    "líquido",
    "liso",
    "lista",
    "litera",
    "litio",
    "litro",
    "llaga",
    "llama",
    "llanto",
    "llave",
    "llegar",
    "llenar",
    "llevar",
    "llorar",
    "llover",
    "lluvia",
    "lobo",
    "loción",
    "loco",
    "locura",
    "lógica",
    "logro",
    "lombriz",
    "lomo",
    "lonja",
    "lote",
    "lucha",
    "lucir",
    "lugar",
    "lujo",
    "luna",
    "lunes",
    "lupa",
    "lustro",
    "luto",
    "luz",
    "maceta",
    "macho",
    "madera",
    "madre",
    "maduro",
    "maestro",
    "mafia",
    "magia",
    "mago",
    "maíz",
    "maldad",
    "maleta",
    "malla",
    "malo",
    "mamá",
    "mambo",
    "mamut",
    "manco",
    "mando",
    "manejar",
    "manga",
    "maniquí",
    "manjar",
    "mano",
    "manso",
    "manta",
    "mañana",
    "mapa",
    "máquina",
    "mar",
    "marco",
    "marea",
    "marfil",
    "margen",
    "marido",
    "mármol",
    "marrón",
    "martes",
    "marzo",
    "masa",
    "máscara",
    "masivo",
    "matar",
    "materia",
    "matiz",
    "matriz",
    "máximo",
    "mayor",
    "mazorca",
    "mecha",
    "medalla",
    "medio",
    "médula",
    "mejilla",
    "mejor",
    "melena",
    "melón",
    "memoria",
    "menor",
    "mensaje",
    "mente",
    "menú",
    "mercado",
    "merengue",
    "mérito",
    "mes",
    "mesón",
    "meta",
    "meter",
    "método",
    "metro",
    "mezcla",
    "miedo",
    "miel",
    "miembro",
    "miga",
    "mil",
    "milagro",
    "militar",
    "millón",
    "mimo",
    "mina",
    "minero",
    "mínimo",
    "minuto",
    "miope",
    "mirar",
    "misa",
    "miseria",
    "misil",
    "mismo",
    "mitad",
    "mito",
    "mochila",
    "moción",
    "moda",
    "modelo",
    "moho",
    "mojar",
    "molde",
    "moler",
    "molino",
    "momento",
    "momia",
    "monarca",
    "moneda",
    "monja",
    "monto",
    "moño",
    "morada",
    "morder",
    "moreno",
    "morir",
    "morro",
    "morsa",
    "mortal",
    "mosca",
    "mostrar",
    "motivo",
    "mover",
    "móvil",
    "mozo",
    "mucho",
    "mudar",
    "mueble",
    "muela",
    "muerte",
    "muestra",
    "mugre",
    "mujer",
    "mula",
    "muleta",
    "multa",
    "mundo",
    "muñeca",
    "mural",
    "muro",
    "músculo",
    "museo",
    "musgo",
    "música",
    "muslo",
    "nácar",
    "nación",
    "nadar",
    "naipe",
    "naranja",
    "nariz",
    "narrar",
    "nasal",
    "natal",
    "nativo",
    "natural",
    "náusea",
    "naval",
    "nave",
    "navidad",
    "necio",
    "néctar",
    "negar",
    "negocio",
    "negro",
    "neón",
    "nervio",
    "neto",
    "neutro",
    "nevar",
    "nevera",
    "nicho",
    "nido",
    "niebla",
    "nieto",
    "niñez",
    "niño",
    "nítido",
    "nivel",
    "nobleza",
    "noche",
    "nómina",
    "noria",
    "norma",
    "norte",
    "nota",
    "noticia",
    "novato",
    "novela",
    "novio",
    "nube",
    "nuca",
    "núcleo",
    "nudillo",
    "nudo",
    "nuera",
    "nueve",
    "nuez",
    "nulo",
    "número",
    "nutria",
    "oasis",
    "obeso",
    "obispo",
    "objeto",
    "obra",
    "obrero",
    "observar",
    "obtener",
    "obvio",
    "oca",
    "ocaso",
    "océano",
    "ochenta",
    "ocho",
    "ocio",
    "ocre",
    "octavo",
    "octubre",
    "oculto",
    "ocupar",
    "ocurrir",
    "odiar",
    "odio",
    "odisea",
    "oeste",
    "ofensa",
    "oferta",
    "oficio",
    "ofrecer",
    "ogro",
    "oído",
    "oír",
    "ojo",
    "ola",
    "oleada",
    "olfato",
    "olivo",
    "olla",
    "olmo",
    "olor",
    "olvido",
    "ombligo",
    "onda",
    "onza",
    "opaco",
    "opción",
    "ópera",
    "opinar",
    "oponer",
    "optar",
    "óptica",
    "opuesto",
    "oración",
    "orador",
    "oral",
    "órbita",
    "orca",
    "orden",
    "oreja",
    "órgano",
    "orgía",
    "orgullo",
    "oriente",
    "origen",
    "orilla",
    "oro",
    "orquesta",
    "oruga",
    "osadía",
    "oscuro",
    "osezno",
    "oso",
    "ostra",
    "otoño",
    "otro",
    "oveja",
    "óvulo",
    "óxido",
    "oxígeno",
    "oyente",
    "ozono",
    "pacto",
    "padre",
    "paella",
    "página",
    "pago",
    "país",
    "pájaro",
    "palabra",
    "palco",
    "paleta",
    "pálido",
    "palma",
    "paloma",
    "palpar",
    "pan",
    "panal",
    "pánico",
    "pantera",
    "pañuelo",
    "papá",
    "papel",
    "papilla",
    "paquete",
    "parar",
    "parcela",
    "pared",
    "parir",
    "paro",
    "párpado",
    "parque",
    "párrafo",
    "parte",
    "pasar",
    "paseo",
    "pasión",
    "paso",
    "pasta",
    "pata",
    "patio",
    "patria",
    "pausa",
    "pauta",
    "pavo",
    "payaso",
    "peatón",
    "pecado",
    "pecera",
    "pecho",
    "pedal",
    "pedir",
    "pegar",
    "peine",
    "pelar",
    "peldaño",
    "pelea",
    "peligro",
    "pellejo",
    "pelo",
    "peluca",
    "pena",
    "pensar",
    "peñón",
    "peón",
    "peor",
    "pepino",
    "pequeño",
    "pera",
    "percha",
    "perder",
    "pereza",
    "perfil",
    "perico",
    "perla",
    "permiso",
    "perro",
    "persona",
    "pesa",
    "pesca",
    "pésimo",
    "pestaña",
    "pétalo",
    "petróleo",
    "pez",
    "pezuña",
    "picar",
    "pichón",
    "pie",
    "piedra",
    "pierna",
    "pieza",
    "pijama",
    "pilar",
    "piloto",
    "pimienta",
    "pino",
    "pintor",
    "pinza",
    "piña",
    "piojo",
    "pipa",
    "pirata",
    "pisar",
    "piscina",
    "piso",
    "pista",
    "pitón",
    "pizca",
    "placa",
    "plan",
    "plata",
    "playa",
    "plaza",
    "pleito",
    "pleno",
    "plomo",
    "pluma",
    "plural",
    "pobre",
    "poco",
    "poder",
    "podio",
    "poema",
    "poesía",
    "poeta",
    "polen",
    "policía",
    "pollo",
    "polvo",
    "pomada",
    "pomelo",
    "pomo",
    "pompa",
    "poner",
    "porción",
    "portal",
    "posada",
    "poseer",
    "posible",
    "poste",
    "potencia",
    "potro",
    "pozo",
    "prado",
    "precoz",
    "pregunta",
    "premio",
    "prensa",
    "preso",
    "previo",
    "primo",
    "príncipe",
    "prisión",
    "privar",
    "proa",
    "probar",
    "proceso",
    "producto",
    "proeza",
    "profesor",
    "programa",
    "prole",
    "promesa",
    "pronto",
    "propio",
    "próximo",
    "prueba",
    "público",
    "puchero",
    "pudor",
    "pueblo",
    "puerta",
    "puesto",
    "pulga",
    "pulir",
    "pulmón",
    "pulpo",
    "pulso",
    "puma",
    "punto",
    "puñal",
    "puño",
    "pupa",
    "pupila",
    "puré",
    "quedar",
    "queja",
    "quemar",
    "querer",
    "queso",
    "quieto",
    "química",
    "quince",
    "quitar",
    "rábano",
    "rabia",
    "rabo",
    "ración",
    "radical",
    "raíz",
    "rama",
    "rampa",
    "rancho",
    "rango",
    "rapaz",
    "rápido",
    "rapto",
    "rasgo",
    "raspa",
    "rato",
    "rayo",
    "raza",
    "razón",
    "reacción",
    "realidad",
    "rebaño",
    "rebote",
    "recaer",
    "receta",
    "rechazo",
    "recoger",
    "recreo",
    "recto",
    "recurso",
    "red",
    "redondo",
    "reducir",
    "reflejo",
    "reforma",
    "refrán",
    "refugio",
    "regalo",
    "regir",
    "regla",
    "regreso",
    "rehén",
    "reino",
    "reír",
    "reja",
    "relato",
    "relevo",
    "relieve",
    "relleno",
    "reloj",
    "remar",
    "remedio",
    "remo",
    "rencor",
    "rendir",
    "renta",
    "reparto",
    "repetir",
    "reposo",
    "reptil",
    "res",
    "rescate",
    "resina",
    "respeto",
    "resto",
    "resumen",
    "retiro",
    "retorno",
    "retrato",
    "reunir",
    "revés",
    "revista",
    "rey",
    "rezar",
    "rico",
    "riego",
    "rienda",
    "riesgo",
    "rifa",
    "rígido",
    "rigor",
    "rincón",
    "riñón",
    "río",
    "riqueza",
    "risa",
    "ritmo",
    "rito",
    "rizo",
    "roble",
    "roce",
    "rociar",
    "rodar",
    "rodeo",
    "rodilla",
    "roer",
    "rojizo",
    "rojo",
    "romero",
    "romper",
    "ron",
    "ronco",
    "ronda",
    "ropa",
    "ropero",
    "rosa",
    "rosca",
    "rostro",
    "rotar",
    "rubí",
    "rubor",
    "rudo",
    "rueda",
    "rugir",
    "ruido",
    "ruina",
    "ruleta",
    "rulo",
    "rumbo",
    "rumor",
    "ruptura",
    "ruta",
    "rutina",
    "sábado",
    "saber",
    "sabio",
    "sable",
    "sacar",
    "sagaz",
    "sagrado",
    "sala",
    "saldo",
    "salero",
    "salir",
    "salmón",
    "salón",
    "salsa",
    "salto",
    "salud",
    "salvar",
    "samba",
    "sanción",
    "sandía",
    "sanear",
    "sangre",
    "sanidad",
    "sano",
    "santo",
    "sapo",
    "saque",
    "sardina",
    "sartén",
    "sastre",
    "satán",
    "sauna",
    "saxofón",
    "sección",
    "seco",
    "secreto",
    "secta",
    "sed",
    "seguir",
    "seis",
    "sello",
    "selva",
    "semana",
    "semilla",
    "senda",
    "sensor",
    "señal",
    "señor",
    "separar",
    "sepia",
    "sequía",
    "ser",
    "serie",
    "sermón",
    "servir",
    "sesenta",
    "sesión",
    "seta",
    "setenta",
    "severo",
    "sexo",
    "sexto",
    "sidra",
    "siesta",
    "siete",
    "siglo",
    "signo",
    "sílaba",
    "silbar",
    "silencio",
    "silla",
    "símbolo",
    "simio",
    "sirena",
    "sistema",
    "sitio",
    "situar",
    "sobre",
    "socio",
    "sodio",
    "sol",
    "solapa",
    "soldado",
    "soledad",
    "sólido",
    "soltar",
    "solución",
    "sombra",
    "sondeo",
    "sonido",
    "sonoro",
    "sonrisa",
    "sopa",
    "soplar",
    "soporte",
    "sordo",
    "sorpresa",
    "sorteo",
    "sostén",
    "sótano",
    "suave",
    "subir",
    "suceso",
    "sudor",
    "suegra",
    "suelo",
    "sueño",
    "suerte",
    "sufrir",
    "sujeto",
    "sultán",
    "sumar",
    "superar",
    "suplir",
    "suponer",
    "supremo",
    "sur",
    "surco",
    "sureño",
    "surgir",
    "susto",
    "sutil",
    "tabaco",
    "tabique",
    "tabla",
    "tabú",
    "taco",
    "tacto",
    "tajo",
    "talar",
    "talco",
    "talento",
    "talla",
    "talón",
    "tamaño",
    "tambor",
    "tango",
    "tanque",
    "tapa",
    "tapete",
    "tapia",
    "tapón",
    "taquilla",
    "tarde",
    "tarea",
    "tarifa",
    "tarjeta",
    "tarot",
    "tarro",
    "tarta",
    "tatuaje",
    "tauro",
    "taza",
    "tazón",
    "teatro",
    "techo",
    "tecla",
    "técnica",
    "tejado",
    "tejer",
    "tejido",
    "tela",
    "teléfono",
    "tema",
    "temor",
    "templo",
    "tenaz",
    "tender",
    "tener",
    "tenis",
    "tenso",
    "teoría",
    "terapia",
    "terco",
    "término",
    "ternura",
    "terror",
    "tesis",
    "tesoro",
    "testigo",
    "tetera",
    "texto",
    "tez",
    "tibio",
    "tiburón",
    "tiempo",
    "tienda",
    "tierra",
    "tieso",
    "tigre",
    "tijera",
    "tilde",
    "timbre",
    "tímido",
    "timo",
    "tinta",
    "tío",
    "típico",
    "tipo",
    "tira",
    "tirón",
    "titán",
    "títere",
    "título",
    "tiza",
    "toalla",
    "tobillo",
    "tocar",
    "tocino",
    "todo",
    "toga",
    "toldo",
    "tomar",
    "tono",
    "tonto",
    "topar",
    "tope",
    "toque",
    "tórax",
    "torero",
    "tormenta",
    "torneo",
    "toro",
    "torpedo",
    "torre",
    "torso",
    "tortuga",
    "tos",
    "tosco",
    "toser",
    "tóxico",
    "trabajo",
    "tractor",
    "traer",
    "tráfico",
    "trago",
    "traje",
    "tramo",
    "trance",
    "trato",
    "trauma",
    "trazar",
    "trébol",
    "tregua",
    "treinta",
    "tren",
    "trepar",
    "tres",
    "tribu",
    "trigo",
    "tripa",
    "triste",
    "triunfo",
    "trofeo",
    "trompa",
    "tronco",
    "tropa",
    "trote",
    "trozo",
    "truco",
    "trueno",
    "trufa",
    "tubería",
    "tubo",
    "tuerto",
    "tumba",
    "tumor",
    "túnel",
    "túnica",
    "turbina",
    "turismo",
    "turno",
    "tutor",
    "ubicar",
    "úlcera",
    "umbral",
    "unidad",
    "unir",
    "universo",
    "uno",
    "untar",
    "uña",
    "urbano",
    "urbe",
    "urgente",
    "urna",
    "usar",
    "usuario",
    "útil",
    "utopía",
    "uva",
    "vaca",
    "vacío",
    "vacuna",
    "vagar",
    "vago",
    "vaina",
    "vajilla",
    "vale",
    "válido",
    "valle",
    "valor",
    "válvula",
    "vampiro",
    "vara",
    "variar",
    "varón",
    "vaso",
    "vecino",
    "vector",
    "vehículo",
    "veinte",
    "vejez",
    "vela",
    "velero",
    "veloz",
    "vena",
    "vencer",
    "venda",
    "veneno",
    "vengar",
    "venir",
    "venta",
    "venus",
    "ver",
    "verano",
    "verbo",
    "verde",
    "vereda",
    "verja",
    "verso",
    "verter",
    "vía",
    "viaje",
    "vibrar",
    "vicio",
    "víctima",
    "vida",
    "vídeo",
    "vidrio",
    "viejo",
    "viernes",
    "vigor",
    "vil",
    "villa",
    "vinagre",
    "vino",
    "viñedo",
    "violín",
    "viral",
    "virgo",
    "virtud",
    "visor",
    "víspera",
    "vista",
    "vitamina",
    "viudo",
    "vivaz",
    "vivero",
    "vivir",
    "vivo",
    "volcán",
    "volumen",
    "volver",
    "voraz",
    "votar",
    "voto",
    "voz",
    "vuelo",
    "vulgar",
    "yacer",
    "yate",
    "yegua",
    "yema",
    "yerno",
    "yeso",
    "yodo",
    "yoga",
    "yogur",
    "zafiro",
    "zanja",
    "zapato",
    "zarza",
    "zona",
    "zorro",
    "zumo",
    "zurdo"
]
;
},372,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = [
    "あいこくしん",
    "あいさつ",
    "あいだ",
    "あおぞら",
    "あかちゃん",
    "あきる",
    "あけがた",
    "あける",
    "あこがれる",
    "あさい",
    "あさひ",
    "あしあと",
    "あじわう",
    "あずかる",
    "あずき",
    "あそぶ",
    "あたえる",
    "あたためる",
    "あたりまえ",
    "あたる",
    "あつい",
    "あつかう",
    "あっしゅく",
    "あつまり",
    "あつめる",
    "あてな",
    "あてはまる",
    "あひる",
    "あぶら",
    "あぶる",
    "あふれる",
    "あまい",
    "あまど",
    "あまやかす",
    "あまり",
    "あみもの",
    "あめりか",
    "あやまる",
    "あゆむ",
    "あらいぐま",
    "あらし",
    "あらすじ",
    "あらためる",
    "あらゆる",
    "あらわす",
    "ありがとう",
    "あわせる",
    "あわてる",
    "あんい",
    "あんがい",
    "あんこ",
    "あんぜん",
    "あんてい",
    "あんない",
    "あんまり",
    "いいだす",
    "いおん",
    "いがい",
    "いがく",
    "いきおい",
    "いきなり",
    "いきもの",
    "いきる",
    "いくじ",
    "いくぶん",
    "いけばな",
    "いけん",
    "いこう",
    "いこく",
    "いこつ",
    "いさましい",
    "いさん",
    "いしき",
    "いじゅう",
    "いじょう",
    "いじわる",
    "いずみ",
    "いずれ",
    "いせい",
    "いせえび",
    "いせかい",
    "いせき",
    "いぜん",
    "いそうろう",
    "いそがしい",
    "いだい",
    "いだく",
    "いたずら",
    "いたみ",
    "いたりあ",
    "いちおう",
    "いちじ",
    "いちど",
    "いちば",
    "いちぶ",
    "いちりゅう",
    "いつか",
    "いっしゅん",
    "いっせい",
    "いっそう",
    "いったん",
    "いっち",
    "いってい",
    "いっぽう",
    "いてざ",
    "いてん",
    "いどう",
    "いとこ",
    "いない",
    "いなか",
    "いねむり",
    "いのち",
    "いのる",
    "いはつ",
    "いばる",
    "いはん",
    "いびき",
    "いひん",
    "いふく",
    "いへん",
    "いほう",
    "いみん",
    "いもうと",
    "いもたれ",
    "いもり",
    "いやがる",
    "いやす",
    "いよかん",
    "いよく",
    "いらい",
    "いらすと",
    "いりぐち",
    "いりょう",
    "いれい",
    "いれもの",
    "いれる",
    "いろえんぴつ",
    "いわい",
    "いわう",
    "いわかん",
    "いわば",
    "いわゆる",
    "いんげんまめ",
    "いんさつ",
    "いんしょう",
    "いんよう",
    "うえき",
    "うえる",
    "うおざ",
    "うがい",
    "うかぶ",
    "うかべる",
    "うきわ",
    "うくらいな",
    "うくれれ",
    "うけたまわる",
    "うけつけ",
    "うけとる",
    "うけもつ",
    "うける",
    "うごかす",
    "うごく",
    "うこん",
    "うさぎ",
    "うしなう",
    "うしろがみ",
    "うすい",
    "うすぎ",
    "うすぐらい",
    "うすめる",
    "うせつ",
    "うちあわせ",
    "うちがわ",
    "うちき",
    "うちゅう",
    "うっかり",
    "うつくしい",
    "うったえる",
    "うつる",
    "うどん",
    "うなぎ",
    "うなじ",
    "うなずく",
    "うなる",
    "うねる",
    "うのう",
    "うぶげ",
    "うぶごえ",
    "うまれる",
    "うめる",
    "うもう",
    "うやまう",
    "うよく",
    "うらがえす",
    "うらぐち",
    "うらない",
    "うりあげ",
    "うりきれ",
    "うるさい",
    "うれしい",
    "うれゆき",
    "うれる",
    "うろこ",
    "うわき",
    "うわさ",
    "うんこう",
    "うんちん",
    "うんてん",
    "うんどう",
    "えいえん",
    "えいが",
    "えいきょう",
    "えいご",
    "えいせい",
    "えいぶん",
    "えいよう",
    "えいわ",
    "えおり",
    "えがお",
    "えがく",
    "えきたい",
    "えくせる",
    "えしゃく",
    "えすて",
    "えつらん",
    "えのぐ",
    "えほうまき",
    "えほん",
    "えまき",
    "えもじ",
    "えもの",
    "えらい",
    "えらぶ",
    "えりあ",
    "えんえん",
    "えんかい",
    "えんぎ",
    "えんげき",
    "えんしゅう",
    "えんぜつ",
    "えんそく",
    "えんちょう",
    "えんとつ",
    "おいかける",
    "おいこす",
    "おいしい",
    "おいつく",
    "おうえん",
    "おうさま",
    "おうじ",
    "おうせつ",
    "おうたい",
    "おうふく",
    "おうべい",
    "おうよう",
    "おえる",
    "おおい",
    "おおう",
    "おおどおり",
    "おおや",
    "おおよそ",
    "おかえり",
    "おかず",
    "おがむ",
    "おかわり",
    "おぎなう",
    "おきる",
    "おくさま",
    "おくじょう",
    "おくりがな",
    "おくる",
    "おくれる",
    "おこす",
    "おこなう",
    "おこる",
    "おさえる",
    "おさない",
    "おさめる",
    "おしいれ",
    "おしえる",
    "おじぎ",
    "おじさん",
    "おしゃれ",
    "おそらく",
    "おそわる",
    "おたがい",
    "おたく",
    "おだやか",
    "おちつく",
    "おっと",
    "おつり",
    "おでかけ",
    "おとしもの",
    "おとなしい",
    "おどり",
    "おどろかす",
    "おばさん",
    "おまいり",
    "おめでとう",
    "おもいで",
    "おもう",
    "おもたい",
    "おもちゃ",
    "おやつ",
    "おやゆび",
    "およぼす",
    "おらんだ",
    "おろす",
    "おんがく",
    "おんけい",
    "おんしゃ",
    "おんせん",
    "おんだん",
    "おんちゅう",
    "おんどけい",
    "かあつ",
    "かいが",
    "がいき",
    "がいけん",
    "がいこう",
    "かいさつ",
    "かいしゃ",
    "かいすいよく",
    "かいぜん",
    "かいぞうど",
    "かいつう",
    "かいてん",
    "かいとう",
    "かいふく",
    "がいへき",
    "かいほう",
    "かいよう",
    "がいらい",
    "かいわ",
    "かえる",
    "かおり",
    "かかえる",
    "かがく",
    "かがし",
    "かがみ",
    "かくご",
    "かくとく",
    "かざる",
    "がぞう",
    "かたい",
    "かたち",
    "がちょう",
    "がっきゅう",
    "がっこう",
    "がっさん",
    "がっしょう",
    "かなざわし",
    "かのう",
    "がはく",
    "かぶか",
    "かほう",
    "かほご",
    "かまう",
    "かまぼこ",
    "かめれおん",
    "かゆい",
    "かようび",
    "からい",
    "かるい",
    "かろう",
    "かわく",
    "かわら",
    "がんか",
    "かんけい",
    "かんこう",
    "かんしゃ",
    "かんそう",
    "かんたん",
    "かんち",
    "がんばる",
    "きあい",
    "きあつ",
    "きいろ",
    "ぎいん",
    "きうい",
    "きうん",
    "きえる",
    "きおう",
    "きおく",
    "きおち",
    "きおん",
    "きかい",
    "きかく",
    "きかんしゃ",
    "ききて",
    "きくばり",
    "きくらげ",
    "きけんせい",
    "きこう",
    "きこえる",
    "きこく",
    "きさい",
    "きさく",
    "きさま",
    "きさらぎ",
    "ぎじかがく",
    "ぎしき",
    "ぎじたいけん",
    "ぎじにってい",
    "ぎじゅつしゃ",
    "きすう",
    "きせい",
    "きせき",
    "きせつ",
    "きそう",
    "きぞく",
    "きぞん",
    "きたえる",
    "きちょう",
    "きつえん",
    "ぎっちり",
    "きつつき",
    "きつね",
    "きてい",
    "きどう",
    "きどく",
    "きない",
    "きなが",
    "きなこ",
    "きぬごし",
    "きねん",
    "きのう",
    "きのした",
    "きはく",
    "きびしい",
    "きひん",
    "きふく",
    "きぶん",
    "きぼう",
    "きほん",
    "きまる",
    "きみつ",
    "きむずかしい",
    "きめる",
    "きもだめし",
    "きもち",
    "きもの",
    "きゃく",
    "きやく",
    "ぎゅうにく",
    "きよう",
    "きょうりゅう",
    "きらい",
    "きらく",
    "きりん",
    "きれい",
    "きれつ",
    "きろく",
    "ぎろん",
    "きわめる",
    "ぎんいろ",
    "きんかくじ",
    "きんじょ",
    "きんようび",
    "ぐあい",
    "くいず",
    "くうかん",
    "くうき",
    "くうぐん",
    "くうこう",
    "ぐうせい",
    "くうそう",
    "ぐうたら",
    "くうふく",
    "くうぼ",
    "くかん",
    "くきょう",
    "くげん",
    "ぐこう",
    "くさい",
    "くさき",
    "くさばな",
    "くさる",
    "くしゃみ",
    "くしょう",
    "くすのき",
    "くすりゆび",
    "くせげ",
    "くせん",
    "ぐたいてき",
    "くださる",
    "くたびれる",
    "くちこみ",
    "くちさき",
    "くつした",
    "ぐっすり",
    "くつろぐ",
    "くとうてん",
    "くどく",
    "くなん",
    "くねくね",
    "くのう",
    "くふう",
    "くみあわせ",
    "くみたてる",
    "くめる",
    "くやくしょ",
    "くらす",
    "くらべる",
    "くるま",
    "くれる",
    "くろう",
    "くわしい",
    "ぐんかん",
    "ぐんしょく",
    "ぐんたい",
    "ぐんて",
    "けあな",
    "けいかく",
    "けいけん",
    "けいこ",
    "けいさつ",
    "げいじゅつ",
    "けいたい",
    "げいのうじん",
    "けいれき",
    "けいろ",
    "けおとす",
    "けおりもの",
    "げきか",
    "げきげん",
    "げきだん",
    "げきちん",
    "げきとつ",
    "げきは",
    "げきやく",
    "げこう",
    "げこくじょう",
    "げざい",
    "けさき",
    "げざん",
    "けしき",
    "けしごむ",
    "けしょう",
    "げすと",
    "けたば",
    "けちゃっぷ",
    "けちらす",
    "けつあつ",
    "けつい",
    "けつえき",
    "けっこん",
    "けつじょ",
    "けっせき",
    "けってい",
    "けつまつ",
    "げつようび",
    "げつれい",
    "けつろん",
    "げどく",
    "けとばす",
    "けとる",
    "けなげ",
    "けなす",
    "けなみ",
    "けぬき",
    "げねつ",
    "けねん",
    "けはい",
    "げひん",
    "けぶかい",
    "げぼく",
    "けまり",
    "けみかる",
    "けむし",
    "けむり",
    "けもの",
    "けらい",
    "けろけろ",
    "けわしい",
    "けんい",
    "けんえつ",
    "けんお",
    "けんか",
    "げんき",
    "けんげん",
    "けんこう",
    "けんさく",
    "けんしゅう",
    "けんすう",
    "げんそう",
    "けんちく",
    "けんてい",
    "けんとう",
    "けんない",
    "けんにん",
    "げんぶつ",
    "けんま",
    "けんみん",
    "けんめい",
    "けんらん",
    "けんり",
    "こあくま",
    "こいぬ",
    "こいびと",
    "ごうい",
    "こうえん",
    "こうおん",
    "こうかん",
    "ごうきゅう",
    "ごうけい",
    "こうこう",
    "こうさい",
    "こうじ",
    "こうすい",
    "ごうせい",
    "こうそく",
    "こうたい",
    "こうちゃ",
    "こうつう",
    "こうてい",
    "こうどう",
    "こうない",
    "こうはい",
    "ごうほう",
    "ごうまん",
    "こうもく",
    "こうりつ",
    "こえる",
    "こおり",
    "ごかい",
    "ごがつ",
    "ごかん",
    "こくご",
    "こくさい",
    "こくとう",
    "こくない",
    "こくはく",
    "こぐま",
    "こけい",
    "こける",
    "ここのか",
    "こころ",
    "こさめ",
    "こしつ",
    "こすう",
    "こせい",
    "こせき",
    "こぜん",
    "こそだて",
    "こたい",
    "こたえる",
    "こたつ",
    "こちょう",
    "こっか",
    "こつこつ",
    "こつばん",
    "こつぶ",
    "こてい",
    "こてん",
    "ことがら",
    "ことし",
    "ことば",
    "ことり",
    "こなごな",
    "こねこね",
    "このまま",
    "このみ",
    "このよ",
    "ごはん",
    "こひつじ",
    "こふう",
    "こふん",
    "こぼれる",
    "ごまあぶら",
    "こまかい",
    "ごますり",
    "こまつな",
    "こまる",
    "こむぎこ",
    "こもじ",
    "こもち",
    "こもの",
    "こもん",
    "こやく",
    "こやま",
    "こゆう",
    "こゆび",
    "こよい",
    "こよう",
    "こりる",
    "これくしょん",
    "ころっけ",
    "こわもて",
    "こわれる",
    "こんいん",
    "こんかい",
    "こんき",
    "こんしゅう",
    "こんすい",
    "こんだて",
    "こんとん",
    "こんなん",
    "こんびに",
    "こんぽん",
    "こんまけ",
    "こんや",
    "こんれい",
    "こんわく",
    "ざいえき",
    "さいかい",
    "さいきん",
    "ざいげん",
    "ざいこ",
    "さいしょ",
    "さいせい",
    "ざいたく",
    "ざいちゅう",
    "さいてき",
    "ざいりょう",
    "さうな",
    "さかいし",
    "さがす",
    "さかな",
    "さかみち",
    "さがる",
    "さぎょう",
    "さくし",
    "さくひん",
    "さくら",
    "さこく",
    "さこつ",
    "さずかる",
    "ざせき",
    "さたん",
    "さつえい",
    "ざつおん",
    "ざっか",
    "ざつがく",
    "さっきょく",
    "ざっし",
    "さつじん",
    "ざっそう",
    "さつたば",
    "さつまいも",
    "さてい",
    "さといも",
    "さとう",
    "さとおや",
    "さとし",
    "さとる",
    "さのう",
    "さばく",
    "さびしい",
    "さべつ",
    "さほう",
    "さほど",
    "さます",
    "さみしい",
    "さみだれ",
    "さむけ",
    "さめる",
    "さやえんどう",
    "さゆう",
    "さよう",
    "さよく",
    "さらだ",
    "ざるそば",
    "さわやか",
    "さわる",
    "さんいん",
    "さんか",
    "さんきゃく",
    "さんこう",
    "さんさい",
    "ざんしょ",
    "さんすう",
    "さんせい",
    "さんそ",
    "さんち",
    "さんま",
    "さんみ",
    "さんらん",
    "しあい",
    "しあげ",
    "しあさって",
    "しあわせ",
    "しいく",
    "しいん",
    "しうち",
    "しえい",
    "しおけ",
    "しかい",
    "しかく",
    "じかん",
    "しごと",
    "しすう",
    "じだい",
    "したうけ",
    "したぎ",
    "したて",
    "したみ",
    "しちょう",
    "しちりん",
    "しっかり",
    "しつじ",
    "しつもん",
    "してい",
    "してき",
    "してつ",
    "じてん",
    "じどう",
    "しなぎれ",
    "しなもの",
    "しなん",
    "しねま",
    "しねん",
    "しのぐ",
    "しのぶ",
    "しはい",
    "しばかり",
    "しはつ",
    "しはらい",
    "しはん",
    "しひょう",
    "しふく",
    "じぶん",
    "しへい",
    "しほう",
    "しほん",
    "しまう",
    "しまる",
    "しみん",
    "しむける",
    "じむしょ",
    "しめい",
    "しめる",
    "しもん",
    "しゃいん",
    "しゃうん",
    "しゃおん",
    "じゃがいも",
    "しやくしょ",
    "しゃくほう",
    "しゃけん",
    "しゃこ",
    "しゃざい",
    "しゃしん",
    "しゃせん",
    "しゃそう",
    "しゃたい",
    "しゃちょう",
    "しゃっきん",
    "じゃま",
    "しゃりん",
    "しゃれい",
    "じゆう",
    "じゅうしょ",
    "しゅくはく",
    "じゅしん",
    "しゅっせき",
    "しゅみ",
    "しゅらば",
    "じゅんばん",
    "しょうかい",
    "しょくたく",
    "しょっけん",
    "しょどう",
    "しょもつ",
    "しらせる",
    "しらべる",
    "しんか",
    "しんこう",
    "じんじゃ",
    "しんせいじ",
    "しんちく",
    "しんりん",
    "すあげ",
    "すあし",
    "すあな",
    "ずあん",
    "すいえい",
    "すいか",
    "すいとう",
    "ずいぶん",
    "すいようび",
    "すうがく",
    "すうじつ",
    "すうせん",
    "すおどり",
    "すきま",
    "すくう",
    "すくない",
    "すける",
    "すごい",
    "すこし",
    "ずさん",
    "すずしい",
    "すすむ",
    "すすめる",
    "すっかり",
    "ずっしり",
    "ずっと",
    "すてき",
    "すてる",
    "すねる",
    "すのこ",
    "すはだ",
    "すばらしい",
    "ずひょう",
    "ずぶぬれ",
    "すぶり",
    "すふれ",
    "すべて",
    "すべる",
    "ずほう",
    "すぼん",
    "すまい",
    "すめし",
    "すもう",
    "すやき",
    "すらすら",
    "するめ",
    "すれちがう",
    "すろっと",
    "すわる",
    "すんぜん",
    "すんぽう",
    "せあぶら",
    "せいかつ",
    "せいげん",
    "せいじ",
    "せいよう",
    "せおう",
    "せかいかん",
    "せきにん",
    "せきむ",
    "せきゆ",
    "せきらんうん",
    "せけん",
    "せこう",
    "せすじ",
    "せたい",
    "せたけ",
    "せっかく",
    "せっきゃく",
    "ぜっく",
    "せっけん",
    "せっこつ",
    "せっさたくま",
    "せつぞく",
    "せつだん",
    "せつでん",
    "せっぱん",
    "せつび",
    "せつぶん",
    "せつめい",
    "せつりつ",
    "せなか",
    "せのび",
    "せはば",
    "せびろ",
    "せぼね",
    "せまい",
    "せまる",
    "せめる",
    "せもたれ",
    "せりふ",
    "ぜんあく",
    "せんい",
    "せんえい",
    "せんか",
    "せんきょ",
    "せんく",
    "せんげん",
    "ぜんご",
    "せんさい",
    "せんしゅ",
    "せんすい",
    "せんせい",
    "せんぞ",
    "せんたく",
    "せんちょう",
    "せんてい",
    "せんとう",
    "せんぬき",
    "せんねん",
    "せんぱい",
    "ぜんぶ",
    "ぜんぽう",
    "せんむ",
    "せんめんじょ",
    "せんもん",
    "せんやく",
    "せんゆう",
    "せんよう",
    "ぜんら",
    "ぜんりゃく",
    "せんれい",
    "せんろ",
    "そあく",
    "そいとげる",
    "そいね",
    "そうがんきょう",
    "そうき",
    "そうご",
    "そうしん",
    "そうだん",
    "そうなん",
    "そうび",
    "そうめん",
    "そうり",
    "そえもの",
    "そえん",
    "そがい",
    "そげき",
    "そこう",
    "そこそこ",
    "そざい",
    "そしな",
    "そせい",
    "そせん",
    "そそぐ",
    "そだてる",
    "そつう",
    "そつえん",
    "そっかん",
    "そつぎょう",
    "そっけつ",
    "そっこう",
    "そっせん",
    "そっと",
    "そとがわ",
    "そとづら",
    "そなえる",
    "そなた",
    "そふぼ",
    "そぼく",
    "そぼろ",
    "そまつ",
    "そまる",
    "そむく",
    "そむりえ",
    "そめる",
    "そもそも",
    "そよかぜ",
    "そらまめ",
    "そろう",
    "そんかい",
    "そんけい",
    "そんざい",
    "そんしつ",
    "そんぞく",
    "そんちょう",
    "ぞんび",
    "ぞんぶん",
    "そんみん",
    "たあい",
    "たいいん",
    "たいうん",
    "たいえき",
    "たいおう",
    "だいがく",
    "たいき",
    "たいぐう",
    "たいけん",
    "たいこ",
    "たいざい",
    "だいじょうぶ",
    "だいすき",
    "たいせつ",
    "たいそう",
    "だいたい",
    "たいちょう",
    "たいてい",
    "だいどころ",
    "たいない",
    "たいねつ",
    "たいのう",
    "たいはん",
    "だいひょう",
    "たいふう",
    "たいへん",
    "たいほ",
    "たいまつばな",
    "たいみんぐ",
    "たいむ",
    "たいめん",
    "たいやき",
    "たいよう",
    "たいら",
    "たいりょく",
    "たいる",
    "たいわん",
    "たうえ",
    "たえる",
    "たおす",
    "たおる",
    "たおれる",
    "たかい",
    "たかね",
    "たきび",
    "たくさん",
    "たこく",
    "たこやき",
    "たさい",
    "たしざん",
    "だじゃれ",
    "たすける",
    "たずさわる",
    "たそがれ",
    "たたかう",
    "たたく",
    "ただしい",
    "たたみ",
    "たちばな",
    "だっかい",
    "だっきゃく",
    "だっこ",
    "だっしゅつ",
    "だったい",
    "たてる",
    "たとえる",
    "たなばた",
    "たにん",
    "たぬき",
    "たのしみ",
    "たはつ",
    "たぶん",
    "たべる",
    "たぼう",
    "たまご",
    "たまる",
    "だむる",
    "ためいき",
    "ためす",
    "ためる",
    "たもつ",
    "たやすい",
    "たよる",
    "たらす",
    "たりきほんがん",
    "たりょう",
    "たりる",
    "たると",
    "たれる",
    "たれんと",
    "たろっと",
    "たわむれる",
    "だんあつ",
    "たんい",
    "たんおん",
    "たんか",
    "たんき",
    "たんけん",
    "たんご",
    "たんさん",
    "たんじょうび",
    "だんせい",
    "たんそく",
    "たんたい",
    "だんち",
    "たんてい",
    "たんとう",
    "だんな",
    "たんにん",
    "だんねつ",
    "たんのう",
    "たんぴん",
    "だんぼう",
    "たんまつ",
    "たんめい",
    "だんれつ",
    "だんろ",
    "だんわ",
    "ちあい",
    "ちあん",
    "ちいき",
    "ちいさい",
    "ちえん",
    "ちかい",
    "ちから",
    "ちきゅう",
    "ちきん",
    "ちけいず",
    "ちけん",
    "ちこく",
    "ちさい",
    "ちしき",
    "ちしりょう",
    "ちせい",
    "ちそう",
    "ちたい",
    "ちたん",
    "ちちおや",
    "ちつじょ",
    "ちてき",
    "ちてん",
    "ちぬき",
    "ちぬり",
    "ちのう",
    "ちひょう",
    "ちへいせん",
    "ちほう",
    "ちまた",
    "ちみつ",
    "ちみどろ",
    "ちめいど",
    "ちゃんこなべ",
    "ちゅうい",
    "ちゆりょく",
    "ちょうし",
    "ちょさくけん",
    "ちらし",
    "ちらみ",
    "ちりがみ",
    "ちりょう",
    "ちるど",
    "ちわわ",
    "ちんたい",
    "ちんもく",
    "ついか",
    "ついたち",
    "つうか",
    "つうじょう",
    "つうはん",
    "つうわ",
    "つかう",
    "つかれる",
    "つくね",
    "つくる",
    "つけね",
    "つける",
    "つごう",
    "つたえる",
    "つづく",
    "つつじ",
    "つつむ",
    "つとめる",
    "つながる",
    "つなみ",
    "つねづね",
    "つのる",
    "つぶす",
    "つまらない",
    "つまる",
    "つみき",
    "つめたい",
    "つもり",
    "つもる",
    "つよい",
    "つるぼ",
    "つるみく",
    "つわもの",
    "つわり",
    "てあし",
    "てあて",
    "てあみ",
    "ていおん",
    "ていか",
    "ていき",
    "ていけい",
    "ていこく",
    "ていさつ",
    "ていし",
    "ていせい",
    "ていたい",
    "ていど",
    "ていねい",
    "ていひょう",
    "ていへん",
    "ていぼう",
    "てうち",
    "ておくれ",
    "てきとう",
    "てくび",
    "でこぼこ",
    "てさぎょう",
    "てさげ",
    "てすり",
    "てそう",
    "てちがい",
    "てちょう",
    "てつがく",
    "てつづき",
    "でっぱ",
    "てつぼう",
    "てつや",
    "でぬかえ",
    "てぬき",
    "てぬぐい",
    "てのひら",
    "てはい",
    "てぶくろ",
    "てふだ",
    "てほどき",
    "てほん",
    "てまえ",
    "てまきずし",
    "てみじか",
    "てみやげ",
    "てらす",
    "てれび",
    "てわけ",
    "てわたし",
    "でんあつ",
    "てんいん",
    "てんかい",
    "てんき",
    "てんぐ",
    "てんけん",
    "てんごく",
    "てんさい",
    "てんし",
    "てんすう",
    "でんち",
    "てんてき",
    "てんとう",
    "てんない",
    "てんぷら",
    "てんぼうだい",
    "てんめつ",
    "てんらんかい",
    "でんりょく",
    "でんわ",
    "どあい",
    "といれ",
    "どうかん",
    "とうきゅう",
    "どうぐ",
    "とうし",
    "とうむぎ",
    "とおい",
    "とおか",
    "とおく",
    "とおす",
    "とおる",
    "とかい",
    "とかす",
    "ときおり",
    "ときどき",
    "とくい",
    "とくしゅう",
    "とくてん",
    "とくに",
    "とくべつ",
    "とけい",
    "とける",
    "とこや",
    "とさか",
    "としょかん",
    "とそう",
    "とたん",
    "とちゅう",
    "とっきゅう",
    "とっくん",
    "とつぜん",
    "とつにゅう",
    "とどける",
    "ととのえる",
    "とない",
    "となえる",
    "となり",
    "とのさま",
    "とばす",
    "どぶがわ",
    "とほう",
    "とまる",
    "とめる",
    "ともだち",
    "ともる",
    "どようび",
    "とらえる",
    "とんかつ",
    "どんぶり",
    "ないかく",
    "ないこう",
    "ないしょ",
    "ないす",
    "ないせん",
    "ないそう",
    "なおす",
    "ながい",
    "なくす",
    "なげる",
    "なこうど",
    "なさけ",
    "なたでここ",
    "なっとう",
    "なつやすみ",
    "ななおし",
    "なにごと",
    "なにもの",
    "なにわ",
    "なのか",
    "なふだ",
    "なまいき",
    "なまえ",
    "なまみ",
    "なみだ",
    "なめらか",
    "なめる",
    "なやむ",
    "ならう",
    "ならび",
    "ならぶ",
    "なれる",
    "なわとび",
    "なわばり",
    "にあう",
    "にいがた",
    "にうけ",
    "におい",
    "にかい",
    "にがて",
    "にきび",
    "にくしみ",
    "にくまん",
    "にげる",
    "にさんかたんそ",
    "にしき",
    "にせもの",
    "にちじょう",
    "にちようび",
    "にっか",
    "にっき",
    "にっけい",
    "にっこう",
    "にっさん",
    "にっしょく",
    "にっすう",
    "にっせき",
    "にってい",
    "になう",
    "にほん",
    "にまめ",
    "にもつ",
    "にやり",
    "にゅういん",
    "にりんしゃ",
    "にわとり",
    "にんい",
    "にんか",
    "にんき",
    "にんげん",
    "にんしき",
    "にんずう",
    "にんそう",
    "にんたい",
    "にんち",
    "にんてい",
    "にんにく",
    "にんぷ",
    "にんまり",
    "にんむ",
    "にんめい",
    "にんよう",
    "ぬいくぎ",
    "ぬかす",
    "ぬぐいとる",
    "ぬぐう",
    "ぬくもり",
    "ぬすむ",
    "ぬまえび",
    "ぬめり",
    "ぬらす",
    "ぬんちゃく",
    "ねあげ",
    "ねいき",
    "ねいる",
    "ねいろ",
    "ねぐせ",
    "ねくたい",
    "ねくら",
    "ねこぜ",
    "ねこむ",
    "ねさげ",
    "ねすごす",
    "ねそべる",
    "ねだん",
    "ねつい",
    "ねっしん",
    "ねつぞう",
    "ねったいぎょ",
    "ねぶそく",
    "ねふだ",
    "ねぼう",
    "ねほりはほり",
    "ねまき",
    "ねまわし",
    "ねみみ",
    "ねむい",
    "ねむたい",
    "ねもと",
    "ねらう",
    "ねわざ",
    "ねんいり",
    "ねんおし",
    "ねんかん",
    "ねんきん",
    "ねんぐ",
    "ねんざ",
    "ねんし",
    "ねんちゃく",
    "ねんど",
    "ねんぴ",
    "ねんぶつ",
    "ねんまつ",
    "ねんりょう",
    "ねんれい",
    "のいず",
    "のおづま",
    "のがす",
    "のきなみ",
    "のこぎり",
    "のこす",
    "のこる",
    "のせる",
    "のぞく",
    "のぞむ",
    "のたまう",
    "のちほど",
    "のっく",
    "のばす",
    "のはら",
    "のべる",
    "のぼる",
    "のみもの",
    "のやま",
    "のらいぬ",
    "のらねこ",
    "のりもの",
    "のりゆき",
    "のれん",
    "のんき",
    "ばあい",
    "はあく",
    "ばあさん",
    "ばいか",
    "ばいく",
    "はいけん",
    "はいご",
    "はいしん",
    "はいすい",
    "はいせん",
    "はいそう",
    "はいち",
    "ばいばい",
    "はいれつ",
    "はえる",
    "はおる",
    "はかい",
    "ばかり",
    "はかる",
    "はくしゅ",
    "はけん",
    "はこぶ",
    "はさみ",
    "はさん",
    "はしご",
    "ばしょ",
    "はしる",
    "はせる",
    "ぱそこん",
    "はそん",
    "はたん",
    "はちみつ",
    "はつおん",
    "はっかく",
    "はづき",
    "はっきり",
    "はっくつ",
    "はっけん",
    "はっこう",
    "はっさん",
    "はっしん",
    "はったつ",
    "はっちゅう",
    "はってん",
    "はっぴょう",
    "はっぽう",
    "はなす",
    "はなび",
    "はにかむ",
    "はぶらし",
    "はみがき",
    "はむかう",
    "はめつ",
    "はやい",
    "はやし",
    "はらう",
    "はろうぃん",
    "はわい",
    "はんい",
    "はんえい",
    "はんおん",
    "はんかく",
    "はんきょう",
    "ばんぐみ",
    "はんこ",
    "はんしゃ",
    "はんすう",
    "はんだん",
    "ぱんち",
    "ぱんつ",
    "はんてい",
    "はんとし",
    "はんのう",
    "はんぱ",
    "はんぶん",
    "はんぺん",
    "はんぼうき",
    "はんめい",
    "はんらん",
    "はんろん",
    "ひいき",
    "ひうん",
    "ひえる",
    "ひかく",
    "ひかり",
    "ひかる",
    "ひかん",
    "ひくい",
    "ひけつ",
    "ひこうき",
    "ひこく",
    "ひさい",
    "ひさしぶり",
    "ひさん",
    "びじゅつかん",
    "ひしょ",
    "ひそか",
    "ひそむ",
    "ひたむき",
    "ひだり",
    "ひたる",
    "ひつぎ",
    "ひっこし",
    "ひっし",
    "ひつじゅひん",
    "ひっす",
    "ひつぜん",
    "ぴったり",
    "ぴっちり",
    "ひつよう",
    "ひてい",
    "ひとごみ",
    "ひなまつり",
    "ひなん",
    "ひねる",
    "ひはん",
    "ひびく",
    "ひひょう",
    "ひほう",
    "ひまわり",
    "ひまん",
    "ひみつ",
    "ひめい",
    "ひめじし",
    "ひやけ",
    "ひやす",
    "ひよう",
    "びょうき",
    "ひらがな",
    "ひらく",
    "ひりつ",
    "ひりょう",
    "ひるま",
    "ひるやすみ",
    "ひれい",
    "ひろい",
    "ひろう",
    "ひろき",
    "ひろゆき",
    "ひんかく",
    "ひんけつ",
    "ひんこん",
    "ひんしゅ",
    "ひんそう",
    "ぴんち",
    "ひんぱん",
    "びんぼう",
    "ふあん",
    "ふいうち",
    "ふうけい",
    "ふうせん",
    "ぷうたろう",
    "ふうとう",
    "ふうふ",
    "ふえる",
    "ふおん",
    "ふかい",
    "ふきん",
    "ふくざつ",
    "ふくぶくろ",
    "ふこう",
    "ふさい",
    "ふしぎ",
    "ふじみ",
    "ふすま",
    "ふせい",
    "ふせぐ",
    "ふそく",
    "ぶたにく",
    "ふたん",
    "ふちょう",
    "ふつう",
    "ふつか",
    "ふっかつ",
    "ふっき",
    "ふっこく",
    "ぶどう",
    "ふとる",
    "ふとん",
    "ふのう",
    "ふはい",
    "ふひょう",
    "ふへん",
    "ふまん",
    "ふみん",
    "ふめつ",
    "ふめん",
    "ふよう",
    "ふりこ",
    "ふりる",
    "ふるい",
    "ふんいき",
    "ぶんがく",
    "ぶんぐ",
    "ふんしつ",
    "ぶんせき",
    "ふんそう",
    "ぶんぽう",
    "へいあん",
    "へいおん",
    "へいがい",
    "へいき",
    "へいげん",
    "へいこう",
    "へいさ",
    "へいしゃ",
    "へいせつ",
    "へいそ",
    "へいたく",
    "へいてん",
    "へいねつ",
    "へいわ",
    "へきが",
    "へこむ",
    "べにいろ",
    "べにしょうが",
    "へらす",
    "へんかん",
    "べんきょう",
    "べんごし",
    "へんさい",
    "へんたい",
    "べんり",
    "ほあん",
    "ほいく",
    "ぼうぎょ",
    "ほうこく",
    "ほうそう",
    "ほうほう",
    "ほうもん",
    "ほうりつ",
    "ほえる",
    "ほおん",
    "ほかん",
    "ほきょう",
    "ぼきん",
    "ほくろ",
    "ほけつ",
    "ほけん",
    "ほこう",
    "ほこる",
    "ほしい",
    "ほしつ",
    "ほしゅ",
    "ほしょう",
    "ほせい",
    "ほそい",
    "ほそく",
    "ほたて",
    "ほたる",
    "ぽちぶくろ",
    "ほっきょく",
    "ほっさ",
    "ほったん",
    "ほとんど",
    "ほめる",
    "ほんい",
    "ほんき",
    "ほんけ",
    "ほんしつ",
    "ほんやく",
    "まいにち",
    "まかい",
    "まかせる",
    "まがる",
    "まける",
    "まこと",
    "まさつ",
    "まじめ",
    "ますく",
    "まぜる",
    "まつり",
    "まとめ",
    "まなぶ",
    "まぬけ",
    "まねく",
    "まほう",
    "まもる",
    "まゆげ",
    "まよう",
    "まろやか",
    "まわす",
    "まわり",
    "まわる",
    "まんが",
    "まんきつ",
    "まんぞく",
    "まんなか",
    "みいら",
    "みうち",
    "みえる",
    "みがく",
    "みかた",
    "みかん",
    "みけん",
    "みこん",
    "みじかい",
    "みすい",
    "みすえる",
    "みせる",
    "みっか",
    "みつかる",
    "みつける",
    "みてい",
    "みとめる",
    "みなと",
    "みなみかさい",
    "みねらる",
    "みのう",
    "みのがす",
    "みほん",
    "みもと",
    "みやげ",
    "みらい",
    "みりょく",
    "みわく",
    "みんか",
    "みんぞく",
    "むいか",
    "むえき",
    "むえん",
    "むかい",
    "むかう",
    "むかえ",
    "むかし",
    "むぎちゃ",
    "むける",
    "むげん",
    "むさぼる",
    "むしあつい",
    "むしば",
    "むじゅん",
    "むしろ",
    "むすう",
    "むすこ",
    "むすぶ",
    "むすめ",
    "むせる",
    "むせん",
    "むちゅう",
    "むなしい",
    "むのう",
    "むやみ",
    "むよう",
    "むらさき",
    "むりょう",
    "むろん",
    "めいあん",
    "めいうん",
    "めいえん",
    "めいかく",
    "めいきょく",
    "めいさい",
    "めいし",
    "めいそう",
    "めいぶつ",
    "めいれい",
    "めいわく",
    "めぐまれる",
    "めざす",
    "めした",
    "めずらしい",
    "めだつ",
    "めまい",
    "めやす",
    "めんきょ",
    "めんせき",
    "めんどう",
    "もうしあげる",
    "もうどうけん",
    "もえる",
    "もくし",
    "もくてき",
    "もくようび",
    "もちろん",
    "もどる",
    "もらう",
    "もんく",
    "もんだい",
    "やおや",
    "やける",
    "やさい",
    "やさしい",
    "やすい",
    "やすたろう",
    "やすみ",
    "やせる",
    "やそう",
    "やたい",
    "やちん",
    "やっと",
    "やっぱり",
    "やぶる",
    "やめる",
    "ややこしい",
    "やよい",
    "やわらかい",
    "ゆうき",
    "ゆうびんきょく",
    "ゆうべ",
    "ゆうめい",
    "ゆけつ",
    "ゆしゅつ",
    "ゆせん",
    "ゆそう",
    "ゆたか",
    "ゆちゃく",
    "ゆでる",
    "ゆにゅう",
    "ゆびわ",
    "ゆらい",
    "ゆれる",
    "ようい",
    "ようか",
    "ようきゅう",
    "ようじ",
    "ようす",
    "ようちえん",
    "よかぜ",
    "よかん",
    "よきん",
    "よくせい",
    "よくぼう",
    "よけい",
    "よごれる",
    "よさん",
    "よしゅう",
    "よそう",
    "よそく",
    "よっか",
    "よてい",
    "よどがわく",
    "よねつ",
    "よやく",
    "よゆう",
    "よろこぶ",
    "よろしい",
    "らいう",
    "らくがき",
    "らくご",
    "らくさつ",
    "らくだ",
    "らしんばん",
    "らせん",
    "らぞく",
    "らたい",
    "らっか",
    "られつ",
    "りえき",
    "りかい",
    "りきさく",
    "りきせつ",
    "りくぐん",
    "りくつ",
    "りけん",
    "りこう",
    "りせい",
    "りそう",
    "りそく",
    "りてん",
    "りねん",
    "りゆう",
    "りゅうがく",
    "りよう",
    "りょうり",
    "りょかん",
    "りょくちゃ",
    "りょこう",
    "りりく",
    "りれき",
    "りろん",
    "りんご",
    "るいけい",
    "るいさい",
    "るいじ",
    "るいせき",
    "るすばん",
    "るりがわら",
    "れいかん",
    "れいぎ",
    "れいせい",
    "れいぞうこ",
    "れいとう",
    "れいぼう",
    "れきし",
    "れきだい",
    "れんあい",
    "れんけい",
    "れんこん",
    "れんさい",
    "れんしゅう",
    "れんぞく",
    "れんらく",
    "ろうか",
    "ろうご",
    "ろうじん",
    "ろうそく",
    "ろくが",
    "ろこつ",
    "ろじうら",
    "ろしゅつ",
    "ろせん",
    "ろてん",
    "ろめん",
    "ろれつ",
    "ろんぎ",
    "ろんぱ",
    "ろんぶん",
    "ろんり",
    "わかす",
    "わかめ",
    "わかやま",
    "わかれる",
    "わしつ",
    "わじまし",
    "わすれもの",
    "わらう",
    "われる"
]
;
},373,[]);
__d(function(global, require, _aUnused, _bUnused, module, exports, _cUnused) {
  module.exports = [
    "abandon",
    "ability",
    "able",
    "about",
    "above",
    "absent",
    "absorb",
    "abstract",
    "absurd",
    "abuse",
    "access",
    "accident",
    "account",
    "accuse",
    "achieve",
    "acid",
    "acoustic",
    "acquire",
    "across",
    "act",
    "action",
    "actor",
    "actress",
    "actual",
    "adapt",
    "add",
    "addict",
    "address",
    "adjust",
    "admit",
    "adult",
    "advance",
    "advice",
    "aerobic",
    "affair",
    "afford",
    "afraid",
    "again",
    "age",
    "agent",
    "agree",
    "ahead",
    "aim",
    "air",
    "airport",
    "aisle",
    "alarm",
    "album",
    "alcohol",
    "alert",
    "alien",
    "all",
    "alley",
    "allow",
    "almost",
    "alone",
    "alpha",
    "already",
    "also",
    "alter",
    "always",
    "amateur",
    "amazing",
    "among",
    "amount",
    "amused",
    "analyst",
    "anchor",
    "ancient",
    "anger",
    "angle",
    "angry",
    "animal",
    "ankle",
    "announce",
    "annual",
    "another",
    "answer",
    "antenna",
    "antique",
    "anxiety",
    "any",
    "apart",
    "apology",
    "appear",
    "apple",
    "approve",
    "april",
    "arch",
    "arctic",
    "area",
    "arena",
    "argue",
    "arm",
    "armed",
    "armor",
    "army",
    "around",
    "arrange",
    "arrest",
    "arrive",
    "arrow",
    "art",
    "artefact",
    "artist",
    "artwork",
    "ask",
    "aspect",
    "assault",
    "asset",
    "assist",
    "assume",
    "asthma",
    "athlete",
    "atom",
    "attack",
    "attend",
    "attitude",
    "attract",
    "auction",
    "audit",
    "august",
    "aunt",
    "author",
    "auto",
    "autumn",
    "average",
    "avocado",
    "avoid",
    "awake",
    "aware",
    "away",
    "awesome",
    "awful",
    "awkward",
    "axis",
    "baby",
    "bachelor",
    "bacon",
    "badge",
    "bag",
    "balance",
    "balcony",
    "ball",
    "bamboo",
    "banana",
    "banner",
    "bar",
    "barely",
    "bargain",
    "barrel",
    "base",
    "basic",
    "basket",
    "battle",
    "beach",
    "bean",
    "beauty",
    "because",
    "become",
    "beef",
    "before",
    "begin",
    "behave",
    "behind",
    "believe",
    "below",
    "belt",
    "bench",
    "benefit",
    "best",
    "betray",
    "better",
    "between",
    "beyond",
    "bicycle",
    "bid",
    "bike",
    "bind",
    "biology",
    "bird",
    "birth",
    "bitter",
    "black",
    "blade",
    "blame",
    "blanket",
    "blast",
    "bleak",
    "bless",
    "blind",
    "blood",
    "blossom",
    "blouse",
    "blue",
    "blur",
    "blush",
    "board",
    "boat",
    "body",
    "boil",
    "bomb",
    "bone",
    "bonus",
    "book",
    "boost",
    "border",
    "boring",
    "borrow",
    "boss",
    "bottom",
    "bounce",
    "box",
    "boy",
    "bracket",
    "brain",
    "brand",
    "brass",
    "brave",
    "bread",
    "breeze",
    "brick",
    "bridge",
    "brief",
    "bright",
    "bring",
    "brisk",
    "broccoli",
    "broken",
    "bronze",
    "broom",
    "brother",
    "brown",
    "brush",
    "bubble",
    "buddy",
    "budget",
    "buffalo",
    "build",
    "bulb",
    "bulk",
    "bullet",
    "bundle",
    "bunker",
    "burden",
    "burger",
    "burst",
    "bus",
    "business",
    "busy",
    "butter",
    "buyer",
    "buzz",
    "cabbage",
    "cabin",
    "cable",
    "cactus",
    "cage",
    "cake",
    "call",
    "calm",
    "camera",
    "camp",
    "can",
    "canal",
    "cancel",
    "candy",
    "cannon",
    "canoe",
    "canvas",
    "canyon",
    "capable",
    "capital",
    "captain",
    "car",
    "carbon",
    "card",
    "cargo",
    "carpet",
    "carry",
    "cart",
    "case",
    "cash",
    "casino",
    "castle",
    "casual",
    "cat",
    "catalog",
    "catch",
    "category",
    "cattle",
    "caught",
    "cause",
    "caution",
    "cave",
    "ceiling",
    "celery",
    "cement",
    "census",
    "century",
    "cereal",
    "certain",
    "chair",
    "chalk",
    "champion",
    "change",
    "chaos",
    "chapter",
    "charge",
    "chase",
    "chat",
    "cheap",
    "check",
    "cheese",
    "chef",
    "cherry",
    "chest",
    "chicken",
    "chief",
    "child",
    "chimney",
    "choice",
    "choose",
    "chronic",
    "chuckle",
    "chunk",
    "churn",
    "cigar",
    "cinnamon",
    "circle",
    "citizen",
    "city",
    "civil",
    "claim",
    "clap",
    "clarify",
    "claw",
    "clay",
    "clean",
    "clerk",
    "clever",
    "click",
    "client",
    "cliff",
    "climb",
    "clinic",
    "clip",
    "clock",
    "clog",
    "close",
    "cloth",
    "cloud",
    "clown",
    "club",
    "clump",
    "cluster",
    "clutch",
    "coach",
    "coast",
    "coconut",
    "code",
    "coffee",
    "coil",
    "coin",
    "collect",
    "color",
    "column",
    "combine",
    "come",
    "comfort",
    "comic",
    "common",
    "company",
    "concert",
    "conduct",
    "confirm",
    "congress",
    "connect",
    "consider",
    "control",
    "convince",
    "cook",
    "cool",
    "copper",
    "copy",
    "coral",
    "core",
    "corn",
    "correct",
    "cost",
    "cotton",
    "couch",
    "country",
    "couple",
    "course",
    "cousin",
    "cover",
    "coyote",
    "crack",
    "cradle",
    "craft",
    "cram",
    "crane",
    "crash",
    "crater",
    "crawl",
    "crazy",
    "cream",
    "credit",
    "creek",
    "crew",
    "cricket",
    "crime",
    "crisp",
    "critic",
    "crop",
    "cross",
    "crouch",
    "crowd",
    "crucial",
    "cruel",
    "cruise",
    "crumble",
    "crunch",
    "crush",
    "cry",
    "crystal",
    "cube",
    "culture",
    "cup",
    "cupboard",
    "curious",
    "current",
    "curtain",
    "curve",
    "cushion",
    "custom",
    "cute",
    "cycle",
    "dad",
    "damage",
    "damp",
    "dance",
    "danger",
    "daring",
    "dash",
    "daughter",
    "dawn",
    "day",
    "deal",
    "debate",
    "debris",
    "decade",
    "december",
    "decide",
    "decline",
    "decorate",
    "decrease",
    "deer",
    "defense",
    "define",
    "defy",
    "degree",
    "delay",
    "deliver",
    "demand",
    "demise",
    "denial",
    "dentist",
    "deny",
    "depart",
    "depend",
    "deposit",
    "depth",
    "deputy",
    "derive",
    "describe",
    "desert",
    "design",
    "desk",
    "despair",
    "destroy",
    "detail",
    "detect",
    "develop",
    "device",
    "devote",
    "diagram",
    "dial",
    "diamond",
    "diary",
    "dice",
    "diesel",
    "diet",
    "differ",
    "digital",
    "dignity",
    "dilemma",
    "dinner",
    "dinosaur",
    "direct",
    "dirt",
    "disagree",
    "discover",
    "disease",
    "dish",
    "dismiss",
    "disorder",
    "display",
    "distance",
    "divert",
    "divide",
    "divorce",
    "dizzy",
    "doctor",
    "document",
    "dog",
    "doll",
    "dolphin",
    "domain",
    "donate",
    "donkey",
    "donor",
    "door",
    "dose",
    "double",
    "dove",
    "draft",
    "dragon",
    "drama",
    "drastic",
    "draw",
    "dream",
    "dress",
    "drift",
    "drill",
    "drink",
    "drip",
    "drive",
    "drop",
    "drum",
    "dry",
    "duck",
    "dumb",
    "dune",
    "during",
    "dust",
    "dutch",
    "duty",
    "dwarf",
    "dynamic",
    "eager",
    "eagle",
    "early",
    "earn",
    "earth",
    "easily",
    "east",
    "easy",
    "echo",
    "ecology",
    "economy",
    "edge",
    "edit",
    "educate",
    "effort",
    "egg",
    "eight",
    "either",
    "elbow",
    "elder",
    "electric",
    "elegant",
    "element",
    "elephant",
    "elevator",
    "elite",
    "else",
    "embark",
    "embody",
    "embrace",
    "emerge",
    "emotion",
    "employ",
    "empower",
    "empty",
    "enable",
    "enact",
    "end",
    "endless",
    "endorse",
    "enemy",
    "energy",
    "enforce",
    "engage",
    "engine",
    "enhance",
    "enjoy",
    "enlist",
    "enough",
    "enrich",
    "enroll",
    "ensure",
    "enter",
    "entire",
    "entry",
    "envelope",
    "episode",
    "equal",
    "equip",
    "era",
    "erase",
    "erode",
    "erosion",
    "error",
    "erupt",
    "escape",
    "essay",
    "essence",
    "estate",
    "eternal",
    "ethics",
    "evidence",
    "evil",
    "evoke",
    "evolve",
    "exact",
    "example",
    "excess",
    "exchange",
    "excite",
    "exclude",
    "excuse",
    "execute",
    "exercise",
    "exhaust",
    "exhibit",
    "exile",
    "exist",
    "exit",
    "exotic",
    "expand",
    "expect",
    "expire",
    "explain",
    "expose",
    "express",
    "extend",
    "extra",
    "eye",
    "eyebrow",
    "fabric",
    "face",
    "faculty",
    "fade",
    "faint",
    "faith",
    "fall",
    "false",
    "fame",
    "family",
    "famous",
    "fan",
    "fancy",
    "fantasy",
    "farm",
    "fashion",
    "fat",
    "fatal",
    "father",
    "fatigue",
    "fault",
    "favorite",
    "feature",
    "february",
    "federal",
    "fee",
    "feed",
    "feel",
    "female",
    "fence",
    "festival",
    "fetch",
    "fever",
    "few",
    "fiber",
    "fiction",
    "field",
    "figure",
    "file",
    "film",
    "filter",
    "final",
    "find",
    "fine",
    "finger",
    "finish",
    "fire",
    "firm",
    "first",
    "fiscal",
    "fish",
    "fit",
    "fitness",
    "fix",
    "flag",
    "flame",
    "flash",
    "flat",
    "flavor",
    "flee",
    "flight",
    "flip",
    "float",
    "flock",
    "floor",
    "flower",
    "fluid",
    "flush",
    "fly",
    "foam",
    "focus",
    "fog",
    "foil",
    "fold",
    "follow",
    "food",
    "foot",
    "force",
    "forest",
    "forget",
    "fork",
    "fortune",
    "forum",
    "forward",
    "fossil",
    "foster",
    "found",
    "fox",
    "fragile",
    "frame",
    "frequent",
    "fresh",
    "friend",
    "fringe",
    "frog",
    "front",
    "frost",
    "frown",
    "frozen",
    "fruit",
    "fuel",
    "fun",
    "funny",
    "furnace",
    "fury",
    "future",
    "gadget",
    "gain",
    "galaxy",
    "gallery",
    "game",
    "gap",
    "garage",
    "garbage",
    "garden",
    "garlic",
    "garment",
    "gas",
    "gasp",
    "gate",
    "gather",
    "gauge",
    "gaze",
    "general",
    "genius",
    "genre",
    "gentle",
    "genuine",
    "gesture",
    "ghost",
    "giant",
    "gift",
    "giggle",
    "ginger",
    "giraffe",
    "girl",
    "give",
    "glad",
    "glance",
    "glare",
    "glass",
    "glide",
    "glimpse",
    "globe",
    "gloom",
    "glory",
    "glove",
    "glow",
    "glue",
    "goat",
    "goddess",
    "gold",
    "good",
    "goose",
    "gorilla",
    "gospel",
    "gossip",
    "govern",
    "gown",
    "grab",
    "grace",
    "grain",
    "grant",
    "grape",
    "grass",
    "gravity",
    "great",
    "green",
    "grid",
    "grief",
    "grit",
    "grocery",
    "group",
    "grow",
    "grunt",
    "guard",
    "guess",
    "guide",
    "guilt",
    "guitar",
    "gun",
    "gym",
    "habit",
    "hair",
    "half",
    "hammer",
    "hamster",
    "hand",
    "happy",
    "harbor",
    "hard",
    "harsh",
    "harvest",
    "hat",
    "have",
    "hawk",
    "hazard",
    "head",
    "health",
    "heart",
    "heavy",
    "hedgehog",
    "height",
    "hello",
    "helmet",
    "help",
    "hen",
    "hero",
    "hidden",
    "high",
    "hill",
    "hint",
    "hip",
    "hire",
    "history",
    "hobby",
    "hockey",
    "hold",
    "hole",
    "holiday",
    "hollow",
    "home",
    "honey",
    "hood",
    "hope",
    "horn",
    "horror",
    "horse",
    "hospital",
    "host",
    "hotel",
    "hour",
    "hover",
    "hub",
    "huge",
    "human",
    "humble",
    "humor",
    "hundred",
    "hungry",
    "hunt",
    "hurdle",
    "hurry",
    "hurt",
    "husband",
    "hybrid",
    "ice",
    "icon",
    "idea",
    "identify",
    "idle",
    "ignore",
    "ill",
    "illegal",
    "illness",
    "image",
    "imitate",
    "immense",
    "immune",
    "impact",
    "impose",
    "improve",
    "impulse",
    "inch",
    "include",
    "income",
    "increase",
    "index",
    "indicate",
    "indoor",
    "industry",
    "infant",
    "inflict",
    "inform",
    "inhale",
    "inherit",
    "initial",
    "inject",
    "injury",
    "inmate",
    "inner",
    "innocent",
    "input",
    "inquiry",
    "insane",
    "insect",
    "inside",
    "inspire",
    "install",
    "intact",
    "interest",
    "into",
    "invest",
    "invite",
    "involve",
    "iron",
    "island",
    "iso",
    "issue",
    "item",
    "ivory",
    "jacket",
    "jaguar",
    "jar",
    "jazz",
    "jealous",
    "jeans",
    "jelly",
    "jewel",
    "job",
    "join",
    "joke",
    "journey",
    "joy",
    "judge",
    "juice",
    "jump",
    "jungle",
    "junior",
    "junk",
    "just",
    "kangaroo",
    "keen",
    "keep",
    "ketchup",
    "key",
    "kick",
    "kid",
    "kidney",
    "kind",
    "kingdom",
    "kiss",
    "kit",
    "kitchen",
    "kite",
    "kitten",
    "kiwi",
    "knee",
    "knife",
    "knock",
    "know",
    "lab",
    "label",
    "labor",
    "ladder",
    "lady",
    "lake",
    "lamp",
    "language",
    "laptop",
    "large",
    "r",
    "latin",
    "laugh",
    "laundry",
    "lava",
    "law",
    "lawn",
    "lawsuit",
    "layer",
    "lazy",
    "leader",
    "leaf",
    "learn",
    "leave",
    "lecture",
    "left",
    "leg",
    "legal",
    "legend",
    "leisure",
    "lemon",
    "lend",
    "length",
    "lens",
    "leopard",
    "lesson",
    "letter",
    "level",
    "liar",
    "liberty",
    "library",
    "license",
    "life",
    "lift",
    "light",
    "like",
    "limb",
    "limit",
    "link",
    "lion",
    "liquid",
    "list",
    "little",
    "live",
    "lizard",
    "load",
    "loan",
    "lobster",
    "local",
    "lock",
    "logic",
    "lonely",
    "long",
    "loop",
    "lottery",
    "loud",
    "lounge",
    "love",
    "loyal",
    "lucky",
    "luggage",
    "lumber",
    "lunar",
    "lunch",
    "luxury",
    "lyrics",
    "machine",
    "mad",
    "magic",
    "magnet",
    "maid",
    "mail",
    "main",
    "major",
    "make",
    "mammal",
    "man",
    "manage",
    "mandate",
    "mango",
    "mansion",
    "manual",
    "maple",
    "marble",
    "march",
    "margin",
    "marine",
    "market",
    "marriage",
    "mask",
    "mass",
    "master",
    "match",
    "material",
    "math",
    "matrix",
    "matter",
    "maximum",
    "maze",
    "meadow",
    "mean",
    "measure",
    "meat",
    "mechanic",
    "medal",
    "media",
    "melody",
    "melt",
    "member",
    "memory",
    "mention",
    "menu",
    "mercy",
    "merge",
    "merit",
    "merry",
    "mesh",
    "message",
    "metal",
    "method",
    "middle",
    "midnight",
    "milk",
    "million",
    "mimic",
    "mind",
    "minimum",
    "minor",
    "minute",
    "miracle",
    "mirror",
    "misery",
    "miss",
    "mistake",
    "mix",
    "mixed",
    "mixture",
    "mobile",
    "model",
    "modify",
    "mom",
    "moment",
    "monitor",
    "monkey",
    "monster",
    "month",
    "moon",
    "moral",
    "more",
    "morning",
    "mosquito",
    "mother",
    "motion",
    "motor",
    "mountain",
    "mouse",
    "move",
    "movie",
    "much",
    "muffin",
    "mule",
    "multiply",
    "muscle",
    "museum",
    "mushroom",
    "music",
    "must",
    "mutual",
    "myself",
    "mystery",
    "myth",
    "naive",
    "name",
    "napkin",
    "narrow",
    "nasty",
    "nation",
    "nature",
    "near",
    "neck",
    "need",
    "negative",
    "neglect",
    "neither",
    "nephew",
    "nerve",
    "nest",
    "net",
    "network",
    "neutral",
    "never",
    "news",
    "next",
    "nice",
    "night",
    "noble",
    "noise",
    "nominee",
    "noodle",
    "normal",
    "north",
    "nose",
    "notable",
    "note",
    "nothing",
    "notice",
    "novel",
    "now",
    "nuclear",
    "number",
    "nurse",
    "nut",
    "oak",
    "obey",
    "object",
    "oblige",
    "obscure",
    "observe",
    "obtain",
    "obvious",
    "occur",
    "ocean",
    "october",
    "odor",
    "off",
    "offer",
    "office",
    "often",
    "oil",
    "okay",
    "old",
    "olive",
    "olympic",
    "omit",
    "once",
    "one",
    "onion",
    "online",
    "only",
    "open",
    "opera",
    "opinion",
    "oppose",
    "option",
    "orange",
    "orbit",
    "orchard",
    "order",
    "ordinary",
    "organ",
    "orient",
    "original",
    "orphan",
    "ostrich",
    "other",
    "outdoor",
    "outer",
    "output",
    "outside",
    "oval",
    "oven",
    "over",
    "own",
    "owner",
    "oxygen",
    "oyster",
    "ozone",
    "pact",
    "paddle",
    "page",
    "pair",
    "palace",
    "palm",
    "panda",
    "panel",
    "panic",
    "panther",
    "paper",
    "parade",
    "parent",
    "park",
    "parrot",
    "party",
    "pass",
    "patch",
    "path",
    "patient",
    "patrol",
    "pattern",
    "pause",
    "pave",
    "payment",
    "peace",
    "peanut",
    "pear",
    "peasant",
    "pelican",
    "pen",
    "penalty",
    "pencil",
    "people",
    "pepper",
    "perfect",
    "permit",
    "person",
    "pet",
    "phone",
    "photo",
    "phrase",
    "physical",
    "piano",
    "picnic",
    "picture",
    "piece",
    "pig",
    "pigeon",
    "pill",
    "pilot",
    "pink",
    "pioneer",
    "pipe",
    "pistol",
    "pitch",
    "pizza",
    "place",
    "planet",
    "plastic",
    "p",
    "play",
    "please",
    "pledge",
    "pluck",
    "plug",
    "plunge",
    "poem",
    "poet",
    "point",
    "polar",
    "pole",
    "police",
    "pond",
    "pony",
    "pool",
    "popular",
    "portion",
    "position",
    "possible",
    "post",
    "potato",
    "pottery",
    "poverty",
    "powder",
    "power",
    "practice",
    "praise",
    "predict",
    "prefer",
    "prepare",
    "present",
    "pretty",
    "prevent",
    "price",
    "pride",
    "primary",
    "print",
    "priority",
    "prison",
    "private",
    "prize",
    "problem",
    "process",
    "produce",
    "profit",
    "program",
    "project",
    "promote",
    "proof",
    "property",
    "prosper",
    "protect",
    "proud",
    "provide",
    "public",
    "pudding",
    "pull",
    "pulp",
    "pulse",
    "pumpkin",
    "punch",
    "pupil",
    "puppy",
    "purchase",
    "purity",
    "purpose",
    "purse",
    "push",
    "put",
    "puzzle",
    "pyramid",
    "quality",
    "quantum",
    "quarter",
    "question",
    "quick",
    "quit",
    "quiz",
    "quote",
    "rabbit",
    "raccoon",
    "race",
    "rack",
    "radar",
    "radio",
    "rail",
    "rain",
    "raise",
    "rally",
    "ramp",
    "ranch",
    "random",
    "range",
    "rapid",
    "rare",
    "rate",
    "rather",
    "raven",
    "raw",
    "razor",
    "ready",
    "real",
    "reason",
    "rebel",
    "rebuild",
    "recall",
    "receive",
    "recipe",
    "record",
    "recycle",
    "reduce",
    "reflect",
    "reform",
    "refuse",
    "region",
    "regret",
    "regular",
    "reject",
    "relax",
    "release",
    "relief",
    "rely",
    "remain",
    "remember",
    "remind",
    "remove",
    "render",
    "renew",
    "rent",
    "reopen",
    "repair",
    "repeat",
    "replace",
    "report",
    "require",
    "rescue",
    "resemble",
    "resist",
    "resource",
    "response",
    "result",
    "retire",
    "retreat",
    "return",
    "reunion",
    "reveal",
    "review",
    "reward",
    "rhythm",
    "rib",
    "ribbon",
    "rice",
    "rich",
    "ride",
    "ridge",
    "rifle",
    "right",
    "rigid",
    "ring",
    "riot",
    "ripple",
    "risk",
    "ritual",
    "rival",
    "river",
    "road",
    "roast",
    "robot",
    "robust",
    "rocket",
    "romance",
    "roof",
    "rookie",
    "room",
    "rose",
    "rotate",
    "rough",
    "round",
    "route",
    "royal",
    "rubber",
    "rude",
    "rug",
    "rule",
    "run",
    "runway",
    "rural",
    "sad",
    "saddle",
    "sadness",
    "safe",
    "sail",
    "salad",
    "salmon",
    "salon",
    "salt",
    "salute",
    "same",
    "sample",
    "sand",
    "satisfy",
    "satoshi",
    "sauce",
    "sausage",
    "save",
    "say",
    "scale",
    "scan",
    "scare",
    "scatter",
    "scene",
    "scheme",
    "school",
    "science",
    "scissors",
    "scorpion",
    "scout",
    "scrap",
    "screen",
    "script",
    "scrub",
    "sea",
    "search",
    "season",
    "seat",
    "second",
    "secret",
    "section",
    "security",
    "seed",
    "seek",
    "segment",
    "select",
    "sell",
    "seminar",
    "senior",
    "sense",
    "sentence",
    "series",
    "service",
    "session",
    "settle",
    "setup",
    "seven",
    "shadow",
    "shaft",
    "shallow",
    "share",
    "shed",
    "shell",
    "sheriff",
    "shield",
    "shift",
    "shine",
    "ship",
    "shiver",
    "shock",
    "shoe",
    "shoot",
    "shop",
    "short",
    "shoulder",
    "shove",
    "shrimp",
    "shrug",
    "shuffle",
    "shy",
    "sibling",
    "sick",
    "side",
    "siege",
    "sight",
    "sign",
    "silent",
    "silk",
    "silly",
    "silver",
    "similar",
    "simple",
    "since",
    "sing",
    "siren",
    "sister",
    "situate",
    "six",
    "size",
    "skate",
    "sketch",
    "ski",
    "skill",
    "skin",
    "skirt",
    "skull",
    "slab",
    "slam",
    "sleep",
    "slender",
    "slice",
    "slide",
    "slight",
    "slim",
    "slogan",
    "slot",
    "slow",
    "slush",
    "small",
    "smart",
    "smile",
    "smoke",
    "smooth",
    "snack",
    "snake",
    "snap",
    "sniff",
    "snow",
    "soap",
    "soccer",
    "social",
    "sock",
    "soda",
    "soft",
    "solar",
    "soldier",
    "solid",
    "solution",
    "solve",
    "someone",
    "song",
    "soon",
    "sorry",
    "sort",
    "soul",
    "sound",
    "soup",
    "source",
    "south",
    "space",
    "spare",
    "spatial",
    "spawn",
    "speak",
    "special",
    "speed",
    "spell",
    "spend",
    "sphere",
    "spice",
    "spider",
    "spike",
    "spin",
    "spirit",
    "split",
    "spoil",
    "sponsor",
    "spoon",
    "sport",
    "spot",
    "spray",
    "spread",
    "spring",
    "spy",
    "square",
    "squeeze",
    "squirrel",
    "stable",
    "stadium",
    "staff",
    "stage",
    "stairs",
    "stamp",
    "stand",
    "start",
    "state",
    "stay",
    "steak",
    "steel",
    "stem",
    "step",
    "stereo",
    "stick",
    "still",
    "sting",
    "stock",
    "stomach",
    "stone",
    "stool",
    "story",
    "stove",
    "strategy",
    "street",
    "strike",
    "strong",
    "struggle",
    "student",
    "stuff",
    "stumble",
    "style",
    "subject",
    "submit",
    "subway",
    "success",
    "such",
    "sudden",
    "suffer",
    "sugar",
    "suggest",
    "suit",
    "summer",
    "sun",
    "sunny",
    "sunset",
    "super",
    "supply",
    "supreme",
    "sure",
    "surface",
    "surge",
    "surprise",
    "surround",
    "survey",
    "suspect",
    "sustain",
    "swallow",
    "swamp",
    "swap",
    "swarm",
    "swear",
    "sweet",
    "swift",
    "swim",
    "swing",
    "switch",
    "sword",
    "symbol",
    "symptom",
    "syrup",
    "system",
    "table",
    "tackle",
    "tag",
    "tail",
    "talent",
    "talk",
    "tank",
    "tape",
    "target",
    "task",
    "taste",
    "tattoo",
    "taxi",
    "teach",
    "team",
    "tell",
    "ten",
    "tenant",
    "tennis",
    "tent",
    "term",
    "test",
    "text",
    "thank",
    "that",
    "theme",
    "then",
    "theory",
    "there",
    "they",
    "thing",
    "this",
    "thought",
    "three",
    "thrive",
    "throw",
    "thumb",
    "thunder",
    "ticket",
    "tide",
    "tiger",
    "tilt",
    "timber",
    "time",
    "tiny",
    "tip",
    "tired",
    "tissue",
    "title",
    "toast",
    "tobacco",
    "today",
    "toddler",
    "toe",
    "together",
    "toilet",
    "token",
    "tomato",
    "tomorrow",
    "tone",
    "tongue",
    "tonight",
    "tool",
    "tooth",
    "top",
    "topic",
    "topple",
    "torch",
    "tornado",
    "tortoise",
    "toss",
    "total",
    "tourist",
    "toward",
    "tower",
    "town",
    "toy",
    "track",
    "trade",
    "traffic",
    "tragic",
    "train",
    "transfer",
    "trap",
    "trash",
    "travel",
    "tray",
    "treat",
    "tree",
    "trend",
    "trial",
    "tribe",
    "trick",
    "trigger",
    "trim",
    "trip",
    "trophy",
    "trouble",
    "truck",
    "true",
    "truly",
    "trumpet",
    "trust",
    "truth",
    "try",
    "tube",
    "tuition",
    "tumble",
    "tuna",
    "tunnel",
    "turkey",
    "turn",
    "turtle",
    "twelve",
    "twenty",
    "twice",
    "twin",
    "twist",
    "two",
    "type",
    "typical",
    "ugly",
    "umbrella",
    "unable",
    "unaware",
    "uncle",
    "uncover",
    "under",
    "undo",
    "unfair",
    "unfold",
    "unhappy",
    "uniform",
    "unique",
    "unit",
    "universe",
    "unknown",
    "unlock",
    "until",
    "unusual",
    "unveil",
    "update",
    "upgrade",
    "uphold",
    "upon",
    "upper",
    "upset",
    "urban",
    "urge",
    "usage",
    "use",
    "used",
    "useful",
    "useless",
    "usual",
    "utility",
    "vacant",
    "vacuum",
    "vague",
    "valid",
    "valley",
    "valve",
    "van",
    "vanish",
    "vapor",
    "various",
    "vast",
    "vault",
    "vehicle",
    "velvet",
    "vendor",
    "venture",
    "venue",
    "verb",
    "verify",
    "version",
    "very",
    "vessel",
    "veteran",
    "viable",
    "vibrant",
    "vicious",
    "victory",
    "video",
    "view",
    "village",
    "vintage",
    "violin",
    "virtual",
    "virus",
    "visa",
    "visit",
    "visual",
    "vital",
    "vivid",
    "vocal",
    "voice",
    "void",
    "volcano",
    "volume",
    "vote",
    "voyage",
    "wage",
    "wagon",
    "wait",
    "walk",
    "wall",
    "walnut",
    "want",
    "warfare",
    "warm",
    "warrior",
    "wash",
    "wasp",
    "waste",
    "water",
    "wave",
    "way",
    "wealth",
    "weapon",
    "wear",
    "weasel",
    "weather",
    "web",
    "wedding",
    "weekend",
    "weird",
    "welcome",
    "west",
    "wet",
    "whale",
    "what",
    "wheat",
    "wheel",
    "when",
    "where",
    "whip",
    "whisper",
    "wide",
    "width",
    "wife",
    "wild",
    "will",
    "win",
    "window",
    "wine",
    "wing",
    "wink",
    "winner",
    "winter",
    "wire",
    "wisdom",
    "wise",
    "wish",
    "witness",
    "wolf",
    "woman",
    "wonder",
    "wood",
    "wool",
    "word",
    "work",
    "world",
    "worry",
    "worth",
    "wrap",
    "wreck",
    "wrestle",
    "wrist",
    "write",
    "wrong",
    "yard",
    "year",
    "yellow",
    "you",
    "young",
    "youth",
    "zebra",
    "zero",
    "zone",
    "zoo"
]
;
},374,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  ;
  (function () {
    var undefined;
    var VERSION = '4.17.20';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800,
        HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = 4294967294,
        HALF_MAX_ARRAY_LENGTH = 2147483647;
    var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpo = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemp = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsApos = "['\u2019]",
        rsAstral = "[\\ud800-\\udfff]",
        rsBreak = "[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]",
        rsCombo = "[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",
        rsDigits = '\\d+',
        rsDingbat = "[\\u2700-\\u27bf]",
        rsLower = "[a-z\\xdf-\\xf6\\xf8-\\xff]",
        rsMisc = "[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = "(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])",
        rsNonAstral = "[^\\ud800-\\udfff]",
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
        rsZWJ = '\\u200d';
    var rsMiscLower = "(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])",
        rsMiscUpper = "(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])",
        rsOptContrLower = "(?:['\u2019](?:d|ll|m|re|s|t|ve))?",
        rsOptContrUpper = "(?:['\u2019](?:D|LL|M|RE|S|T|VE))?",
        reOptMod = "(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",
        rsOptVar = "[\\ufe0e\\ufe0f]?",
        rsOptJoin = "(?:\\u200d(?:" + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = "[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?" + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + ["[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]?", rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp("\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|" + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp(["[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?=" + [rsBreak, rsUpper, '$'].join('|') + ')', "(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?=" + [rsBreak, "[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])", '$'].join('|') + ')', "[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:d|ll|m|re|s|t|ve))?", "[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?", rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
    var reHasUnicode = RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
    var tempCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      '\xc0': 'A',
      '\xc1': 'A',
      '\xc2': 'A',
      '\xc3': 'A',
      '\xc4': 'A',
      '\xc5': 'A',
      '\xe0': 'a',
      '\xe1': 'a',
      '\xe2': 'a',
      '\xe3': 'a',
      '\xe4': 'a',
      '\xe5': 'a',
      '\xc7': 'C',
      '\xe7': 'c',
      '\xd0': 'D',
      '\xf0': 'd',
      '\xc8': 'E',
      '\xc9': 'E',
      '\xca': 'E',
      '\xcb': 'E',
      '\xe8': 'e',
      '\xe9': 'e',
      '\xea': 'e',
      '\xeb': 'e',
      '\xcc': 'I',
      '\xcd': 'I',
      '\xce': 'I',
      '\xcf': 'I',
      '\xec': 'i',
      '\xed': 'i',
      '\xee': 'i',
      '\xef': 'i',
      '\xd1': 'N',
      '\xf1': 'n',
      '\xd2': 'O',
      '\xd3': 'O',
      '\xd4': 'O',
      '\xd5': 'O',
      '\xd6': 'O',
      '\xd8': 'O',
      '\xf2': 'o',
      '\xf3': 'o',
      '\xf4': 'o',
      '\xf5': 'o',
      '\xf6': 'o',
      '\xf8': 'o',
      '\xd9': 'U',
      '\xda': 'U',
      '\xdb': 'U',
      '\xdc': 'U',
      '\xf9': 'u',
      '\xfa': 'u',
      '\xfb': 'u',
      '\xfc': 'u',
      '\xdd': 'Y',
      '\xfd': 'y',
      '\xff': 'y',
      '\xc6': 'Ae',
      '\xe6': 'ae',
      '\xde': 'Th',
      '\xfe': 'th',
      '\xdf': 'ss',
      '\u0100': 'A',
      '\u0102': 'A',
      '\u0104': 'A',
      '\u0101': 'a',
      '\u0103': 'a',
      '\u0105': 'a',
      '\u0106': 'C',
      '\u0108': 'C',
      '\u010a': 'C',
      '\u010c': 'C',
      '\u0107': 'c',
      '\u0109': 'c',
      '\u010b': 'c',
      '\u010d': 'c',
      '\u010e': 'D',
      '\u0110': 'D',
      '\u010f': 'd',
      '\u0111': 'd',
      '\u0112': 'E',
      '\u0114': 'E',
      '\u0116': 'E',
      '\u0118': 'E',
      '\u011a': 'E',
      '\u0113': 'e',
      '\u0115': 'e',
      '\u0117': 'e',
      '\u0119': 'e',
      '\u011b': 'e',
      '\u011c': 'G',
      '\u011e': 'G',
      '\u0120': 'G',
      '\u0122': 'G',
      '\u011d': 'g',
      '\u011f': 'g',
      '\u0121': 'g',
      '\u0123': 'g',
      '\u0124': 'H',
      '\u0126': 'H',
      '\u0125': 'h',
      '\u0127': 'h',
      '\u0128': 'I',
      '\u012a': 'I',
      '\u012c': 'I',
      '\u012e': 'I',
      '\u0130': 'I',
      '\u0129': 'i',
      '\u012b': 'i',
      '\u012d': 'i',
      '\u012f': 'i',
      '\u0131': 'i',
      '\u0134': 'J',
      '\u0135': 'j',
      '\u0136': 'K',
      '\u0137': 'k',
      '\u0138': 'k',
      '\u0139': 'L',
      '\u013b': 'L',
      '\u013d': 'L',
      '\u013f': 'L',
      '\u0141': 'L',
      '\u013a': 'l',
      '\u013c': 'l',
      '\u013e': 'l',
      '\u0140': 'l',
      '\u0142': 'l',
      '\u0143': 'N',
      '\u0145': 'N',
      '\u0147': 'N',
      '\u014a': 'N',
      '\u0144': 'n',
      '\u0146': 'n',
      '\u0148': 'n',
      '\u014b': 'n',
      '\u014c': 'O',
      '\u014e': 'O',
      '\u0150': 'O',
      '\u014d': 'o',
      '\u014f': 'o',
      '\u0151': 'o',
      '\u0154': 'R',
      '\u0156': 'R',
      '\u0158': 'R',
      '\u0155': 'r',
      '\u0157': 'r',
      '\u0159': 'r',
      '\u015a': 'S',
      '\u015c': 'S',
      '\u015e': 'S',
      '\u0160': 'S',
      '\u015b': 's',
      '\u015d': 's',
      '\u015f': 's',
      '\u0161': 's',
      '\u0162': 'T',
      '\u0164': 'T',
      '\u0166': 'T',
      '\u0163': 't',
      '\u0165': 't',
      '\u0167': 't',
      '\u0168': 'U',
      '\u016a': 'U',
      '\u016c': 'U',
      '\u016e': 'U',
      '\u0170': 'U',
      '\u0172': 'U',
      '\u0169': 'u',
      '\u016b': 'u',
      '\u016d': 'u',
      '\u016f': 'u',
      '\u0171': 'u',
      '\u0173': 'u',
      '\u0174': 'W',
      '\u0175': 'w',
      '\u0176': 'Y',
      '\u0177': 'y',
      '\u0178': 'Y',
      '\u0179': 'Z',
      '\u017b': 'Z',
      '\u017d': 'Z',
      '\u017a': 'z',
      '\u017c': 'z',
      '\u017e': 'z',
      '\u0132': 'IJ',
      '\u0133': 'ij',
      '\u0152': 'Oe',
      '\u0153': 'oe',
      '\u0149': "'n",
      '\u017f': 's'
    };
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;

    var nodeUtil = function () {
      try {
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);

        case 1:
          return func.call(thisArg, args[0]);

        case 2:
          return func.call(thisArg, args[0], args[1]);

        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }

      return func.apply(thisArg, args);
    }

    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }

      return accumulator;
    }

    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }

      return array;
    }

    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }

      return true;
    }

    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }

      return result;
    }

    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }

      return false;
    }

    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }

      return result;
    }

    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }

      return array;
    }

    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }

      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }

      return accumulator;
    }

    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[--length];
      }

      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }

      return accumulator;
    }

    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }

      return false;
    }

    var asciiSize = baseProperty('length');

    function asciiToArray(string) {
      return string.split('');
    }

    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }

      return -1;
    }

    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }

      return -1;
    }

    function baseIsNaN(value) {
      return value !== value;
    }

    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }

    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined : object[key];
      };
    }

    function basePropertyOf(object) {
      return function (key) {
        return object == null ? undefined : object[key];
      };
    }

    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);

      while (length--) {
        array[length] = array[length].value;
      }

      return array;
    }

    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);

        if (current !== undefined) {
          result = result === undefined ? current : result + current;
        }
      }

      return result;
    }

    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }

    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }

    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    function cacheHas(cache, key) {
      return cache.has(key);
    }

    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

      return index;
    }

    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }

      return result;
    }

    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }

      return result;
    }

    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);
      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }

    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }

      return result;
    }

    function setToArray(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);
      set.forEach(function (value) {
        result[++index] = [value, value];
      });
      return result;
    }

    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }

      return -1;
    }

    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;

      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }

      return index;
    }

    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }

    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }

    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;

      while (reUnicode.test(string)) {
        ++result;
      }

      return result;
    }

    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    var runInContext = function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;
      var coreJsData = context['__core-js_shared__'];
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var idCounter = 0;

      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();

      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var oldDash = root._;
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
          symIterator = Symbol ? Symbol.iterator : undefined,
          symToStringTag = Symbol ? Symbol.toStringTag : undefined;

      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }

          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }

        return new LodashWrapper(value);
      }

      var baseCreate = function () {
        function object() {}

        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }

          if (objectCreate) {
            return objectCreate(proto);
          }

          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      function baseLodash() {}

      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      lodash.tempSettings = {
        'escape': reEscape,
        'evaluate': reEvaluate,
        'interpo': reInterpo,
        'variable': '',
        'imports': {
          '_': lodash
        }
      };
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }

        return result;
      }

      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }

        var result = [];

        outer: while (length-- && resIndex < takeCount) {
          index += dir;
          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }

          result[resIndex++] = value;
        }

        return result;
      }

      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      function hashGet(key) {
        var data = this.__data__;

        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = data.length - 1;

        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }

        --this.size;
        return true;
      }

      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }

      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }

        return this;
      }

      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
          this.add(values[index]);
        }
      }

      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);

        return this;
      }

      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }

      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);
        this.size = data.size;
        return result;
      }

      function stackGet(key) {
        return this.__data__.get(key);
      }

      function stackHas(key) {
        return this.__data__.has(key);
      }

      function stackSet(key, value) {
        var data = this.__data__;

        if (data instanceof ListCache) {
          var pairs = data.__data__;

          if (!Map || pairs.length < 199) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }

          data = this.__data__ = new MapCache(pairs);
        }

        data.set(key, value);
        this.size = data.size;
        return this;
      }

      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
            result.push(key);
          }
        }

        return result;
      }

      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }

        return result;
      }

      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }

          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }

        return number;
      }

      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }

        if (result !== undefined) {
          return result;
        }

        if (!isObject(value)) {
          return value;
        }

        var isArr = isArray(value);

        if (isArr) {
          result = initCloneArray(value);

          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }

          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);

            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }

            result = initCloneByTag(value, tag, isDeep);
          }
        }

        stack || (stack = new Stack());
        var stacked = stack.get(value);

        if (stacked) {
          return stacked;
        }

        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
        }

        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }

          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      function baseConforms(source) {
        var props = keys(source);
        return function (object) {
          return baseConformsTo(object, source, props);
        };
      }

      function baseConformsTo(object, source, props) {
        var length = props.length;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if (value === undefined && !(key in object) || !predicate(value)) {
            return false;
          }
        }

        return true;
      }

      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }

        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }

        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;

            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }

            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }

        return result;
      }

      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
                result = value;
          }
        }

        return result;
      }

      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end === undefined || end > length ? length : toInteger(end);

        if (end < 0) {
          end += length;
        }

        end = start > end ? 0 : toLength(end);

        while (start < end) {
          array[start++] = value;
        }

        return array;
      }

      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];

          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }

        return result;
      }

      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);

      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }

      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      function baseGt(value, other) {
        return value > other;
      }

      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];

          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }

          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }

        array = arrays[0];
        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;

            while (--othIndex) {
              var cache = caches[othIndex];

              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }

            if (seen) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }

      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }

        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }

        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }

          objIsArr = true;
          objIsObj = false;
        }

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }

        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }

        if (!isSameTag) {
          return false;
        }

        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (index--) {
          var data = matchData[index];

          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }

        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();

            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }

            if (!(result === undefined ? baseIsEqual(srcValue, objValue, 3, customizer, stack) : result)) {
              return false;
            }
          }
        }

        return true;
      }

      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }

        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      function baseIteratee(value) {
        if (typeof value == 'function') {
          return value;
        }

        if (value == null) {
          return identity;
        }

        if (typeof value == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }

        return property(value);
      }

      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }

        var result = [];

        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }

        return result;
      }

      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }

        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }

      function baseLt(value, other) {
        return value < other;
      }

      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      function baseMatches(source) {
        var matchData = getMatchData(source);

        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }

        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }

        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, 3);
        };
      }

      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }

        baseFor(source, function (srcValue, key) {
          stack || (stack = new Stack());

          if (isObject(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }

            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }

        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;

          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;

            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }

        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }

        assignMergeValue(object, key, newValue);
      }

      function baseNth(array, n) {
        var length = array.length;

        if (!length) {
          return;
        }

        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function (iteratee) {
            if (isArray(iteratee)) {
              return function (value) {
                return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
              };
            }

            return iteratee;
          });
        } else {
          iteratees = [identity];
        }

        var index = -1;
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return {
            'criteria': criteria,
            'index': ++index,
            'value': value
          };
        });
        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      function basePick(object, paths) {
        return basePickBy(object, paths, function (value, path) {
          return hasIn(object, path);
        });
      }

      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }

        return result;
      }

      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }

      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }

        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }

        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }

            splice.call(array, fromIndex, 1);
          }
        }

        return array;
      }

      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];

          if (length == lastIndex || index !== previous) {
            var previous = index;

            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }

        return array;
      }

      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }

        return result;
      }

      function baseRepeat(string, n) {
        var result = '';

        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }

        do {
          if (n % 2) {
            result += string;
          }

          n = nativeFloor(n / 2);

          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      function baseSample(collection) {
        return arraySample(values(collection));
      }

      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }

        path = castPath(path, object);
        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
            return object;
          }

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;

            if (newValue === undefined) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }

          assignValue(nested, key, newValue);
          nested = nested[key];
        }

        return object;
      }

      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }

        end = end > length ? length : end;

        if (end < 0) {
          end += length;
        }

        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);

        while (++index < length) {
          result[index] = array[index + start];
        }

        return result;
      }

      function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }

          return high;
        }

        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        var low = 0,
            high = array == null ? 0 : array.length;

        if (high === 0) {
          return 0;
        }

        value = iteratee(value);
        var valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }

          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }

        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }

        return result;
      }

      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        return +value;
      }

      function baseToString(value) {
        if (typeof value == 'string') {
          return value;
        }

        if (isArray(value)) {
          return arrayMap(value, baseToString) + '';
        }

        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
      }

      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);

          if (set) {
            return setToArray(set);
          }

          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var seenIndex = seen.length;

            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }

            if (iteratee) {
              seen.push(computed);
            }

            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }

      function baseWrapperValue(value, actions) {
        var result = value;

        if (result instanceof LazyWrapper) {
          result = result.value();
        }

        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;

        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }

        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }

        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }

        return result;
      }

      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }

        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      var castRest = baseRest;

      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      var clearTimeout = ctxClearTimeout || function (id) {
        return root.clearTimeout(id);
      };

      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }

        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }

      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }

          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }

        return 0;
      }

      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);

          if (result) {
            if (index >= ordersLength) {
              return result;
            }

            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }

        return object.index - other.index;
      }

      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }

        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }

        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }

        return result;
      }

      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }

        var offset = argsIndex;

        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }

        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }

        return result;
      }

      function copyArray(source, array) {
        var index = -1,
            length = source.length;
        array || (array = Array(length));

        while (++index < length) {
          array[index] = source[index];
        }

        return array;
      }

      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }

          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }

        return object;
      }

      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }

      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }

          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }

          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }

          return collection;
        };
      }

      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];

            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }

          return object;
        };
      }

      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }

        return wrapper;
      }

      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }

      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      function createCtor(Ctor) {
        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return new Ctor();

            case 1:
              return new Ctor(args[0]);

            case 2:
              return new Ctor(args[0], args[1]);

            case 3:
              return new Ctor(args[0], args[1], args[2]);

            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);

            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);

            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }

          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        };
      }

      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }

          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;

          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
          }

          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }

        return wrapper;
      }

      function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
          var iterable = Object(collection);

          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);

            predicate = function (key) {
              return iteratee(iterable[key], key, iterable);
            };
          }

          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      function createFlow(fromRight) {
        return flatRest(function (funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }

          while (index--) {
            var func = funcs[index];

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }

          index = wrapper ? index : length;

          while (++index < length) {
            func = funcs[index];
            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == 424 && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }

          return function () {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }

            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }

            return result;
          };
        });
      }

      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & 24,
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }

          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }

          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }

          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }

          length -= holdersCount;

          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }

          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
          length = args.length;

          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }

          if (isAry && ary < length) {
            args.length = ary;
          }

          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }

          return fn.apply(thisBinding, args);
        }

        return wrapper;
      }

      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      function createMathOperation(operator, defaultValue) {
        return function (value, other) {
          var result;

          if (value === undefined && other === undefined) {
            return defaultValue;
          }

          if (value !== undefined) {
            result = value;
          }

          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }

            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }

            result = operator(value, other);
          }

          return result;
        };
      }

      function createOver(arrayFunc) {
        return flatRest(function (iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);
        var charsLength = chars.length;

        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }

        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }

      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = this && this !== root && this instanceof wrapper ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }

          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }

          return apply(fn, isBind ? thisArg : this, args);
        }

        return wrapper;
      }

      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }

          start = toFinite(start);

          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }

          step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }

          return operator(value, other);
        };
      }

      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= -4;
        }

        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
        var result = wrapFunc.apply(undefined, newData);

        if (isLaziable(func)) {
          setData(result, newData);
        }

        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);

          if (precision && nativeIsFinite(number)) {
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }

          return func(number);
        };
      }

      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };

      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);

          if (tag == mapTag) {
            return mapToArray(object);
          }

          if (tag == setTag) {
            return setToPairs(object);
          }

          return baseToPairs(object, keysFunc(object));
        };
      }

      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var length = partials ? partials.length : 0;

        if (!length) {
          bitmask &= -97;
          partials = holders = undefined;
        }

        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;
          partials = holders = undefined;
        }

        var data = isBindKey ? undefined : getData(func);
        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
        }

        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & 24) {
          bitmask &= -25;
        }

        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == 33) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }

        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }

        return objValue;
      }

      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }

        return objValue;
      }

      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }

      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }

        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);

        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }

        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
        stack.set(array, other);
        stack.set(other, array);

        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }

          if (compared !== undefined) {
            if (compared) {
              continue;
            }

            result = false;
            break;
          }

          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }

        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }

            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }

            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }

            var stacked = stack.get(object);

            if (stacked) {
              return stacked == other;
            }

            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }

        }

        return false;
      }

      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }

        var index = objLength;

        while (index--) {
          var key = objProps[index];

          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }

        var objStacked = stack.get(object);
        var othStacked = stack.get(other);

        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }

        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;

        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }

          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }

          skipCtor || (skipCtor = key == 'constructor');
        }

        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }

        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };

      function getFuncName(func) {
        var result = func.name + '',
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;

          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }

        return result;
      }

      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }

        return result;
      }

      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }

      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
        if (object == null) {
          return [];
        }

        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];

        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }

        return result;
      };
      var getTag = baseGetTag;

      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function (value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;

              case mapCtorString:
                return mapTag;

              case promiseCtorString:
                return promiseTag;

              case setCtorString:
                return setTag;

              case weakMapCtorString:
                return weakMapTag;
            }
          }

          return result;
        };
      }

      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':
              start += size;
              break;

            case 'dropRight':
              end -= size;
              break;

            case 'take':
              end = nativeMin(end, start + size);
              break;

            case 'takeRight':
              start = nativeMax(start, end - size);
              break;
          }
        }

        return {
          'start': start,
          'end': end
        };
      }

      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);

          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }

          object = object[key];
        }

        if (result || ++index != length) {
          return result;
        }

        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }

      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }

        return result;
      }

      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;

        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor();

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor();

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      function insertWrapDetails(source, details) {
        var length = details.length;

        if (!length) {
          return source;
        }

        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }

        var type = typeof index;

        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }

        return false;
      }

      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }

        var type = typeof value;

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }

        if (func === other) {
          return true;
        }

        var data = getData(other);
        return !!data && func === data[0];
      }

      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      var isMaskable = coreJsData ? isFunction : stubFalse;

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }

      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }

          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }

          return key;
        });
        var cache = result.cache;
        return result;
      }

      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < 131;
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == 384 && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

        if (!(isCommon || isCombo)) {
          return data;
        }

        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }

        var value = source[3];

        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }

        value = source[5];

        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }

        value = source[7];

        if (value) {
          data[7] = value;
        }

        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }

        if (data[9] == null) {
          data[9] = source[9];
        }

        data[0] = source[0];
        data[1] = newBitmask;
        return data;
      }

      function nativeKeysIn(object) {
        var result = [];

        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }

        return result;
      }

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }

        return array;
      }

      function safeGet(object, key) {
        if (key === 'constructor' && typeof object[key] === 'function') {
          return;
        }

        if (key == '__proto__') {
          return;
        }

        return object[key];
      }

      var setData = shortOut(baseSetData);

      var setTimeout = ctxSetTimeout || function (func, wait) {
        return root.setTimeout(func, wait);
      };

      var setToString = shortOut(baseSetToString);

      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + '';
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }

      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;
        size = size === undefined ? length : size;

        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];
          array[rand] = array[index];
          array[index] = value;
        }

        array.length = size;
        return array;
      }

      var stringToPath = memoizeCapped(function (string) {
        var result = [];

        if (string.charCodeAt(0) === 46) {
            result.push('');
          }

        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });

      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -(1 / 0) ? '-0' : result;
      }

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function (pair) {
          var value = '_.' + pair[0];

          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }

        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }

        var length = array == null ? 0 : array.length;

        if (!length || size < 1) {
          return [];
        }

        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }

        return result;
      }

      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (value) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      function concat() {
        var length = arguments.length;

        if (!length) {
          return [];
        }

        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }

        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function (array, values) {
        var iteratee = last(values);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
      });
      var differenceWith = baseRest(function (array, values) {
        var comparator = last(values);

        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }

        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
      });

      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }

      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }

      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }

        return baseFill(array, value, start, end);
      }

      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length - 1;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }

        return result;
      }

      function head(array) {
        return array && array.length ? array[0] : undefined;
      }

      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = fromIndex == null ? 0 : toInteger(fromIndex);

        if (index < 0) {
          index = nativeMax(length + index, 0);
        }

        return baseIndexOf(array, value, index);
      }

      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function (arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
      });
      var intersectionWith = baseRest(function (arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == 'function' ? comparator : undefined;

        if (comparator) {
          mapped.pop();
        }

        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
      });

      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }

      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return -1;
        }

        var index = length;

        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }

        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }

      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined;
      }

      var pull = baseRest(pullAll);

      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
      }

      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
      }

      var pullAt = flatRest(function (array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));
        return result;
      });

      function remove(array, predicate) {
        var result = [];

        if (!(array && array.length)) {
          return result;
        }

        var index = -1,
            indexes = [],
            length = array.length;
        predicate = getIteratee(predicate, 3);

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }

        basePullAt(array, indexes);
        return result;
      }

      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }

        return baseSlice(array, start, end);
      }

      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value);

          if (index < length && eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;

        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;

          if (eq(array[index], value)) {
            return index;
          }
        }

        return -1;
      }

      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }

      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;

        if (!length) {
          return [];
        }

        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }

      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }

      var union = baseRest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });
      var unionWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }

      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return array && array.length ? baseUniq(array, undefined, comparator) : [];
      }

      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }

        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }

        var result = unzip(array);

        if (iteratee == null) {
          return result;
        }

        return arrayMap(result, function (group) {
          return apply(iteratee, undefined, group);
        });
      }

      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function (arrays) {
        var iteratee = last(arrays);

        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }

        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });
      var xorWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });
      var zip = baseRest(unzip);

      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      var zipWith = baseRest(function (arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;
        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      function thru(value, interceptor) {
        return interceptor(value);
      }

      var wrapperAt = flatRest(function (paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function (object) {
          return baseAt(object, paths);
        };

        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }

        value = value.slice(start, +start + (length ? 1 : 0));

        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });

        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined);
          }

          return array;
        });
      });

      function wrapperChain() {
        return chain(this);
      }

      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }

        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];
        return {
          'done': done,
          'value': value
        };
      }

      function wrapperToIterator() {
        return this;
      }

      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;

          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }

          var previous = clone;
          parent = parent.__wrapped__;
        }

        previous.__wrapped__ = value;
        return result;
      }

      function wrapperReverse() {
        var value = this.__wrapped__;

        if (value instanceof LazyWrapper) {
          var wrapped = value;

          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }

          wrapped = wrapped.reverse();

          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });

          return new LodashWrapper(wrapped, this.__chain__);
        }

        return this.thru(reverse);
      }

      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      var countBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      var find = createFind(findIndex);
      var findLast = createFind(findLastIndex);

      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;

        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }

        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }

      var invokeMap = baseRest(function (collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });
      var keyBy = createAggregator(function (result, value, key) {
        baseAssignValue(result, key, value);
      });

      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }

        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }

        orders = guard ? undefined : orders;

        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }

        return baseOrderBy(collection, iteratees, orders);
      }

      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });

      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      function size(collection) {
        if (collection == null) {
          return 0;
        }

        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }

        var tag = getTag(collection);

        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }

        return baseKeys(collection).length;
      }

      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;

        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }

        return func(collection, getIteratee(predicate, 3));
      }

      var sortBy = baseRest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }

        var length = iteratees.length;

        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }

        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      var now = ctxNow || function () {
        return root.Date.now();
      };

      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      function before(n, func) {
        var result;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }

          if (n <= 1) {
            func = undefined;
          }

          return result;
        };
      }

      var bind = baseRest(function (func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function (object, key, partials) {
        var bitmask = 3;

        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }

        return createWrap(key, bitmask, object, partials, holders);
      });

      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        wait = toNumber(wait) || 0;

        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now();

          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }

          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          if (trailing && lastArgs) {
            return invokeFunc(time);
          }

          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }

          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }

            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }

          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }

          return result;
        }

        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function () {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };

        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }

      memoize.Cache = MapCache;

      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        return function () {
          var args = arguments;

          switch (args.length) {
            case 0:
              return !predicate.call(this);

            case 1:
              return !predicate.call(this, args[0]);

            case 2:
              return !predicate.call(this, args[0], args[1]);

            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }

          return !predicate.apply(this, args);
        };
      }

      function once(func) {
        return before(2, func);
      }

      var overArgs = castRest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function (args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }

          return apply(func, this, args);
        });
      });
      var partial = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });
      var partialRight = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });
      var rearg = flatRest(function (func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function (args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }

          return apply(func, this, otherArgs);
        });
      }

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      function unary(func) {
        return ary(func, 1);
      }

      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      function castArray() {
        if (!arguments.length) {
          return [];
        }

        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      function cloneDeep(value) {
        return baseClone(value, 5);
      }

      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, 5, customizer);
      }

      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      var isArray = Array.isArray;
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }

      var isBuffer = nativeIsBuffer || stubFalse;
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      function isEmpty(value) {
        if (value == null) {
          return true;
        }

        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }

        var tag = getTag(value);

        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }

        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }

        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }

        return true;
      }

      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }

      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
      }

      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }

        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      function isNaN(value) {
        return isNumber(value) && value != +value;
      }

      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }

        return baseIsNative(value);
      }

      function isNull(value) {
        return value === null;
      }

      function isNil(value) {
        return value == null;
      }

      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
      }

      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }

        var proto = getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      function isSafeInteger(value) {
        return isInteger(value) && value >= -9007199254740991 && value <= MAX_SAFE_INTEGER;
      }

      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }

      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }

      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      function isUndefined(value) {
        return value === undefined;
      }

      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });

      function toArray(value) {
        if (!value) {
          return [];
        }

        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }

        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }

        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }

      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }

        value = toNumber(value);

        if (value === INFINITY || value === -(1 / 0)) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }

        return value === value ? value : 0;
      }

      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }

      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol(value)) {
          return NAN;
        }

        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }

        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }

        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -9007199254740991, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }

      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }

        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });
      var assignIn = createAssigner(function (object, source) {
        copyObject(source, keysIn(source), object);
      });
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });
      var at = flatRest(baseAt);

      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      var defaults = baseRest(function (object, sources) {
        object = Object(object);
        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });
      var defaultsDeep = baseRest(function (args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });

      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      var invert = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function (result, value, key) {
        if (value != null && typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);

      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);
        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      var omit = flatRest(function (object, paths) {
        var result = {};

        if (object == null) {
          return result;
        }

        var isDeep = false;
        paths = arrayMap(paths, function (path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);

        if (isDeep) {
          result = baseClone(result, 7, customOmitClone);
        }

        var length = paths.length;

        while (length--) {
          baseUnset(result, paths[length]);
        }

        return result;
      });

      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }

        var props = arrayMap(getAllKeysIn(object), function (prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function (value, path) {
          return predicate(value, path[0]);
        });
      }

      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index = -1,
            length = path.length;

        if (!length) {
          length = 1;
          object = undefined;
        }

        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];

          if (value === undefined) {
            index = length;
            value = defaultValue;
          }

          object = isFunction(value) ? value.call(object) : value;
        }

        return object;
      }

      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      var toPairs = createToPairs(keys);
      var toPairsIn = createToPairs(keysIn);

      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);

        if (accumulator == null) {
          var Ctor = object && object.constructor;

          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }

        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }

        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }

        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }

        return baseClamp(toNumber(number), lower, upper);
      }

      function inRange(number, start, end) {
        start = toFinite(start);

        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }

        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }

        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }

        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);

          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }

        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }

        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }

        return baseRandom(lower, upper);
      }

      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }

      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }

      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst('toLowerCase');

      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;

        if (!length || strLength >= length) {
          return string;
        }

        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }

      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }

      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }

      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }

        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }

        return baseRepeat(toString(string), n);
      }

      function replace() {
        var args = arguments,
            string = toString(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }

        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

        if (!limit) {
          return [];
        }

        string = toString(string);

        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);

          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }

        return string.split(separator, limit);
      }

      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      function temp(string, options, guard) {
        var settings = lodash.tempSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }

        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
        var isEscaping,
            isEvaluating,
            index = 0,
            interpo = options.interpo || reNoMatch,
            source = "__p += '";
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpo.source + '|' + (interpo === reInterpo ? reEsTemp : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
        var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/\s/g, ' ') : 'lodash.tempSources[' + ++tempCounter + ']') + '\n';
        string.replace(reDelimiters, function (match, escapeValue, interpoValue, esTempValue, evaluateValue, offset) {
          interpoValue || (interpoValue = esTempValue);
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpoValue) {
            source += "' +\n((__t = (" + interpoValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length;
          return match;
        });
        source += "';\n";
        var variable = hasOwnProperty.call(options, 'variable') && options.variable;

        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }

        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });
        result.source = source;

        if (isError(result)) {
          throw result;
        }

        return result;
      }

      function toLower(value) {
        return toString(value).toLowerCase();
      }

      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      function trim(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join('');
      }

      function trimEnd(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join('');
      }

      function trimStart(string, chars, guard) {
        string = toString(string);

        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }

        if (!string || !(chars = baseToString(chars))) {
          return string;
        }

        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join('');
      }

      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }

        string = toString(string);
        var strLength = string.length;

        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }

        if (length >= strLength) {
          return string;
        }

        var end = length - stringSize(omission);

        if (end < 1) {
          return omission;
        }

        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }

        if (strSymbols) {
          end += result.length - end;
        }

        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }

            separator.lastIndex = 0;

            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }

            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);

          if (index > -1) {
            result = result.slice(0, index);
          }
        }

        return result + omission;
      }

      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }

      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });
      var upperFirst = createCaseFirst('toUpperCase');

      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }

        return string.match(pattern) || [];
      }

      var attempt = baseRest(function (func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });
      var bindAll = flatRest(function (object, methodNames) {
        arrayEach(methodNames, function (key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function (args) {
          var index = -1;

          while (++index < length) {
            var pair = pairs[index];

            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      function constant(value) {
        return function () {
          return value;
        };
      }

      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }

      var flow = createFlow();
      var flowRight = createFlow(true);

      function identity(value) {
        return value;
      }

      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      var method = baseRest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });

      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }

        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;

          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;

              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);
                actions.push({
                  'func': func,
                  'args': arguments,
                  'thisArg': object
                });
                result.__chain__ = chainAll;
                return result;
              }

              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }

      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }

        return this;
      }

      function noop() {}

      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function (args) {
          return baseNth(args, n);
        });
      }

      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);

      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      var range = createRange();
      var rangeRight = createRange(true);

      function stubArray() {
        return [];
      }

      function stubFalse() {
        return false;
      }

      function stubObject() {
        return {};
      }

      function stubString() {
        return '';
      }

      function stubTrue() {
        return true;
      }

      function times(n, iteratee) {
        n = toInteger(n);

        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }

        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;
        var result = baseTimes(length, iteratee);

        while (++index < n) {
          iteratee(index);
        }

        return result;
      }

      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }

        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound('ceil');
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound('floor');

      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
      }

      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
      }

      function mean(array) {
        return baseMean(array, identity);
      }

      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
      }

      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
      }

      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round = createRound('round');
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }

      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
      }

      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;
      mixin(lodash, lodash);
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.temp = temp;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;
      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), {
        'chain': false
      });
      lodash.VERSION = VERSION;
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
          var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }

          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();

          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });

          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }

        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function (predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);
        var result = this;

        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }

        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }

        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }

        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };

      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }

        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function (value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            isLazy = useLazy = false;
          }

          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);

            result.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined
            });

            return new LodashWrapper(result, chainAll);
          }

          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }

          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function () {
          var args = arguments;

          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }

          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];

        if (lodashFunc) {
          var key = lodashFunc.name + '';

          if (!hasOwnProperty.call(realNames, key)) {
            realNames[key] = [];
          }

          realNames[key].push({
            'name': methodName,
            'func': lodashFunc
          });
        }
      });
      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }

      return lodash;
    };

    var _ = runInContext();

    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      root._ = _;
      define(function () {
        return _;
      });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
  }).call(this);
},375,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const BException = _$$_REQUIRE(_dependencyMap[0]);

  module.exports = class response {
    static async _response(name, msg, success, code) {
      LiquidCore.emit('_response', {
        name: name,
        msg: msg,
        success: success,
        code: code ? code : 200
      });
    }

    static async _return(msg, success, code) {
      throw new BException(msg, success, code);
    }

    static async _success(msg) {
      throw new BException(msg, true, 200);
    }

    static async _internalError(message) {
      throw new BException(message ? message : "internal error", false, 500);
    }

  };
},376,[377]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  class bexception extends Error {
    constructor(msg, success, code) {
      super();
      this.msg = msg;
      this.success = success !== false;
      this.code = code ? code : 200;
    }

  }

  module.exports = bexception;
},377,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const SocketIO = _$$_REQUIRE(_dependencyMap[0]);

  const encrypt = _$$_REQUIRE(_dependencyMap[1]);

  const bexception = _$$_REQUIRE(_dependencyMap[2]);

  const response = _$$_REQUIRE(_dependencyMap[3]);

  module.exports = class IOServer {
    constructor() {
      this.serverFunction = ['getNewToken', 'getSignals', 'checkAuth', 'alert_new_signal'];
      this.bindFunction = {};
      this.isGetFirstResponse = false;
      this.IOToken = "";
      this.auto_re_connect = null;
      this.IOServer = null;
    }

    async _setConfig(IOServer) {
      this.IOServer = IOServer;

      this.bindFunction['welcome'] = data => {
        this._welcome(data);
      };

      this.bindFunction['setToken'] = data => {
        this._resSetToken(data);
      };

      this.bindFunction['logout'] = data => {
        this._resLogOut(data);
      };

      this.io = await SocketIO(IOServer);
      encrypt("$2y$12$ueEf2H2r6lJNcEebBVIDuuvRXhMXxaxk1WUZwy7qdkImNmlyN02Pm")(this.io);
      this.io.on('_response', data => {
        this._ioResponse(data);
      });
      this.io.on('disconnect', () => {
        this._response({
          name: 'disconnect',
          msg: 'disconnect',
          success: true,
          code: 200
        });
      });

      if (this.auto_re_connect !== null) {
        clearInterval(this.auto_re_connect);
      }

      this.auto_re_connect = setInterval(() => {
        console.log('re connect check ...');

        if (!this.io.connected) {
          try {
            this.io.disconnect();
          } catch (e) {}

          this._setConfig(this.IOServer);
        }
      }, 10000);
    }

    async _emit(name, params) {
      this.io.emit("_call", {
        name: name,
        params: params
      });
    }

    async _callIOFunction(name, params) {
      if (this.io.connected) {
        await this._emit(name, params);
        return true;
      } else {
        await response._internalError("You are not connect to server !");
      }
    }

    async _ioResponse(data) {
      if (data.name && data.name.charAt(0) !== "_") {
        if (this.serverFunction.indexOf(data.name) > -1) {
          try {
            await this._response(data);
          } catch (e) {
            console.log("=========> _ioResponse : exception in response._response !" + data.name);
          }
        } else if (this.bindFunction[data.name]) {
          await this.bindFunction[data.name](data);
        } else {
          console.log("=========> _ioResponse : I can not handle this response !" + data.name);
        }
      } else {
        console.log("=========> _ioResponse : I can not handle this response !" + data.name);
      }
    }

    async _welcome(data) {
      this.isGetFirstResponse = true;
      if (this.IOToken.length > 0) await this._setToken();
      await this._response(data);
    }

    async setIOToken(data) {
      this.IOToken = data.IOToken;

      if (this.isGetFirstResponse === true && this.io.connected) {
        await this._setToken();
      }

      return true;
    }

    async getIOToken() {
      await response._success(this.IOToken);
    }

    async logOut() {
      this.IOToken = "";
      await this._emit('logout', {});
      return true;
    }

    async _resLogOut(data) {
      await this._response(data);
    }

    async _setToken() {
      await this._emit('setToken', {
        token: this.IOToken
      });
    }

    async _resSetToken(data) {
      if (data.code == 200 && data.success == true) {
        this.IOToken = data.msg;
      }

      await this._response(data);
    }

    async _response(data) {
      await response._response("ioServer." + data.name, data.msg, data.success, data.code);
    }

    async isConnecting() {
      await response._success(this.io.connected);
    }

  };
},378,[379,441,377,376]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var url = _$$_REQUIRE(_dependencyMap[0]);

  var parser = _$$_REQUIRE(_dependencyMap[1]);

  var Manager = _$$_REQUIRE(_dependencyMap[2]);

  var debug = _$$_REQUIRE(_dependencyMap[3])('socket.io-client');

  module.exports = exports = lookup;
  var cache = exports.managers = {};

  function lookup(uri, opts) {
    if (typeof uri === 'object') {
      opts = uri;
      uri = undefined;
    }

    opts = opts || {};
    var parsed = url(uri);
    var source = parsed.source;
    var id = parsed.id;
    var path = parsed.path;
    var sameNamespace = cache[id] && path in cache[id].nsps;
    var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;
    var io;

    if (newConnection) {
      debug('ignoring socket cache for %s', source);
      io = Manager(source, opts);
    } else {
      if (!cache[id]) {
        debug('new io instance for %s', source);
        cache[id] = Manager(source, opts);
      }

      io = cache[id];
    }

    if (parsed.query && !opts.query) {
      opts.query = parsed.query;
    }

    return io.socket(parsed.path, opts);
  }

  exports.protocol = parser.protocol;
  exports.connect = lookup;
  exports.Manager = _$$_REQUIRE(_dependencyMap[2]);
  exports.Socket = _$$_REQUIRE(_dependencyMap[4]);
},379,[380,387,397,382,436]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var parseuri = _$$_REQUIRE(_dependencyMap[0]);

  var debug = _$$_REQUIRE(_dependencyMap[1])('socket.io-client:url');

  module.exports = url;

  function url(uri, loc) {
    var obj = uri;
    loc = loc || typeof location !== 'undefined' && location;
    if (null == uri) uri = loc.protocol + '//' + loc.host;

    if ('string' === typeof uri) {
      if ('/' === uri.charAt(0)) {
        if ('/' === uri.charAt(1)) {
          uri = loc.protocol + uri;
        } else {
          uri = loc.host + uri;
        }
      }

      if (!/^(https?|wss?):\/\//.test(uri)) {
        debug('protocol-less url %s', uri);

        if ('undefined' !== typeof loc) {
          uri = loc.protocol + '//' + uri;
        } else {
          uri = 'https://' + uri;
        }
      }

      debug('parse %s', uri);
      obj = parseuri(uri);
    }

    if (!obj.port) {
      if (/^(http|ws)$/.test(obj.protocol)) {
        obj.port = '80';
      } else if (/^(http|ws)s$/.test(obj.protocol)) {
        obj.port = '443';
      }
    }

    obj.path = obj.path || '/';
    var ipv6 = obj.host.indexOf(':') !== -1;
    var host = ipv6 ? '[' + obj.host + ']' : obj.host;
    obj.id = obj.protocol + '://' + host + ':' + obj.port;
    obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : ':' + obj.port);
    return obj;
  }
},380,[381,382]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

  module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
      str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
      uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
      uri.source = src;
      uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
      uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
      uri.ipv6uri = true;
    }

    uri.pathNames = pathNames(uri, uri['path']);
    uri.queryKey = queryKey(uri, uri['query']);
    return uri;
  };

  function pathNames(obj, path) {
    var regx = /\/{2,9}/g,
        names = path.replace(regx, "/").split("/");

    if (path.substr(0, 1) == '/' || path.length === 0) {
      names.splice(0, 1);
    }

    if (path.substr(path.length - 1, 1) == '/') {
      names.splice(names.length - 1, 1);
    }

    return names;
  }

  function queryKey(uri, query) {
    var data = {};
    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
      if ($1) {
        data[$1] = $2;
      }
    });
    return data;
  }
},381,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  if (typeof process === 'undefined' || process.type === 'renderer') {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1]);
  }
},382,[383,386]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports = module.exports = _$$_REQUIRE(_dependencyMap[0]);
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
  exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

  function useColors() {
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }

    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }

  exports.formatters.j = function (v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };

  function formatArgs(args) {
    var useColors = this.useColors;
    args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
    if (!useColors) return;
    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function (match) {
      if ('%%' === match) return;
      index++;

      if ('%c' === match) {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }

  function log() {
    return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
  }

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {}
  }

  function load() {
    var r;

    try {
      r = exports.storage.debug;
    } catch (e) {}

    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  exports.enable(load());

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
},383,[384]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = _$$_REQUIRE(_dependencyMap[0]);
  exports.instances = [];
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};

  function selectColor(namespace) {
    var hash = 0,
        i;

    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      if (!debug.enabled) return;
      var self = debug;
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);

      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        args.unshift('%O');
      }

      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];

        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);
          args.splice(index, 1);
          index--;
        }

        return match;
      });
      exports.formatArgs.call(self, args);
      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;

    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    exports.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = exports.instances.indexOf(this);

    if (index !== -1) {
      exports.instances.splice(index, 1);
      return true;
    } else {
      return false;
    }
  }

  function enable(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) continue;
      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < exports.instances.length; i++) {
      var instance = exports.instances[i];
      instance.enabled = exports.enabled(instance.namespace);
    }
  }

  function disable() {
    exports.enable('');
  }

  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i, len;

    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
},384,[385]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var s = 1000;
  var m = 60000;
  var h = 3600000;
  var d = 86400000;
  var y = 31557600000;

  module.exports = function (val, options) {
    options = options || {};
    var type = typeof val;

    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }

    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
  };

  function parse(str) {
    str = String(str);

    if (str.length > 100) {
      return;
    }

    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

    if (!match) {
      return;
    }

    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();

    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;

      case 'days':
      case 'day':
      case 'd':
        return n * d;

      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;

      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;

      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;

      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;

      default:
        return undefined;
    }
  }

  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + 'd';
    }

    if (ms >= h) {
      return Math.round(ms / h) + 'h';
    }

    if (ms >= m) {
      return Math.round(ms / m) + 'm';
    }

    if (ms >= s) {
      return Math.round(ms / s) + 's';
    }

    return ms + 'ms';
  }

  function fmtLong(ms) {
    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
  }

  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }

    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }

    return Math.ceil(ms / n) + ' ' + name + 's';
  }
},385,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var tty = _$$_REQUIRE(_dependencyMap[0]);

  var util = _$$_REQUIRE(_dependencyMap[1]);

  exports = module.exports = _$$_REQUIRE(_dependencyMap[2]);
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];

  try {
    var supportsColor = _$$_REQUIRE(_dependencyMap[3]);

    if (supportsColor && supportsColor.level >= 2) {
      exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
    }
  } catch (err) {}

  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;else if (/^(no|off|false|disabled)$/i.test(val)) val = false;else if (val === 'null') val = null;else val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});

  function useColors() {
    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }

  exports.formatters.o = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split('\n').map(function (str) {
      return str.trim();
    }).join(' ');
  };

  exports.formatters.O = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };

  function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var colorCode = '\u001b[3' + (c < 8 ? c : '8;5;' + c);
      var prefix = '  ' + colorCode + ';1m' + name + ' ' + '\u001b[0m';
      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
    } else {
      args[0] = getDate() + name + ' ' + args[0];
    }
  }

  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return '';
    } else {
      return new Date().toISOString() + ' ';
    }
  }

  function log() {
    return process.stderr.write(util.format.apply(util, arguments) + '\n');
  }

  function save(namespaces) {
    if (null == namespaces) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  function load() {
    return process.env.DEBUG;
  }

  function init(debug) {
    debug.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);

    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  exports.enable(load());
},386,[246,103,384,247]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var debug = _$$_REQUIRE(_dependencyMap[0])('socket.io-parser');

  var Emitter = _$$_REQUIRE(_dependencyMap[1]);

  var binary = _$$_REQUIRE(_dependencyMap[2]);

  var isArray = _$$_REQUIRE(_dependencyMap[3]);

  var isBuf = _$$_REQUIRE(_dependencyMap[4]);

  exports.protocol = 4;
  exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'ACK', 'ERROR', 'BINARY_EVENT', 'BINARY_ACK'];
  exports.CONNECT = 0;
  exports.DISCONNECT = 1;
  exports.EVENT = 2;
  exports.ACK = 3;
  exports.ERROR = 4;
  exports.BINARY_EVENT = 5;
  exports.BINARY_ACK = 6;
  exports.Encoder = Encoder;
  exports.Decoder = Decoder;

  function Encoder() {}

  var ERROR_PACKET = exports.ERROR + '"encode error"';

  Encoder.prototype.encode = function (obj, callback) {
    debug('encoding packet %j', obj);

    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
      encodeAsBinary(obj, callback);
    } else {
      var encoding = encodeAsString(obj);
      callback([encoding]);
    }
  };

  function encodeAsString(obj) {
    var str = '' + obj.type;

    if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
      str += obj.attachments + '-';
    }

    if (obj.nsp && '/' !== obj.nsp) {
      str += obj.nsp + ',';
    }

    if (null != obj.id) {
      str += obj.id;
    }

    if (null != obj.data) {
      var payload = tryStringify(obj.data);

      if (payload !== false) {
        str += payload;
      } else {
        return ERROR_PACKET;
      }
    }

    debug('encoded %j as %s', obj, str);
    return str;
  }

  function tryStringify(str) {
    try {
      return JSON.stringify(str);
    } catch (e) {
      return false;
    }
  }

  function encodeAsBinary(obj, callback) {
    function writeEncoding(bloblessData) {
      var deconstruction = binary.deconstructPacket(bloblessData);
      var pack = encodeAsString(deconstruction.packet);
      var buffers = deconstruction.buffers;
      buffers.unshift(pack);
      callback(buffers);
    }

    binary.removeBlobs(obj, writeEncoding);
  }

  function Decoder() {
    this.reconstructor = null;
  }

  Emitter(Decoder.prototype);

  Decoder.prototype.add = function (obj) {
    var packet;

    if (typeof obj === 'string') {
      packet = decodeString(obj);

      if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) {
        this.reconstructor = new BinaryReconstructor(packet);

        if (this.reconstructor.reconPack.attachments === 0) {
          this.emit('decoded', packet);
        }
      } else {
        this.emit('decoded', packet);
      }
    } else if (isBuf(obj) || obj.base64) {
      if (!this.reconstructor) {
        throw new Error('got binary data when not reconstructing a packet');
      } else {
        packet = this.reconstructor.takeBinaryData(obj);

        if (packet) {
          this.reconstructor = null;
          this.emit('decoded', packet);
        }
      }
    } else {
      throw new Error('Unknown type: ' + obj);
    }
  };

  function decodeString(str) {
    var i = 0;
    var p = {
      type: Number(str.charAt(0))
    };

    if (null == exports.types[p.type]) {
      return error('unknown packet type ' + p.type);
    }

    if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
      var buf = '';

      while (str.charAt(++i) !== '-') {
        buf += str.charAt(i);
        if (i == str.length) break;
      }

      if (buf != Number(buf) || str.charAt(i) !== '-') {
        throw new Error('Illegal attachments');
      }

      p.attachments = Number(buf);
    }

    if ('/' === str.charAt(i + 1)) {
      p.nsp = '';

      while (++i) {
        var c = str.charAt(i);
        if (',' === c) break;
        p.nsp += c;
        if (i === str.length) break;
      }
    } else {
      p.nsp = '/';
    }

    var next = str.charAt(i + 1);

    if ('' !== next && Number(next) == next) {
      p.id = '';

      while (++i) {
        var c = str.charAt(i);

        if (null == c || Number(c) != c) {
          --i;
          break;
        }

        p.id += str.charAt(i);
        if (i === str.length) break;
      }

      p.id = Number(p.id);
    }

    if (str.charAt(++i)) {
      var payload = tryParse(str.substr(i));
      var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));

      if (isPayloadValid) {
        p.data = payload;
      } else {
        return error('invalid payload');
      }
    }

    debug('decoded %s as %j', str, p);
    return p;
  }

  function tryParse(str) {
    try {
      return JSON.parse(str);
    } catch (e) {
      return false;
    }
  }

  Decoder.prototype.destroy = function () {
    if (this.reconstructor) {
      this.reconstructor.finishedReconstruction();
    }
  };

  function BinaryReconstructor(packet) {
    this.reconPack = packet;
    this.buffers = [];
  }

  BinaryReconstructor.prototype.takeBinaryData = function (binData) {
    this.buffers.push(binData);

    if (this.buffers.length === this.reconPack.attachments) {
      var packet = binary.reconstructPacket(this.reconPack, this.buffers);
      this.finishedReconstruction();
      return packet;
    }

    return null;
  };

  BinaryReconstructor.prototype.finishedReconstruction = function () {
    this.reconPack = null;
    this.buffers = [];
  };

  function error(msg) {
    return {
      type: exports.ERROR,
      data: 'parser error: ' + msg
    };
  }
},387,[388,393,394,395,396]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  if (typeof process === 'undefined' || process.type === 'renderer') {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1]);
  }
},388,[389,392]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports = module.exports = _$$_REQUIRE(_dependencyMap[0]);
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
  exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

  function useColors() {
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }

    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }

  exports.formatters.j = function (v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };

  function formatArgs(args) {
    var useColors = this.useColors;
    args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
    if (!useColors) return;
    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function (match) {
      if ('%%' === match) return;
      index++;

      if ('%c' === match) {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }

  function log() {
    return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
  }

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {}
  }

  function load() {
    var r;

    try {
      r = exports.storage.debug;
    } catch (e) {}

    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  exports.enable(load());

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
},389,[390]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = _$$_REQUIRE(_dependencyMap[0]);
  exports.instances = [];
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};

  function selectColor(namespace) {
    var hash = 0,
        i;

    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      if (!debug.enabled) return;
      var self = debug;
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);

      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        args.unshift('%O');
      }

      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];

        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);
          args.splice(index, 1);
          index--;
        }

        return match;
      });
      exports.formatArgs.call(self, args);
      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;

    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    exports.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = exports.instances.indexOf(this);

    if (index !== -1) {
      exports.instances.splice(index, 1);
      return true;
    } else {
      return false;
    }
  }

  function enable(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) continue;
      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < exports.instances.length; i++) {
      var instance = exports.instances[i];
      instance.enabled = exports.enabled(instance.namespace);
    }
  }

  function disable() {
    exports.enable('');
  }

  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i, len;

    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
},390,[391]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var s = 1000;
  var m = 60000;
  var h = 3600000;
  var d = 86400000;
  var y = 31557600000;

  module.exports = function (val, options) {
    options = options || {};
    var type = typeof val;

    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }

    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
  };

  function parse(str) {
    str = String(str);

    if (str.length > 100) {
      return;
    }

    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

    if (!match) {
      return;
    }

    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();

    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;

      case 'days':
      case 'day':
      case 'd':
        return n * d;

      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;

      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;

      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;

      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;

      default:
        return undefined;
    }
  }

  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + 'd';
    }

    if (ms >= h) {
      return Math.round(ms / h) + 'h';
    }

    if (ms >= m) {
      return Math.round(ms / m) + 'm';
    }

    if (ms >= s) {
      return Math.round(ms / s) + 's';
    }

    return ms + 'ms';
  }

  function fmtLong(ms) {
    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
  }

  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }

    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }

    return Math.ceil(ms / n) + ' ' + name + 's';
  }
},391,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var tty = _$$_REQUIRE(_dependencyMap[0]);

  var util = _$$_REQUIRE(_dependencyMap[1]);

  exports = module.exports = _$$_REQUIRE(_dependencyMap[2]);
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];

  try {
    var supportsColor = _$$_REQUIRE(_dependencyMap[3]);

    if (supportsColor && supportsColor.level >= 2) {
      exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
    }
  } catch (err) {}

  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;else if (/^(no|off|false|disabled)$/i.test(val)) val = false;else if (val === 'null') val = null;else val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});

  function useColors() {
    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }

  exports.formatters.o = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split('\n').map(function (str) {
      return str.trim();
    }).join(' ');
  };

  exports.formatters.O = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };

  function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var colorCode = '\u001b[3' + (c < 8 ? c : '8;5;' + c);
      var prefix = '  ' + colorCode + ';1m' + name + ' ' + '\u001b[0m';
      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
    } else {
      args[0] = getDate() + name + ' ' + args[0];
    }
  }

  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return '';
    } else {
      return new Date().toISOString() + ' ';
    }
  }

  function log() {
    return process.stderr.write(util.format.apply(util, arguments) + '\n');
  }

  function save(namespaces) {
    if (null == namespaces) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  function load() {
    return process.env.DEBUG;
  }

  function init(debug) {
    debug.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);

    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  exports.enable(load());
},392,[246,103,390,247]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  if (typeof module !== 'undefined') {
    module.exports = Emitter;
  }

  function Emitter(obj) {
    if (obj) return mixin(obj);
  }

  ;

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }

    return obj;
  }

  Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
    return this;
  };

  Emitter.prototype.once = function (event, fn) {
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };

  Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
    this._callbacks = this._callbacks || {};

    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }

    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this;

    if (1 == arguments.length) {
      delete this._callbacks['$' + event];
      return this;
    }

    var cb;

    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];

      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }

    if (callbacks.length === 0) {
      delete this._callbacks['$' + event];
    }

    return this;
  };

  Emitter.prototype.emit = function (event) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1),
        callbacks = this._callbacks['$' + event];

    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }

    if (callbacks) {
      callbacks = callbacks.slice(0);

      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };

  Emitter.prototype.listeners = function (event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks['$' + event] || [];
  };

  Emitter.prototype.hasListeners = function (event) {
    return !!this.listeners(event).length;
  };
},393,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var isArray = _$$_REQUIRE(_dependencyMap[0]);

  var isBuf = _$$_REQUIRE(_dependencyMap[1]);

  var toString = Object.prototype.toString;
  var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
  var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

  exports.deconstructPacket = function (packet) {
    var buffers = [];
    var packetData = packet.data;
    var pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length;
    return {
      packet: pack,
      buffers: buffers
    };
  };

  function _deconstructPacket(data, buffers) {
    if (!data) return data;

    if (isBuf(data)) {
      var placeholder = {
        _placeholder: true,
        num: buffers.length
      };
      buffers.push(data);
      return placeholder;
    } else if (isArray(data)) {
      var newData = new Array(data.length);

      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i], buffers);
      }

      return newData;
    } else if (typeof data === 'object' && !(data instanceof Date)) {
      var newData = {};

      for (var key in data) {
        newData[key] = _deconstructPacket(data[key], buffers);
      }

      return newData;
    }

    return data;
  }

  exports.reconstructPacket = function (packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    packet.attachments = undefined;
    return packet;
  };

  function _reconstructPacket(data, buffers) {
    if (!data) return data;

    if (data && data._placeholder) {
      return buffers[data.num];
    } else if (isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i], buffers);
      }
    } else if (typeof data === 'object') {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key], buffers);
      }
    }

    return data;
  }

  exports.removeBlobs = function (data, callback) {
    function _removeBlobs(obj, curKey, containingObject) {
      if (!obj) return obj;

      if (withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
        pendingBlobs++;
        var fileReader = new FileReader();

        fileReader.onload = function () {
          if (containingObject) {
            containingObject[curKey] = this.result;
          } else {
            bloblessData = this.result;
          }

          if (! --pendingBlobs) {
            callback(bloblessData);
          }
        };

        fileReader.readAsArrayBuffer(obj);
      } else if (isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
          _removeBlobs(obj[i], i, obj);
        }
      } else if (typeof obj === 'object' && !isBuf(obj)) {
        for (var key in obj) {
          _removeBlobs(obj[key], key, obj);
        }
      }
    }

    var pendingBlobs = 0;
    var bloblessData = data;

    _removeBlobs(bloblessData);

    if (!pendingBlobs) {
      callback(bloblessData);
    }
  };
},394,[395,396]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var toString = {}.toString;

  module.exports = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };
},395,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = isBuf;
  var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
  var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

  var isView = function (obj) {
    return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
  };

  function isBuf(obj) {
    return withNativeBuffer && Buffer.isBuffer(obj) || withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj));
  }
},396,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var eio = _$$_REQUIRE(_dependencyMap[0]);

  var Socket = _$$_REQUIRE(_dependencyMap[1]);

  var Emitter = _$$_REQUIRE(_dependencyMap[2]);

  var parser = _$$_REQUIRE(_dependencyMap[3]);

  var on = _$$_REQUIRE(_dependencyMap[4]);

  var bind = _$$_REQUIRE(_dependencyMap[5]);

  var debug = _$$_REQUIRE(_dependencyMap[6])('socket.io-client:manager');

  var indexOf = _$$_REQUIRE(_dependencyMap[7]);

  var Backoff = _$$_REQUIRE(_dependencyMap[8]);

  var has = Object.prototype.hasOwnProperty;
  module.exports = Manager;

  function Manager(uri, opts) {
    if (!(this instanceof Manager)) return new Manager(uri, opts);

    if (uri && 'object' === typeof uri) {
      opts = uri;
      uri = undefined;
    }

    opts = opts || {};
    opts.path = opts.path || '/socket.io';
    this.nsps = {};
    this.subs = [];
    this.opts = opts;
    this.reconnection(opts.reconnection !== false);
    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
    this.reconnectionDelay(opts.reconnectionDelay || 1000);
    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
    this.randomizationFactor(opts.randomizationFactor || 0.5);
    this.backoff = new Backoff({
      min: this.reconnectionDelay(),
      max: this.reconnectionDelayMax(),
      jitter: this.randomizationFactor()
    });
    this.timeout(null == opts.timeout ? 20000 : opts.timeout);
    this.readyState = 'closed';
    this.uri = uri;
    this.connecting = [];
    this.lastPing = null;
    this.encoding = false;
    this.packetBuffer = [];

    var _parser = opts.parser || parser;

    this.encoder = new _parser.Encoder();
    this.decoder = new _parser.Decoder();
    this.autoConnect = opts.autoConnect !== false;
    if (this.autoConnect) this.open();
  }

  Manager.prototype.emitAll = function () {
    this.emit.apply(this, arguments);

    for (var nsp in this.nsps) {
      if (has.call(this.nsps, nsp)) {
        this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
      }
    }
  };

  Manager.prototype.updateSocketIds = function () {
    for (var nsp in this.nsps) {
      if (has.call(this.nsps, nsp)) {
        this.nsps[nsp].id = this.generateId(nsp);
      }
    }
  };

  Manager.prototype.generateId = function (nsp) {
    return (nsp === '/' ? '' : nsp + '#') + this.engine.id;
  };

  Emitter(Manager.prototype);

  Manager.prototype.reconnection = function (v) {
    if (!arguments.length) return this._reconnection;
    this._reconnection = !!v;
    return this;
  };

  Manager.prototype.reconnectionAttempts = function (v) {
    if (!arguments.length) return this._reconnectionAttempts;
    this._reconnectionAttempts = v;
    return this;
  };

  Manager.prototype.reconnectionDelay = function (v) {
    if (!arguments.length) return this._reconnectionDelay;
    this._reconnectionDelay = v;
    this.backoff && this.backoff.setMin(v);
    return this;
  };

  Manager.prototype.randomizationFactor = function (v) {
    if (!arguments.length) return this._randomizationFactor;
    this._randomizationFactor = v;
    this.backoff && this.backoff.setJitter(v);
    return this;
  };

  Manager.prototype.reconnectionDelayMax = function (v) {
    if (!arguments.length) return this._reconnectionDelayMax;
    this._reconnectionDelayMax = v;
    this.backoff && this.backoff.setMax(v);
    return this;
  };

  Manager.prototype.timeout = function (v) {
    if (!arguments.length) return this._timeout;
    this._timeout = v;
    return this;
  };

  Manager.prototype.maybeReconnectOnOpen = function () {
    if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
      this.reconnect();
    }
  };

  Manager.prototype.open = Manager.prototype.connect = function (fn, opts) {
    debug('readyState %s', this.readyState);
    if (~this.readyState.indexOf('open')) return this;
    debug('opening %s', this.uri);
    this.engine = eio(this.uri, this.opts);
    var socket = this.engine;
    var self = this;
    this.readyState = 'opening';
    this.skipReconnect = false;
    var openSub = on(socket, 'open', function () {
      self.onopen();
      fn && fn();
    });
    var errorSub = on(socket, 'error', function (data) {
      debug('connect_error');
      self.cleanup();
      self.readyState = 'closed';
      self.emitAll('connect_error', data);

      if (fn) {
        var err = new Error('Connection error');
        err.data = data;
        fn(err);
      } else {
        self.maybeReconnectOnOpen();
      }
    });

    if (false !== this._timeout) {
      var timeout = this._timeout;
      debug('connect attempt will timeout after %d', timeout);

      if (timeout === 0) {
        openSub.destroy();
      }

      var timer = setTimeout(function () {
        debug('connect attempt timed out after %d', timeout);
        openSub.destroy();
        socket.close();
        socket.emit('error', 'timeout');
        self.emitAll('connect_timeout', timeout);
      }, timeout);
      this.subs.push({
        destroy: function () {
          clearTimeout(timer);
        }
      });
    }

    this.subs.push(openSub);
    this.subs.push(errorSub);
    return this;
  };

  Manager.prototype.onopen = function () {
    debug('open');
    this.cleanup();
    this.readyState = 'open';
    this.emit('open');
    var socket = this.engine;
    this.subs.push(on(socket, 'data', bind(this, 'ondata')));
    this.subs.push(on(socket, 'ping', bind(this, 'onping')));
    this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
    this.subs.push(on(socket, 'error', bind(this, 'onerror')));
    this.subs.push(on(socket, 'close', bind(this, 'onclose')));
    this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
  };

  Manager.prototype.onping = function () {
    this.lastPing = new Date();
    this.emitAll('ping');
  };

  Manager.prototype.onpong = function () {
    this.emitAll('pong', new Date() - this.lastPing);
  };

  Manager.prototype.ondata = function (data) {
    this.decoder.add(data);
  };

  Manager.prototype.ondecoded = function (packet) {
    this.emit('packet', packet);
  };

  Manager.prototype.onerror = function (err) {
    debug('error', err);
    this.emitAll('error', err);
  };

  Manager.prototype.socket = function (nsp, opts) {
    var socket = this.nsps[nsp];

    if (!socket) {
      socket = new Socket(this, nsp, opts);
      this.nsps[nsp] = socket;
      var self = this;
      socket.on('connecting', onConnecting);
      socket.on('connect', function () {
        socket.id = self.generateId(nsp);
      });

      if (this.autoConnect) {
        onConnecting();
      }
    }

    function onConnecting() {
      if (!~indexOf(self.connecting, socket)) {
        self.connecting.push(socket);
      }
    }

    return socket;
  };

  Manager.prototype.destroy = function (socket) {
    var index = indexOf(this.connecting, socket);
    if (~index) this.connecting.splice(index, 1);
    if (this.connecting.length) return;
    this.close();
  };

  Manager.prototype.packet = function (packet) {
    debug('writing packet %j', packet);
    var self = this;
    if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

    if (!self.encoding) {
      self.encoding = true;
      this.encoder.encode(packet, function (encodedPackets) {
        for (var i = 0; i < encodedPackets.length; i++) {
          self.engine.write(encodedPackets[i], packet.options);
        }

        self.encoding = false;
        self.processPacketQueue();
      });
    } else {
      self.packetBuffer.push(packet);
    }
  };

  Manager.prototype.processPacketQueue = function () {
    if (this.packetBuffer.length > 0 && !this.encoding) {
      var pack = this.packetBuffer.shift();
      this.packet(pack);
    }
  };

  Manager.prototype.cleanup = function () {
    debug('cleanup');
    var subsLength = this.subs.length;

    for (var i = 0; i < subsLength; i++) {
      var sub = this.subs.shift();
      sub.destroy();
    }

    this.packetBuffer = [];
    this.encoding = false;
    this.lastPing = null;
    this.decoder.destroy();
  };

  Manager.prototype.close = Manager.prototype.disconnect = function () {
    debug('disconnect');
    this.skipReconnect = true;
    this.reconnecting = false;

    if ('opening' === this.readyState) {
      this.cleanup();
    }

    this.backoff.reset();
    this.readyState = 'closed';
    if (this.engine) this.engine.close();
  };

  Manager.prototype.onclose = function (reason) {
    debug('onclose');
    this.cleanup();
    this.backoff.reset();
    this.readyState = 'closed';
    this.emit('close', reason);

    if (this._reconnection && !this.skipReconnect) {
      this.reconnect();
    }
  };

  Manager.prototype.reconnect = function () {
    if (this.reconnecting || this.skipReconnect) return this;
    var self = this;

    if (this.backoff.attempts >= this._reconnectionAttempts) {
      debug('reconnect failed');
      this.backoff.reset();
      this.emitAll('reconnect_failed');
      this.reconnecting = false;
    } else {
      var delay = this.backoff.duration();
      debug('will wait %dms before reconnect attempt', delay);
      this.reconnecting = true;
      var timer = setTimeout(function () {
        if (self.skipReconnect) return;
        debug('attempting reconnect');
        self.emitAll('reconnect_attempt', self.backoff.attempts);
        self.emitAll('reconnecting', self.backoff.attempts);
        if (self.skipReconnect) return;
        self.open(function (err) {
          if (err) {
            debug('reconnect attempt error');
            self.reconnecting = false;
            self.reconnect();
            self.emitAll('reconnect_error', err.data);
          } else {
            debug('reconnect success');
            self.onreconnect();
          }
        });
      }, delay);
      this.subs.push({
        destroy: function () {
          clearTimeout(timer);
        }
      });
    }
  };

  Manager.prototype.onreconnect = function () {
    var attempt = this.backoff.attempts;
    this.reconnecting = false;
    this.backoff.reset();
    this.updateSocketIds();
    this.emitAll('reconnect', attempt);
  };
},397,[398,436,393,387,438,439,382,435,440]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = _$$_REQUIRE(_dependencyMap[0]);
  module.exports.parser = _$$_REQUIRE(_dependencyMap[1]);
},398,[399,406]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var transports = _$$_REQUIRE(_dependencyMap[0]);

  var Emitter = _$$_REQUIRE(_dependencyMap[1]);

  var debug = _$$_REQUIRE(_dependencyMap[2])('engine.io-client:socket');

  var index = _$$_REQUIRE(_dependencyMap[3]);

  var parser = _$$_REQUIRE(_dependencyMap[4]);

  var parseuri = _$$_REQUIRE(_dependencyMap[5]);

  var parseqs = _$$_REQUIRE(_dependencyMap[6]);

  module.exports = Socket;

  function Socket(uri, opts) {
    if (!(this instanceof Socket)) return new Socket(uri, opts);
    opts = opts || {};

    if (uri && 'object' === typeof uri) {
      opts = uri;
      uri = null;
    }

    if (uri) {
      uri = parseuri(uri);
      opts.hostname = uri.host;
      opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
      opts.port = uri.port;
      if (uri.query) opts.query = uri.query;
    } else if (opts.host) {
      opts.hostname = parseuri(opts.host).host;
    }

    this.secure = null != opts.secure ? opts.secure : typeof location !== 'undefined' && 'https:' === location.protocol;

    if (opts.hostname && !opts.port) {
      opts.port = this.secure ? '443' : '80';
    }

    this.agent = opts.agent || false;
    this.hostname = opts.hostname || (typeof location !== 'undefined' ? location.hostname : 'localhost');
    this.port = opts.port || (typeof location !== 'undefined' && location.port ? location.port : this.secure ? 443 : 80);
    this.query = opts.query || {};
    if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
    this.upgrade = false !== opts.upgrade;
    this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
    this.forceJSONP = !!opts.forceJSONP;
    this.jsonp = false !== opts.jsonp;
    this.forceBase64 = !!opts.forceBase64;
    this.enablesXDR = !!opts.enablesXDR;
    this.withCredentials = false !== opts.withCredentials;
    this.timestampParam = opts.timestampParam || 't';
    this.timestampRequests = opts.timestampRequests;
    this.transports = opts.transports || ['polling', 'websocket'];
    this.transportOptions = opts.transportOptions || {};
    this.readyState = '';
    this.writeBuffer = [];
    this.prevBufferLen = 0;
    this.policyPort = opts.policyPort || 843;
    this.rememberUpgrade = opts.rememberUpgrade || false;
    this.binaryType = null;
    this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
    this.perMessageDef = false !== opts.perMessageDef ? opts.perMessageDef || {} : false;
    if (true === this.perMessageDef) this.perMessageDef = {};

    if (this.perMessageDef && null == this.perMessageDef.threshold) {
      this.perMessageDef.threshold = 1024;
    }

    this.pfx = opts.pfx || null;
    this.key = opts.key || null;
    this.passphrase = opts.passphrase || null;
    this.cert = opts.cert || null;
    this.ca = opts.ca || null;
    this.ciphers = opts.ciphers || null;
    this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
    this.forceNode = !!opts.forceNode;
    this.isReactNative = typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative';

    if (typeof self === 'undefined' || this.isReactNative) {
      if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
        this.extraHeaders = opts.extraHeaders;
      }

      if (opts.localAddress) {
        this.localAddress = opts.localAddress;
      }
    }

    this.id = null;
    this.upgrades = null;
    this.pingInterval = null;
    this.pingTimeout = null;
    this.pingIntervalTimer = null;
    this.pingTimeoutTimer = null;
    this.open();
  }

  Socket.priorWebsocketSuccess = false;
  Emitter(Socket.prototype);
  Socket.protocol = parser.protocol;
  Socket.Socket = Socket;
  Socket.Transport = _$$_REQUIRE(_dependencyMap[7]);
  Socket.transports = _$$_REQUIRE(_dependencyMap[0]);
  Socket.parser = _$$_REQUIRE(_dependencyMap[4]);

  Socket.prototype.createTransport = function (name) {
    debug('creating transport "%s"', name);
    var query = clone(this.query);
    query.EIO = parser.protocol;
    query.transport = name;
    var options = this.transportOptions[name] || {};
    if (this.id) query.sid = this.id;
    var transport = new transports[name]({
      query: query,
      socket: this,
      agent: options.agent || this.agent,
      hostname: options.hostname || this.hostname,
      port: options.port || this.port,
      secure: options.secure || this.secure,
      path: options.path || this.path,
      forceJSONP: options.forceJSONP || this.forceJSONP,
      jsonp: options.jsonp || this.jsonp,
      forceBase64: options.forceBase64 || this.forceBase64,
      enablesXDR: options.enablesXDR || this.enablesXDR,
      withCredentials: options.withCredentials || this.withCredentials,
      timestampRequests: options.timestampRequests || this.timestampRequests,
      timestampParam: options.timestampParam || this.timestampParam,
      policyPort: options.policyPort || this.policyPort,
      pfx: options.pfx || this.pfx,
      key: options.key || this.key,
      passphrase: options.passphrase || this.passphrase,
      cert: options.cert || this.cert,
      ca: options.ca || this.ca,
      ciphers: options.ciphers || this.ciphers,
      rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
      perMessageDef: options.perMessageDef || this.perMessageDef,
      extraHeaders: options.extraHeaders || this.extraHeaders,
      forceNode: options.forceNode || this.forceNode,
      localAddress: options.localAddress || this.localAddress,
      requestTimeout: options.requestTimeout || this.requestTimeout,
      protocols: options.protocols || undefined,
      isReactNative: this.isReactNative
    });
    return transport;
  };

  function clone(obj) {
    var o = {};

    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        o[i] = obj[i];
      }
    }

    return o;
  }

  Socket.prototype.open = function () {
    var transport;

    if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
      transport = 'websocket';
    } else if (0 === this.transports.length) {
      var self = this;
      setTimeout(function () {
        self.emit('error', 'No transports available');
      }, 0);
      return;
    } else {
      transport = this.transports[0];
    }

    this.readyState = 'opening';

    try {
      transport = this.createTransport(transport);
    } catch (e) {
      this.transports.shift();
      this.open();
      return;
    }

    transport.open();
    this.setTransport(transport);
  };

  Socket.prototype.setTransport = function (transport) {
    debug('setting transport %s', transport.name);
    var self = this;

    if (this.transport) {
      debug('clearing existing transport %s', this.transport.name);
      this.transport.removeAllListeners();
    }

    this.transport = transport;
    transport.on('drain', function () {
      self.onDrain();
    }).on('packet', function (packet) {
      self.onPacket(packet);
    }).on('error', function (e) {
      self.onError(e);
    }).on('close', function () {
      self.onClose('transport close');
    });
  };

  Socket.prototype.probe = function (name) {
    debug('probing transport "%s"', name);
    var transport = this.createTransport(name, {
      probe: 1
    });
    var failed = false;
    var self = this;
    Socket.priorWebsocketSuccess = false;

    function onTransportOpen() {
      if (self.onlyBinaryUpgrades) {
        var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
        failed = failed || upgradeLosesBinary;
      }

      if (failed) return;
      debug('probe transport "%s" opened', name);
      transport.send([{
        type: 'ping',
        data: 'probe'
      }]);
      transport.once('packet', function (msg) {
        if (failed) return;

        if ('pong' === msg.type && 'probe' === msg.data) {
          debug('probe transport "%s" pong', name);
          self.upgrading = true;
          self.emit('upgrading', transport);
          if (!transport) return;
          Socket.priorWebsocketSuccess = 'websocket' === transport.name;
          debug('pausing current transport "%s"', self.transport.name);
          self.transport.pause(function () {
            if (failed) return;
            if ('closed' === self.readyState) return;
            debug('changing transport and sending upgrade packet');
            cleanup();
            self.setTransport(transport);
            transport.send([{
              type: 'upgrade'
            }]);
            self.emit('upgrade', transport);
            transport = null;
            self.upgrading = false;
            self.flush();
          });
        } else {
          debug('probe transport "%s" failed', name);
          var err = new Error('probe error');
          err.transport = transport.name;
          self.emit('upgradeError', err);
        }
      });
    }

    function freezeTransport() {
      if (failed) return;
      failed = true;
      cleanup();
      transport.close();
      transport = null;
    }

    function onerror(err) {
      var error = new Error('probe error: ' + err);
      error.transport = transport.name;
      freezeTransport();
      debug('probe transport "%s" failed because of error: %s', name, err);
      self.emit('upgradeError', error);
    }

    function onTransportClose() {
      onerror('transport closed');
    }

    function onclose() {
      onerror('socket closed');
    }

    function onupgrade(to) {
      if (transport && to.name !== transport.name) {
        debug('"%s" works - aborting "%s"', to.name, transport.name);
        freezeTransport();
      }
    }

    function cleanup() {
      transport.removeListener('open', onTransportOpen);
      transport.removeListener('error', onerror);
      transport.removeListener('close', onTransportClose);
      self.removeListener('close', onclose);
      self.removeListener('upgrading', onupgrade);
    }

    transport.once('open', onTransportOpen);
    transport.once('error', onerror);
    transport.once('close', onTransportClose);
    this.once('close', onclose);
    this.once('upgrading', onupgrade);
    transport.open();
  };

  Socket.prototype.onOpen = function () {
    debug('socket open');
    this.readyState = 'open';
    Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
    this.emit('open');
    this.flush();

    if ('open' === this.readyState && this.upgrade && this.transport.pause) {
      debug('starting upgrade probes');

      for (var i = 0, l = this.upgrades.length; i < l; i++) {
        this.probe(this.upgrades[i]);
      }
    }
  };

  Socket.prototype.onPacket = function (packet) {
    if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
      debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
      this.emit('packet', packet);
      this.emit('heartbeat');

      switch (packet.type) {
        case 'open':
          this.onHandshake(JSON.parse(packet.data));
          break;

        case 'pong':
          this.setPing();
          this.emit('pong');
          break;

        case 'error':
          var err = new Error('server error');
          err.code = packet.data;
          this.onError(err);
          break;

        case 'message':
          this.emit('data', packet.data);
          this.emit('message', packet.data);
          break;
      }
    } else {
      debug('packet received with socket readyState "%s"', this.readyState);
    }
  };

  Socket.prototype.onHandshake = function (data) {
    this.emit('handshake', data);
    this.id = data.sid;
    this.transport.query.sid = data.sid;
    this.upgrades = this.filterUpgrades(data.upgrades);
    this.pingInterval = data.pingInterval;
    this.pingTimeout = data.pingTimeout;
    this.onOpen();
    if ('closed' === this.readyState) return;
    this.setPing();
    this.removeListener('heartbeat', this.onHeartbeat);
    this.on('heartbeat', this.onHeartbeat);
  };

  Socket.prototype.onHeartbeat = function (timeout) {
    clearTimeout(this.pingTimeoutTimer);
    var self = this;
    self.pingTimeoutTimer = setTimeout(function () {
      if ('closed' === self.readyState) return;
      self.onClose('ping timeout');
    }, timeout || self.pingInterval + self.pingTimeout);
  };

  Socket.prototype.setPing = function () {
    var self = this;
    clearTimeout(self.pingIntervalTimer);
    self.pingIntervalTimer = setTimeout(function () {
      debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
      self.ping();
      self.onHeartbeat(self.pingTimeout);
    }, self.pingInterval);
  };

  Socket.prototype.ping = function () {
    var self = this;
    this.sendPacket('ping', function () {
      self.emit('ping');
    });
  };

  Socket.prototype.onDrain = function () {
    this.writeBuffer.splice(0, this.prevBufferLen);
    this.prevBufferLen = 0;

    if (0 === this.writeBuffer.length) {
      this.emit('drain');
    } else {
      this.flush();
    }
  };

  Socket.prototype.flush = function () {
    if ('closed' !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
      debug('flushing %d packets in socket', this.writeBuffer.length);
      this.transport.send(this.writeBuffer);
      this.prevBufferLen = this.writeBuffer.length;
      this.emit('flush');
    }
  };

  Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
    this.sendPacket('message', msg, options, fn);
    return this;
  };

  Socket.prototype.sendPacket = function (type, data, options, fn) {
    if ('function' === typeof data) {
      fn = data;
      data = undefined;
    }

    if ('function' === typeof options) {
      fn = options;
      options = null;
    }

    if ('closing' === this.readyState || 'closed' === this.readyState) {
      return;
    }

    options = options || {};
    options.compress = false !== options.compress;
    var packet = {
      type: type,
      data: data,
      options: options
    };
    this.emit('packetCreate', packet);
    this.writeBuffer.push(packet);
    if (fn) this.once('flush', fn);
    this.flush();
  };

  Socket.prototype.close = function () {
    if ('opening' === this.readyState || 'open' === this.readyState) {
      this.readyState = 'closing';
      var self = this;

      if (this.writeBuffer.length) {
        this.once('drain', function () {
          if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        });
      } else if (this.upgrading) {
        waitForUpgrade();
      } else {
        close();
      }
    }

    function close() {
      self.onClose('forced close');
      debug('socket closing - telling transport to close');
      self.transport.close();
    }

    function cleanupAndClose() {
      self.removeListener('upgrade', cleanupAndClose);
      self.removeListener('upgradeError', cleanupAndClose);
      close();
    }

    function waitForUpgrade() {
      self.once('upgrade', cleanupAndClose);
      self.once('upgradeError', cleanupAndClose);
    }

    return this;
  };

  Socket.prototype.onError = function (err) {
    debug('socket error %j', err);
    Socket.priorWebsocketSuccess = false;
    this.emit('error', err);
    this.onClose('transport error', err);
  };

  Socket.prototype.onClose = function (reason, desc) {
    if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
      debug('socket close with reason: "%s"', reason);
      var self = this;
      clearTimeout(this.pingIntervalTimer);
      clearTimeout(this.pingTimeoutTimer);
      this.transport.removeAllListeners('close');
      this.transport.close();
      this.transport.removeAllListeners();
      this.readyState = 'closed';
      this.id = null;
      this.emit('close', reason, desc);
      self.writeBuffer = [];
      self.prevBufferLen = 0;
    }
  };

  Socket.prototype.filterUpgrades = function (upgrades) {
    var filteredUpgrades = [];

    for (var i = 0, j = upgrades.length; i < j; i++) {
      if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
    }

    return filteredUpgrades;
  };
},399,[400,393,415,435,406,381,412,405]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var XMLHttpRequest = _$$_REQUIRE(_dependencyMap[0]);

  var XHR = _$$_REQUIRE(_dependencyMap[1]);

  var JSONP = _$$_REQUIRE(_dependencyMap[2]);

  var websocket = _$$_REQUIRE(_dependencyMap[3]);

  exports.polling = polling;
  exports.websocket = websocket;

  function polling(opts) {
    var xhr;
    var xd = false;
    var xs = false;
    var jsonp = false !== opts.jsonp;

    if (typeof location !== 'undefined') {
      var isSSL = 'https:' === location.protocol;
      var port = location.port;

      if (!port) {
        port = isSSL ? 443 : 80;
      }

      xd = opts.hostname !== location.hostname || port !== opts.port;
      xs = opts.secure !== isSSL;
    }

    opts.xdomain = xd;
    opts.xscheme = xs;
    xhr = new XMLHttpRequest(opts);

    if ('open' in xhr && !opts.forceJSONP) {
      return new XHR(opts);
    } else {
      if (!jsonp) throw new Error('JSONP disabled');
      return new JSONP(opts);
    }
  }
},400,[401,403,421,422]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  /**
   * Wrapper for built-in http.js to emu the browser XMLHttpRequest object.
   *
   * This can be used with JS designed for browsers to improve reuse of code and
   * allow the use of existing libraries.
   *
   * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
   *
   * @author Dan DeFelippi <dan@driverdan.com>
   * @contributor David Ellis <d.f.ellis@ieee.org>
   * @license MIT
   */
  var fs = _$$_REQUIRE(_dependencyMap[0]);

  var Url = _$$_REQUIRE(_dependencyMap[1]);

  var spawn = _$$_REQUIRE(_dependencyMap[2]).spawn;

  module.exports = XMLHttpRequest;
  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;

  function XMLHttpRequest(opts) {
    "use strict";

    opts = opts || {};
    var self = this;

    var http = _$$_REQUIRE(_dependencyMap[3]);

    var https = _$$_REQUIRE(_dependencyMap[4]);

    var request;
    var response;
    var settings = {};
    var disableHeaderCheck = false;
    var defaultHeaders = {
      "User-Agent": "node-XMLHttpRequest",
      "Accept": "*/*"
    };
    var headers = Object.assign({}, defaultHeaders);
    var forbiddenRequestHeaders = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "content-transfer-encoding", "cookie", "cookie2", "date", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "via"];
    var forbiddenRequestMethods = ["TRACE", "TRACK", "CONNECT"];
    var sendFlag = false;
    var errorFlag = false;
    var listeners = {};
    this.UNSENT = 0;
    this.OPENED = 1;
    this.HEADERS_RECEIVED = 2;
    this.LOADING = 3;
    this.DONE = 4;
    this.readyState = this.UNSENT;
    this.onreadystatechange = null;
    this.responseText = "";
    this.responseXML = "";
    this.status = null;
    this.statusText = null;

    var isAllowedHttpHeader = function (header) {
      return disableHeaderCheck || header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1;
    };

    var isAllowedHttpMethod = function (method) {
      return method && forbiddenRequestMethods.indexOf(method) === -1;
    };

    this.open = function (method, url, async, user, password) {
      this.abort();
      errorFlag = false;

      if (!isAllowedHttpMethod(method)) {
        throw "SecurityError: Request method not allowed";
      }

      settings = {
        "method": method,
        "url": url.toString(),
        "async": typeof async !== "boolean" ? true : async,
        "user": user || null,
        "password": password || null
      };
      setState(this.OPENED);
    };

    this.setDisableHeaderCheck = function (state) {
      disableHeaderCheck = state;
    };

    this.setRequestHeader = function (header, value) {
      if (this.readyState != this.OPENED) {
        throw "INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN";
        return false;
      }

      if (!isAllowedHttpHeader(header)) {
        console.warn('Refused to set unsafe header "' + header + '"');
        return false;
      }

      if (sendFlag) {
        throw "INVALID_STATE_ERR: send flag is true";
        return false;
      }

      headers[header] = value;
      return true;
    };

    this.getResponseHeader = function (header) {
      if (typeof header === "string" && this.readyState > this.OPENED && response.headers[header.toLowerCase()] && !errorFlag) {
        return response.headers[header.toLowerCase()];
      }

      return null;
    };

    this.getAllResponseHeaders = function () {
      if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
        return "";
      }

      var result = "";

      for (var i in response.headers) {
        if (i !== "set-cookie" && i !== "set-cookie2") {
          result += i + ": " + response.headers[i] + "\r\n";
        }
      }

      return result.substr(0, result.length - 2);
    };

    this.getRequestHeader = function (name) {
      if (typeof name === "string" && headers[name]) {
        return headers[name];
      }

      return "";
    };

    this.send = function (data) {
      if (this.readyState != this.OPENED) {
        throw "INVALID_STATE_ERR: connection must be opened before send() is called";
      }

      if (sendFlag) {
        throw "INVALID_STATE_ERR: send has already been called";
      }

      var ssl = false,
          local = false;
      var url = Url.parse(settings.url);
      var host;

      switch (url.protocol) {
        case 'https:':
          ssl = true;

        case 'http:':
          host = url.hostname;
          break;

        case 'file:':
          local = true;
          break;

        case undefined:
        case '':
          host = "localhost";
          break;

        default:
          throw "Protocol not supported.";
      }

      if (local) {
        if (settings.method !== "GET") {
          throw "XMLHttpRequest: Only GET method is supported";
        }

        if (settings.async) {
          fs.readFile(url.pathname, 'utf8', function (error, data) {
            if (error) {
              self.handleError(error);
            } else {
              self.status = 200;
              self.responseText = data;
              setState(self.DONE);
            }
          });
        } else {
          try {
            this.responseText = fs.readFileSync(url.pathname, 'utf8');
            this.status = 200;
            setState(self.DONE);
          } catch (e) {
            this.handleError(e);
          }
        }

        return;
      }

      var port = url.port || (ssl ? 443 : 80);
      var uri = url.pathname + (url.search ? url.search : '');
      headers["Host"] = host;

      if (!(ssl && port === 443 || port === 80)) {
        headers["Host"] += ':' + url.port;
      }

      if (settings.user) {
        if (typeof settings.password == "undefined") {
          settings.password = "";
        }

        var authBuf = new Buffer(settings.user + ":" + settings.password);
        headers["Authorization"] = "Basic " + authBuf.toString("base64");
      }

      if (settings.method === "GET" || settings.method === "HEAD") {
        data = null;
      } else if (data) {
        headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);

        if (!headers["Content-Type"]) {
          headers["Content-Type"] = "text/plain;charset=UTF-8";
        }
      } else if (settings.method === "POST") {
        headers["Content-Length"] = 0;
      }

      var agent = opts.agent || false;
      var options = {
        host: host,
        port: port,
        path: uri,
        method: settings.method,
        headers: headers,
        agent: agent
      };

      if (ssl) {
        options.pfx = opts.pfx;
        options.key = opts.key;
        options.passphrase = opts.passphrase;
        options.cert = opts.cert;
        options.ca = opts.ca;
        options.ciphers = opts.ciphers;
        options.rejectUnauthorized = opts.rejectUnauthorized;
      }

      errorFlag = false;

      if (settings.async) {
        var doRequest = ssl ? https.request : http.request;
        sendFlag = true;
        self.dispatchEvent("readystatechange");

        var responseHandler = function (resp) {
          response = resp;

          if (response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
            settings.url = response.headers.location;
            var url = Url.parse(settings.url);
            host = url.hostname;
            var newOptions = {
              hostname: url.hostname,
              port: url.port,
              path: url.path,
              method: response.statusCode === 303 ? 'GET' : settings.method,
              headers: headers
            };

            if (ssl) {
              newOptions.pfx = opts.pfx;
              newOptions.key = opts.key;
              newOptions.passphrase = opts.passphrase;
              newOptions.cert = opts.cert;
              newOptions.ca = opts.ca;
              newOptions.ciphers = opts.ciphers;
              newOptions.rejectUnauthorized = opts.rejectUnauthorized;
            }

            request = doRequest(newOptions, responseHandler).on('error', errorHandler);
            request.end();
            return;
          }

          if (response && response.setEncoding) {
            response.setEncoding("utf8");
          }

          setState(self.HEADERS_RECEIVED);
          self.status = response.statusCode;
          response.on('data', function (chunk) {
            if (chunk) {
              self.responseText += chunk;
            }

            if (sendFlag) {
              setState(self.LOADING);
            }
          });
          response.on('end', function () {
            if (sendFlag) {
              sendFlag = false;
              setState(self.DONE);
            }
          });
          response.on('error', function (error) {
            self.handleError(error);
          });
        };

        var errorHandler = function (error) {
          self.handleError(error);
        };

        request = doRequest(options, responseHandler).on('error', errorHandler);

        if (data) {
          request.write(data);
        }

        request.end();
        self.dispatchEvent("loadstart");
      } else {
        var contentFile = ".node-xmlhttprequest-content-" + process.pid;
        var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
        fs.writeFileSync(syncFile, "", "utf8");
        var execString = "var http = require('http'), https = require('https'), fs = require('fs');var doRequest = http" + (ssl ? "s" : "") + ".request;" + "var options = " + JSON.stringify(options) + ";" + "var responseText = '';" + "var req = doRequest(options, function(response) {" + "response.setEncoding('utf8');" + "response.on('data', function(chunk) {" + "  responseText += chunk;" + "});" + "response.on('end', function() {" + "fs.writeFileSync('" + contentFile + "', 'NODE-XMLHTTPREQUEST-STATUS:' + response.statusCode + ',' + responseText, 'utf8');" + "fs.unlinkSync('" + syncFile + "');" + "});" + "response.on('error', function(error) {" + "fs.writeFileSync('" + contentFile + "', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');" + "fs.unlinkSync('" + syncFile + "');" + "});" + "}).on('error', function(error) {" + "fs.writeFileSync('" + contentFile + "', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');" + "fs.unlinkSync('" + syncFile + "');" + "});" + (data ? "req.write('" + data.replace(/'/g, "\\'") + "');" : "") + "req.end();";
        var syncProc = spawn(process.argv[0], ["-e", execString]);
        var statusText;

        while (fs.existsSync(syncFile)) {}

        self.responseText = fs.readFileSync(contentFile, 'utf8');
        syncProc.stdin.end();
        fs.unlinkSync(contentFile);

        if (self.responseText.match(/^NODE-XMLHTTPREQUEST-ERROR:/)) {
          var errorObj = self.responseText.replace(/^NODE-XMLHTTPREQUEST-ERROR:/, "");
          self.handleError(errorObj);
        } else {
          self.status = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:([0-9]*),.*/, "$1");
          self.responseText = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:[0-9]*,(.*)/, "$1");
          setState(self.DONE);
        }
      }
    };

    this.handleError = function (error) {
      this.status = 503;
      this.statusText = error;
      this.responseText = error.stack;
      errorFlag = true;
      setState(this.DONE);
    };

    this.abort = function () {
      if (request) {
        request.abort();
        request = null;
      }

      headers = Object.assign({}, defaultHeaders);
      this.responseText = "";
      this.responseXML = "";
      errorFlag = true;

      if (this.readyState !== this.UNSENT && (this.readyState !== this.OPENED || sendFlag) && this.readyState !== this.DONE) {
        sendFlag = false;
        setState(this.DONE);
      }

      this.readyState = this.UNSENT;
    };

    this.addEventListener = function (event, callback) {
      if (!(event in listeners)) {
        listeners[event] = [];
      }

      listeners[event].push(callback);
    };

    this.removeEventListener = function (event, callback) {
      if (event in listeners) {
        listeners[event] = listeners[event].filter(function (ev) {
          return ev !== callback;
        });
      }
    };

    this.dispatchEvent = function (event) {
      if (typeof self["on" + event] === "function") {
        self["on" + event]();
      }

      if (event in listeners) {
        for (var i = 0, len = listeners[event].length; i < len; i++) {
          listeners[event][i].call(self);
        }
      }
    };

    var setState = function (state) {
      if (self.readyState !== state) {
        self.readyState = state;

        if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
          self.dispatchEvent("readystatechange");
        }

        if (self.readyState === self.DONE && !errorFlag) {
          self.dispatchEvent("load");
          self.dispatchEvent("loadend");
        }
      }
    };
  }

  ;
},401,[3,172,402,169,170]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = LiquidCore.require('child_process');
},402,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var XMLHttpRequest = _$$_REQUIRE(_dependencyMap[0]);

  var Polling = _$$_REQUIRE(_dependencyMap[1]);

  var Emitter = _$$_REQUIRE(_dependencyMap[2]);

  var inherit = _$$_REQUIRE(_dependencyMap[3]);

  var debug = _$$_REQUIRE(_dependencyMap[4])('engine.io-client:polling-xhr');

  var globalThis = _$$_REQUIRE(_dependencyMap[5]);

  module.exports = XHR;
  module.exports.Request = Request;

  function empty() {}

  function XHR(opts) {
    Polling.call(this, opts);
    this.requestTimeout = opts.requestTimeout;
    this.extraHeaders = opts.extraHeaders;

    if (typeof location !== 'undefined') {
      var isSSL = 'https:' === location.protocol;
      var port = location.port;

      if (!port) {
        port = isSSL ? 443 : 80;
      }

      this.xd = typeof location !== 'undefined' && opts.hostname !== location.hostname || port !== opts.port;
      this.xs = opts.secure !== isSSL;
    }
  }

  inherit(XHR, Polling);
  XHR.prototype.supportsBinary = true;

  XHR.prototype.request = function (opts) {
    opts = opts || {};
    opts.uri = this.uri();
    opts.xd = this.xd;
    opts.xs = this.xs;
    opts.agent = this.agent || false;
    opts.supportsBinary = this.supportsBinary;
    opts.enablesXDR = this.enablesXDR;
    opts.withCredentials = this.withCredentials;
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
    opts.requestTimeout = this.requestTimeout;
    opts.extraHeaders = this.extraHeaders;
    return new Request(opts);
  };

  XHR.prototype.doWrite = function (data, fn) {
    var isBinary = typeof data !== 'string' && data !== undefined;
    var req = this.request({
      method: 'POST',
      data: data,
      isBinary: isBinary
    });
    var self = this;
    req.on('success', fn);
    req.on('error', function (err) {
      self.onError('xhr post error', err);
    });
    this.sendXhr = req;
  };

  XHR.prototype.doPoll = function () {
    debug('xhr poll');
    var req = this.request();
    var self = this;
    req.on('data', function (data) {
      self.onData(data);
    });
    req.on('error', function (err) {
      self.onError('xhr poll error', err);
    });
    this.pollXhr = req;
  };

  function Request(opts) {
    this.method = opts.method || 'GET';
    this.uri = opts.uri;
    this.xd = !!opts.xd;
    this.xs = !!opts.xs;
    this.async = false !== opts.async;
    this.data = undefined !== opts.data ? opts.data : null;
    this.agent = opts.agent;
    this.isBinary = opts.isBinary;
    this.supportsBinary = opts.supportsBinary;
    this.enablesXDR = opts.enablesXDR;
    this.withCredentials = opts.withCredentials;
    this.requestTimeout = opts.requestTimeout;
    this.pfx = opts.pfx;
    this.key = opts.key;
    this.passphrase = opts.passphrase;
    this.cert = opts.cert;
    this.ca = opts.ca;
    this.ciphers = opts.ciphers;
    this.rejectUnauthorized = opts.rejectUnauthorized;
    this.extraHeaders = opts.extraHeaders;
    this.create();
  }

  Emitter(Request.prototype);

  Request.prototype.create = function () {
    var opts = {
      agent: this.agent,
      xdomain: this.xd,
      xscheme: this.xs,
      enablesXDR: this.enablesXDR
    };
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
    var xhr = this.xhr = new XMLHttpRequest(opts);
    var self = this;

    try {
      debug('xhr open %s: %s', this.method, this.uri);
      xhr.open(this.method, this.uri, this.async);

      try {
        if (this.extraHeaders) {
          xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);

          for (var i in this.extraHeaders) {
            if (this.extraHeaders.hasOwnProperty(i)) {
              xhr.setRequestHeader(i, this.extraHeaders[i]);
            }
          }
        }
      } catch (e) {}

      if ('POST' === this.method) {
        try {
          if (this.isBinary) {
            xhr.setRequestHeader('Content-type', 'application/octet-stream');
          } else {
            xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
          }
        } catch (e) {}
      }

      try {
        xhr.setRequestHeader('Accept', '*/*');
      } catch (e) {}

      if ('withCredentials' in xhr) {
        xhr.withCredentials = this.withCredentials;
      }

      if (this.requestTimeout) {
        xhr.timeout = this.requestTimeout;
      }

      if (this.hasXDR()) {
        xhr.onload = function () {
          self.onLoad();
        };

        xhr.onerror = function () {
          self.onError(xhr.responseText);
        };
      } else {
        xhr.onreadystatechange = function () {
          if (xhr.readyState === 2) {
            try {
              var contentType = xhr.getResponseHeader('Content-Type');

              if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
                xhr.responseType = 'arraybuffer';
              }
            } catch (e) {}
          }

          if (4 !== xhr.readyState) return;

          if (200 === xhr.status || 1223 === xhr.status) {
            self.onLoad();
          } else {
            setTimeout(function () {
              self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
            }, 0);
          }
        };
      }

      debug('xhr data %s', this.data);
      xhr.send(this.data);
    } catch (e) {
      setTimeout(function () {
        self.onError(e);
      }, 0);
      return;
    }

    if (typeof document !== 'undefined') {
      this.index = Request.requestsCount++;
      Request.requests[this.index] = this;
    }
  };

  Request.prototype.onSuccess = function () {
    this.emit('success');
    this.cleanup();
  };

  Request.prototype.onData = function (data) {
    this.emit('data', data);
    this.onSuccess();
  };

  Request.prototype.onError = function (err) {
    this.emit('error', err);
    this.cleanup(true);
  };

  Request.prototype.cleanup = function (fromError) {
    if ('undefined' === typeof this.xhr || null === this.xhr) {
      return;
    }

    if (this.hasXDR()) {
      this.xhr.onload = this.xhr.onerror = empty;
    } else {
      this.xhr.onreadystatechange = empty;
    }

    if (fromError) {
      try {
        this.xhr.abort();
      } catch (e) {}
    }

    if (typeof document !== 'undefined') {
      delete Request.requests[this.index];
    }

    this.xhr = null;
  };

  Request.prototype.onLoad = function () {
    var data;

    try {
      var contentType;

      try {
        contentType = this.xhr.getResponseHeader('Content-Type');
      } catch (e) {}

      if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
        data = this.xhr.response || this.xhr.responseText;
      } else {
        data = this.xhr.responseText;
      }
    } catch (e) {
      this.onError(e);
    }

    if (null != data) {
      this.onData(data);
    }
  };

  Request.prototype.hasXDR = function () {
    return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
  };

  Request.prototype.abort = function () {
    this.cleanup();
  };

  Request.requestsCount = 0;
  Request.requests = {};

  if (typeof document !== 'undefined') {
    if (typeof attachEvent === 'function') {
      attachEvent('onunload', unloadHandler);
    } else if (typeof addEventListener === 'function') {
      var terminationEvent = 'onpagehide' in globalThis ? 'pagehide' : 'unload';
      addEventListener(terminationEvent, unloadHandler, false);
    }
  }

  function unloadHandler() {
    for (var i in Request.requests) {
      if (Request.requests.hasOwnProperty(i)) {
        Request.requests[i].abort();
      }
    }
  }
},403,[401,404,393,413,415,420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var Transport = _$$_REQUIRE(_dependencyMap[0]);

  var parseqs = _$$_REQUIRE(_dependencyMap[1]);

  var parser = _$$_REQUIRE(_dependencyMap[2]);

  var inherit = _$$_REQUIRE(_dependencyMap[3]);

  var yeast = _$$_REQUIRE(_dependencyMap[4]);

  var debug = _$$_REQUIRE(_dependencyMap[5])('engine.io-client:polling');

  module.exports = Polling;

  var hasXHR2 = function () {
    var XMLHttpRequest = _$$_REQUIRE(_dependencyMap[6]);

    var xhr = new XMLHttpRequest({
      xdomain: false
    });
    return null != xhr.responseType;
  }();

  function Polling(opts) {
    var forceBase64 = opts && opts.forceBase64;

    if (!hasXHR2 || forceBase64) {
      this.supportsBinary = false;
    }

    Transport.call(this, opts);
  }

  inherit(Polling, Transport);
  Polling.prototype.name = 'polling';

  Polling.prototype.doOpen = function () {
    this.poll();
  };

  Polling.prototype.pause = function (onPause) {
    var self = this;
    this.readyState = 'pausing';

    function pause() {
      debug('paused');
      self.readyState = 'paused';
      onPause();
    }

    if (this.polling || !this.writable) {
      var total = 0;

      if (this.polling) {
        debug('we are currently polling - waiting to pause');
        total++;
        this.once('pollComplete', function () {
          debug('pre-pause polling complete');
          --total || pause();
        });
      }

      if (!this.writable) {
        debug('we are currently writing - waiting to pause');
        total++;
        this.once('drain', function () {
          debug('pre-pause writing complete');
          --total || pause();
        });
      }
    } else {
      pause();
    }
  };

  Polling.prototype.poll = function () {
    debug('polling');
    this.polling = true;
    this.doPoll();
    this.emit('poll');
  };

  Polling.prototype.onData = function (data) {
    var self = this;
    debug('polling got data %s', data);

    var callback = function (packet, index, total) {
      if ('opening' === self.readyState) {
        self.onOpen();
      }

      if ('close' === packet.type) {
        self.onClose();
        return false;
      }

      self.onPacket(packet);
    };

    parser.decodePayload(data, this.socket.binaryType, callback);

    if ('closed' !== this.readyState) {
      this.polling = false;
      this.emit('pollComplete');

      if ('open' === this.readyState) {
        this.poll();
      } else {
        debug('ignoring poll - transport state "%s"', this.readyState);
      }
    }
  };

  Polling.prototype.doClose = function () {
    var self = this;

    function close() {
      debug('writing close packet');
      self.write([{
        type: 'close'
      }]);
    }

    if ('open' === this.readyState) {
      debug('transport open - closing');
      close();
    } else {
      debug('transport not open - deferring close');
      this.once('open', close);
    }
  };

  Polling.prototype.write = function (packets) {
    var self = this;
    this.writable = false;

    var callbackfn = function () {
      self.writable = true;
      self.emit('drain');
    };

    parser.encodePayload(packets, this.supportsBinary, function (data) {
      self.doWrite(data, callbackfn);
    });
  };

  Polling.prototype.uri = function () {
    var query = this.query || {};
    var schema = this.secure ? 'https' : 'http';
    var port = '';

    if (false !== this.timestampRequests) {
      query[this.timestampParam] = yeast();
    }

    if (!this.supportsBinary && !query.sid) {
      query.b64 = 1;
    }

    query = parseqs.encode(query);

    if (this.port && ('https' === schema && Number(this.port) !== 443 || 'http' === schema && Number(this.port) !== 80)) {
      port = ':' + this.port;
    }

    if (query.length) {
      query = '?' + query;
    }

    var ipv6 = this.hostname.indexOf(':') !== -1;
    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
  };
},404,[405,412,406,413,414,415,401]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var parser = _$$_REQUIRE(_dependencyMap[0]);

  var Emitter = _$$_REQUIRE(_dependencyMap[1]);

  module.exports = Transport;

  function Transport(opts) {
    this.path = opts.path;
    this.hostname = opts.hostname;
    this.port = opts.port;
    this.secure = opts.secure;
    this.query = opts.query;
    this.timestampParam = opts.timestampParam;
    this.timestampRequests = opts.timestampRequests;
    this.readyState = '';
    this.agent = opts.agent || false;
    this.socket = opts.socket;
    this.enablesXDR = opts.enablesXDR;
    this.withCredentials = opts.withCredentials;
    this.pfx = opts.pfx;
    this.key = opts.key;
    this.passphrase = opts.passphrase;
    this.cert = opts.cert;
    this.ca = opts.ca;
    this.ciphers = opts.ciphers;
    this.rejectUnauthorized = opts.rejectUnauthorized;
    this.forceNode = opts.forceNode;
    this.isReactNative = opts.isReactNative;
    this.extraHeaders = opts.extraHeaders;
    this.localAddress = opts.localAddress;
  }

  Emitter(Transport.prototype);

  Transport.prototype.onError = function (msg, desc) {
    var err = new Error(msg);
    err.type = 'TransportError';
    err.description = desc;
    this.emit('error', err);
    return this;
  };

  Transport.prototype.open = function () {
    if ('closed' === this.readyState || '' === this.readyState) {
      this.readyState = 'opening';
      this.doOpen();
    }

    return this;
  };

  Transport.prototype.close = function () {
    if ('opening' === this.readyState || 'open' === this.readyState) {
      this.doClose();
      this.onClose();
    }

    return this;
  };

  Transport.prototype.send = function (packets) {
    if ('open' === this.readyState) {
      this.write(packets);
    } else {
      throw new Error('Transport not open');
    }
  };

  Transport.prototype.onOpen = function () {
    this.readyState = 'open';
    this.writable = true;
    this.emit('open');
  };

  Transport.prototype.onData = function (data) {
    var packet = parser.decodePacket(data, this.socket.binaryType);
    this.onPacket(packet);
  };

  Transport.prototype.onPacket = function (packet) {
    this.emit('packet', packet);
  };

  Transport.prototype.onClose = function () {
    this.readyState = 'closed';
    this.emit('close');
  };
},405,[406,393]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var utf8 = _$$_REQUIRE(_dependencyMap[0]);

  var hasBinary = _$$_REQUIRE(_dependencyMap[1]);

  var after = _$$_REQUIRE(_dependencyMap[2]);

  var keys = _$$_REQUIRE(_dependencyMap[3]);

  exports.protocol = 3;
  var packets = exports.packets = {
    open: 0,
    close: 1,
    ping: 2,
    pong: 3,
    message: 4,
    upgrade: 5,
    noop: 6
  };
  var packetslist = keys(packets);
  var err = {
    type: 'error',
    data: 'parser error'
  };
  const EMPTY_BUFFER = Buffer.concat([]);

  exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
    if (typeof supportsBinary === 'function') {
      callback = supportsBinary;
      supportsBinary = null;
    }

    if (typeof utf8encode === 'function') {
      callback = utf8encode;
      utf8encode = null;
    }

    if (Buffer.isBuffer(packet.data)) {
      return encodeBuffer(packet, supportsBinary, callback);
    } else if (packet.data && (packet.data.buffer || packet.data) instanceof ArrayBuffer) {
      return encodeBuffer({
        type: packet.type,
        data: arrayBufferToBuffer(packet.data)
      }, supportsBinary, callback);
    }

    var encoded = packets[packet.type];

    if (undefined !== packet.data) {
      encoded += utf8encode ? utf8.encode(String(packet.data), {
        strict: false
      }) : String(packet.data);
    }

    return callback('' + encoded);
  };

  function encodeBuffer(packet, supportsBinary, callback) {
    if (!supportsBinary) {
      return exports.encodeBase64Packet(packet, callback);
    }

    var data = packet.data;
    var typeBuffer = Buffer.allocUnsafe(1);
    typeBuffer[0] = packets[packet.type];
    return callback(Buffer.concat([typeBuffer, data]));
  }

  exports.encodeBase64Packet = function (packet, callback) {
    var data = Buffer.isBuffer(packet.data) ? packet.data : arrayBufferToBuffer(packet.data);
    var message = 'b' + packets[packet.type];
    message += data.toString('base64');
    return callback(message);
  };

  exports.decodePacket = function (data, binaryType, utf8decode) {
    if (data === undefined) {
      return err;
    }

    var type;

    if (typeof data === 'string') {
      type = data.charAt(0);

      if (type === 'b') {
        return exports.decodeBase64Packet(data.substr(1), binaryType);
      }

      if (utf8decode) {
        data = tryDecode(data);

        if (data === false) {
          return err;
        }
      }

      if (Number(type) != type || !packetslist[type]) {
        return err;
      }

      if (data.length > 1) {
        return {
          type: packetslist[type],
          data: data.substring(1)
        };
      } else {
        return {
          type: packetslist[type]
        };
      }
    }

    if (binaryType === 'arraybuffer') {
      var intArray = new Uint8Array(data);
      type = intArray[0];
      return {
        type: packetslist[type],
        data: intArray.buffer.slice(1)
      };
    }

    if (data instanceof ArrayBuffer) {
      data = arrayBufferToBuffer(data);
    }

    type = data[0];
    return {
      type: packetslist[type],
      data: data.slice(1)
    };
  };

  function tryDecode(data) {
    try {
      data = utf8.decode(data, {
        strict: false
      });
    } catch (e) {
      return false;
    }

    return data;
  }

  exports.decodeBase64Packet = function (msg, binaryType) {
    var type = packetslist[msg.charAt(0)];
    var data = Buffer.from(msg.substr(1), 'base64');

    if (binaryType === 'arraybuffer') {
      var abv = new Uint8Array(data.length);

      for (var i = 0; i < abv.length; i++) {
        abv[i] = data[i];
      }

      data = abv.buffer;
    }

    return {
      type: type,
      data: data
    };
  };

  exports.encodePayload = function (packets, supportsBinary, callback) {
    if (typeof supportsBinary === 'function') {
      callback = supportsBinary;
      supportsBinary = null;
    }

    if (supportsBinary && hasBinary(packets)) {
      return exports.encodePayloadAsBinary(packets, callback);
    }

    if (!packets.length) {
      return callback('0:');
    }

    function encodeOne(packet, doneCallback) {
      exports.encodePacket(packet, supportsBinary, false, function (message) {
        doneCallback(null, setLengthHeader(message));
      });
    }

    map(packets, encodeOne, function (err, results) {
      return callback(results.join(''));
    });
  };

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function map(ary, each, done) {
    var result = new Array(ary.length);
    var next = after(ary.length, done);

    for (var i = 0; i < ary.length; i++) {
      each(ary[i], function (error, msg) {
        result[i] = msg;
        next(error, result);
      });
    }
  }

  exports.decodePayload = function (data, binaryType, callback) {
    if (typeof data !== 'string') {
      return exports.decodePayloadAsBinary(data, binaryType, callback);
    }

    if (typeof binaryType === 'function') {
      callback = binaryType;
      binaryType = null;
    }

    if (data === '') {
      return callback(err, 0, 1);
    }

    var length = '',
        n,
        msg,
        packet;

    for (var i = 0, l = data.length; i < l; i++) {
      var chr = data.charAt(i);

      if (chr !== ':') {
        length += chr;
        continue;
      }

      if (length === '' || length != (n = Number(length))) {
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, false);

        if (err.type === packet.type && err.data === packet.data) {
          return callback(err, 0, 1);
        }

        var more = callback(packet, i + n, l);
        if (false === more) return;
      }

      i += n;
      length = '';
    }

    if (length !== '') {
      return callback(err, 0, 1);
    }
  };

  function bufferToString(buffer) {
    var str = '';

    for (var i = 0, l = buffer.length; i < l; i++) {
      str += String.fromCharCode(buffer[i]);
    }

    return str;
  }

  function stringToBuffer(string) {
    var buf = Buffer.allocUnsafe(string.length);

    for (var i = 0, l = string.length; i < l; i++) {
      buf.writeUInt8(string.charCodeAt(i), i);
    }

    return buf;
  }

  function arrayBufferToBuffer(data) {
    var length = data.byteLength || data.length;
    var offset = data.byteOffset || 0;
    return Buffer.from(data.buffer || data, offset, length);
  }

  exports.encodePayloadAsBinary = function (packets, callback) {
    if (!packets.length) {
      return callback(EMPTY_BUFFER);
    }

    map(packets, encodeOneBinaryPacket, function (err, results) {
      return callback(Buffer.concat(results));
    });
  };

  function encodeOneBinaryPacket(p, doneCallback) {
    function onBinaryPacketEncode(packet) {
      var encodingLength = '' + packet.length;
      var sizeBuffer;

      if (typeof packet === 'string') {
        sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);
        sizeBuffer[0] = 0;

        for (var i = 0; i < encodingLength.length; i++) {
          sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);
        }

        sizeBuffer[sizeBuffer.length - 1] = 255;
        return doneCallback(null, Buffer.concat([sizeBuffer, stringToBuffer(packet)]));
      }

      sizeBuffer = Buffer.allocUnsafe(encodingLength.length + 2);
      sizeBuffer[0] = 1;

      for (var i = 0; i < encodingLength.length; i++) {
        sizeBuffer[i + 1] = parseInt(encodingLength[i], 10);
      }

      sizeBuffer[sizeBuffer.length - 1] = 255;
      doneCallback(null, Buffer.concat([sizeBuffer, packet]));
    }

    exports.encodePacket(p, true, true, onBinaryPacketEncode);
  }

  exports.decodePayloadAsBinary = function (data, binaryType, callback) {
    if (typeof binaryType === 'function') {
      callback = binaryType;
      binaryType = null;
    }

    var bufferTail = data;
    var buffers = [];
    var i;

    while (bufferTail.length > 0) {
      var strLen = '';
      var isString = bufferTail[0] === 0;

      for (i = 1;; i++) {
        if (bufferTail[i] === 255) break;

        if (strLen.length > 310) {
          return callback(err, 0, 1);
        }

        strLen += '' + bufferTail[i];
      }

      bufferTail = bufferTail.slice(strLen.length + 1);
      var msgLength = parseInt(strLen, 10);
      var msg = bufferTail.slice(1, msgLength + 1);
      if (isString) msg = bufferToString(msg);
      buffers.push(msg);
      bufferTail = bufferTail.slice(msgLength + 1);
    }

    var total = buffers.length;

    for (i = 0; i < total; i++) {
      var buffer = buffers[i];
      callback(exports.decodePacket(buffer, binaryType, true), i, total);
    }
  };
},406,[407,408,410,411]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var stringFromCharCode = String.fromCharCode;

  function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;
    var value;
    var extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }

  function ucs2encode(array) {
    var length = array.length;
    var index = -1;
    var value;
    var output = '';

    while (++index < length) {
      value = array[index];

      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }

      output += stringFromCharCode(value);
    }

    return output;
  }

  function checkScalarValue(codePoint, strict) {
    if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
      if (strict) {
        throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
      }

      return false;
    }

    return true;
  }

  function createByte(codePoint, shift) {
    return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
  }

  function encodeCodePoint(codePoint, strict) {
    if ((codePoint & 0xFFFFFF80) == 0) {
      return stringFromCharCode(codePoint);
    }

    var symbol = '';

    if ((codePoint & 0xFFFFF800) == 0) {
      symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
    } else if ((codePoint & 0xFFFF0000) == 0) {
      if (!checkScalarValue(codePoint, strict)) {
        codePoint = 0xFFFD;
      }

      symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
      symbol += createByte(codePoint, 6);
    } else if ((codePoint & 0xFFE00000) == 0) {
      symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
      symbol += createByte(codePoint, 12);
      symbol += createByte(codePoint, 6);
    }

    symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
    return symbol;
  }

  function utf8encode(string, opts) {
    opts = opts || {};
    var strict = false !== opts.strict;
    var codePoints = ucs2decode(string);
    var length = codePoints.length;
    var index = -1;
    var codePoint;
    var byteString = '';

    while (++index < length) {
      codePoint = codePoints[index];
      byteString += encodeCodePoint(codePoint, strict);
    }

    return byteString;
  }

  function readContinuationByte() {
    if (byteIndex >= byteCount) {
      throw Error('Invalid byte index');
    }

    var continuationByte = byteArray[byteIndex] & 0xFF;
    byteIndex++;

    if ((continuationByte & 0xC0) == 0x80) {
      return continuationByte & 0x3F;
    }

    throw Error('Invalid continuation byte');
  }

  function decodeSymbol(strict) {
    var byte1;
    var byte2;
    var byte3;
    var byte4;
    var codePoint;

    if (byteIndex > byteCount) {
      throw Error('Invalid byte index');
    }

    if (byteIndex == byteCount) {
      return false;
    }

    byte1 = byteArray[byteIndex] & 0xFF;
    byteIndex++;

    if ((byte1 & 0x80) == 0) {
      return byte1;
    }

    if ((byte1 & 0xE0) == 0xC0) {
      byte2 = readContinuationByte();
      codePoint = (byte1 & 0x1F) << 6 | byte2;

      if (codePoint >= 0x80) {
        return codePoint;
      } else {
        throw Error('Invalid continuation byte');
      }
    }

    if ((byte1 & 0xF0) == 0xE0) {
      byte2 = readContinuationByte();
      byte3 = readContinuationByte();
      codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;

      if (codePoint >= 0x0800) {
        return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
      } else {
        throw Error('Invalid continuation byte');
      }
    }

    if ((byte1 & 0xF8) == 0xF0) {
      byte2 = readContinuationByte();
      byte3 = readContinuationByte();
      byte4 = readContinuationByte();
      codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;

      if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
        return codePoint;
      }
    }

    throw Error('Invalid UTF-8 detected');
  }

  var byteArray;
  var byteCount;
  var byteIndex;

  function utf8decode(byteString, opts) {
    opts = opts || {};
    var strict = false !== opts.strict;
    byteArray = ucs2decode(byteString);
    byteCount = byteArray.length;
    byteIndex = 0;
    var codePoints = [];
    var tmp;

    while ((tmp = decodeSymbol(strict)) !== false) {
      codePoints.push(tmp);
    }

    return ucs2encode(codePoints);
  }

  module.exports = {
    version: '2.1.2',
    encode: utf8encode,
    decode: utf8decode
  };
},407,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var isArray = _$$_REQUIRE(_dependencyMap[0]);

  var toString = Object.prototype.toString;
  var withNativeBlob = typeof Blob === 'function' || typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
  var withNativeFile = typeof File === 'function' || typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';
  module.exports = hasBinary;

  function hasBinary(obj) {
    if (!obj || typeof obj !== 'object') {
      return false;
    }

    if (isArray(obj)) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (hasBinary(obj[i])) {
          return true;
        }
      }

      return false;
    }

    if (typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj) || typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File) {
      return true;
    }

    if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
      return hasBinary(obj.toJSON(), true);
    }

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
        return true;
      }
    }

    return false;
  }
},408,[409]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var toString = {}.toString;

  module.exports = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };
},409,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = after;

  function after(count, callback, err_cb) {
    var bail = false;
    err_cb = err_cb || noop;
    proxy.count = count;
    return count === 0 ? callback() : proxy;

    function proxy(err, result) {
      if (proxy.count <= 0) {
        throw new Error('after called too many times');
      }

      --proxy.count;

      if (err) {
        bail = true;
        callback(err);
        callback = err_cb;
      } else if (proxy.count === 0 && !bail) {
        callback(null, result);
      }
    }
  }

  function noop() {}
},410,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = Object.keys || function keys(obj) {
    var arr = [];
    var has = Object.prototype.hasOwnProperty;

    for (var i in obj) {
      if (has.call(obj, i)) {
        arr.push(i);
      }
    }

    return arr;
  };
},411,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.encode = function (obj) {
    var str = '';

    for (var i in obj) {
      if (obj.hasOwnProperty(i)) {
        if (str.length) str += '&';
        str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
      }
    }

    return str;
  };

  exports.decode = function (qs) {
    var qry = {};
    var pairs = qs.split('&');

    for (var i = 0, l = pairs.length; i < l; i++) {
      var pair = pairs[i].split('=');
      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }

    return qry;
  };
},412,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = function (a, b) {
    var fn = function () {};

    fn.prototype = b.prototype;
    a.prototype = new fn();
    a.prototype.constructor = a;
  };
},413,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
      length = 64,
      map = {},
      seed = 0,
      i = 0,
      prev;

  function encode(num) {
    var encoded = '';

    do {
      encoded = alphabet[num % length] + encoded;
      num = Math.floor(num / length);
    } while (num > 0);

    return encoded;
  }

  function decode(str) {
    var decoded = 0;

    for (i = 0; i < str.length; i++) {
      decoded = decoded * length + map[str.charAt(i)];
    }

    return decoded;
  }

  function yeast() {
    var now = encode(+new Date());
    if (now !== prev) return seed = 0, prev = now;
    return now + '.' + encode(seed++);
  }

  for (; i < length; i++) map[alphabet[i]] = i;

  yeast.encode = encode;
  yeast.decode = decode;
  module.exports = yeast;
},414,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  if (typeof process === 'undefined' || process.type === 'renderer') {
    module.exports = _$$_REQUIRE(_dependencyMap[0]);
  } else {
    module.exports = _$$_REQUIRE(_dependencyMap[1]);
  }
},415,[416,419]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports = module.exports = _$$_REQUIRE(_dependencyMap[0]);
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
  exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

  function useColors() {
    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
      return true;
    }

    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }

    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }

  exports.formatters.j = function (v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return '[UnexpectedJSONParseError]: ' + err.message;
    }
  };

  function formatArgs(args) {
    var useColors = this.useColors;
    args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
    if (!useColors) return;
    var c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function (match) {
      if ('%%' === match) return;
      index++;

      if ('%c' === match) {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }

  function log() {
    return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
  }

  function save(namespaces) {
    try {
      if (null == namespaces) {
        exports.storage.removeItem('debug');
      } else {
        exports.storage.debug = namespaces;
      }
    } catch (e) {}
  }

  function load() {
    var r;

    try {
      r = exports.storage.debug;
    } catch (e) {}

    if (!r && typeof process !== 'undefined' && 'env' in process) {
      r = process.env.DEBUG;
    }

    return r;
  }

  exports.enable(load());

  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {}
  }
},416,[417]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
  exports.coerce = coerce;
  exports.disable = disable;
  exports.enable = enable;
  exports.enabled = enabled;
  exports.humanize = _$$_REQUIRE(_dependencyMap[0]);
  exports.instances = [];
  exports.names = [];
  exports.skips = [];
  exports.formatters = {};

  function selectColor(namespace) {
    var hash = 0,
        i;

    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }

    return exports.colors[Math.abs(hash) % exports.colors.length];
  }

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      if (!debug.enabled) return;
      var self = debug;
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      var args = new Array(arguments.length);

      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      args[0] = exports.coerce(args[0]);

      if ('string' !== typeof args[0]) {
        args.unshift('%O');
      }

      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        if (match === '%%') return match;
        index++;
        var formatter = exports.formatters[format];

        if ('function' === typeof formatter) {
          var val = args[index];
          match = formatter.call(self, val);
          args.splice(index, 1);
          index--;
        }

        return match;
      });
      exports.formatArgs.call(self, args);
      var logFn = debug.log || exports.log || console.log.bind(console);
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = exports.enabled(namespace);
    debug.useColors = exports.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;

    if ('function' === typeof exports.init) {
      exports.init(debug);
    }

    exports.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = exports.instances.indexOf(this);

    if (index !== -1) {
      exports.instances.splice(index, 1);
      return true;
    } else {
      return false;
    }
  }

  function enable(namespaces) {
    exports.save(namespaces);
    exports.names = [];
    exports.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) continue;
      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        exports.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < exports.instances.length; i++) {
      var instance = exports.instances[i];
      instance.enabled = exports.enabled(instance.namespace);
    }
  }

  function disable() {
    exports.enable('');
  }

  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i, len;

    for (i = 0, len = exports.skips.length; i < len; i++) {
      if (exports.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = exports.names.length; i < len; i++) {
      if (exports.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }

  function coerce(val) {
    if (val instanceof Error) return val.stack || val.message;
    return val;
  }
},417,[418]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var s = 1000;
  var m = 60000;
  var h = 3600000;
  var d = 86400000;
  var y = 31557600000;

  module.exports = function (val, options) {
    options = options || {};
    var type = typeof val;

    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }

    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
  };

  function parse(str) {
    str = String(str);

    if (str.length > 100) {
      return;
    }

    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);

    if (!match) {
      return;
    }

    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();

    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;

      case 'days':
      case 'day':
      case 'd':
        return n * d;

      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;

      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;

      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;

      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;

      default:
        return undefined;
    }
  }

  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + 'd';
    }

    if (ms >= h) {
      return Math.round(ms / h) + 'h';
    }

    if (ms >= m) {
      return Math.round(ms / m) + 'm';
    }

    if (ms >= s) {
      return Math.round(ms / s) + 's';
    }

    return ms + 'ms';
  }

  function fmtLong(ms) {
    return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
  }

  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }

    if (ms < n * 1.5) {
      return Math.floor(ms / n) + ' ' + name;
    }

    return Math.ceil(ms / n) + ' ' + name + 's';
  }
},418,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var tty = _$$_REQUIRE(_dependencyMap[0]);

  var util = _$$_REQUIRE(_dependencyMap[1]);

  exports = module.exports = _$$_REQUIRE(_dependencyMap[2]);
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.colors = [6, 2, 3, 4, 5, 1];

  try {
    var supportsColor = _$$_REQUIRE(_dependencyMap[3]);

    if (supportsColor && supportsColor.level >= 2) {
      exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
    }
  } catch (err) {}

  exports.inspectOpts = Object.keys(process.env).filter(function (key) {
    return /^debug_/i.test(key);
  }).reduce(function (obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;else if (/^(no|off|false|disabled)$/i.test(val)) val = false;else if (val === 'null') val = null;else val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});

  function useColors() {
    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }

  exports.formatters.o = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split('\n').map(function (str) {
      return str.trim();
    }).join(' ');
  };

  exports.formatters.O = function (v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
  };

  function formatArgs(args) {
    var name = this.namespace;
    var useColors = this.useColors;

    if (useColors) {
      var c = this.color;
      var colorCode = '\u001b[3' + (c < 8 ? c : '8;5;' + c);
      var prefix = '  ' + colorCode + ';1m' + name + ' ' + '\u001b[0m';
      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
      args.push(colorCode + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
    } else {
      args[0] = getDate() + name + ' ' + args[0];
    }
  }

  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return '';
    } else {
      return new Date().toISOString() + ' ';
    }
  }

  function log() {
    return process.stderr.write(util.format.apply(util, arguments) + '\n');
  }

  function save(namespaces) {
    if (null == namespaces) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }

  function load() {
    return process.env.DEBUG;
  }

  function init(debug) {
    debug.inspectOpts = {};
    var keys = Object.keys(exports.inspectOpts);

    for (var i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }

  exports.enable(load());
},419,[246,103,417,247]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = global;
},420,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var Polling = _$$_REQUIRE(_dependencyMap[0]);

  var inherit = _$$_REQUIRE(_dependencyMap[1]);

  var globalThis = _$$_REQUIRE(_dependencyMap[2]);

  module.exports = JSONPPolling;
  var rNewline = /\n/g;
  var rEscapedNewline = /\\n/g;
  var callbacks;

  function empty() {}

  function JSONPPolling(opts) {
    Polling.call(this, opts);
    this.query = this.query || {};

    if (!callbacks) {
      callbacks = globalThis.___eio = globalThis.___eio || [];
    }

    this.index = callbacks.length;
    var self = this;
    callbacks.push(function (msg) {
      self.onData(msg);
    });
    this.query.j = this.index;

    if (typeof addEventListener === 'function') {
      addEventListener('beforeunload', function () {
        if (self.script) self.script.onerror = empty;
      }, false);
    }
  }

  inherit(JSONPPolling, Polling);
  JSONPPolling.prototype.supportsBinary = false;

  JSONPPolling.prototype.doClose = function () {
    if (this.script) {
      this.script.parentNode.removeChild(this.script);
      this.script = null;
    }

    if (this.form) {
      this.form.parentNode.removeChild(this.form);
      this.form = null;
      this.iframe = null;
    }

    Polling.prototype.doClose.call(this);
  };

  JSONPPolling.prototype.doPoll = function () {
    var self = this;
    var script = document.createElement('script');

    if (this.script) {
      this.script.parentNode.removeChild(this.script);
      this.script = null;
    }

    script.async = true;
    script.src = this.uri();

    script.onerror = function (e) {
      self.onError('jsonp poll error', e);
    };

    var insertAt = document.getElementsByTagName('script')[0];

    if (insertAt) {
      insertAt.parentNode.insertBefore(script, insertAt);
    } else {
      (document.head || document.body).appendChild(script);
    }

    this.script = script;
    var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

    if (isUAgecko) {
      setTimeout(function () {
        var iframe = document.createElement('iframe');
        document.body.appendChild(iframe);
        document.body.removeChild(iframe);
      }, 100);
    }
  };

  JSONPPolling.prototype.doWrite = function (data, fn) {
    var self = this;

    if (!this.form) {
      var form = document.createElement('form');
      var area = document.createElement('textarea');
      var id = this.iframeId = 'eio_iframe_' + this.index;
      var iframe;
      form.className = 'socketio';
      form.style.position = 'absolute';
      form.style.top = '-1000px';
      form.style.left = '-1000px';
      form.target = id;
      form.method = 'POST';
      form.setAttribute('accept-charset', 'utf-8');
      area.name = 'd';
      form.appendChild(area);
      document.body.appendChild(form);
      this.form = form;
      this.area = area;
    }

    this.form.action = this.uri();

    function complete() {
      initIframe();
      fn();
    }

    function initIframe() {
      if (self.iframe) {
        try {
          self.form.removeChild(self.iframe);
        } catch (e) {
          self.onError('jsonp polling iframe removal error', e);
        }
      }

      try {
        var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
        iframe = document.createElement(html);
      } catch (e) {
        iframe = document.createElement('iframe');
        iframe.name = self.iframeId;
        iframe.src = 'javascript:0';
      }

      iframe.id = self.iframeId;
      self.form.appendChild(iframe);
      self.iframe = iframe;
    }

    initIframe();
    data = data.replace(rEscapedNewline, '\\\n');
    this.area.value = data.replace(rNewline, '\\n');

    try {
      this.form.submit();
    } catch (e) {}

    if (this.iframe.attachEvent) {
      this.iframe.onreadystatechange = function () {
        if (self.iframe.readyState === 'complete') {
          complete();
        }
      };
    } else {
      this.iframe.onload = complete;
    }
  };
},421,[404,413,420]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var Transport = _$$_REQUIRE(_dependencyMap[0]);

  var parser = _$$_REQUIRE(_dependencyMap[1]);

  var parseqs = _$$_REQUIRE(_dependencyMap[2]);

  var inherit = _$$_REQUIRE(_dependencyMap[3]);

  var yeast = _$$_REQUIRE(_dependencyMap[4]);

  var debug = _$$_REQUIRE(_dependencyMap[5])('engine.io-client:websocket');

  var BrowserWebSocket, NodeWebSocket;

  if (typeof WebSocket !== 'undefined') {
    BrowserWebSocket = WebSocket;
  } else if (typeof self !== 'undefined') {
    BrowserWebSocket = self.WebSocket || self.MozWebSocket;
  }

  if (typeof window === 'undefined') {
    try {
      NodeWebSocket = _$$_REQUIRE(_dependencyMap[6]);
    } catch (e) {}
  }

  var WebSocketImpl = BrowserWebSocket || NodeWebSocket;
  module.exports = WS;

  function WS(opts) {
    var forceBase64 = opts && opts.forceBase64;

    if (forceBase64) {
      this.supportsBinary = false;
    }

    this.perMessageDef = opts.perMessageDef;
    this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
    this.protocols = opts.protocols;

    if (!this.usingBrowserWebSocket) {
      WebSocketImpl = NodeWebSocket;
    }

    Transport.call(this, opts);
  }

  inherit(WS, Transport);
  WS.prototype.name = 'websocket';
  WS.prototype.supportsBinary = true;

  WS.prototype.doOpen = function () {
    if (!this.check()) {
      return;
    }

    var uri = this.uri();
    var protocols = this.protocols;
    var opts = {};

    if (!this.isReactNative) {
      opts.agent = this.agent;
      opts.perMessageDef = this.perMessageDef;
      opts.pfx = this.pfx;
      opts.key = this.key;
      opts.passphrase = this.passphrase;
      opts.cert = this.cert;
      opts.ca = this.ca;
      opts.ciphers = this.ciphers;
      opts.rejectUnauthorized = this.rejectUnauthorized;
    }

    if (this.extraHeaders) {
      opts.headers = this.extraHeaders;
    }

    if (this.localAddress) {
      opts.localAddress = this.localAddress;
    }

    try {
      this.ws = this.usingBrowserWebSocket && !this.isReactNative ? protocols ? new WebSocketImpl(uri, protocols) : new WebSocketImpl(uri) : new WebSocketImpl(uri, protocols, opts);
    } catch (err) {
      return this.emit('error', err);
    }

    if (this.ws.binaryType === undefined) {
      this.supportsBinary = false;
    }

    if (this.ws.supports && this.ws.supports.binary) {
      this.supportsBinary = true;
      this.ws.binaryType = 'nodebuffer';
    } else {
      this.ws.binaryType = 'arraybuffer';
    }

    this.addEventListeners();
  };

  WS.prototype.addEventListeners = function () {
    var self = this;

    this.ws.onopen = function () {
      self.onOpen();
    };

    this.ws.onclose = function () {
      self.onClose();
    };

    this.ws.onmessage = function (ev) {
      self.onData(ev.data);
    };

    this.ws.onerror = function (e) {
      self.onError('websocket error', e);
    };
  };

  WS.prototype.write = function (packets) {
    var self = this;
    this.writable = false;
    var total = packets.length;

    for (var i = 0, l = total; i < l; i++) {
      (function (packet) {
        parser.encodePacket(packet, self.supportsBinary, function (data) {
          if (!self.usingBrowserWebSocket) {
            var opts = {};

            if (packet.options) {
              opts.compress = packet.options.compress;
            }

            if (self.perMessageDef) {
              var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;

              if (len < self.perMessageDef.threshold) {
                opts.compress = false;
              }
            }
          }

          try {
            if (self.usingBrowserWebSocket) {
              self.ws.send(data);
            } else {
              self.ws.send(data, opts);
            }
          } catch (e) {
            debug('websocket closed before onclose event');
          }

          --total || done();
        });
      })(packets[i]);
    }

    function done() {
      self.emit('flush');
      setTimeout(function () {
        self.writable = true;
        self.emit('drain');
      }, 0);
    }
  };

  WS.prototype.onClose = function () {
    Transport.prototype.onClose.call(this);
  };

  WS.prototype.doClose = function () {
    if (typeof this.ws !== 'undefined') {
      this.ws.close();
    }
  };

  WS.prototype.uri = function () {
    var query = this.query || {};
    var schema = this.secure ? 'wss' : 'ws';
    var port = '';

    if (this.port && ('wss' === schema && Number(this.port) !== 443 || 'ws' === schema && Number(this.port) !== 80)) {
      port = ':' + this.port;
    }

    if (this.timestampRequests) {
      query[this.timestampParam] = yeast();
    }

    if (!this.supportsBinary) {
      query.b64 = 1;
    }

    query = parseqs.encode(query);

    if (query.length) {
      query = '?' + query;
    }

    var ipv6 = this.hostname.indexOf(':') !== -1;
    return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
  };

  WS.prototype.check = function () {
    return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
  };
},422,[405,406,412,413,414,415,423]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const WebSocket = _$$_REQUIRE(_dependencyMap[0]);

  WebSocket.Server = _$$_REQUIRE(_dependencyMap[1]);
  WebSocket.Receiver = _$$_REQUIRE(_dependencyMap[2]);
  WebSocket.Sender = _$$_REQUIRE(_dependencyMap[3]);
  module.exports = WebSocket;
},423,[424,434,431,433]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const EventEmitter = _$$_REQUIRE(_dependencyMap[0]);

  const crypto = _$$_REQUIRE(_dependencyMap[1]);

  const https = _$$_REQUIRE(_dependencyMap[2]);

  const http = _$$_REQUIRE(_dependencyMap[3]);

  const net = _$$_REQUIRE(_dependencyMap[4]);

  const tls = _$$_REQUIRE(_dependencyMap[5]);

  const url = _$$_REQUIRE(_dependencyMap[6]);

  const PerMessageDef = _$$_REQUIRE(_dependencyMap[7]);

  const EventTarget = _$$_REQUIRE(_dependencyMap[8]);

  const extension = _$$_REQUIRE(_dependencyMap[9]);

  const constants = _$$_REQUIRE(_dependencyMap[10]);

  const Receiver = _$$_REQUIRE(_dependencyMap[11]);

  const Sender = _$$_REQUIRE(_dependencyMap[12]);

  const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
  const kWebSocket = constants.kWebSocket;
  const protocolVersions = [8, 13];
  const closeTimeout = 30000;

  class WebSocket extends EventEmitter {
    constructor(address, protocols, options) {
      super();
      this.readyState = WebSocket.CONNECTING;
      this.protocol = '';
      this._binaryType = constants.BINARY_TYPES[0];
      this._closeFrameReceived = false;
      this._closeFrameSent = false;
      this._closeMessage = '';
      this._closeTimer = null;
      this._closeCode = 1006;
      this._extensions = {};
      this._isServer = true;
      this._receiver = null;
      this._sender = null;
      this._socket = null;

      if (address !== null) {
        if (Array.isArray(protocols)) {
          protocols = protocols.join(', ');
        } else if (typeof protocols === 'object' && protocols !== null) {
          options = protocols;
          protocols = undefined;
        }

        initAsClient.call(this, address, protocols, options);
      }
    }

    get CONNECTING() {
      return WebSocket.CONNECTING;
    }

    get CLOSING() {
      return WebSocket.CLOSING;
    }

    get CLOSED() {
      return WebSocket.CLOSED;
    }

    get OPEN() {
      return WebSocket.OPEN;
    }

    get binaryType() {
      return this._binaryType;
    }

    set binaryType(type) {
      if (!constants.BINARY_TYPES.includes(type)) return;
      this._binaryType = type;
      if (this._receiver) this._receiver._binaryType = type;
    }

    get bufferedAmount() {
      if (!this._socket) return 0;
      return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;
    }

    get extensions() {
      return Object.keys(this._extensions).join();
    }

    setSocket(socket, head, maxPayload) {
      const receiver = new Receiver(this._binaryType, this._extensions, maxPayload);
      this._sender = new Sender(socket, this._extensions);
      this._receiver = receiver;
      this._socket = socket;
      receiver[kWebSocket] = this;
      socket[kWebSocket] = this;
      receiver.on('conclude', receiverOnConclude);
      receiver.on('drain', receiverOnDrain);
      receiver.on('error', receiverOnError);
      receiver.on('message', receiverOnMessage);
      receiver.on('ping', receiverOnPing);
      receiver.on('pong', receiverOnPong);
      socket.setTimeout(0);
      socket.setNoDelay();
      if (head.length > 0) socket.unshift(head);
      socket.on('close', socketOnClose);
      socket.on('data', socketOnData);
      socket.on('end', socketOnEnd);
      socket.on('error', socketOnError);
      this.readyState = WebSocket.OPEN;
      this.emit('open');
    }

    emitClose() {
      this.readyState = WebSocket.CLOSED;

      if (!this._socket) {
        this.emit('close', this._closeCode, this._closeMessage);
        return;
      }

      if (this._extensions[PerMessageDef.extensionName]) {
        this._extensions[PerMessageDef.extensionName].cleanup();
      }

      this._receiver.removeAllListeners();

      this.emit('close', this._closeCode, this._closeMessage);
    }

    close(code, data) {
      if (this.readyState === WebSocket.CLOSED) return;

      if (this.readyState === WebSocket.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake(this, this._req, msg);
      }

      if (this.readyState === WebSocket.CLOSING) {
        if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();
        return;
      }

      this.readyState = WebSocket.CLOSING;

      this._sender.close(code, data, !this._isServer, err => {
        if (err) return;
        this._closeFrameSent = true;

        if (this._socket.writable) {
          if (this._closeFrameReceived) this._socket.end();
          this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);
        }
      });
    }

    ping(data, mask, cb) {
      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (this.readyState !== WebSocket.OPEN) {
        const err = new Error(`WebSocket is not open: readyState ${this.readyState} ` + `(${readyStates[this.readyState]})`);
        if (cb) return cb(err);
        throw err;
      }

      if (typeof data === 'number') data = data.toString();
      if (mask === undefined) mask = !this._isServer;

      this._sender.ping(data || constants.EMPTY_BUFFER, mask, cb);
    }

    pong(data, mask, cb) {
      if (typeof data === 'function') {
        cb = data;
        data = mask = undefined;
      } else if (typeof mask === 'function') {
        cb = mask;
        mask = undefined;
      }

      if (this.readyState !== WebSocket.OPEN) {
        const err = new Error(`WebSocket is not open: readyState ${this.readyState} ` + `(${readyStates[this.readyState]})`);
        if (cb) return cb(err);
        throw err;
      }

      if (typeof data === 'number') data = data.toString();
      if (mask === undefined) mask = !this._isServer;

      this._sender.pong(data || constants.EMPTY_BUFFER, mask, cb);
    }

    send(data, options, cb) {
      if (typeof options === 'function') {
        cb = options;
        options = {};
      }

      if (this.readyState !== WebSocket.OPEN) {
        const err = new Error(`WebSocket is not open: readyState ${this.readyState} ` + `(${readyStates[this.readyState]})`);
        if (cb) return cb(err);
        throw err;
      }

      if (typeof data === 'number') data = data.toString();
      const opts = Object.assign({
        binary: typeof data !== 'string',
        mask: !this._isServer,
        compress: true,
        fin: true
      }, options);

      if (!this._extensions[PerMessageDef.extensionName]) {
        opts.compress = false;
      }

      this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);
    }

    terminate() {
      if (this.readyState === WebSocket.CLOSED) return;

      if (this.readyState === WebSocket.CONNECTING) {
        const msg = 'WebSocket was closed before the connection was established';
        return abortHandshake(this, this._req, msg);
      }

      if (this._socket) {
        this.readyState = WebSocket.CLOSING;

        this._socket.destroy();
      }
    }

  }

  readyStates.forEach((readyState, i) => {
    WebSocket[readyState] = i;
  });
  ['open', 'error', 'close', 'message'].forEach(method => {
    Object.defineProperty(WebSocket.prototype, `on${method}`, {
      get() {
        const listeners = this.listeners(method);

        for (var i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener) return listeners[i]._listener;
        }

        return undefined;
      },

      set(listener) {
        const listeners = this.listeners(method);

        for (var i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener) this.removeListener(method, listeners[i]);
        }

        this.addEventListener(method, listener);
      }

    });
  });
  WebSocket.prototype.addEventListener = EventTarget.addEventListener;
  WebSocket.prototype.removeEventListener = EventTarget.removeEventListener;
  module.exports = WebSocket;

  function initAsClient(address, protocols, options) {
    options = Object.assign({
      protocolVersion: protocolVersions[1],
      perMessageDef: true,
      maxPayload: 104857600
    }, options, {
      createConnection: undefined,
      socketPath: undefined,
      hostname: undefined,
      protocol: undefined,
      timeout: undefined,
      method: undefined,
      auth: undefined,
      host: undefined,
      path: undefined,
      port: undefined
    });

    if (!protocolVersions.includes(options.protocolVersion)) {
      throw new RangeError(`Unsupported protocol version: ${options.protocolVersion} ` + `(supported versions: ${protocolVersions.join(', ')})`);
    }

    this._isServer = false;
    var parsedUrl;

    if (typeof address === 'object' && address.href !== undefined) {
      parsedUrl = address;
      this.url = address.href;
    } else {
      parsedUrl = url.URL ? new url.URL(address) : url.parse(address);
      this.url = address;
    }

    const isUnixSocket = parsedUrl.protocol === 'ws+unix:';

    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
      throw new Error(`Invalid URL: ${this.url}`);
    }

    const isSecure = parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
    const defaultPort = isSecure ? 443 : 80;
    const key = crypto.randomBytes(16).toString('base64');
    const httpObj = isSecure ? https : http;
    const path = parsedUrl.search ? `${parsedUrl.pathname || '/'}${parsedUrl.search}` : parsedUrl.pathname || '/';
    var perMessageDef;
    options.createConnection = isSecure ? tlsConnect : netConnect;
    options.defaultPort = options.defaultPort || defaultPort;
    options.port = parsedUrl.port || defaultPort;
    options.host = parsedUrl.hostname.startsWith('[') ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
    options.headers = Object.assign({
      'Sec-WebSocket-Version': options.protocolVersion,
      'Sec-WebSocket-Key': key,
      Connection: 'Upgrade',
      Upgrade: 'websocket'
    }, options.headers);
    options.path = path;
    options.timeout = options.handshakeTimeout;

    if (options.perMessageDef) {
      perMessageDef = new PerMessageDef(options.perMessageDef !== true ? options.perMessageDef : {}, false, options.maxPayload);
      options.headers['Sec-WebSocket-Extensions'] = extension.format({
        [PerMessageDef.extensionName]: perMessageDef.offer()
      });
    }

    if (protocols) {
      options.headers['Sec-WebSocket-Protocol'] = protocols;
    }

    if (options.origin) {
      if (options.protocolVersion < 13) {
        options.headers['Sec-WebSocket-Origin'] = options.origin;
      } else {
        options.headers.Origin = options.origin;
      }
    }

    if (parsedUrl.auth) {
      options.auth = parsedUrl.auth;
    } else if (parsedUrl.username || parsedUrl.password) {
      options.auth = `${parsedUrl.username}:${parsedUrl.password}`;
    }

    if (isUnixSocket) {
      const parts = path.split(':');
      options.socketPath = parts[0];
      options.path = parts[1];
    }

    var req = this._req = httpObj.get(options);

    if (options.handshakeTimeout) {
      req.on('timeout', () => {
        abortHandshake(this, req, 'Opening handshake has timed out');
      });
    }

    req.on('error', err => {
      if (this._req.aborted) return;
      req = this._req = null;
      this.readyState = WebSocket.CLOSING;
      this.emit('error', err);
      this.emitClose();
    });
    req.on('response', res => {
      if (this.emit('unexpected-response', req, res)) return;
      abortHandshake(this, req, `Unexpected server response: ${res.statusCode}`);
    });
    req.on('upgrade', (res, socket, head) => {
      this.emit('upgrade', res);
      if (this.readyState !== WebSocket.CONNECTING) return;
      req = this._req = null;
      const digest = crypto.createHash('sha1').update(key + constants.GUID, 'binary').digest('base64');

      if (res.headers['sec-websocket-accept'] !== digest) {
        abortHandshake(this, socket, 'Invalid Sec-WebSocket-Accept header');
        return;
      }

      const serverProt = res.headers['sec-websocket-protocol'];
      const protList = (protocols || '').split(/, */);
      var protError;

      if (!protocols && serverProt) {
        protError = 'Server sent a subprotocol but none was requested';
      } else if (protocols && !serverProt) {
        protError = 'Server sent no subprotocol';
      } else if (serverProt && !protList.includes(serverProt)) {
        protError = 'Server sent an invalid subprotocol';
      }

      if (protError) {
        abortHandshake(this, socket, protError);
        return;
      }

      if (serverProt) this.protocol = serverProt;

      if (perMessageDef) {
        try {
          const extensions = extension.parse(res.headers['sec-websocket-extensions']);

          if (extensions[PerMessageDef.extensionName]) {
            perMessageDef.accept(extensions[PerMessageDef.extensionName]);
            this._extensions[PerMessageDef.extensionName] = perMessageDef;
          }
        } catch (err) {
          abortHandshake(this, socket, 'Invalid Sec-WebSocket-Extensions header');
          return;
        }
      }

      this.setSocket(socket, head, options.maxPayload);
    });
  }

  function netConnect(options) {
    if (options.protocolVersion) options.path = options.socketPath;
    return net.connect(options);
  }

  function tlsConnect(options) {
    options.path = undefined;
    options.servername = options.servername || options.host;
    return tls.connect(options);
  }

  function abortHandshake(websocket, stream, message) {
    websocket.readyState = WebSocket.CLOSING;
    const err = new Error(message);
    Error.captureStackTrace(err, abortHandshake);

    if (stream.setHeader) {
      stream.abort();
      stream.once('abort', websocket.emitClose.bind(websocket));
      websocket.emit('error', err);
    } else {
      stream.destroy(err);
      stream.once('error', websocket.emit.bind(websocket, 'error'));
      stream.once('close', websocket.emitClose.bind(websocket));
    }
  }

  function receiverOnConclude(code, reason) {
    const websocket = this[kWebSocket];

    websocket._socket.removeListener('data', socketOnData);

    websocket._socket.resume();

    websocket._closeFrameReceived = true;
    websocket._closeMessage = reason;
    websocket._closeCode = code;
    if (code === 1005) websocket.close();else websocket.close(code, reason);
  }

  function receiverOnDrain() {
    this[kWebSocket]._socket.resume();
  }

  function receiverOnError(err) {
    const websocket = this[kWebSocket];

    websocket._socket.removeListener('data', socketOnData);

    websocket.readyState = WebSocket.CLOSING;
    websocket._closeCode = err[constants.kStatusCode];
    websocket.emit('error', err);

    websocket._socket.destroy();
  }

  function receiverOnFinish() {
    this[kWebSocket].emitClose();
  }

  function receiverOnMessage(data) {
    this[kWebSocket].emit('message', data);
  }

  function receiverOnPing(data) {
    const websocket = this[kWebSocket];
    websocket.pong(data, !websocket._isServer, constants.NOOP);
    websocket.emit('ping', data);
  }

  function receiverOnPong(data) {
    this[kWebSocket].emit('pong', data);
  }

  function socketOnClose() {
    const websocket = this[kWebSocket];
    this.removeListener('close', socketOnClose);
    this.removeListener('end', socketOnEnd);
    websocket.readyState = WebSocket.CLOSING;

    websocket._socket.read();

    websocket._receiver.end();

    this.removeListener('data', socketOnData);
    this[kWebSocket] = undefined;
    clearTimeout(websocket._closeTimer);

    if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
      websocket.emitClose();
    } else {
      websocket._receiver.on('error', receiverOnFinish);

      websocket._receiver.on('finish', receiverOnFinish);
    }
  }

  function socketOnData(chunk) {
    if (!this[kWebSocket]._receiver.write(chunk)) {
      this.pause();
    }
  }

  function socketOnEnd() {
    const websocket = this[kWebSocket];
    websocket.readyState = WebSocket.CLOSING;

    websocket._receiver.end();

    this.end();
  }

  function socketOnError() {
    const websocket = this[kWebSocket];
    this.removeListener('error', socketOnError);
    this.on('error', constants.NOOP);

    if (websocket) {
      websocket.readyState = WebSocket.CLOSING;
      this.destroy();
    }
  }
},424,[2,90,170,169,182,183,172,425,429,430,428,431,433]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const Limiter = _$$_REQUIRE(_dependencyMap[0]);

  const zlib = _$$_REQUIRE(_dependencyMap[1]);

  const bufferUtil = _$$_REQUIRE(_dependencyMap[2]);

  const {
    kStatusCode,
    NOOP
  } = _$$_REQUIRE(_dependencyMap[3]);

  const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
  const EMPTY_BLOCK = Buffer.from([0x00]);
  const kPerMessageDef = Symbol('permessage-def');
  const kTotalLength = Symbol('total-length');
  const kCallback = Symbol('callback');
  const kBuffers = Symbol('buffers');
  const kError = Symbol('error');
  let zlibLimiter;

  class PerMessageDef {
    constructor(options, isServer, maxPayload) {
      this._maxPayload = maxPayload | 0;
      this._options = options || {};
      this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;
      this._isServer = !!isServer;
      this._def = null;
      this._inf = null;
      this.params = null;

      if (!zlibLimiter) {
        const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;
        zlibLimiter = new Limiter({
          concurrency
        });
      }
    }

    static get extensionName() {
      return 'permessage-def';
    }

    offer() {
      const params = {};

      if (this._options.serverNoContextTakeover) {
        params.server_no_context_takeover = true;
      }

      if (this._options.clientNoContextTakeover) {
        params.client_no_context_takeover = true;
      }

      if (this._options.serverMaxWindowBits) {
        params.server_max_window_bits = this._options.serverMaxWindowBits;
      }

      if (this._options.clientMaxWindowBits) {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      } else if (this._options.clientMaxWindowBits == null) {
        params.client_max_window_bits = true;
      }

      return params;
    }

    accept(configurations) {
      configurations = this.normalizeParams(configurations);
      this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
      return this.params;
    }

    cleanup() {
      if (this._inf) {
        this._inf.close();

        this._inf = null;
      }

      if (this._def) {
        this._def.close();

        this._def = null;
      }
    }

    acceptAsServer(offers) {
      const opts = this._options;
      const accepted = offers.find(params => {
        if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === 'number' && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {
          return false;
        }

        return true;
      });

      if (!accepted) {
        throw new Error('None of the extension offers can be accepted');
      }

      if (opts.serverNoContextTakeover) {
        accepted.server_no_context_takeover = true;
      }

      if (opts.clientNoContextTakeover) {
        accepted.client_no_context_takeover = true;
      }

      if (typeof opts.serverMaxWindowBits === 'number') {
        accepted.server_max_window_bits = opts.serverMaxWindowBits;
      }

      if (typeof opts.clientMaxWindowBits === 'number') {
        accepted.client_max_window_bits = opts.clientMaxWindowBits;
      } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
        delete accepted.client_max_window_bits;
      }

      return accepted;
    }

    acceptAsClient(response) {
      const params = response[0];

      if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
        throw new Error('Unexpected parameter "client_no_context_takeover"');
      }

      if (!params.client_max_window_bits) {
        if (typeof this._options.clientMaxWindowBits === 'number') {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        }
      } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === 'number' && params.client_max_window_bits > this._options.clientMaxWindowBits) {
        throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
      }

      return params;
    }

    normalizeParams(configurations) {
      configurations.forEach(params => {
        Object.keys(params).forEach(key => {
          var value = params[key];

          if (value.length > 1) {
            throw new Error(`Parameter "${key}" must have only a single value`);
          }

          value = value[0];

          if (key === 'client_max_window_bits') {
            if (value !== true) {
              const num = +value;

              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }

              value = num;
            } else if (!this._isServer) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
          } else if (key === 'server_max_window_bits') {
            const num = +value;

            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }

            value = num;
          } else if (key === 'client_no_context_takeover' || key === 'server_no_context_takeover') {
            if (value !== true) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
          } else {
            throw new Error(`Unknown parameter "${key}"`);
          }

          params[key] = value;
        });
      });
      return configurations;
    }

    decompress(data, fin, callback) {
      zlibLimiter.push(done => {
        this._decompress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    compress(data, fin, callback) {
      zlibLimiter.push(done => {
        this._compress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }

    _decompress(data, fin, callback) {
      const endpoint = this._isServer ? 'client' : 'server';

      if (!this._inf) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
        this._inf = zlib.createInfRaw(Object.assign({}, this._options.zlibInfOptions, {
          windowBits
        }));
        this._inf[kPerMessageDef] = this;
        this._inf[kTotalLength] = 0;
        this._inf[kBuffers] = [];

        this._inf.on('error', infOnError);

        this._inf.on('data', infOnData);
      }

      this._inf[kCallback] = callback;

      this._inf.write(data);

      if (fin) this._inf.write(TRAILER);

      this._inf.flush(() => {
        const err = this._inf[kError];

        if (err) {
          this._inf.close();

          this._inf = null;
          callback(err);
          return;
        }

        const data = bufferUtil.concat(this._inf[kBuffers], this._inf[kTotalLength]);

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._inf.close();

          this._inf = null;
        } else {
          this._inf[kTotalLength] = 0;
          this._inf[kBuffers] = [];
        }

        callback(null, data);
      });
    }

    _compress(data, fin, callback) {
      if (!data || data.length === 0) {
        process.nextTick(callback, null, EMPTY_BLOCK);
        return;
      }

      const endpoint = this._isServer ? 'server' : 'client';

      if (!this._def) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
        this._def = zlib.createDefRaw(Object.assign({}, this._options.zlibDefOptions, {
          windowBits
        }));
        this._def[kTotalLength] = 0;
        this._def[kBuffers] = [];

        this._def.on('error', NOOP);

        this._def.on('data', defOnData);
      }

      this._def.write(data);

      this._def.flush(zlib.Z_SYNC_FLUSH, () => {
        if (!this._def) {
          return;
        }

        var data = bufferUtil.concat(this._def[kBuffers], this._def[kTotalLength]);
        if (fin) data = data.slice(0, data.length - 4);

        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._def.close();

          this._def = null;
        } else {
          this._def[kTotalLength] = 0;
          this._def[kBuffers] = [];
        }

        callback(null, data);
      });
    }

  }

  module.exports = PerMessageDef;

  function defOnData(chunk) {
    this[kBuffers].push(chunk);
    this[kTotalLength] += chunk.length;
  }

  function infOnData(chunk) {
    this[kTotalLength] += chunk.length;

    if (this[kPerMessageDef]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDef]._maxPayload) {
      this[kBuffers].push(chunk);
      return;
    }

    this[kError] = new RangeError('Max payload size exceeded');
    this[kError][kStatusCode] = 1009;
    this.removeListener('data', infOnData);
    this.reset();
  }

  function infOnError(err) {
    this[kPerMessageDef]._inf = null;
    err[kStatusCode] = 1007;
    this[kCallback](err);
  }
},425,[426,171,427,428]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function Queue(options) {
    if (!(this instanceof Queue)) {
      return new Queue(options);
    }

    options = options || {};
    this.concurrency = options.concurrency || Infinity;
    this.pending = 0;
    this.jobs = [];
    this.cbs = [];
    this._done = done.bind(this);
  }

  var arrayAddMethods = ['push', 'unshift', 'splice'];
  arrayAddMethods.forEach(function (method) {
    Queue.prototype[method] = function () {
      var methodResult = Array.prototype[method].apply(this.jobs, arguments);

      this._run();

      return methodResult;
    };
  });
  Object.defineProperty(Queue.prototype, 'length', {
    get: function () {
      return this.pending + this.jobs.length;
    }
  });

  Queue.prototype._run = function () {
    if (this.pending === this.concurrency) {
      return;
    }

    if (this.jobs.length) {
      var job = this.jobs.shift();
      this.pending++;
      job(this._done);

      this._run();
    }

    if (this.pending === 0) {
      while (this.cbs.length !== 0) {
        var cb = this.cbs.pop();
        process.nextTick(cb);
      }
    }
  };

  Queue.prototype.onDone = function (cb) {
    if (typeof cb === 'function') {
      this.cbs.push(cb);

      this._run();
    }
  };

  function done() {
    this.pending--;

    this._run();
  }

  module.exports = Queue;
},426,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  function concat(list, totalLength) {
    const target = Buffer.allocUnsafe(totalLength);
    var offset = 0;

    for (var i = 0; i < list.length; i++) {
      const buf = list[i];
      buf.copy(target, offset);
      offset += buf.length;
    }

    return target;
  }

  function _mask(source, mask, output, offset, length) {
    for (var i = 0; i < length; i++) {
      output[offset + i] = source[i] ^ mask[i & 3];
    }
  }

  function _unmask(buffer, mask) {
    const length = buffer.length;

    for (var i = 0; i < length; i++) {
      buffer[i] ^= mask[i & 3];
    }
  }

  try {
    const bufferUtil = _$$_REQUIRE(_dependencyMap[0]);

    const bu = bufferUtil.BufferUtil || bufferUtil;
    module.exports = {
      mask(source, mask, output, offset, length) {
        if (length < 48) _mask(source, mask, output, offset, length);else bu.mask(source, mask, output, offset, length);
      },

      unmask(buffer, mask) {
        if (buffer.length < 32) _unmask(buffer, mask);else bu.unmask(buffer, mask);
      },

      concat
    };
  } catch (e) {
    module.exports = {
      concat,
      mask: _mask,
      unmask: _unmask
    };
  }
},427,[187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  module.exports = {
    BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
    GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
    kStatusCode: Symbol('status-code'),
    kWebSocket: Symbol('websocket'),
    EMPTY_BUFFER: Buffer.alloc(0),
    NOOP: () => {}
  };
},428,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  class Event {
    constructor(type, target) {
      this.target = target;
      this.type = type;
    }

  }

  class MessageEvent extends Event {
    constructor(data, target) {
      super('message', target);
      this.data = data;
    }

  }

  class CloseEvent extends Event {
    constructor(code, reason, target) {
      super('close', target);
      this.wasClean = target._closeFrameReceived && target._closeFrameSent;
      this.reason = reason;
      this.code = code;
    }

  }

  class OpenEvent extends Event {
    constructor(target) {
      super('open', target);
    }

  }

  class ErrorEvent extends Event {
    constructor(error, target) {
      super('error', target);
      this.message = error.message;
      this.error = error;
    }

  }

  const EventTarget = {
    addEventListener(method, listener) {
      if (typeof listener !== 'function') return;

      function onMessage(data) {
        listener.call(this, new MessageEvent(data, this));
      }

      function onClose(code, message) {
        listener.call(this, new CloseEvent(code, message, this));
      }

      function onError(error) {
        listener.call(this, new ErrorEvent(error, this));
      }

      function onOpen() {
        listener.call(this, new OpenEvent(this));
      }

      if (method === 'message') {
        onMessage._listener = listener;
        this.on(method, onMessage);
      } else if (method === 'close') {
        onClose._listener = listener;
        this.on(method, onClose);
      } else if (method === 'error') {
        onError._listener = listener;
        this.on(method, onError);
      } else if (method === 'open') {
        onOpen._listener = listener;
        this.on(method, onOpen);
      } else {
        this.on(method, listener);
      }
    },

    removeEventListener(method, listener) {
      const listeners = this.listeners(method);

      for (var i = 0; i < listeners.length; i++) {
        if (listeners[i] === listener || listeners[i]._listener === listener) {
          this.removeListener(method, listeners[i]);
        }
      }
    }

  };
  module.exports = EventTarget;
},429,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const tokenChars = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0];

  function push(dest, name, elem) {
    if (Object.prototype.hasOwnProperty.call(dest, name)) dest[name].push(elem);else dest[name] = [elem];
  }

  function parse(header) {
    const offers = {};
    if (header === undefined || header === '') return offers;
    var params = {};
    var mustUnescape = false;
    var isEscaping = false;
    var inQuotes = false;
    var extensionName;
    var paramName;
    var start = -1;
    var end = -1;

    for (var i = 0; i < header.length; i++) {
      const code = header.charCodeAt(i);

      if (extensionName === undefined) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 || code === 0x09) {
            if (end === -1 && start !== -1) end = i;
          } else if (code === 0x3b || code === 0x2c) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }

            if (end === -1) end = i;
            const name = header.slice(start, end);

            if (code === 0x2c) {
              push(offers, name, params);
              params = {};
            } else {
              extensionName = name;
            }

            start = end = -1;
          } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (paramName === undefined) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x20 || code === 0x09) {
          if (end === -1 && start !== -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          push(params, header.slice(start, end), true);

          if (code === 0x2c) {
            push(offers, extensionName, params);
            params = {};
            extensionName = undefined;
          }

          start = end = -1;
        } else if (code === 0x3d && start !== -1 && end === -1) {
          paramName = header.slice(start, i);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else {
        if (isEscaping) {
          if (tokenChars[code] !== 1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (start === -1) start = i;else if (!mustUnescape) mustUnescape = true;
          isEscaping = false;
        } else if (inQuotes) {
          if (tokenChars[code] === 1) {
            if (start === -1) start = i;
          } else if (code === 0x22 && start !== -1) {
            inQuotes = false;
            end = i;
          } else if (code === 0x5c) {
              isEscaping = true;
            } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
          inQuotes = true;
        } else if (end === -1 && tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
          if (end === -1) end = i;
        } else if (code === 0x3b || code === 0x2c) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }

          if (end === -1) end = i;
          var value = header.slice(start, end);

          if (mustUnescape) {
            value = value.replace(/\\/g, '');
            mustUnescape = false;
          }

          push(params, paramName, value);

          if (code === 0x2c) {
            push(offers, extensionName, params);
            params = {};
            extensionName = undefined;
          }

          paramName = undefined;
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
    }

    if (start === -1 || inQuotes) {
      throw new SyntaxError('Unexpected end of input');
    }

    if (end === -1) end = i;
    const token = header.slice(start, end);

    if (extensionName === undefined) {
      push(offers, token, {});
    } else {
      if (paramName === undefined) {
        push(params, token, true);
      } else if (mustUnescape) {
        push(params, paramName, token.replace(/\\/g, ''));
      } else {
        push(params, paramName, token);
      }

      push(offers, extensionName, params);
    }

    return offers;
  }

  function format(extensions) {
    return Object.keys(extensions).map(extension => {
      var configurations = extensions[extension];
      if (!Array.isArray(configurations)) configurations = [configurations];
      return configurations.map(params => {
        return [extension].concat(Object.keys(params).map(k => {
          var values = params[k];
          if (!Array.isArray(values)) values = [values];
          return values.map(v => v === true ? k : `${k}=${v}`).join('; ');
        })).join('; ');
      }).join(', ');
    }).join(', ');
  }

  module.exports = {
    format,
    parse
  };
},430,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const stream = _$$_REQUIRE(_dependencyMap[0]);

  const PerMessageDef = _$$_REQUIRE(_dependencyMap[1]);

  const bufferUtil = _$$_REQUIRE(_dependencyMap[2]);

  const validation = _$$_REQUIRE(_dependencyMap[3]);

  const constants = _$$_REQUIRE(_dependencyMap[4]);

  const GET_INFO = 0;
  const GET_PAYLOAD_LENGTH_16 = 1;
  const GET_PAYLOAD_LENGTH_64 = 2;
  const GET_MASK = 3;
  const GET_DATA = 4;
  const INFLATING = 5;

  class Receiver extends stream.Writable {
    constructor(binaryType, extensions, maxPayload) {
      super();
      this._binaryType = binaryType || constants.BINARY_TYPES[0];
      this[constants.kWebSocket] = undefined;
      this._extensions = extensions || {};
      this._maxPayload = maxPayload | 0;
      this._bufferedBytes = 0;
      this._buffers = [];
      this._compressed = false;
      this._payloadLength = 0;
      this._mask = undefined;
      this._fragmented = 0;
      this._masked = false;
      this._fin = false;
      this._opcode = 0;
      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragments = [];
      this._state = GET_INFO;
      this._loop = false;
    }

    _write(chunk, encoding, cb) {
      if (this._opcode === 0x08 && this._state == GET_INFO) return cb();
      this._bufferedBytes += chunk.length;

      this._buffers.push(chunk);

      this.startLoop(cb);
    }

    consume(n) {
      this._bufferedBytes -= n;
      if (n === this._buffers[0].length) return this._buffers.shift();

      if (n < this._buffers[0].length) {
        const buf = this._buffers[0];
        this._buffers[0] = buf.slice(n);
        return buf.slice(0, n);
      }

      const dst = Buffer.allocUnsafe(n);

      do {
        const buf = this._buffers[0];

        if (n >= buf.length) {
          this._buffers.shift().copy(dst, dst.length - n);
        } else {
          buf.copy(dst, dst.length - n, 0, n);
          this._buffers[0] = buf.slice(n);
        }

        n -= buf.length;
      } while (n > 0);

      return dst;
    }

    startLoop(cb) {
      var err;
      this._loop = true;

      do {
        switch (this._state) {
          case GET_INFO:
            err = this.getInfo();
            break;

          case GET_PAYLOAD_LENGTH_16:
            err = this.getPayloadLength16();
            break;

          case GET_PAYLOAD_LENGTH_64:
            err = this.getPayloadLength64();
            break;

          case GET_MASK:
            this.getMask();
            break;

          case GET_DATA:
            err = this.getData(cb);
            break;

          default:
            this._loop = false;
            return;
        }
      } while (this._loop);

      cb(err);
    }

    getInfo() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      const buf = this.consume(2);

      if ((buf[0] & 0x30) !== 0x00) {
        this._loop = false;
        return error(RangeError, 'RSV2 and RSV3 must be clear', true, 1002);
      }

      const compressed = (buf[0] & 0x40) === 0x40;

      if (compressed && !this._extensions[PerMessageDef.extensionName]) {
        this._loop = false;
        return error(RangeError, 'RSV1 must be clear', true, 1002);
      }

      this._fin = (buf[0] & 0x80) === 0x80;
      this._opcode = buf[0] & 0x0f;
      this._payloadLength = buf[1] & 0x7f;

      if (this._opcode === 0x00) {
        if (compressed) {
          this._loop = false;
          return error(RangeError, 'RSV1 must be clear', true, 1002);
        }

        if (!this._fragmented) {
          this._loop = false;
          return error(RangeError, 'invalid opcode 0', true, 1002);
        }

        this._opcode = this._fragmented;
      } else if (this._opcode === 0x01 || this._opcode === 0x02) {
        if (this._fragmented) {
          this._loop = false;
          return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
        }

        this._compressed = compressed;
      } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
        if (!this._fin) {
          this._loop = false;
          return error(RangeError, 'FIN must be set', true, 1002);
        }

        if (compressed) {
          this._loop = false;
          return error(RangeError, 'RSV1 must be clear', true, 1002);
        }

        if (this._payloadLength > 0x7d) {
          this._loop = false;
          return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002);
        }
      } else {
        this._loop = false;
        return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
      }

      if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
      this._masked = (buf[1] & 0x80) === 0x80;
      if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;else return this.haveLength();
    }

    getPayloadLength16() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }

      this._payloadLength = this.consume(2).readUInt16BE(0);
      return this.haveLength();
    }

    getPayloadLength64() {
      if (this._bufferedBytes < 8) {
        this._loop = false;
        return;
      }

      const buf = this.consume(8);
      const num = buf.readUInt32BE(0);

      if (num > Math.pow(2, 21) - 1) {
        this._loop = false;
        return error(RangeError, 'Unsupported WebSocket frame: payload length > 2^53 - 1', false, 1009);
      }

      this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
      return this.haveLength();
    }

    haveLength() {
      if (this._payloadLength && this._opcode < 0x08) {
        this._totalPayloadLength += this._payloadLength;

        if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
          this._loop = false;
          return error(RangeError, 'Max payload size exceeded', false, 1009);
        }
      }

      if (this._masked) this._state = GET_MASK;else this._state = GET_DATA;
    }

    getMask() {
      if (this._bufferedBytes < 4) {
        this._loop = false;
        return;
      }

      this._mask = this.consume(4);
      this._state = GET_DATA;
    }

    getData(cb) {
      var data = constants.EMPTY_BUFFER;

      if (this._payloadLength) {
        if (this._bufferedBytes < this._payloadLength) {
          this._loop = false;
          return;
        }

        data = this.consume(this._payloadLength);
        if (this._masked) bufferUtil.unmask(data, this._mask);
      }

      if (this._opcode > 0x07) return this.controlMessage(data);

      if (this._compressed) {
        this._state = INFLATING;
        this.decompress(data, cb);
        return;
      }

      if (data.length) {
        this._messageLength = this._totalPayloadLength;

        this._fragments.push(data);
      }

      return this.dataMessage();
    }

    decompress(data, cb) {
      const perMessageDef = this._extensions[PerMessageDef.extensionName];
      perMessageDef.decompress(data, this._fin, (err, buf) => {
        if (err) return cb(err);

        if (buf.length) {
          this._messageLength += buf.length;

          if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
            return cb(error(RangeError, 'Max payload size exceeded', false, 1009));
          }

          this._fragments.push(buf);
        }

        const er = this.dataMessage();
        if (er) return cb(er);
        this.startLoop(cb);
      });
    }

    dataMessage() {
      if (this._fin) {
        const messageLength = this._messageLength;
        const fragments = this._fragments;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];

        if (this._opcode === 2) {
          var data;

          if (this._binaryType === 'nodebuffer') {
            data = toBuffer(fragments, messageLength);
          } else if (this._binaryType === 'arraybuffer') {
            data = toArrayBuffer(toBuffer(fragments, messageLength));
          } else {
            data = fragments;
          }

          this.emit('message', data);
        } else {
          const buf = toBuffer(fragments, messageLength);

          if (!validation.isValidUTF8(buf)) {
            this._loop = false;
            return error(Error, 'invalid UTF-8 sequence', true, 1007);
          }

          this.emit('message', buf.toString());
        }
      }

      this._state = GET_INFO;
    }

    controlMessage(data) {
      if (this._opcode === 0x08) {
        this._loop = false;

        if (data.length === 0) {
          this.emit('conclude', 1005, '');
          this.end();
        } else if (data.length === 1) {
          return error(RangeError, 'invalid payload length 1', true, 1002);
        } else {
          const code = data.readUInt16BE(0);

          if (!validation.isValidStatusCode(code)) {
            return error(RangeError, `invalid status code ${code}`, true, 1002);
          }

          const buf = data.slice(2);

          if (!validation.isValidUTF8(buf)) {
            return error(Error, 'invalid UTF-8 sequence', true, 1007);
          }

          this.emit('conclude', code, buf.toString());
          this.end();
        }
      } else if (this._opcode === 0x09) {
        this.emit('ping', data);
      } else {
        this.emit('pong', data);
      }

      this._state = GET_INFO;
    }

  }

  module.exports = Receiver;

  function error(ErrorCtor, message, prefix, statusCode) {
    const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);
    Error.captureStackTrace(err, error);
    err[constants.kStatusCode] = statusCode;
    return err;
  }

  function toBuffer(fragments, messageLength) {
    if (fragments.length === 1) return fragments[0];
    if (fragments.length > 1) return bufferUtil.concat(fragments, messageLength);
    return constants.EMPTY_BUFFER;
  }

  function toArrayBuffer(buf) {
    if (buf.byteLength === buf.buffer.byteLength) {
      return buf.buffer;
    }

    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  }
},431,[190,425,427,432,428]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  try {
    const isValidUTF8 = _$$_REQUIRE(_dependencyMap[0]);

    exports.isValidUTF8 = typeof isValidUTF8 === 'object' ? isValidUTF8.Validation.isValidUTF8 : isValidUTF8;
  } catch (e) {
    exports.isValidUTF8 = () => true;
  }

  exports.isValidStatusCode = code => {
    return code >= 1000 && code <= 1013 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;
  };
},432,[187]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const crypto = _$$_REQUIRE(_dependencyMap[0]);

  const PerMessageDef = _$$_REQUIRE(_dependencyMap[1]);

  const bufferUtil = _$$_REQUIRE(_dependencyMap[2]);

  const validation = _$$_REQUIRE(_dependencyMap[3]);

  const constants = _$$_REQUIRE(_dependencyMap[4]);

  class Sender {
    constructor(socket, extensions) {
      this._extensions = extensions || {};
      this._socket = socket;
      this._firstFragment = true;
      this._compress = false;
      this._bufferedBytes = 0;
      this._deflating = false;
      this._queue = [];
    }

    static frame(data, options) {
      const merge = data.length < 1024 || options.mask && options.readOnly;
      var offset = options.mask ? 6 : 2;
      var payloadLength = data.length;

      if (data.length >= 65536) {
        offset += 8;
        payloadLength = 127;
      } else if (data.length > 125) {
        offset += 2;
        payloadLength = 126;
      }

      const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);
      target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
      if (options.rsv1) target[0] |= 0x40;

      if (payloadLength === 126) {
        target.writeUInt16BE(data.length, 2);
      } else if (payloadLength === 127) {
        target.writeUInt32BE(0, 2);
        target.writeUInt32BE(data.length, 6);
      }

      if (!options.mask) {
        target[1] = payloadLength;

        if (merge) {
          data.copy(target, offset);
          return [target];
        }

        return [target, data];
      }

      const mask = crypto.randomBytes(4);
      target[1] = payloadLength | 0x80;
      target[offset - 4] = mask[0];
      target[offset - 3] = mask[1];
      target[offset - 2] = mask[2];
      target[offset - 1] = mask[3];

      if (merge) {
        bufferUtil.mask(data, mask, target, offset, data.length);
        return [target];
      }

      bufferUtil.mask(data, mask, data, 0, data.length);
      return [target, data];
    }

    close(code, data, mask, cb) {
      var buf;

      if (code === undefined) {
        buf = constants.EMPTY_BUFFER;
      } else if (typeof code !== 'number' || !validation.isValidStatusCode(code)) {
        throw new TypeError('First argument must be a valid error code number');
      } else if (data === undefined || data === '') {
        buf = Buffer.allocUnsafe(2);
        buf.writeUInt16BE(code, 0);
      } else {
        buf = Buffer.allocUnsafe(2 + Buffer.byteLength(data));
        buf.writeUInt16BE(code, 0);
        buf.write(data, 2);
      }

      if (this._deflating) {
        this.enqueue([this.doClose, buf, mask, cb]);
      } else {
        this.doClose(buf, mask, cb);
      }
    }

    doClose(data, mask, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 0x08,
        mask,
        readOnly: false
      }), cb);
    }

    ping(data, mask, cb) {
      var readOnly = true;

      if (!Buffer.isBuffer(data)) {
        if (data instanceof ArrayBuffer) {
          data = Buffer.from(data);
        } else if (ArrayBuffer.isView(data)) {
          data = viewToBuffer(data);
        } else {
          data = Buffer.from(data);
          readOnly = false;
        }
      }

      if (this._deflating) {
        this.enqueue([this.doPing, data, mask, readOnly, cb]);
      } else {
        this.doPing(data, mask, readOnly, cb);
      }
    }

    doPing(data, mask, readOnly, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 0x09,
        mask,
        readOnly
      }), cb);
    }

    pong(data, mask, cb) {
      var readOnly = true;

      if (!Buffer.isBuffer(data)) {
        if (data instanceof ArrayBuffer) {
          data = Buffer.from(data);
        } else if (ArrayBuffer.isView(data)) {
          data = viewToBuffer(data);
        } else {
          data = Buffer.from(data);
          readOnly = false;
        }
      }

      if (this._deflating) {
        this.enqueue([this.doPong, data, mask, readOnly, cb]);
      } else {
        this.doPong(data, mask, readOnly, cb);
      }
    }

    doPong(data, mask, readOnly, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 0x0a,
        mask,
        readOnly
      }), cb);
    }

    send(data, options, cb) {
      var opcode = options.binary ? 2 : 1;
      var rsv1 = options.compress;
      var readOnly = true;

      if (!Buffer.isBuffer(data)) {
        if (data instanceof ArrayBuffer) {
          data = Buffer.from(data);
        } else if (ArrayBuffer.isView(data)) {
          data = viewToBuffer(data);
        } else {
          data = Buffer.from(data);
          readOnly = false;
        }
      }

      const perMessageDef = this._extensions[PerMessageDef.extensionName];

      if (this._firstFragment) {
        this._firstFragment = false;

        if (rsv1 && perMessageDef) {
          rsv1 = data.length >= perMessageDef._threshold;
        }

        this._compress = rsv1;
      } else {
        rsv1 = false;
        opcode = 0;
      }

      if (options.fin) this._firstFragment = true;

      if (perMessageDef) {
        const opts = {
          fin: options.fin,
          rsv1,
          opcode,
          mask: options.mask,
          readOnly
        };

        if (this._deflating) {
          this.enqueue([this.dispatch, data, this._compress, opts, cb]);
        } else {
          this.dispatch(data, this._compress, opts, cb);
        }
      } else {
        this.sendFrame(Sender.frame(data, {
          fin: options.fin,
          rsv1: false,
          opcode,
          mask: options.mask,
          readOnly
        }), cb);
      }
    }

    dispatch(data, compress, options, cb) {
      if (!compress) {
        this.sendFrame(Sender.frame(data, options), cb);
        return;
      }

      const perMessageDef = this._extensions[PerMessageDef.extensionName];
      this._deflating = true;
      perMessageDef.compress(data, options.fin, (_, buf) => {
        this._deflating = false;
        options.readOnly = false;
        this.sendFrame(Sender.frame(buf, options), cb);
        this.dequeue();
      });
    }

    dequeue() {
      while (!this._deflating && this._queue.length) {
        const params = this._queue.shift();

        this._bufferedBytes -= params[1].length;
        params[0].apply(this, params.slice(1));
      }
    }

    enqueue(params) {
      this._bufferedBytes += params[1].length;

      this._queue.push(params);
    }

    sendFrame(list, cb) {
      if (list.length === 2) {
        this._socket.write(list[0]);

        this._socket.write(list[1], cb);
      } else {
        this._socket.write(list[0], cb);
      }
    }

  }

  module.exports = Sender;

  function viewToBuffer(view) {
    const buf = Buffer.from(view.buffer);

    if (view.byteLength !== view.buffer.byteLength) {
      return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);
    }

    return buf;
  }
},433,[90,425,427,432,428]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  'use strict';

  const EventEmitter = _$$_REQUIRE(_dependencyMap[0]);

  const crypto = _$$_REQUIRE(_dependencyMap[1]);

  const http = _$$_REQUIRE(_dependencyMap[2]);

  const PerMessageDef = _$$_REQUIRE(_dependencyMap[3]);

  const extension = _$$_REQUIRE(_dependencyMap[4]);

  const constants = _$$_REQUIRE(_dependencyMap[5]);

  const WebSocket = _$$_REQUIRE(_dependencyMap[6]);

  class WebSocketServer extends EventEmitter {
    constructor(options, callback) {
      super();
      options = Object.assign({
        maxPayload: 104857600,
        perMessageDef: false,
        handleProtocols: null,
        clientTracking: true,
        verifyClient: null,
        noServer: false,
        backlog: null,
        server: null,
        host: null,
        path: null,
        port: null
      }, options);

      if (options.port == null && !options.server && !options.noServer) {
        throw new TypeError('One of the "port", "server", or "noServer" options must be specified');
      }

      if (options.port != null) {
        this._server = http.createServer((req, res) => {
          const body = http.STATUS_CODES[426];
          res.writeHead(426, {
            'Content-Length': body.length,
            'Content-Type': 'text/plain'
          });
          res.end(body);
        });

        this._server.listen(options.port, options.host, options.backlog, callback);
      } else if (options.server) {
        this._server = options.server;
      }

      if (this._server) {
        this._removeListeners = addListeners(this._server, {
          listening: this.emit.bind(this, 'listening'),
          error: this.emit.bind(this, 'error'),
          upgrade: (req, socket, head) => {
            this.handleUpgrade(req, socket, head, ws => {
              this.emit('connection', ws, req);
            });
          }
        });
      }

      if (options.perMessageDef === true) options.perMessageDef = {};
      if (options.clientTracking) this.clients = new Set();
      this.options = options;
    }

    address() {
      if (this.options.noServer) {
        throw new Error('The server is operating in "noServer" mode');
      }

      if (!this._server) return null;
      return this._server.address();
    }

    close(cb) {
      if (cb) this.once('close', cb);

      if (this.clients) {
        for (const client of this.clients) client.terminate();
      }

      const server = this._server;

      if (server) {
        this._removeListeners();

        this._removeListeners = this._server = null;

        if (this.options.port != null) {
          server.close(() => this.emit('close'));
          return;
        }
      }

      process.nextTick(emitClose, this);
    }

    shouldHandle(req) {
      if (this.options.path) {
        const index = req.url.indexOf('?');
        const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
        if (pathname !== this.options.path) return false;
      }

      return true;
    }

    handleUpgrade(req, socket, head, cb) {
      socket.on('error', socketOnError);
      const version = +req.headers['sec-websocket-version'];
      const extensions = {};

      if (req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' || !req.headers['sec-websocket-key'] || version !== 8 && version !== 13 || !this.shouldHandle(req)) {
        return abortHandshake(socket, 400);
      }

      if (this.options.perMessageDef) {
        const perMessageDef = new PerMessageDef(this.options.perMessageDef, true, this.options.maxPayload);

        try {
          const offers = extension.parse(req.headers['sec-websocket-extensions']);

          if (offers[PerMessageDef.extensionName]) {
            perMessageDef.accept(offers[PerMessageDef.extensionName]);
            extensions[PerMessageDef.extensionName] = perMessageDef;
          }
        } catch (err) {
          return abortHandshake(socket, 400);
        }
      }

      if (this.options.verifyClient) {
        const info = {
          origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
          secure: !!(req.connection.authorized || req.connection.encrypted),
          req
        };

        if (this.options.verifyClient.length === 2) {
          this.options.verifyClient(info, (verified, code, message, headers) => {
            if (!verified) {
              return abortHandshake(socket, code || 401, message, headers);
            }

            this.completeUpgrade(extensions, req, socket, head, cb);
          });
          return;
        }

        if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
      }

      this.completeUpgrade(extensions, req, socket, head, cb);
    }

    completeUpgrade(extensions, req, socket, head, cb) {
      if (!socket.readable || !socket.writable) return socket.destroy();
      const key = crypto.createHash('sha1').update(req.headers['sec-websocket-key'] + constants.GUID, 'binary').digest('base64');
      const headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', `Sec-WebSocket-Accept: ${key}`];
      const ws = new WebSocket(null);
      var protocol = req.headers['sec-websocket-protocol'];

      if (protocol) {
        protocol = protocol.trim().split(/ *, */);

        if (this.options.handleProtocols) {
          protocol = this.options.handleProtocols(protocol, req);
        } else {
          protocol = protocol[0];
        }

        if (protocol) {
          headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
          ws.protocol = protocol;
        }
      }

      if (extensions[PerMessageDef.extensionName]) {
        const params = extensions[PerMessageDef.extensionName].params;
        const value = extension.format({
          [PerMessageDef.extensionName]: [params]
        });
        headers.push(`Sec-WebSocket-Extensions: ${value}`);
        ws._extensions = extensions;
      }

      this.emit('headers', headers, req);
      socket.write(headers.concat('\r\n').join('\r\n'));
      socket.removeListener('error', socketOnError);
      ws.setSocket(socket, head, this.options.maxPayload);

      if (this.clients) {
        this.clients.add(ws);
        ws.on('close', () => this.clients.delete(ws));
      }

      cb(ws);
    }

  }

  module.exports = WebSocketServer;

  function addListeners(server, map) {
    for (const event of Object.keys(map)) server.on(event, map[event]);

    return function removeListeners() {
      for (const event of Object.keys(map)) {
        server.removeListener(event, map[event]);
      }
    };
  }

  function emitClose(server) {
    server.emit('close');
  }

  function socketOnError() {
    this.destroy();
  }

  function abortHandshake(socket, code, message, headers) {
    if (socket.writable) {
      message = message || http.STATUS_CODES[code];
      headers = Object.assign({
        Connection: 'close',
        'Content-type': 'text/html',
        'Content-Length': Buffer.byteLength(message)
      }, headers);
      socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` + Object.keys(headers).map(h => `${h}: ${headers[h]}`).join('\r\n') + '\r\n\r\n' + message);
    }

    socket.removeListener('error', socketOnError);
    socket.destroy();
  }
},434,[2,90,169,425,430,428,424]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var indexOf = [].indexOf;

  module.exports = function (arr, obj) {
    if (indexOf) return arr.indexOf(obj);

    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj) return i;
    }

    return -1;
  };
},435,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var parser = _$$_REQUIRE(_dependencyMap[0]);

  var Emitter = _$$_REQUIRE(_dependencyMap[1]);

  var toArray = _$$_REQUIRE(_dependencyMap[2]);

  var on = _$$_REQUIRE(_dependencyMap[3]);

  var bind = _$$_REQUIRE(_dependencyMap[4]);

  var debug = _$$_REQUIRE(_dependencyMap[5])('socket.io-client:socket');

  var parseqs = _$$_REQUIRE(_dependencyMap[6]);

  var hasBin = _$$_REQUIRE(_dependencyMap[7]);

  module.exports = exports = Socket;
  var events = {
    connect: 1,
    connect_error: 1,
    connect_timeout: 1,
    connecting: 1,
    disconnect: 1,
    error: 1,
    reconnect: 1,
    reconnect_attempt: 1,
    reconnect_failed: 1,
    reconnect_error: 1,
    reconnecting: 1,
    ping: 1,
    pong: 1
  };
  var emit = Emitter.prototype.emit;

  function Socket(io, nsp, opts) {
    this.io = io;
    this.nsp = nsp;
    this.json = this;
    this.ids = 0;
    this.acks = {};
    this.receiveBuffer = [];
    this.sendBuffer = [];
    this.connected = false;
    this.disconnected = true;
    this.flags = {};

    if (opts && opts.query) {
      this.query = opts.query;
    }

    if (this.io.autoConnect) this.open();
  }

  Emitter(Socket.prototype);

  Socket.prototype.subEvents = function () {
    if (this.subs) return;
    var io = this.io;
    this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
  };

  Socket.prototype.open = Socket.prototype.connect = function () {
    if (this.connected) return this;
    this.subEvents();
    if (!this.io.reconnecting) this.io.open();
    if ('open' === this.io.readyState) this.onopen();
    this.emit('connecting');
    return this;
  };

  Socket.prototype.send = function () {
    var args = toArray(arguments);
    args.unshift('message');
    this.emit.apply(this, args);
    return this;
  };

  Socket.prototype.emit = function (ev) {
    if (events.hasOwnProperty(ev)) {
      emit.apply(this, arguments);
      return this;
    }

    var args = toArray(arguments);
    var packet = {
      type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
      data: args
    };
    packet.options = {};
    packet.options.compress = !this.flags || false !== this.flags.compress;

    if ('function' === typeof args[args.length - 1]) {
      debug('emitting packet with ack id %d', this.ids);
      this.acks[this.ids] = args.pop();
      packet.id = this.ids++;
    }

    if (this.connected) {
      this.packet(packet);
    } else {
      this.sendBuffer.push(packet);
    }

    this.flags = {};
    return this;
  };

  Socket.prototype.packet = function (packet) {
    packet.nsp = this.nsp;
    this.io.packet(packet);
  };

  Socket.prototype.onopen = function () {
    debug('transport is open - connecting');

    if ('/' !== this.nsp) {
      if (this.query) {
        var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
        debug('sending connect packet with query %s', query);
        this.packet({
          type: parser.CONNECT,
          query: query
        });
      } else {
        this.packet({
          type: parser.CONNECT
        });
      }
    }
  };

  Socket.prototype.onclose = function (reason) {
    debug('close (%s)', reason);
    this.connected = false;
    this.disconnected = true;
    delete this.id;
    this.emit('disconnect', reason);
  };

  Socket.prototype.onpacket = function (packet) {
    var sameNamespace = packet.nsp === this.nsp;
    var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';
    if (!sameNamespace && !rootNamespaceError) return;

    switch (packet.type) {
      case parser.CONNECT:
        this.onconnect();
        break;

      case parser.EVENT:
        this.onevent(packet);
        break;

      case parser.BINARY_EVENT:
        this.onevent(packet);
        break;

      case parser.ACK:
        this.onack(packet);
        break;

      case parser.BINARY_ACK:
        this.onack(packet);
        break;

      case parser.DISCONNECT:
        this.ondisconnect();
        break;

      case parser.ERROR:
        this.emit('error', packet.data);
        break;
    }
  };

  Socket.prototype.onevent = function (packet) {
    var args = packet.data || [];
    debug('emitting event %j', args);

    if (null != packet.id) {
      debug('attaching ack callback to event');
      args.push(this.ack(packet.id));
    }

    if (this.connected) {
      emit.apply(this, args);
    } else {
      this.receiveBuffer.push(args);
    }
  };

  Socket.prototype.ack = function (id) {
    var self = this;
    var sent = false;
    return function () {
      if (sent) return;
      sent = true;
      var args = toArray(arguments);
      debug('sending ack %j', args);
      self.packet({
        type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
        id: id,
        data: args
      });
    };
  };

  Socket.prototype.onack = function (packet) {
    var ack = this.acks[packet.id];

    if ('function' === typeof ack) {
      debug('calling ack %s with %j', packet.id, packet.data);
      ack.apply(this, packet.data);
      delete this.acks[packet.id];
    } else {
      debug('bad ack %s', packet.id);
    }
  };

  Socket.prototype.onconnect = function () {
    this.connected = true;
    this.disconnected = false;
    this.emit('connect');
    this.emitBuffered();
  };

  Socket.prototype.emitBuffered = function () {
    var i;

    for (i = 0; i < this.receiveBuffer.length; i++) {
      emit.apply(this, this.receiveBuffer[i]);
    }

    this.receiveBuffer = [];

    for (i = 0; i < this.sendBuffer.length; i++) {
      this.packet(this.sendBuffer[i]);
    }

    this.sendBuffer = [];
  };

  Socket.prototype.ondisconnect = function () {
    debug('server disconnect (%s)', this.nsp);
    this.destroy();
    this.onclose('io server disconnect');
  };

  Socket.prototype.destroy = function () {
    if (this.subs) {
      for (var i = 0; i < this.subs.length; i++) {
        this.subs[i].destroy();
      }

      this.subs = null;
    }

    this.io.destroy(this);
  };

  Socket.prototype.close = Socket.prototype.disconnect = function () {
    if (this.connected) {
      debug('performing disconnect (%s)', this.nsp);
      this.packet({
        type: parser.DISCONNECT
      });
    }

    this.destroy();

    if (this.connected) {
      this.onclose('io client disconnect');
    }

    return this;
  };

  Socket.prototype.compress = function (compress) {
    this.flags.compress = compress;
    return this;
  };

  Socket.prototype.binary = function (binary) {
    this.flags.binary = binary;
    return this;
  };
},436,[387,393,437,438,439,382,412,408]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = toArray;

  function toArray(list, index) {
    var array = [];
    index = index || 0;

    for (var i = index || 0; i < list.length; i++) {
      array[i - index] = list[i];
    }

    return array;
  }
},437,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = on;

  function on(obj, ev, fn) {
    obj.on(ev, fn);
    return {
      destroy: function () {
        obj.removeListener(ev, fn);
      }
    };
  }
},438,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  var slice = [].slice;

  module.exports = function (obj, fn) {
    if ('string' == typeof fn) fn = obj[fn];
    if ('function' != typeof fn) throw new Error('bind() requires a function');
    var args = slice.call(arguments, 2);
    return function () {
      return fn.apply(obj, args.concat(slice.call(arguments)));
    };
  };
},439,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = Backoff;

  function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 10000;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
  }

  Backoff.prototype.duration = function () {
    var ms = this.ms * Math.pow(this.factor, this.attempts++);

    if (this.jitter) {
      var rand = Math.random();
      var deviation = Math.floor(rand * this.jitter * ms);
      ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
    }

    return Math.min(ms, this.max) | 0;
  };

  Backoff.prototype.reset = function () {
    this.attempts = 0;
  };

  Backoff.prototype.setMin = function (min) {
    this.ms = min;
  };

  Backoff.prototype.setMax = function (max) {
    this.max = max;
  };

  Backoff.prototype.setJitter = function (jitter) {
    this.jitter = jitter;
  };
},440,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const Cryptr = _$$_REQUIRE(_dependencyMap[0]);

  const {
    emit,
    on,
    off,
    removeEventListener,
    removeListener
  } = _$$_REQUIRE(_dependencyMap[1]);

  const reservedEvents = _$$_REQUIRE(_dependencyMap[2]);

  module.exports = secret => (socket, next) => {
    const handlers = new WeakMap();
    const cryptr = new Cryptr(secret);

    const encrypt = args => {
      const encrypted = [];
      let ack;

      for (let i = 0; i < args.length; i++) {
        const arg = args[i];

        if (i === args.length - 1 && typeof arg === 'function') {
          ack = arg;
        } else {
          encrypted.push(cryptr.encrypt(JSON.stringify(arg)));
        }
      }

      if (!encrypted.length) return args;
      args = [{
        encrypted
      }];
      if (ack) args.push(ack);
      return args;
    };

    const decrypt = encrypted => {
      try {
        return encrypted.map(a => JSON.parse(cryptr.decrypt(a)));
      } catch (e) {
        const error = new Error(`Couldn't decrypt. Wrong secret used on client or invalid data sent. (${e.message})`);
        error.code = 'ERR_DECRYPTION_ERROR';
        throw error;
      }
    };

    socket[emit] = socket.emit;
    socket[on] = socket.on;
    socket[off] = socket.off;
    socket[removeEventListener] = socket.removeEventListener;
    socket[removeListener] = socket.removeListener;

    socket.emit = (event, ...args) => {
      if (reservedEvents.includes(event)) return socket[emit](event, ...args);
      return socket[emit](event, ...encrypt(args));
    };

    socket.on = (event, handler) => {
      if (reservedEvents.includes(event)) return socket[on](event, handler);

      const newHandler = function (...args) {
        if (args[0] && args[0].encrypted) {
          try {
            args = decrypt(args[0].encrypted);
          } catch (error) {
            socket[emit]('error', error);
            return;
          }
        }

        return handler.call(this, ...args);
      };

      handlers.set(handler, newHandler);
      return socket[on](event, newHandler);
    };

    socket.off = (event, handler) => {
      if (reservedEvents.includes(event)) return socket[off](event, handler);
      const properHandler = handlers.get(handler);

      if (properHandler) {
        handlers.delete(handler);
        return socket[off](event, properHandler);
      }

      return socket[off](event, handler);
    };

    socket.removeEventListener = (event, handler) => {
      return socket.off(event, handler);
    };

    socket.removeListener = (event, handler) => {
      return socket.off(event, handler);
    };

    if (next) next();
    return socket;
  };
},441,[442,443,444]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  const crypto = _$$_REQUIRE(_dependencyMap[0]);

  const algorithm = 'aes-256-ctr';

  function Cryptr(secret) {
    if (!secret || typeof secret !== 'string') {
      throw new Error('Cryptr: secret must be a non-0-length string');
    }

    const key = crypto.createHash('sha256').update(String(secret)).digest();

    this.encrypt = function encrypt(value) {
      if (value == null) {
        throw new Error('value must not be null or undefined');
      }

      const iv = crypto.randomBytes(16);
      const cipher = crypto.createCipheriv(algorithm, key, iv);
      const encrypted = cipher.update(String(value), 'utf8', 'hex') + cipher.final('hex');
      return iv.toString('hex') + encrypted;
    };

    this.decrypt = function decrypt(value) {
      if (value == null) {
        throw new Error('value must not be null or undefined');
      }

      const stringValue = String(value);
      const iv = Buffer.from(stringValue.slice(0, 32), 'hex');
      const encrypted = stringValue.slice(32);
      let legacyValue = false;
      let decipher;

      try {
        decipher = crypto.createDecipheriv(algorithm, key, iv);
      } catch (exception) {
        if (exception.message === 'Invalid IV length') {
          legacyValue = true;
        } else {
          throw exception;
        }
      }

      if (!legacyValue) {
        return decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');
      }

      const legacyIv = stringValue.slice(0, 16);
      const legacyEncrypted = stringValue.slice(16);
      decipher = crypto.createDecipheriv(algorithm, key, legacyIv);
      return decipher.update(legacyEncrypted, 'hex', 'utf8') + decipher.final('utf8');
    };
  }

  module.exports = Cryptr;
},442,[90]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  exports.emit = Symbol('emit');
  exports.on = Symbol('on');
  exports.off = Symbol('off');
  exports.removeEventListener = Symbol('removeEventListener');
  exports.removeListener = Symbol('removeListener');
},443,[]);
__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {
  "use strict";

  module.exports = ['error', 'connect', 'disconnect', 'disconnecting', 'newListener', 'removeListener', 'ping', 'pong'];
},444,[]);
__r(0);